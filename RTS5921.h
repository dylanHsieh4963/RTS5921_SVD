/*
 * The license belong to Realtek Semiconductor Corp. All the rights reserved.
 *
 * @file     RTS5921.h
 * @brief    CMSIS HeaderFile
 * @version  0.01
 * @date     09. July 2025
 * @note     Generated by SVDConv V3.3.42 on Wednesday, 09.07.2025 16:53:06
 *           from File 'RTS5921.svd',
 *           last modified on Wednesday, 09.07.2025 08:52:38
 */



/** @addtogroup Realtek Semiconductor Corp.
  * @{
  */


/** @addtogroup RTS5921
  * @{
  */


#ifndef RTS5921_H
#define RTS5921_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* ========================================  ARM ARMV8MBL Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  RTS5921 Specific Interrupt Numbers  =========================================== */
  GPIOA_IRQn                =   0,              /*!< 0  GPIO PORTA Interrupt                                                   */
  GPIOB_IRQn                =   1,              /*!< 1  GPIO PORTB Interrupt                                                   */
  GPIOC_IRQn                =   2,              /*!< 2  GPIO PORTC Interrupt                                                   */
  GPIOD_IRQn                =   3,              /*!< 3  GPIO PORTD Interrupt                                                   */
  GPIDE_IRQn                =   4,              /*!< 4  GPIO PORTE Interrupt                                                   */
  GPIOF_IRQn                =   5,              /*!< 5  GPIO PORTF Interrupt                                                   */
  GPIOG_IRQn                =   6,              /*!< 6  GPIO PORTG Interrupt                                                   */
  GPIOH_IRQn                =   7,              /*!< 7  GPIO PORTH Interrupt                                                   */
  DMA_IRQn                  =   8,              /*!< 8  DMA Controller Interrupt                                               */
  ITR_SPIC_IRQn             =   9,              /*!< 9  Internal SPIC Interrupt                                                */
  ETR_SPIC_IRQn             =  10,              /*!< 10 External SPIC Interrupt                                                */
  USB_IRQn                  =  12,              /*!< 12 USB OTG Interrupt                                                      */
  SPIM_IRQn                 =  13,              /*!< 13 SPI Master Interrupt                                                   */
  SPIS_IRQn                 =  14,              /*!< 14 SPI Slave Interrupt                                                    */
  UART_IRQn                 =  15,              /*!< 15 UART Interrupt                                                         */
  I2C0_IRQn                 =  16,              /*!< 16 I2C0 Interrupt                                                         */
  I2C1_IRQn                 =  17,              /*!< 17 I2C1 Interrupt                                                         */
  I2C2_IRQn                 =  18,              /*!< 18 I2C2 Interrupt                                                         */
  WDT_IRQn                  =  20,              /*!< 20 WDT Interrupt                                                          */
  TMR0_IRQn                 =  21,              /*!< 21 TMR0 Interrupt                                                         */
  TMR1_IRQn                 =  22,              /*!< 22 TMR1 Interrupt                                                         */
  TMR2_IRQn                 =  23,              /*!< 23 TMR2 Interrupt                                                         */
  TMR3_IRQn                 =  24,              /*!< 24 TMR3 Interrupt                                                         */
  DOTMTX0_IRQn              =  25,              /*!< 25 DOTMTX0 Interrupt                                                      */
  DOTMTX1_IRQn              =  26,              /*!< 26 DOTMTX1 Interrupt                                                      */
  STRIP0_IRQn               =  27,              /*!< 27 STRIP0 Interrupt                                                       */
  STRIP1_IRQn               =  28,              /*!< 28 STRIP1 Interrupt                                                       */
  STRIP2_IRQn               =  29,              /*!< 29 STRIP2 Interrupt                                                       */
  STRIP3_IRQn               =  30,              /*!< 30 STRIP3 Interrupt                                                       */
  STRIP4_IRQn               =  31,              /*!< 31 STRIP4 Interrupt                                                       */
  STRIP5_IRQn               =  32,              /*!< 32 STRIP5 Interrupt                                                       */
  STRIP6_IRQn               =  33,              /*!< 33 STRIP6 Interrupt                                                       */
  STRIP7_IRQn               =  34,              /*!< 34 STRIP7 Interrupt                                                       */
  STRIP8_IRQn               =  35,              /*!< 35 STRIP8 Interrupt                                                       */
  TACHO0_IRQn               =  36,              /*!< 36 TACHO0 Interrupt                                                       */
  TACHO1_IRQn               =  37,              /*!< 37 TACHO1 Interrupt                                                       */
  TACHO2_IRQn               =  38,              /*!< 38 TACHO2 Interrupt                                                       */
  TACHO3_IRQn               =  39               /*!< 39 TACHO3 Interrupt                                                       */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM ARMV8MBL Processor and Core Peripherals  ============================ */
#define __ARMV8MBL_REV                 0x0000U  /*!< ARMV8MBL Core Revision                                                    */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  0        /*!< FPU present                                                               */
#define __SAUREGION_PRESENT            0        /*!< SAU region present                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_armv8mbl.h"                      /*!< ARM ARMV8MBL processor and core peripherals                               */
#include "system_RTS5921.h"                     /*!< RTS5921 System                                                            */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         ITR_SPIC                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Realtek RXI-312 SPI Controller (ITR_SPIC)
  */

typedef struct {                                /*!< (@ 0x40000000) ITR_SPIC Structure                                         */
  
  union {
    __IOM uint32_t CTRLR0;                      /*!< (@ 0x00000000) Control Register 0                                         */
    
    struct {
      __IOM uint32_t SIPOL      : 5;            /*!< [4..0] SPI input signal polarity                                          */
      __IOM uint32_t SIPOL_EN   : 1;            /*!< [5..5] Enable SIPOL control for SPI in/out signal polarity.               */
      __IOM uint32_t SCPH       : 1;            /*!< [6..6] Serial clock phase. 0: toggles in middle of 1st data
                                                     bit, 1: toggles at start of 1st data bit.                                 */
      __IOM uint32_t SCPOL      : 1;            /*!< [7..7] Serial clock polarity. 0: inactive state is low, 1: inactive
                                                     state is high.                                                            */
      __IOM uint32_t TMOD       : 2;            /*!< [9..8] Transfer mode. 00: transmit mode, others: receive mode.            */
      __IOM uint32_t GCLK_DIS   : 1;            /*!< [10..10] Disable gated clock of icg cell.                                 */
            uint32_t            : 2;
      __IOM uint32_t DDR_EN_ADDR_CH : 1;        /*!< [13..13] Enable DDR mode on ADDR_CH. Only if DDR_EN defined.              */
      __IOM uint32_t DDR_EN_DATA_CH : 1;        /*!< [14..14] Enable DDR mode on DATA_CH. Only if DDR_EN defined.              */
      __IOM uint32_t DDR_EN_CMD_CH : 1;         /*!< [15..15] Enable DDR mode on CMD_CH (2-Byte CMD type). Only if
                                                     DDR_EN defined.                                                           */
      __IOM uint32_t ADDR_CH    : 2;            /*!< [17..16] Channel number for address phase. 0: single, 1: dual,
                                                     2: quad, 3: octal.                                                        */
      __IOM uint32_t DATA_CH    : 2;            /*!< [19..18] Channel number of data phase. 0: single, 1: dual, 2:
                                                     quad, 3: octal.                                                           */
      __IOM uint32_t CMD_CH     : 2;            /*!< [21..20] Channel number of command phase. 0: single, 1: dual,
                                                     2: quad, 3: octal.                                                        */
      __IOM uint32_t FAST_RD    : 1;            /*!< [22..22] Enable use of fast read command in user mode. Use FBAUDR
                                                     as spi_sclk when set.                                                     */
      __IOM uint32_t CK_MTIMES  : 5;            /*!< [27..23] Indicate the auto-check times                                    */
            uint32_t            : 2;
      __IOM uint32_t UAR        : 1;            /*!< [30..30] User mode bit auto reset. Enable to auto reset USER_MODE
                                                     to 0 after user mode transaction is over.                                 */
      __IOM uint32_t USER_MODE  : 1;            /*!< [31..31] User mode bit.                                                   */
    } CTRLR0_b;
  } ;
  
  union {
    __IOM uint32_t RX_NDF;                      /*!< (@ 0x00000004) Control Register 1                                         */
    
    struct {
      __IOM uint32_t NDF        : 25;           /*!< [24..0] Indicate a number of data frames. If Data-Split-Read
                                                     function enables, NDF can be set larger than FIFO size,
                                                     with a maximum size of 65535 bytes.                                       */
            uint32_t            : 7;
    } RX_NDF_b;
  } ;
  
  union {
    __IOM uint32_t SSIENR;                      /*!< (@ 0x00000008) SPIC Enable Register                                       */
    
    struct {
      __IOM uint32_t SPIC_EN    : 1;            /*!< [0..0] Enable SPIC / user mode transaction.                               */
      __IOM uint32_t ATCK_CMD   : 1;            /*!< [1..1] Enable auto check command.                                         */
      __IOM uint32_t FRQC       : 1;            /*!< [2..2] Enable/complete frequency change.                                  */
            uint32_t            : 1;
      __OM  uint32_t PGM_RST_TEST_EN : 1;       /*!< [4..4] Pulse warm reset. Test only.                                       */
            uint32_t            : 3;
      __IOM uint32_t GP_NUM     : 2;            /*!< [9..8] Target group, for frequency change.                                */
      __IM  uint32_t CUR_GP     : 2;            /*!< [11..10] Current group, for frequency change .                            */
            uint32_t            : 20;
    } SSIENR_b;
  } ;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  SER;                          /*!< (@ 0x00000010) Slave Enable Register                                      */
  
  union {
    __IOM uint32_t BAUDR;                       /*!< (@ 0x00000014) Baud Rate Select                                           */
    
    struct {
      __IOM uint32_t SCKDV      : 12;           /*!< [11..0] Define spi_sclk divider value. The frequency of spi_sclk
                                                     is derived from: Frequency of spi_sclk = Frequency of bus_clk
                                                     / (2*SCKDV).                                                              */
            uint32_t            : 20;
    } BAUDR_b;
  } ;
  
  union {
    __IOM uint32_t TXFTLR;                      /*!< (@ 0x00000018) Transmit FIFO Threshold level                              */
    
    struct {
      __IOM uint32_t TFT        : 5;            /*!< [4..0] Transmit FIFO threshold.                                           */
            uint32_t            : 27;
    } TXFTLR_b;
  } ;
  
  union {
    __IOM uint32_t RXFTLR;                      /*!< (@ 0x0000001C) Receive FIFO Threshold level                               */
    
    struct {
      __IOM uint32_t RFT        : 5;            /*!< [4..0] Receive FIFO threshold.                                            */
            uint32_t            : 27;
    } RXFTLR_b;
  } ;
  
  union {
    __IOM uint32_t TXFLR;                       /*!< (@ 0x00000020) Transmit FIFO level Register                               */
    
    struct {
      __IM  uint32_t TXFLR      : 6;            /*!< [5..0] Indicates the FIFO level of valid data during transmission.        */
            uint32_t            : 26;
    } TXFLR_b;
  } ;
  
  union {
    __IOM uint32_t RXFLR;                       /*!< (@ 0x00000024) Receive FIFO level Register                                */
    
    struct {
      __IM  uint32_t RXFLR      : 6;            /*!< [5..0] Indicates the FIFO level of valid data during reception.           */
            uint32_t            : 26;
    } RXFLR_b;
  } ;
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x00000028) Status Register                                            */
    
    struct {
      __IM  uint32_t BUSY       : 1;            /*!< [0..0] SPIC busy flag.                                                    */
      __IM  uint32_t TFNF       : 1;            /*!< [1..1] Transmit FIFO not full status.                                     */
      __IM  uint32_t TFE        : 1;            /*!< [2..2] Transmit FIFO empty status.                                        */
      __IM  uint32_t RFNE       : 1;            /*!< [3..3] Receive FIFO not empty status.                                     */
      __IM  uint32_t RFF        : 1;            /*!< [4..4] Receive FIFO full status.                                          */
      __IM  uint32_t TXE        : 1;            /*!< [5..5] Transmission error indicator.                                      */
      __IM  uint32_t DCOL       : 1;            /*!< [6..6] Data collision or transmitting status.                             */
      __IM  uint32_t BOOT_FIN   : 1;            /*!< [7..7] Boot Finish status indicator.                                      */
      __IM  uint32_t ATWR_RDSR_N : 1;           /*!< [8..8] The previous auto write cmd didn't check the status register
                                                     (RDSR).                                                                   */
            uint32_t            : 23;
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t IMR;                         /*!< (@ 0x0000002C) Interrupt Mask Register                                    */
    
    struct {
      __IOM uint32_t TXEIM      : 1;            /*!< [0..0] Transmit FIFO empty interrupt mask.                                */
      __IOM uint32_t TXOIM      : 1;            /*!< [1..1] Transmit FIFO overflow interrupt mask.                             */
      __IOM uint32_t RXUIM      : 1;            /*!< [2..2] Receive FIFO underflow interrupt mask.                             */
      __IOM uint32_t RXOIM      : 1;            /*!< [3..3] Receive FIFO overflow interrupt mask.                              */
      __IOM uint32_t RXFIM      : 1;            /*!< [4..4] Receive FIFO full interrupt mask.                                  */
      __IOM uint32_t FSEIM      : 1;            /*!< [5..5] FIFO size error interrupt mask.                                    */
      __IOM uint32_t WBEIM      : 1;            /*!< [6..6] Write burst error interrupt mask.                                  */
      __IOM uint32_t BYEIM      : 1;            /*!< [7..7] Byte-Enable error interrupt mask.                                  */
      __IOM uint32_t ACEIM      : 1;            /*!< [8..8] Auto-check timeout error interrupt mask.                           */
      __IOM uint32_t TXSIM      : 1;            /*!< [9..9] Transmit split interrupt mask.                                     */
      __IOM uint32_t RXSIM      : 1;            /*!< [10..10] Transmit split interrupt mask.                                   */
      __IOM uint32_t ACSIM      : 1;            /*!< [11..11] Auto-check Flash Status raw interrupt mask.                      */
            uint32_t            : 20;
    } IMR_b;
  } ;
  
  union {
    __IM  uint32_t ISR;                         /*!< (@ 0x00000030) Interrupt Status Register                                  */
    
    struct {
      __IM  uint32_t TXEIS      : 1;            /*!< [0..0] Transmit FIFO empty interrupt status after masking. 1:
                                                     spi_txeir is active after masking. 0: spi_txeir is not
                                                     active after masking.                                                     */
      __IM  uint32_t TXOIS      : 1;            /*!< [1..1] Transmit FIFO overflow interrupt status after masking.
                                                     1: spi_txoir_r is active after masking. 0: spi_txoir_r
                                                     is not active after masking.                                              */
      __IM  uint32_t RXUIS      : 1;            /*!< [2..2] Receive FIFO underflow interrupt status after masking.
                                                     1: spi_rxuir_r is active after masking. 0: spi_rxuir_r
                                                     is not active after masking.                                              */
      __IM  uint32_t RXOIS      : 1;            /*!< [3..3] Receive FIFO overflow interrupt status after masking.
                                                     1: spi_rxoir_r is active after masking. 0: spi_rxoir_r
                                                     is not active after masking.                                              */
      __IM  uint32_t RXFIS      : 1;            /*!< [4..4] Receive FIFO full interrupt status after masking. 1:
                                                     spi_rxfir is active after masking. 0: spi_rxfir is not
                                                     active after masking.                                                     */
      __IM  uint32_t FSEIS      : 1;            /*!< [5..5] FIFO size error interrupts status after masking. 1: spi_fesir_r
                                                     is active after masking. 0: spi_fesir_r is not active after
                                                     masking.                                                                  */
      __IM  uint32_t WBEIS      : 1;            /*!< [6..6] Write burst error interrupt status after masking. 1:
                                                     spi_wbeir_r is active after masking. 0: spi_wbeir_r is
                                                     not active after masking.                                                 */
      __IM  uint32_t BYEIS      : 1;            /*!< [7..7] Byte-Enable error interrupts status after masking. 1:
                                                     spi_byeir_r is active after masking. 0: spi_byeir_r is
                                                     not active after masking.                                                 */
      __IM  uint32_t ACEIS      : 1;            /*!< [8..8] Auto-check timeout error status after masking. 1: spi_aceir_r
                                                     is active after masking. 0: spi_aceir_r is not active after
                                                     masking.                                                                  */
      __IM  uint32_t TXSIS      : 1;            /*!< [9..9] Transmit split interrupt status after masking. 1: spi_txsir_r
                                                     is active after masking. 0: spi_txsir_r is not active after
                                                     masking.                                                                  */
      __IM  uint32_t RXSIS      : 1;            /*!< [10..10] Receive split interrupt status after masking. 1: spi_rxsir_r
                                                     is active after masking. 0: spi_rxsir_r is not active after
                                                     masking.                                                                  */
      __IM  uint32_t ACSIS      : 1;            /*!< [11..11] Auto-check Flash Status after masking. 1: spi_aceir_r
                                                     is active after masking. 0: spi_aceir_r is not active after
                                                     masking.                                                                  */
            uint32_t            : 20;
    } ISR_b;
  } ;
  
  union {
    __IM  uint32_t RISR;                        /*!< (@ 0x00000034) Raw Interrupt Status Register                              */
    
    struct {
      __IM  uint32_t TXEIR      : 1;            /*!< [0..0] Transmit FIFO empty raw interrupt status prior to masking.
                                                     1: spi_txeir is active prior to masking. 0: spi_txeir is
                                                     not active prior to masking.                                              */
      __IM  uint32_t TXOIR      : 1;            /*!< [1..1] Transmit FIFO overflow raw interrupt status prior to
                                                     masking. 1: spi_txoir_r is active prior to masking. 0:
                                                     spi_txoir_r is not active prior to masking.                               */
      __IM  uint32_t RXUIR      : 1;            /*!< [2..2] Receive FIFO underflow raw interrupt status prior to
                                                     masking. 1: spi_rxuir_r is active prior to masking. 0:
                                                     spi_rxuir_r is not active prior to masking.                               */
      __IM  uint32_t RXOIR      : 1;            /*!< [3..3] Receive FIFO overflow raw interrupt status prior to masking.
                                                     1: spi_rxoir_r is active prior to masking. 0: spi_rxoir_r
                                                     is not active prior to masking.                                           */
      __IM  uint32_t RXFIR      : 1;            /*!< [4..4] Receive FIFO full raw interrupt status prior to masking.
                                                     1: spi_rxfir is active prior to masking. 0: spi_rxfir is
                                                     not active prior to masking.                                              */
      __IM  uint32_t FSEIR      : 1;            /*!< [5..5] FIFO size error raw interrupt status prior to masking.
                                                     1: spi_fseir_r is active prior to masking. 0: spi_fseir_r
                                                     is not active prior to masking.                                           */
      __IM  uint32_t WBEIR      : 1;            /*!< [6..6] Write burst error raw interrupt status prior to masking.
                                                     1: spi_wbeir_r is active prior to masking. 0: spi_wbeir_r
                                                     is not active prior to masking.                                           */
      __IM  uint32_t BYEIR      : 1;            /*!< [7..7] The Byte-Enable error interrupt raw status prior to masking.
                                                     1: spi_byeir_r is active prior to masking. 0: spi_byeir_r
                                                     is not active prior to masking.                                           */
      __IM  uint32_t ACEIR      : 1;            /*!< [8..8] Auto-check timeout error raw interrupt status prior to
                                                     masking. 1: spi_aceir_r is active prior to masking. 0:
                                                     spi_aceir_r is not active prior to masking.                               */
      __IM  uint32_t TXSIR      : 1;            /*!< [9..9] Transmit split interrupt status prior to masking. 1:
                                                     spi_txsir_r is active prior to masking. 0: spi_txsir_r
                                                     is not active prior to masking.                                           */
      __IM  uint32_t RXSIR      : 1;            /*!< [10..10] Receive split interrupt status prior to masking. 1:
                                                     spi_rxsir_r is active prior to masking. 0: spi_rxsir_r
                                                     is not active prior to masking.                                           */
      __IM  uint32_t ACSIR      : 1;            /*!< [11..11] Auto-check Flash Status raw interrupt status prior
                                                     to masking. 1: spi_acsir_r is active prior to masking.
                                                     0: spi_acsir_r is not active prior to masking.                            */
            uint32_t            : 20;
    } RISR_b;
  } ;
  __OM  uint32_t  TXOICR;                       /*!< (@ 0x00000038) Transmit FIFO Overflow Interrupt Clear Register            */
  __IM  uint32_t  RXOICR;                       /*!< (@ 0x0000003C) Receive FIFO Overflow Interrupt Clear Register             */
  __IM  uint32_t  RXUICR;                       /*!< (@ 0x00000040) Receive FIFO Underflow Interrupt Clear Register            */
  __OM  uint32_t  MSTICR;                       /*!< (@ 0x00000044) Master error Interrupt Clear Register                      */
  __OM  uint32_t  ICR;                          /*!< (@ 0x00000048) Interrupt Clear Register                                   */
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x0000004C) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RX_DMAC_EN : 1;            /*!< [0..0] Receive DMA Enable. Enables/disables the receive FIFO
                                                     DMA channel. 0 = Receive DMA disabled, 1 = Receive DMA
                                                     enabled.                                                                  */
      __IOM uint32_t TX_DMAC_EN : 1;            /*!< [1..1] Transmit DMA Enable. Enables/disables the transmit FIFO
                                                     DMA channel. 0 = Transmit DMA disabled, 1 = Transmit DMA
                                                     enabled.                                                                  */
            uint32_t            : 30;
    } DMACR_b;
  } ;
  __IOM uint32_t  DMATDLR;                      /*!< (@ 0x00000050) DMA Transmit Data Level Register                           */
  __IOM uint32_t  DMARDLR;                      /*!< (@ 0x00000054) DMA Receive Data Level Register                            */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000058) Identification Register                                    */
  __IM  uint32_t  SPIC_VERSION;                 /*!< (@ 0x0000005C) SPIC version ID Register                                   */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000060) Data Register                                              */
  __IM  uint32_t  RESERVED1[15];
  __IOM uint32_t  DM_DR;                        /*!< (@ 0x000000A0) Data Mask Data Register                                    */
  __IM  uint32_t  RESERVED2[15];
  __IOM uint32_t  READ_FAST_SINGLE;             /*!< (@ 0x000000E0) Fast Read Data Command of SPI Flash                        */
  __IOM uint32_t  READ_DUAL_DATA;               /*!< (@ 0x000000E4) Dual Output Read Command of SPI Flash                      */
  __IOM uint32_t  READ_DUAL_ADDR_DATA;          /*!< (@ 0x000000E8) Dual I/O Read Command of SPI Flash                         */
  __IOM uint32_t  READ_QUAD_DATA;               /*!< (@ 0x000000EC) Quad Output Read Command of SPI Flash                      */
  
  union {
    __IOM uint32_t READ_QUAD_ADDR_DATA;         /*!< (@ 0x000000F0) Quad I/O Read Command of SPI Flash                         */
    
    struct {
      __IOM uint32_t RD_QUAD_IO_CMD : 8;        /*!< [7..0] SPI Flash command value for quad address and data read
                                                     command.                                                                  */
      __IOM uint32_t EXIT_PRM_DUM_LEN : 8;      /*!< [15..8] Extend the Exit PRM command if it is more than 1 byte.
                                                     It uses bus_clk as reference. For example, in QPI mode
                                                     (4-4-4), for FFFFFFFFh data cycle (4-byte data in 8 SPI
                                                     cycles), EXIT_PRM_CMD sends 1 byte (2 SPI cycles), and
                                                     EXIT_PRM_DUM_LEN extends 6 SPI cycles. (SPI cycles: 6 *
                                                     (2 * baud_rate)).                                                         */
      __IOM uint32_t PRM_VAL    : 8;            /*!< [23..16] High Performance Read Mode Value.                                */
      __IOM uint32_t EXIT_PRM_CMD : 8;          /*!< [31..24] Exit High Performance Read Mode command.                         */
    } READ_QUAD_ADDR_DATA_b;
  } ;
  __IOM uint32_t  WRITE_SINGLE;                 /*!< (@ 0x000000F4) Page Program Command of SPI Flash                          */
  __IOM uint32_t  WRITE_DUAL_DATA;              /*!< (@ 0x000000F8) Dual Data Input Program Command of SPI Flash               */
  __IOM uint32_t  WRITE_DUAL_ADDR_DATA;         /*!< (@ 0x000000FC) Dual Address and Data Output Read Command of
                                                                    SPI Flash                                                  */
  __IOM uint32_t  WRITE_QUAD_DATA;              /*!< (@ 0x00000100) Quad Data Input Program Command of SPI Flash               */
  __IOM uint32_t  WRITE_QUAD_ADDR_DATA;         /*!< (@ 0x00000104) Quad Address and Data Output Read Command of
                                                                    SPI Flash                                                  */
  
  union {
    __IOM uint32_t WRITE_ENABLE;                /*!< (@ 0x00000108) Write Enable Command of SPI Flash                          */
    
    struct {
      __IOM uint32_t WR_EN_CMD_1st_BYTE : 8;    /*!< [7..0] SPI Flash command value of the 1st byte of write enable.           */
      __IOM uint32_t WR_EN_CMD_2nd_BYTE : 8;    /*!< [15..8] SPI Flash command value of the 2nd byte of write enable.
                                                     Available only if DDR_EN configuration is defined.                        */
            uint32_t            : 16;
    } WRITE_ENABLE_b;
  } ;
  
  union {
    __IOM uint32_t READ_STATUS;                 /*!< (@ 0x0000010C) Read Status Command of SPI Flash                           */
    
    struct {
      __IOM uint32_t RD_ST_CMD_1st_BYTE : 8;    /*!< [7..0] Command value of 1st byte for SPI Flash read status.               */
      __IOM uint32_t RD_ST_CMD_2nd_BYTE : 8;    /*!< [15..8] Command value of 2nd byte for SPI Flash read status
                                                     .                                                                         */
      __IOM uint32_t RD_ST_CMD_3rd_BYTE : 8;    /*!< [23..16] Command value of 3rd byte for SPI Flash read status.             */
            uint32_t            : 1;
      __IOM uint32_t ST_CMD_DDR_EN : 1;         /*!< [25..25] DDR mode for ST_CMD_CH.                                          */
      __IOM uint32_t ST_CMD_CH  : 2;            /*!< [27..26] Channel number for TX/RX in read status command.                 */
      __IOM uint32_t ST_CMD_LEN : 2;            /*!< [29..28] Number of bytes in read status command .                         */
      __IOM uint32_t INTERVAL_ODD : 1;          /*!< [30..30] Odd/even byte check for 2-Byte status.                           */
      __IOM uint32_t INTERVAL_EN : 1;           /*!< [31..31] Enable INTERVAL_ODD (*).                                         */
    } READ_STATUS_b;
  } ;
  
  union {
    __IOM uint32_t CTRLR2;                      /*!< (@ 0x00000110) Control Register 2                                         */
    
    struct {
      __IOM uint32_t SO_DNUM    : 1;            /*!< [0..0] SO connects to spi_sout[0]/[1].                                    */
      __IOM uint32_t WPN_SET    : 1;            /*!< [1..1] Write protect setting.                                             */
      __IOM uint32_t WPN_DNUM   : 1;            /*!< [2..2] WPn connects to spi_sout[2]/[3].                                   */
      __IOM uint32_t DR_FIXED   : 1;            /*!< [3..3] AXI FIXED read mode on DR.                                         */
      __IOM uint32_t TX_FIFO_ENTRY : 4;         /*!< [7..4] Valid TX FIFO/FIFO entry index.                                    */
      __IOM uint32_t RX_FIFO_ENTRY : 4;         /*!< [11..8] Valid RX FIFO entry index.                                        */
      __IOM uint32_t DM_ACT     : 1;            /*!< [12..12] DM active polarity for specific PSRAM.                           */
      __IOM uint32_t FULL_WR    : 1;            /*!< [13..13] Enable full write in auto mode.                                  */
      __IOM uint32_t DIS_DM_CA  : 1;            /*!< [14..14] Disable spi_dm_oe_n for CMD and ADDR.                            */
      __IOM uint32_t DIS_WRAP_ALIGN : 1;        /*!< [15..15] Disable wrap_align in auto mode.                                 */
      __IOM uint32_t RD_VALID_EN : 1;           /*!< [16..16] Enable variable read latency.                                    */
      __IOM uint32_t WR_VL_EN   : 1;            /*!< [17..17] Enable variable write latency.                                   */
            uint32_t            : 1;
      __IOM uint32_t RD_WEIGHT  : 5;            /*!< [23..19] Read/Write priority.                                             */
            uint32_t            : 8;
    } CTRLR2_b;
  } ;
  __IOM uint32_t  FBAUDR;                       /*!< (@ 0x00000114) Fast Baud Rate Select                                      */
  
  union {
    __IOM uint32_t USER_LENGTH;                 /*!< (@ 0x00000118) User Length Register                                       */
    
    struct {
      __IOM uint32_t USER_RD_DUMMY_LENGTH : 12; /*!< [11..0] Delay cycles for receiving data in user mode.                     */
      __IOM uint32_t USER_CMD_LENGTH : 2;       /*!< [13..12] Number of command bytes in user mode.                            */
            uint32_t            : 2;
      __IOM uint32_t USER_ADDR_LENGTH : 4;      /*!< [19..16] Number of address phase bytes in user mode.                      */
            uint32_t            : 12;
    } USER_LENGTH_b;
  } ;
  
  union {
    __IOM uint32_t AUTO_LENGTH;                 /*!< (@ 0x0000011C) Auto Address Length Register                               */
    
    struct {
      __IOM uint32_t RD_DUMMY_LENGTH : 12;      /*!< [11..0] Delay cycles for receiving data (referenced by bus_clk).
                                                     * Don't include SPIC CLK (bus_clk) cycles from pad to internal
                                                     SPIC.                                                                     */
      __IOM uint32_t IN_PHYSICAL_CYC : 4;       /*!< [15..12] Indicates number of SPIC CLK (bus_clk) cycles from
                                                     pad to internal SPIC.                                                     */
      __IOM uint32_t AUTO_ADDR_LENGTH : 4;      /*!< [19..16] Number of address phase bytes in auto read/write command
                                                     (support 1~4 bytes).  Set to 4 for 4-byte address mode
                                                     in SPI Flash.  * PRM in auto must set VALID_CMD[11] (PRM_EN)
                                                     with correct AUTO_ADDR_LENGTH.                                            */
      __IOM uint32_t RDSR_DUMMY_LENGTH : 8;     /*!< [27..20] Delay cycles for receiving data after RDSR command
                                                     (referenced by bus_clk)  Used in auto write or user mode
                                                     with auto check.                                                          */
            uint32_t            : 4;
    } AUTO_LENGTH_b;
  } ;
  
  union {
    __IOM uint32_t VALID_CMD;                   /*!< (@ 0x00000120) Valid Command Register                                     */
    
    struct {
      __IOM uint32_t FRD_SINGLE : 1;            /*!< [0..0] Enable (1-1-1) fast read command valid for execution.              */
      __IOM uint32_t RD_DUAL_I  : 1;            /*!< [1..1] Enable (1-1-2) dual data read command valid for execution.         */
      __IOM uint32_t RD_DUAL_IO : 1;            /*!< [2..2] Enable (1-2-2) dual addr/data read command valid for
                                                     execution.                                                                */
      __IOM uint32_t RD_QUAD_O  : 1;            /*!< [3..3] Enable (1-1-4) quad data read command valid for execution.         */
      __IOM uint32_t RD_QUAD_IO : 1;            /*!< [4..4] Enable (1-4-4) quad addr/data read command valid for
                                                     execution.                                                                */
      __IOM uint32_t WR_DUAL_I  : 1;            /*!< [5..5] Enable (1-1-2) dual data write command valid for execution.        */
      __IOM uint32_t WR_DUAL_II : 1;            /*!< [6..6] Enable (1-2-2) dual addr/data write command valid for
                                                     execution.                                                                */
      __IOM uint32_t WR_QUAD_I  : 1;            /*!< [7..7] Enable (1-1-4) quad data write command valid for execution.        */
      __IOM uint32_t WR_QUAD_II : 1;            /*!< [8..8] Enable (1-4-4) quad addr/data write command valid for
                                                     execution.                                                                */
      __IOM uint32_t RM_RDSR    : 1;            /*!< [9..9] Remove read status register in auto write.                         */
      __IOM uint32_t RM_WEN     : 1;            /*!< [10..10] Remove write enable command in auto write.                       */
      __IOM uint32_t PRM_EN     : 1;            /*!< [11..11] Enable performance read mode in Auto Mode. Auto exit
                                                     before auto write or enter user mode. (Refer to detailed
                                                     flow in datasheet.)                                                       */
      __IOM uint32_t CTRLR0_CH  : 1;            /*!< [12..12] Use CTRLR0 CMD_CH/DATA_CH/ADDR_CH and DDR_EN field
                                                     in Auto mode.  Otherwise, select by VALID_CMD. (Refer to
                                                     datasheet for Flash mode usage.)                                          */
      __IOM uint32_t DUM_EN     : 1;            /*!< [13..13] Enable dummy byte (DUM_BYTE_VAL) after address in auto
                                                     read.  If PRM_EN active, push PRM_Value instead. If RD_DUMMY_LENGTH
                                                     = 0, dummy byte will not be pushed.                                       */
      __IOM uint32_t SEQ_RD_EN  : 1;            /*!< [14..14] Enable (1) sequential read in auto mode.  Disabling
                                                     deactivates spi_csn and this feature immediately. (Run
                                                     after SPIC boot finish.)                                                  */
      __IOM uint32_t SEQ_WR_EN  : 1;            /*!< [15..15] Enable (1) sequential write in auto mode.  Disabling
                                                     deactivates spi_csn and this feature immediately. (Run
                                                     after SPIC boot finish.)                                                  */
            uint32_t            : 16;
    } VALID_CMD_b;
  } ;
  __IOM uint32_t  FLASH_SIZE;                   /*!< (@ 0x00000124) Flash Size Register                                        */
  
  union {
    __IOM uint32_t FLUSH_FIFO;                  /*!< (@ 0x00000128) Write to flush specific or all FIFOs.  Commonly
                                                                    used when SPIC is not in normal operation
                                                                    or FIFO data is invalid.                                   */
    
    struct {
      __OM  uint32_t FLUSH_ALL  : 1;            /*!< [0..0] Write 1 to clear all data in TX_FIFO, RX_FIFO, ST_FIFO
                                                     and reset all FSMs.                                                       */
      __OM  uint32_t FLUSH_DR_FIFO : 1;         /*!< [1..1] Write 1 to clear all data in the TX_FIFO and RX_FIFO.              */
      __OM  uint32_t FLUSH_ST_FIFO : 1;         /*!< [2..2] Write 1 to clear all data in the ST_FIFO.                          */
            uint32_t            : 29;
    } FLUSH_FIFO_b;
  } ;
  __IOM uint32_t  DUM_BYTE;                     /*!< (@ 0x0000012C) Dummy Byte Value                                           */
  __IOM uint32_t  TX_NDF;                       /*!< (@ 0x00000130) TX NDF                                                     */
  __IM  uint32_t  DEVICE_INFO;                  /*!< (@ 0x00000134) Device Info                                                */
  __IOM uint32_t  TPR0;                         /*!< (@ 0x00000138) Timing Parameters                                          */
  __IOM uint32_t  AUTO_LENGTH2;                 /*!< (@ 0x0000013C) Auto Address Length Register 2                             */
  __IOM uint32_t  TPR1;                         /*!< (@ 0x00000140) Timing Parameters Register 1                               */
} SPIC_Type;                                    /*!< Size = 324 (0x144)                                                        */



/* =========================================================================================================================== */
/* ================                                            DMA                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Realtek RXI-350 DMA Controller (DMA)
  */

typedef struct {                                /*!< (@ 0x40002000) DMA Structure                                              */
  __IOM uint32_t  SAR0;                         /*!< (@ 0x00000000) Channel 0 Source Address Register                          */
  __IM  uint32_t  CURR_SAR0;                    /*!< (@ 0x00000004) Channel 0 Current Source Address Register                  */
  __IOM uint32_t  DAR0;                         /*!< (@ 0x00000008) Channel 0 Destination Address Register                     */
  __IM  uint32_t  CURR_DAR0;                    /*!< (@ 0x0000000C) Channel 0 Current Destination Address Register             */
  __IOM uint32_t  LLP0_L;                       /*!< (@ 0x00000010) Channel 0 low-32bits Linked List Pointer Register          */
  __IOM uint32_t  LLP0_H;                       /*!< (@ 0x00000014) Channel 0 high-32bits Linked List Pointer Register         */
  
  union {
    __IOM uint32_t CTL0_L;                      /*!< (@ 0x00000018) Channel 0 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t INT_EN     : 1;            /*!< [0..0] Interrupt Enable Bit. Globally enables interrupt sources
                                                     for the channel.                                                          */
      __IOM uint32_t DST_TR_WIDTH : 3;          /*!< [3..1] Destination Transfer Width. Specifies width of data transfer
                                                     to destination.                                                           */
      __IOM uint32_t SRC_TR_WIDTH : 3;          /*!< [6..4] Source Transfer Width. Specifies width of data transfer
                                                     from source.                                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment. Indicates increment behavior
                                                     for destination address.                                                  */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment. Indicates increment behavior
                                                     for source address.                                                       */
      __IOM uint32_t DEST_MSIZE : 3;            /*!< [13..11] Number of data items per destination burst transaction.          */
      __IOM uint32_t SRC_MSIZE  : 3;            /*!< [16..14] Number of data items per source burst transaction.               */
      __IOM uint32_t SRC_GATHER_EN : 1;         /*!< [17..17] Enables gather on the source side if conditions in
                                                     address control align.                                                    */
      __IOM uint32_t DST_SCATTER_EN : 1;        /*!< [18..18] Enables scatter on the destination side if conditions
                                                     in address control align.                                                 */
            uint32_t            : 1;
      __IOM uint32_t TT_FC      : 4;            /*!< [23..20] Transfer Type and Flow Control. Supports multiple transfer
                                                     types, with specific flow control.                                        */
            uint32_t            : 3;
      __IOM uint32_t LLP_DST_EN : 1;            /*!< [27..27] Enables block chaining on the destination side if high
                                                     and LLPx_L.LOC is non-zero.                                               */
      __IOM uint32_t LLP_SRC_EN : 1;            /*!< [28..28] Enables block chaining on the source side if high and
                                                     LLPx_L.LOC is non-zero.                                                   */
            uint32_t            : 3;
    } CTL0_L_b;
  } ;
  
  union {
    __IOM uint32_t CTL0_H;                      /*!< (@ 0x0000001C) Channel 0 high-32bits Control Register                     */
    
    struct {
      __IOM uint32_t BLOCK_TS   : 32;           /*!< [31..0] Block Transfer Size. Configures single transaction counts
                                                     per block, subject to AXI beat mapping.                                   */
    } CTL0_H_b;
  } ;
  __IOM uint32_t  BLK_COUNTER_REG0;             /*!< (@ 0x00000020) Channel 0 32bits Block Counter Register                    */
  __IOM uint32_t  REPEAT_PATTERN0;              /*!< (@ 0x00000024) Channel 0 32bits Memory Repeat Pattern Register            */
  __IM  uint32_t  RESERVED[6];
  
  union {
    __IOM uint32_t CFG0_L;                      /*!< (@ 0x00000040) Channel 0 low-32bits Configuration Register                */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive.                              */
      __IM  uint32_t SRC_PCTL_OVER : 1;         /*!< [1..1] DMA Source bus protocol finish indicator.                          */
      __IM  uint32_t DST_PCTL_OVER : 1;         /*!< [2..2] DMA destination bus protocol finish indicator.                     */
            uint32_t            : 1;
      __IOM uint32_t CH_PRIOR   : 4;            /*!< [7..4] Channel priority configuration.                                    */
      __IOM uint32_t CH_SUSP    : 1;            /*!< [8..8] Channel Suspend. Suspends all DMA data transfers from
                                                     the source until this bit is cleared.                                     */
      __IOM uint32_t FIFO_EMPTY : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO.               */
      __IOM uint32_t HS_SEL_DST : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select.             */
      __IOM uint32_t HS_SEL_SRC : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select.                  */
            uint32_t            : 6;
      __IM  uint32_t DST_HS_POL : 1;            /*!< [18..18] Destination Handshaking Interface Polarity.                      */
      __IM  uint32_t SRC_HS_POL : 1;            /*!< [19..19] Source Handshaking Interface Polarity.                           */
            uint32_t            : 10;
      __IOM uint32_t RELOAD_SRC : 1;            /*!< [30..30] Automatic Source Reload. Reloads SARx register from
                                                     its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
      __IOM uint32_t RELOAD_DST : 1;            /*!< [31..31] Automatic Destination Reload. Reloads DARx register
                                                     from its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
    } CFG0_L_b;
  } ;
  
  union {
    __IOM uint32_t CFG0_H;                      /*!< (@ 0x00000044) Channel 0 high-32bits Configuration Register               */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode.                                                 */
            uint32_t            : 2;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control bit for secure transfers.                       */
      __IOM uint32_t DIRECT_CTL_EN : 1;         /*!< [4..4] Direct Control for channel enabling.                               */
      __IOM uint32_t CONT_SAR   : 1;            /*!< [5..5] Continuous for SAR between single block.                           */
      __IOM uint32_t CONT_DAR   : 1;            /*!< [6..6] Continuous for DAR between single block.                           */
      __IOM uint32_t SRC_PER    : 4;            /*!< [10..7] Assigns a hardware handshaking interface for the source
                                                     of channel x.                                                             */
      __IOM uint32_t DEST_PER   : 4;            /*!< [14..11] Assigns a hardware handshaking interface for the destination
                                                     of channel x.                                                             */
      __IOM uint32_t Extended_SRC_PER1 : 1;     /*!< [15..15] Extended 4th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (16, 128].                                              */
      __IOM uint32_t Extended_DEST_PER1 : 1;    /*!< [16..16] Extended 4th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (16, 128].                                   */
      __IOM uint32_t Extended_SRC_PER2 : 1;     /*!< [17..17] Extended 5th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (32, 128].                                              */
      __IOM uint32_t Extended_DEST_PER2 : 1;    /*!< [18..18] Extended 5th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (32, 128].                                   */
      __IOM uint32_t Extended_SRC_PER3 : 1;     /*!< [19..19] Extended 6th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (64, 128].                                              */
      __IOM uint32_t Extended_DEST_PER3 : 1;    /*!< [20..20] Extended 6th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (64, 128].                                   */
            uint32_t            : 11;
    } CFG0_H_b;
  } ;
  
  union {
    __IOM uint32_t SGR0_L;                      /*!< (@ 0x00000048) Channel 0 low-32bits Source Gather Register                */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source gather interval.                                           */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source gather count. Source contiguous transfer count
                                                     between successive gather boundaries.                                     */
    } SGR0_L_b;
  } ;
  
  union {
    __IOM uint32_t SGR0_H;                      /*!< (@ 0x0000004C) Channel 0 high-32bits Source Gather Register               */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source gather circular streaming number. Enables circular
                                                     gather feature if set greater than 1.                                     */
      __IM  uint32_t BLOCK_TS_L : 16;           /*!< [31..16] Low 16-bits of Block Transfer Size. Indicates the total
                                                     number of single transactions per block transfer.                         */
    } SGR0_H_b;
  } ;
  __IOM uint32_t  DSR0_L;                       /*!< (@ 0x00000050) Channel 0 low-32bits Destination Scatter Register          */
  __IOM uint32_t  DSR0_H;                       /*!< (@ 0x00000054) Channel 0 high-32bits Destination Scatter Register         */
  __IOM uint32_t  SAR1;                         /*!< (@ 0x00000058) Channel 1 Source Address Register                          */
  __IM  uint32_t  CURR_SAR1;                    /*!< (@ 0x0000005C) Channel 1 Current Source Address Register                  */
  __IOM uint32_t  DAR1;                         /*!< (@ 0x00000060) Channel 1 Destination Address Register                     */
  __IM  uint32_t  CURR_DAR1;                    /*!< (@ 0x00000064) Channel 1 Current Destination Address Register             */
  __IOM uint32_t  LLP1_L;                       /*!< (@ 0x00000068) Channel 1 low-32bits Linked List Pointer Register          */
  __IOM uint32_t  LLP1_H;                       /*!< (@ 0x0000006C) Channel 1 high-32bits Linked List Pointer Register         */
  
  union {
    __IOM uint32_t CTL1_L;                      /*!< (@ 0x00000070) Channel 1 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t INT_EN     : 1;            /*!< [0..0] Interrupt Enable Bit. Globally enables interrupt sources
                                                     for the channel.                                                          */
      __IOM uint32_t DST_TR_WIDTH : 3;          /*!< [3..1] Destination Transfer Width. Specifies width of data transfer
                                                     to destination.                                                           */
      __IOM uint32_t SRC_TR_WIDTH : 3;          /*!< [6..4] Source Transfer Width. Specifies width of data transfer
                                                     from source.                                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment. Indicates increment behavior
                                                     for destination address.                                                  */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment. Indicates increment behavior
                                                     for source address.                                                       */
      __IOM uint32_t DEST_MSIZE : 3;            /*!< [13..11] Number of data items per destination burst transaction.          */
      __IOM uint32_t SRC_MSIZE  : 3;            /*!< [16..14] Number of data items per source burst transaction.               */
      __IOM uint32_t SRC_GATHER_EN : 1;         /*!< [17..17] Enables gather on the source side if conditions in
                                                     address control align.                                                    */
      __IOM uint32_t DST_SCATTER_EN : 1;        /*!< [18..18] Enables scatter on the destination side if conditions
                                                     in address control align.                                                 */
            uint32_t            : 1;
      __IOM uint32_t TT_FC      : 4;            /*!< [23..20] Transfer Type and Flow Control. Supports multiple transfer
                                                     types, with specific flow control.                                        */
            uint32_t            : 3;
      __IOM uint32_t LLP_DST_EN : 1;            /*!< [27..27] Enables block chaining on the destination side if high
                                                     and LLPx_L.LOC is non-zero.                                               */
      __IOM uint32_t LLP_SRC_EN : 1;            /*!< [28..28] Enables block chaining on the source side if high and
                                                     LLPx_L.LOC is non-zero.                                                   */
            uint32_t            : 3;
    } CTL1_L_b;
  } ;
  
  union {
    __IOM uint32_t CTL1_H;                      /*!< (@ 0x00000074) Channel 1 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t BLOCK_TS   : 32;           /*!< [31..0] Block Transfer Size. Configures single transaction counts
                                                     per block, subject to AXI beat mapping.                                   */
    } CTL1_H_b;
  } ;
  __IOM uint32_t  BLK_COUNTER_REG1;             /*!< (@ 0x00000078) Channel 1 32bits Block Counter Register                    */
  __IOM uint32_t  REPEAT_PATTERN1;              /*!< (@ 0x0000007C) Channel 1 32bits Memory Repeat Pattern Register            */
  __IM  uint32_t  RESERVED1[6];
  
  union {
    __IOM uint32_t CFG1_L;                      /*!< (@ 0x00000098) Channel 1 low-32bits Configuration Register                */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive.                              */
      __IM  uint32_t SRC_PCTL_OVER : 1;         /*!< [1..1] DMA Source bus protocol finish indicator.                          */
      __IM  uint32_t DST_PCTL_OVER : 1;         /*!< [2..2] DMA destination bus protocol finish indicator.                     */
            uint32_t            : 1;
      __IOM uint32_t CH_PRIOR   : 4;            /*!< [7..4] Channel priority configuration.                                    */
      __IOM uint32_t CH_SUSP    : 1;            /*!< [8..8] Channel Suspend. Suspends all DMA data transfers from
                                                     the source until this bit is cleared.                                     */
      __IOM uint32_t FIFO_EMPTY : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO.               */
      __IOM uint32_t HS_SEL_DST : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select.             */
      __IOM uint32_t HS_SEL_SRC : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select.                  */
            uint32_t            : 6;
      __IM  uint32_t DST_HS_POL : 1;            /*!< [18..18] Destination Handshaking Interface Polarity.                      */
      __IM  uint32_t SRC_HS_POL : 1;            /*!< [19..19] Source Handshaking Interface Polarity.                           */
            uint32_t            : 10;
      __IOM uint32_t RELOAD_SRC : 1;            /*!< [30..30] Automatic Source Reload. Reloads SARx register from
                                                     its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
      __IOM uint32_t RELOAD_DST : 1;            /*!< [31..31] Automatic Destination Reload. Reloads DARx register
                                                     from its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
    } CFG1_L_b;
  } ;
  
  union {
    __IOM uint32_t CFG1_H;                      /*!< (@ 0x0000009C) Channel 1 high-32bits Configuration Register               */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode.                                                 */
            uint32_t            : 2;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control bit for secure transfers.                       */
      __IOM uint32_t DIRECT_CTL_EN : 1;         /*!< [4..4] Direct Control for channel enabling.                               */
      __IOM uint32_t CONT_SAR   : 1;            /*!< [5..5] Continuous for SAR between single block.                           */
      __IOM uint32_t CONT_DAR   : 1;            /*!< [6..6] Continuous for DAR between single block.                           */
      __IOM uint32_t SRC_PER    : 4;            /*!< [10..7] Assigns a hardware handshaking interface for the source
                                                     of channel x.                                                             */
      __IOM uint32_t DEST_PER   : 4;            /*!< [14..11] Assigns a hardware handshaking interface for the destination
                                                     of channel x.                                                             */
      __IOM uint32_t Extended_SRC_PER1 : 1;     /*!< [15..15] Extended 4th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (16, 128].                                              */
      __IOM uint32_t Extended_DEST_PER1 : 1;    /*!< [16..16] Extended 4th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (16, 128].                                   */
      __IOM uint32_t Extended_SRC_PER2 : 1;     /*!< [17..17] Extended 5th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (32, 128].                                              */
      __IOM uint32_t Extended_DEST_PER2 : 1;    /*!< [18..18] Extended 5th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (32, 128].                                   */
      __IOM uint32_t Extended_SRC_PER3 : 1;     /*!< [19..19] Extended 6th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (64, 128].                                              */
      __IOM uint32_t Extended_DEST_PER3 : 1;    /*!< [20..20] Extended 6th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (64, 128].                                   */
            uint32_t            : 11;
    } CFG1_H_b;
  } ;
  
  union {
    __IOM uint32_t SGR1_L;                      /*!< (@ 0x000000A0) Channel 1 Source Gather Configuration Register             */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source gather interval.                                           */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source gather count. Source contiguous transfer count
                                                     between successive gather boundaries.                                     */
    } SGR1_L_b;
  } ;
  
  union {
    __IOM uint32_t SGR1_H;                      /*!< (@ 0x000000A4) Channel 1 Source Gather High Configuration Register        */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source gather circular streaming number. Enables circular
                                                     gather feature if set greater than 1.                                     */
      __IM  uint32_t BLOCK_TS_L : 16;           /*!< [31..16] Low 16-bits of Block Transfer Size. Indicates the total
                                                     number of single transactions per block transfer.                         */
    } SGR1_H_b;
  } ;
  __IOM uint32_t  DSR1_L;                       /*!< (@ 0x000000A8) Channel 1 low-32bits Destination Scatter Register          */
  __IOM uint32_t  DSR1_H;                       /*!< (@ 0x000000AC) Channel 1 high-32bits Destination Scatter Register         */
  __IOM uint32_t  SAR2;                         /*!< (@ 0x000000B0) Channel 2 Source Address Register                          */
  __IM  uint32_t  CURR_SAR2;                    /*!< (@ 0x000000B4) Channel 2 Current Source Address Register                  */
  __IOM uint32_t  DAR2;                         /*!< (@ 0x000000B8) Channel 2 Destination Address Register                     */
  __IM  uint32_t  CURR_DAR2;                    /*!< (@ 0x000000BC) Channel 2 Current Destination Address Register             */
  __IOM uint32_t  LLP2_L;                       /*!< (@ 0x000000C0) Channel 2 low-32bits Linked List Pointer Register          */
  __IOM uint32_t  LLP2_H;                       /*!< (@ 0x000000C4) Channel 2 high-32bits Linked List Pointer Register         */
  
  union {
    __IOM uint32_t CTL2_L;                      /*!< (@ 0x000000C8) Channel 2 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t INT_EN     : 1;            /*!< [0..0] Interrupt Enable Bit. Globally enables interrupt sources
                                                     for the channel.                                                          */
      __IOM uint32_t DST_TR_WIDTH : 3;          /*!< [3..1] Destination Transfer Width. Specifies width of data transfer
                                                     to destination.                                                           */
      __IOM uint32_t SRC_TR_WIDTH : 3;          /*!< [6..4] Source Transfer Width. Specifies width of data transfer
                                                     from source.                                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment. Indicates increment behavior
                                                     for destination address.                                                  */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment. Indicates increment behavior
                                                     for source address.                                                       */
      __IOM uint32_t DEST_MSIZE : 3;            /*!< [13..11] Number of data items per destination burst transaction.          */
      __IOM uint32_t SRC_MSIZE  : 3;            /*!< [16..14] Number of data items per source burst transaction.               */
      __IOM uint32_t SRC_GATHER_EN : 1;         /*!< [17..17] Enables gather on the source side if conditions in
                                                     address control align.                                                    */
      __IOM uint32_t DST_SCATTER_EN : 1;        /*!< [18..18] Enables scatter on the destination side if conditions
                                                     in address control align.                                                 */
            uint32_t            : 1;
      __IOM uint32_t TT_FC      : 4;            /*!< [23..20] Transfer Type and Flow Control. Supports multiple transfer
                                                     types, with specific flow control.                                        */
            uint32_t            : 3;
      __IOM uint32_t LLP_DST_EN : 1;            /*!< [27..27] Enables block chaining on the destination side if high
                                                     and LLPx_L.LOC is non-zero.                                               */
      __IOM uint32_t LLP_SRC_EN : 1;            /*!< [28..28] Enables block chaining on the source side if high and
                                                     LLPx_L.LOC is non-zero.                                                   */
            uint32_t            : 3;
    } CTL2_L_b;
  } ;
  
  union {
    __IOM uint32_t CTL2_H;                      /*!< (@ 0x000000CC) Channel 2 high-32bits Control Register                     */
    
    struct {
      __IOM uint32_t BLOCK_TS   : 32;           /*!< [31..0] Block Transfer Size. Configures single transaction counts
                                                     per block, subject to AXI beat mapping.                                   */
    } CTL2_H_b;
  } ;
  __IOM uint32_t  BLK_COUNTER_REG2;             /*!< (@ 0x000000D0) Channel 2 32bits Block Counter Register                    */
  __IOM uint32_t  REPEAT_PATTERN2;              /*!< (@ 0x000000D4) Channel 2 32bits Memory Repeat Pattern Register            */
  __IM  uint32_t  RESERVED2[6];
  
  union {
    __IOM uint32_t CFG2_L;                      /*!< (@ 0x000000F0) Channel 2 low-32bits Configuration Register                */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive.                              */
      __IM  uint32_t SRC_PCTL_OVER : 1;         /*!< [1..1] DMA Source bus protocol finish indicator.                          */
      __IM  uint32_t DST_PCTL_OVER : 1;         /*!< [2..2] DMA destination bus protocol finish indicator.                     */
            uint32_t            : 1;
      __IOM uint32_t CH_PRIOR   : 4;            /*!< [7..4] Channel priority configuration.                                    */
      __IOM uint32_t CH_SUSP    : 1;            /*!< [8..8] Channel Suspend. Suspends all DMA data transfers from
                                                     the source until this bit is cleared.                                     */
      __IOM uint32_t FIFO_EMPTY : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO.               */
      __IOM uint32_t HS_SEL_DST : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select.             */
      __IOM uint32_t HS_SEL_SRC : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select.                  */
            uint32_t            : 6;
      __IM  uint32_t DST_HS_POL : 1;            /*!< [18..18] Destination Handshaking Interface Polarity.                      */
      __IM  uint32_t SRC_HS_POL : 1;            /*!< [19..19] Source Handshaking Interface Polarity.                           */
            uint32_t            : 10;
      __IOM uint32_t RELOAD_SRC : 1;            /*!< [30..30] Automatic Source Reload. Reloads SARx register from
                                                     its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
      __IOM uint32_t RELOAD_DST : 1;            /*!< [31..31] Automatic Destination Reload. Reloads DARx register
                                                     from its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
    } CFG2_L_b;
  } ;
  
  union {
    __IOM uint32_t CFG2_H;                      /*!< (@ 0x000000F4) Channel 2 high-32bits Configuration Register               */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode.                                                 */
            uint32_t            : 2;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control bit for secure transfers.                       */
      __IOM uint32_t DIRECT_CTL_EN : 1;         /*!< [4..4] Direct Control for channel enabling.                               */
      __IOM uint32_t CONT_SAR   : 1;            /*!< [5..5] Continuous for SAR between single block.                           */
      __IOM uint32_t CONT_DAR   : 1;            /*!< [6..6] Continuous for DAR between single block.                           */
      __IOM uint32_t SRC_PER    : 4;            /*!< [10..7] Assigns a hardware handshaking interface for the source
                                                     of channel x.                                                             */
      __IOM uint32_t DEST_PER   : 4;            /*!< [14..11] Assigns a hardware handshaking interface for the destination
                                                     of channel x.                                                             */
      __IOM uint32_t Extended_SRC_PER1 : 1;     /*!< [15..15] Extended 4th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (16, 128].                                              */
      __IOM uint32_t Extended_DEST_PER1 : 1;    /*!< [16..16] Extended 4th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (16, 128].                                   */
      __IOM uint32_t Extended_SRC_PER2 : 1;     /*!< [17..17] Extended 5th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (32, 128].                                              */
      __IOM uint32_t Extended_DEST_PER2 : 1;    /*!< [18..18] Extended 5th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (32, 128].                                   */
      __IOM uint32_t Extended_SRC_PER3 : 1;     /*!< [19..19] Extended 6th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (64, 128].                                              */
      __IOM uint32_t Extended_DEST_PER3 : 1;    /*!< [20..20] Extended 6th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (64, 128].                                   */
            uint32_t            : 11;
    } CFG2_H_b;
  } ;
  
  union {
    __IOM uint32_t SGR2_L;                      /*!< (@ 0x000000F8) Channel 2 Source Gather Configuration Register             */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source gather interval.                                           */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source gather count. Source contiguous transfer count
                                                     between successive gather boundaries.                                     */
    } SGR2_L_b;
  } ;
  
  union {
    __IOM uint32_t SGR2_H;                      /*!< (@ 0x000000FC) Channel 2 Source Gather High Configuration Register        */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source gather circular streaming number. Enables circular
                                                     gather feature if set greater than 1.                                     */
      __IM  uint32_t BLOCK_TS_L : 16;           /*!< [31..16] Low 16-bits of Block Transfer Size. Indicates the total
                                                     number of single transactions per block transfer.                         */
    } SGR2_H_b;
  } ;
  __IOM uint32_t  DSR2_L;                       /*!< (@ 0x00000100) Channel 2 low-32bits Destination Scatter Register          */
  __IOM uint32_t  DSR2_H;                       /*!< (@ 0x00000104) Channel 2 high-32bits Destination Scatter Register         */
  __IOM uint32_t  SAR3;                         /*!< (@ 0x00000108) Channel 3 Source Address Register                          */
  __IM  uint32_t  CURR_SAR3;                    /*!< (@ 0x0000010C) Channel 3 Current Source Address Register                  */
  __IOM uint32_t  DAR3;                         /*!< (@ 0x00000110) Channel 3 Destination Address Register                     */
  __IM  uint32_t  CURR_DAR3;                    /*!< (@ 0x00000114) Channel 3 Current Destination Address Register             */
  __IOM uint32_t  LLP3_L;                       /*!< (@ 0x00000118) Channel 3 low-32bits Linked List Pointer Register          */
  __IOM uint32_t  LLP3_H;                       /*!< (@ 0x0000011C) Channel 3 high-32bits Linked List Pointer Register         */
  
  union {
    __IOM uint32_t CTL3_L;                      /*!< (@ 0x00000120) Channel 3 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t INT_EN     : 1;            /*!< [0..0] Interrupt Enable Bit. Globally enables interrupt sources
                                                     for the channel.                                                          */
      __IOM uint32_t DST_TR_WIDTH : 3;          /*!< [3..1] Destination Transfer Width. Specifies width of data transfer
                                                     to destination.                                                           */
      __IOM uint32_t SRC_TR_WIDTH : 3;          /*!< [6..4] Source Transfer Width. Specifies width of data transfer
                                                     from source.                                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment. Indicates increment behavior
                                                     for destination address.                                                  */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment. Indicates increment behavior
                                                     for source address.                                                       */
      __IOM uint32_t DEST_MSIZE : 3;            /*!< [13..11] Number of data items per destination burst transaction.          */
      __IOM uint32_t SRC_MSIZE  : 3;            /*!< [16..14] Number of data items per source burst transaction.               */
      __IOM uint32_t SRC_GATHER_EN : 1;         /*!< [17..17] Enables gather on the source side if conditions in
                                                     address control align.                                                    */
      __IOM uint32_t DST_SCATTER_EN : 1;        /*!< [18..18] Enables scatter on the destination side if conditions
                                                     in address control align.                                                 */
            uint32_t            : 1;
      __IOM uint32_t TT_FC      : 4;            /*!< [23..20] Transfer Type and Flow Control. Supports multiple transfer
                                                     types, with specific flow control.                                        */
            uint32_t            : 3;
      __IOM uint32_t LLP_DST_EN : 1;            /*!< [27..27] Enables block chaining on the destination side if high
                                                     and LLPx_L.LOC is non-zero.                                               */
      __IOM uint32_t LLP_SRC_EN : 1;            /*!< [28..28] Enables block chaining on the source side if high and
                                                     LLPx_L.LOC is non-zero.                                                   */
            uint32_t            : 3;
    } CTL3_L_b;
  } ;
  
  union {
    __IOM uint32_t CTL3_H;                      /*!< (@ 0x00000124) Channel 3 high-32bits Control Register                     */
    
    struct {
      __IOM uint32_t BLOCK_TS   : 32;           /*!< [31..0] Block Transfer Size. Configures single transaction counts
                                                     per block, subject to AXI beat mapping.                                   */
    } CTL3_H_b;
  } ;
  __IOM uint32_t  BLK_COUNTER_REG3;             /*!< (@ 0x00000128) Channel 3 32bits Block Counter Register                    */
  __IOM uint32_t  REPEAT_PATTERN3;              /*!< (@ 0x0000012C) Channel 3 32bits Memory Repeat Pattern Register            */
  __IM  uint32_t  RESERVED3[6];
  
  union {
    __IOM uint32_t CFG3_L;                      /*!< (@ 0x00000148) Channel 3 low-32bits Configuration Register                */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive.                              */
      __IM  uint32_t SRC_PCTL_OVER : 1;         /*!< [1..1] DMA Source bus protocol finish indicator.                          */
      __IM  uint32_t DST_PCTL_OVER : 1;         /*!< [2..2] DMA destination bus protocol finish indicator.                     */
            uint32_t            : 1;
      __IOM uint32_t CH_PRIOR   : 4;            /*!< [7..4] Channel priority configuration.                                    */
      __IOM uint32_t CH_SUSP    : 1;            /*!< [8..8] Channel Suspend. Suspends all DMA data transfers from
                                                     the source until this bit is cleared.                                     */
      __IOM uint32_t FIFO_EMPTY : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO.               */
      __IOM uint32_t HS_SEL_DST : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select.             */
      __IOM uint32_t HS_SEL_SRC : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select.                  */
            uint32_t            : 6;
      __IM  uint32_t DST_HS_POL : 1;            /*!< [18..18] Destination Handshaking Interface Polarity.                      */
      __IM  uint32_t SRC_HS_POL : 1;            /*!< [19..19] Source Handshaking Interface Polarity.                           */
            uint32_t            : 10;
      __IOM uint32_t RELOAD_SRC : 1;            /*!< [30..30] Automatic Source Reload. Reloads SARx register from
                                                     its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
      __IOM uint32_t RELOAD_DST : 1;            /*!< [31..31] Automatic Destination Reload. Reloads DARx register
                                                     from its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
    } CFG3_L_b;
  } ;
  
  union {
    __IOM uint32_t CFG3_H;                      /*!< (@ 0x0000014C) Channel 3 high-32bits Configuration Register               */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode.                                                 */
            uint32_t            : 2;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control bit for secure transfers.                       */
      __IOM uint32_t DIRECT_CTL_EN : 1;         /*!< [4..4] Direct Control for channel enabling.                               */
      __IOM uint32_t CONT_SAR   : 1;            /*!< [5..5] Continuous for SAR between single block.                           */
      __IOM uint32_t CONT_DAR   : 1;            /*!< [6..6] Continuous for DAR between single block.                           */
      __IOM uint32_t SRC_PER    : 4;            /*!< [10..7] Assigns a hardware handshaking interface for the source
                                                     of channel x.                                                             */
      __IOM uint32_t DEST_PER   : 4;            /*!< [14..11] Assigns a hardware handshaking interface for the destination
                                                     of channel x.                                                             */
      __IOM uint32_t Extended_SRC_PER1 : 1;     /*!< [15..15] Extended 4th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (16, 128].                                              */
      __IOM uint32_t Extended_DEST_PER1 : 1;    /*!< [16..16] Extended 4th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (16, 128].                                   */
      __IOM uint32_t Extended_SRC_PER2 : 1;     /*!< [17..17] Extended 5th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (32, 128].                                              */
      __IOM uint32_t Extended_DEST_PER2 : 1;    /*!< [18..18] Extended 5th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (32, 128].                                   */
      __IOM uint32_t Extended_SRC_PER3 : 1;     /*!< [19..19] Extended 6th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (64, 128].                                              */
      __IOM uint32_t Extended_DEST_PER3 : 1;    /*!< [20..20] Extended 6th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (64, 128].                                   */
            uint32_t            : 11;
    } CFG3_H_b;
  } ;
  
  union {
    __IOM uint32_t SGR3_L;                      /*!< (@ 0x00000150) Channel 3 Source Gather Configuration Register             */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source gather interval.                                           */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source gather count. Source contiguous transfer count
                                                     between successive gather boundaries.                                     */
    } SGR3_L_b;
  } ;
  
  union {
    __IOM uint32_t SGR3_H;                      /*!< (@ 0x00000154) Channel 3 Source Gather High Configuration Register        */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source gather circular streaming number. Enables circular
                                                     gather feature if set greater than 1.                                     */
      __IM  uint32_t BLOCK_TS_L : 16;           /*!< [31..16] Low 16-bits of Block Transfer Size. Indicates the total
                                                     number of single transactions per block transfer.                         */
    } SGR3_H_b;
  } ;
  __IOM uint32_t  DSR3_L;                       /*!< (@ 0x00000158) Channel 3 low-32bits Destination Scatter Register          */
  __IOM uint32_t  DSR3_H;                       /*!< (@ 0x0000015C) Channel 3 high-32bits Destination Scatter Register         */
  __IOM uint32_t  SAR4;                         /*!< (@ 0x00000160) Channel 4 Source Address Register                          */
  __IM  uint32_t  CURR_SAR4;                    /*!< (@ 0x00000164) Channel 4 Current Source Address Register                  */
  __IOM uint32_t  DAR4;                         /*!< (@ 0x00000168) Channel 4 Destination Address Register                     */
  __IM  uint32_t  CURR_DAR4;                    /*!< (@ 0x0000016C) Channel 4 Current Destination Address Register             */
  __IOM uint32_t  LLP4_L;                       /*!< (@ 0x00000170) Channel 4 low-32bits Linked List Pointer Register          */
  __IOM uint32_t  LLP4_H;                       /*!< (@ 0x00000174) Channel 4 high-32bits Linked List Pointer Register         */
  
  union {
    __IOM uint32_t CTL4_L;                      /*!< (@ 0x00000178) Channel 4 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t INT_EN     : 1;            /*!< [0..0] Interrupt Enable Bit. Globally enables interrupt sources
                                                     for the channel.                                                          */
      __IOM uint32_t DST_TR_WIDTH : 3;          /*!< [3..1] Destination Transfer Width. Specifies width of data transfer
                                                     to destination.                                                           */
      __IOM uint32_t SRC_TR_WIDTH : 3;          /*!< [6..4] Source Transfer Width. Specifies width of data transfer
                                                     from source.                                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment. Indicates increment behavior
                                                     for destination address.                                                  */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment. Indicates increment behavior
                                                     for source address.                                                       */
      __IOM uint32_t DEST_MSIZE : 3;            /*!< [13..11] Number of data items per destination burst transaction.          */
      __IOM uint32_t SRC_MSIZE  : 3;            /*!< [16..14] Number of data items per source burst transaction.               */
      __IOM uint32_t SRC_GATHER_EN : 1;         /*!< [17..17] Enables gather on the source side if conditions in
                                                     address control align.                                                    */
      __IOM uint32_t DST_SCATTER_EN : 1;        /*!< [18..18] Enables scatter on the destination side if conditions
                                                     in address control align.                                                 */
            uint32_t            : 1;
      __IOM uint32_t TT_FC      : 4;            /*!< [23..20] Transfer Type and Flow Control. Supports multiple transfer
                                                     types, with specific flow control.                                        */
            uint32_t            : 3;
      __IOM uint32_t LLP_DST_EN : 1;            /*!< [27..27] Enables block chaining on the destination side if high
                                                     and LLPx_L.LOC is non-zero.                                               */
      __IOM uint32_t LLP_SRC_EN : 1;            /*!< [28..28] Enables block chaining on the source side if high and
                                                     LLPx_L.LOC is non-zero.                                                   */
            uint32_t            : 3;
    } CTL4_L_b;
  } ;
  
  union {
    __IOM uint32_t CTL4_H;                      /*!< (@ 0x0000017C) Channel 4 high-32bits Control Register                     */
    
    struct {
      __IOM uint32_t BLOCK_TS   : 32;           /*!< [31..0] Block Transfer Size. Configures single transaction counts
                                                     per block, subject to AXI beat mapping.                                   */
    } CTL4_H_b;
  } ;
  __IOM uint32_t  BLK_COUNTER_REG4;             /*!< (@ 0x00000180) Channel 4 32bits Block Counter Register                    */
  __IOM uint32_t  REPEAT_PATTERN4;              /*!< (@ 0x00000184) Channel 4 32bits Memory Repeat Pattern Register            */
  __IM  uint32_t  RESERVED4[6];
  
  union {
    __IOM uint32_t CFG4_L;                      /*!< (@ 0x000001A0) Channel 4 low-32bits Configuration Register                */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive.                              */
      __IM  uint32_t SRC_PCTL_OVER : 1;         /*!< [1..1] DMA Source bus protocol finish indicator.                          */
      __IM  uint32_t DST_PCTL_OVER : 1;         /*!< [2..2] DMA destination bus protocol finish indicator.                     */
            uint32_t            : 1;
      __IOM uint32_t CH_PRIOR   : 4;            /*!< [7..4] Channel priority configuration.                                    */
      __IOM uint32_t CH_SUSP    : 1;            /*!< [8..8] Channel Suspend. Suspends all DMA data transfers from
                                                     the source until this bit is cleared.                                     */
      __IOM uint32_t FIFO_EMPTY : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO.               */
      __IOM uint32_t HS_SEL_DST : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select.             */
      __IOM uint32_t HS_SEL_SRC : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select.                  */
            uint32_t            : 6;
      __IM  uint32_t DST_HS_POL : 1;            /*!< [18..18] Destination Handshaking Interface Polarity.                      */
      __IM  uint32_t SRC_HS_POL : 1;            /*!< [19..19] Source Handshaking Interface Polarity.                           */
            uint32_t            : 10;
      __IOM uint32_t RELOAD_SRC : 1;            /*!< [30..30] Automatic Source Reload. Reloads SARx register from
                                                     its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
      __IOM uint32_t RELOAD_DST : 1;            /*!< [31..31] Automatic Destination Reload. Reloads DARx register
                                                     from its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
    } CFG4_L_b;
  } ;
  
  union {
    __IOM uint32_t CFG4_H;                      /*!< (@ 0x000001A4) Channel 4 high-32bits Configuration Register               */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode.                                                 */
            uint32_t            : 2;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control bit for secure transfers.                       */
      __IOM uint32_t DIRECT_CTL_EN : 1;         /*!< [4..4] Direct Control for channel enabling.                               */
      __IOM uint32_t CONT_SAR   : 1;            /*!< [5..5] Continuous for SAR between single block.                           */
      __IOM uint32_t CONT_DAR   : 1;            /*!< [6..6] Continuous for DAR between single block.                           */
      __IOM uint32_t SRC_PER    : 4;            /*!< [10..7] Assigns a hardware handshaking interface for the source
                                                     of channel x.                                                             */
      __IOM uint32_t DEST_PER   : 4;            /*!< [14..11] Assigns a hardware handshaking interface for the destination
                                                     of channel x.                                                             */
      __IOM uint32_t Extended_SRC_PER1 : 1;     /*!< [15..15] Extended 4th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (16, 128].                                              */
      __IOM uint32_t Extended_DEST_PER1 : 1;    /*!< [16..16] Extended 4th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (16, 128].                                   */
      __IOM uint32_t Extended_SRC_PER2 : 1;     /*!< [17..17] Extended 5th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (32, 128].                                              */
      __IOM uint32_t Extended_DEST_PER2 : 1;    /*!< [18..18] Extended 5th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (32, 128].                                   */
      __IOM uint32_t Extended_SRC_PER3 : 1;     /*!< [19..19] Extended 6th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (64, 128].                                              */
      __IOM uint32_t Extended_DEST_PER3 : 1;    /*!< [20..20] Extended 6th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (64, 128].                                   */
            uint32_t            : 11;
    } CFG4_H_b;
  } ;
  
  union {
    __IOM uint32_t SGR4_L;                      /*!< (@ 0x000001A8) Channel 4 Source Gather Configuration Register             */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source gather interval.                                           */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source gather count. Source contiguous transfer count
                                                     between successive gather boundaries.                                     */
    } SGR4_L_b;
  } ;
  
  union {
    __IOM uint32_t SGR4_H;                      /*!< (@ 0x000001AC) Channel 4 Source Gather High Configuration Register        */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source gather circular streaming number. Enables circular
                                                     gather feature if set greater than 1.                                     */
      __IM  uint32_t BLOCK_TS_L : 16;           /*!< [31..16] Low 16-bits of Block Transfer Size. Indicates the total
                                                     number of single transactions per block transfer.                         */
    } SGR4_H_b;
  } ;
  __IOM uint32_t  DSR4_L;                       /*!< (@ 0x000001B0) Channel 4 low-32bits Destination Scatter Register          */
  __IOM uint32_t  DSR4_H;                       /*!< (@ 0x000001B4) Channel 4 high-32bits Destination Scatter Register         */
  __IOM uint32_t  SAR5;                         /*!< (@ 0x000001B8) Channel 5 Source Address Register                          */
  __IM  uint32_t  CURR_SAR5;                    /*!< (@ 0x000001BC) Channel 5 Current Source Address Register                  */
  __IOM uint32_t  DAR5;                         /*!< (@ 0x000001C0) Channel 5 Destination Address Register                     */
  __IM  uint32_t  CURR_DAR5;                    /*!< (@ 0x000001C4) Channel 5 Current Destination Address Register             */
  __IOM uint32_t  LLP5_L;                       /*!< (@ 0x000001C8) Channel 5 low-32bits Linked List Pointer Register          */
  __IOM uint32_t  LLP5_H;                       /*!< (@ 0x000001CC) Channel 5 high-32bits Linked List Pointer Register         */
  
  union {
    __IOM uint32_t CTL5_L;                      /*!< (@ 0x000001D0) Channel 5 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t INT_EN     : 1;            /*!< [0..0] Interrupt Enable Bit. Globally enables interrupt sources
                                                     for the channel.                                                          */
      __IOM uint32_t DST_TR_WIDTH : 3;          /*!< [3..1] Destination Transfer Width. Specifies width of data transfer
                                                     to destination.                                                           */
      __IOM uint32_t SRC_TR_WIDTH : 3;          /*!< [6..4] Source Transfer Width. Specifies width of data transfer
                                                     from source.                                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment. Indicates increment behavior
                                                     for destination address.                                                  */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment. Indicates increment behavior
                                                     for source address.                                                       */
      __IOM uint32_t DEST_MSIZE : 3;            /*!< [13..11] Number of data items per destination burst transaction.          */
      __IOM uint32_t SRC_MSIZE  : 3;            /*!< [16..14] Number of data items per source burst transaction.               */
      __IOM uint32_t SRC_GATHER_EN : 1;         /*!< [17..17] Enables gather on the source side if conditions in
                                                     address control align.                                                    */
      __IOM uint32_t DST_SCATTER_EN : 1;        /*!< [18..18] Enables scatter on the destination side if conditions
                                                     in address control align.                                                 */
            uint32_t            : 1;
      __IOM uint32_t TT_FC      : 4;            /*!< [23..20] Transfer Type and Flow Control. Supports multiple transfer
                                                     types, with specific flow control.                                        */
            uint32_t            : 3;
      __IOM uint32_t LLP_DST_EN : 1;            /*!< [27..27] Enables block chaining on the destination side if high
                                                     and LLPx_L.LOC is non-zero.                                               */
      __IOM uint32_t LLP_SRC_EN : 1;            /*!< [28..28] Enables block chaining on the source side if high and
                                                     LLPx_L.LOC is non-zero.                                                   */
            uint32_t            : 3;
    } CTL5_L_b;
  } ;
  
  union {
    __IOM uint32_t CTL5_H;                      /*!< (@ 0x000001D4) Channel 5 high-32bits Control Register                     */
    
    struct {
      __IOM uint32_t BLOCK_TS   : 32;           /*!< [31..0] Block Transfer Size. Configures single transaction counts
                                                     per block, subject to AXI beat mapping.                                   */
    } CTL5_H_b;
  } ;
  __IOM uint32_t  BLK_COUNTER_REG5;             /*!< (@ 0x000001D8) Channel 5 32bits Block Counter Register                    */
  __IOM uint32_t  REPEAT_PATTERN5;              /*!< (@ 0x000001DC) Channel 5 32bits Memory Repeat Pattern Register            */
  __IM  uint32_t  RESERVED5[6];
  
  union {
    __IOM uint32_t CFG5_L;                      /*!< (@ 0x000001F8) Channel 5 low-32bits Configuration Register                */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive.                              */
      __IM  uint32_t SRC_PCTL_OVER : 1;         /*!< [1..1] DMA Source bus protocol finish indicator.                          */
      __IM  uint32_t DST_PCTL_OVER : 1;         /*!< [2..2] DMA destination bus protocol finish indicator.                     */
            uint32_t            : 1;
      __IOM uint32_t CH_PRIOR   : 4;            /*!< [7..4] Channel priority configuration.                                    */
      __IOM uint32_t CH_SUSP    : 1;            /*!< [8..8] Channel Suspend. Suspends all DMA data transfers from
                                                     the source until this bit is cleared.                                     */
      __IOM uint32_t FIFO_EMPTY : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO.               */
      __IOM uint32_t HS_SEL_DST : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select.             */
      __IOM uint32_t HS_SEL_SRC : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select.                  */
            uint32_t            : 6;
      __IM  uint32_t DST_HS_POL : 1;            /*!< [18..18] Destination Handshaking Interface Polarity.                      */
      __IM  uint32_t SRC_HS_POL : 1;            /*!< [19..19] Source Handshaking Interface Polarity.                           */
            uint32_t            : 10;
      __IOM uint32_t RELOAD_SRC : 1;            /*!< [30..30] Automatic Source Reload. Reloads SARx register from
                                                     its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
      __IOM uint32_t RELOAD_DST : 1;            /*!< [31..31] Automatic Destination Reload. Reloads DARx register
                                                     from its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
    } CFG5_L_b;
  } ;
  
  union {
    __IOM uint32_t CFG5_H;                      /*!< (@ 0x000001FC) Channel 5 high-32bits Configuration Register               */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode.                                                 */
            uint32_t            : 2;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control bit for secure transfers.                       */
      __IOM uint32_t DIRECT_CTL_EN : 1;         /*!< [4..4] Direct Control for channel enabling.                               */
      __IOM uint32_t CONT_SAR   : 1;            /*!< [5..5] Continuous for SAR between single block.                           */
      __IOM uint32_t CONT_DAR   : 1;            /*!< [6..6] Continuous for DAR between single block.                           */
      __IOM uint32_t SRC_PER    : 4;            /*!< [10..7] Assigns a hardware handshaking interface for the source
                                                     of channel x.                                                             */
      __IOM uint32_t DEST_PER   : 4;            /*!< [14..11] Assigns a hardware handshaking interface for the destination
                                                     of channel x.                                                             */
      __IOM uint32_t Extended_SRC_PER1 : 1;     /*!< [15..15] Extended 4th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (16, 128].                                              */
      __IOM uint32_t Extended_DEST_PER1 : 1;    /*!< [16..16] Extended 4th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (16, 128].                                   */
      __IOM uint32_t Extended_SRC_PER2 : 1;     /*!< [17..17] Extended 5th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (32, 128].                                              */
      __IOM uint32_t Extended_DEST_PER2 : 1;    /*!< [18..18] Extended 5th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (32, 128].                                   */
      __IOM uint32_t Extended_SRC_PER3 : 1;     /*!< [19..19] Extended 6th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (64, 128].                                              */
      __IOM uint32_t Extended_DEST_PER3 : 1;    /*!< [20..20] Extended 6th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (64, 128].                                   */
            uint32_t            : 11;
    } CFG5_H_b;
  } ;
  
  union {
    __IOM uint32_t SGR5_L;                      /*!< (@ 0x00000200) Channel 5 Source Gather Configuration Register             */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source gather interval.                                           */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source gather count. Source contiguous transfer count
                                                     between successive gather boundaries.                                     */
    } SGR5_L_b;
  } ;
  
  union {
    __IOM uint32_t SGR5_H;                      /*!< (@ 0x00000204) Channel 5 Source Gather High Configuration Register        */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source gather circular streaming number. Enables circular
                                                     gather feature if set greater than 1.                                     */
      __IM  uint32_t BLOCK_TS_L : 16;           /*!< [31..16] Low 16-bits of Block Transfer Size. Indicates the total
                                                     number of single transactions per block transfer.                         */
    } SGR5_H_b;
  } ;
  __IOM uint32_t  DSR5_L;                       /*!< (@ 0x00000208) Channel 5 low-32bits Destination Scatter Register          */
  __IOM uint32_t  DSR5_H;                       /*!< (@ 0x0000020C) Channel 5 high-32bits Destination Scatter Register         */
  __IOM uint32_t  SAR6;                         /*!< (@ 0x00000210) Channel 6 Source Address Register                          */
  __IM  uint32_t  CURR_SAR6;                    /*!< (@ 0x00000214) Channel 6 Current Source Address Register                  */
  __IOM uint32_t  DAR6;                         /*!< (@ 0x00000218) Channel 6 Destination Address Register                     */
  __IM  uint32_t  CURR_DAR6;                    /*!< (@ 0x0000021C) Channel 6 Current Destination Address Register             */
  __IOM uint32_t  LLP6_L;                       /*!< (@ 0x00000220) Channel 6 low-32bits Linked List Pointer Register          */
  __IOM uint32_t  LLP6_H;                       /*!< (@ 0x00000224) Channel 6 high-32bits Linked List Pointer Register         */
  
  union {
    __IOM uint32_t CTL6_L;                      /*!< (@ 0x00000228) Channel 6 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t INT_EN     : 1;            /*!< [0..0] Interrupt Enable Bit. Globally enables interrupt sources
                                                     for the channel.                                                          */
      __IOM uint32_t DST_TR_WIDTH : 3;          /*!< [3..1] Destination Transfer Width. Specifies width of data transfer
                                                     to destination.                                                           */
      __IOM uint32_t SRC_TR_WIDTH : 3;          /*!< [6..4] Source Transfer Width. Specifies width of data transfer
                                                     from source.                                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment. Indicates increment behavior
                                                     for destination address.                                                  */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment. Indicates increment behavior
                                                     for source address.                                                       */
      __IOM uint32_t DEST_MSIZE : 3;            /*!< [13..11] Number of data items per destination burst transaction.          */
      __IOM uint32_t SRC_MSIZE  : 3;            /*!< [16..14] Number of data items per source burst transaction.               */
      __IOM uint32_t SRC_GATHER_EN : 1;         /*!< [17..17] Enables gather on the source side if conditions in
                                                     address control align.                                                    */
      __IOM uint32_t DST_SCATTER_EN : 1;        /*!< [18..18] Enables scatter on the destination side if conditions
                                                     in address control align.                                                 */
            uint32_t            : 1;
      __IOM uint32_t TT_FC      : 4;            /*!< [23..20] Transfer Type and Flow Control. Supports multiple transfer
                                                     types, with specific flow control.                                        */
            uint32_t            : 3;
      __IOM uint32_t LLP_DST_EN : 1;            /*!< [27..27] Enables block chaining on the destination side if high
                                                     and LLPx_L.LOC is non-zero.                                               */
      __IOM uint32_t LLP_SRC_EN : 1;            /*!< [28..28] Enables block chaining on the source side if high and
                                                     LLPx_L.LOC is non-zero.                                                   */
            uint32_t            : 3;
    } CTL6_L_b;
  } ;
  
  union {
    __IOM uint32_t CTL6_H;                      /*!< (@ 0x0000022C) Channel 6 high-32bits Control Register                     */
    
    struct {
      __IOM uint32_t BLOCK_TS   : 32;           /*!< [31..0] Block Transfer Size. Configures single transaction counts
                                                     per block, subject to AXI beat mapping.                                   */
    } CTL6_H_b;
  } ;
  __IOM uint32_t  BLK_COUNTER_REG6;             /*!< (@ 0x00000230) Channel 6 32bits Block Counter Register                    */
  __IOM uint32_t  REPEAT_PATTERN6;              /*!< (@ 0x00000234) Channel 6 32bits Memory Repeat Pattern Register            */
  __IM  uint32_t  RESERVED6[6];
  
  union {
    __IOM uint32_t CFG6_L;                      /*!< (@ 0x00000250) Channel 6 low-32bits Configuration Register                */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive.                              */
      __IM  uint32_t SRC_PCTL_OVER : 1;         /*!< [1..1] DMA Source bus protocol finish indicator.                          */
      __IM  uint32_t DST_PCTL_OVER : 1;         /*!< [2..2] DMA destination bus protocol finish indicator.                     */
            uint32_t            : 1;
      __IOM uint32_t CH_PRIOR   : 4;            /*!< [7..4] Channel priority configuration.                                    */
      __IOM uint32_t CH_SUSP    : 1;            /*!< [8..8] Channel Suspend. Suspends all DMA data transfers from
                                                     the source until this bit is cleared.                                     */
      __IOM uint32_t FIFO_EMPTY : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO.               */
      __IOM uint32_t HS_SEL_DST : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select.             */
      __IOM uint32_t HS_SEL_SRC : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select.                  */
            uint32_t            : 6;
      __IM  uint32_t DST_HS_POL : 1;            /*!< [18..18] Destination Handshaking Interface Polarity.                      */
      __IM  uint32_t SRC_HS_POL : 1;            /*!< [19..19] Source Handshaking Interface Polarity.                           */
            uint32_t            : 10;
      __IOM uint32_t RELOAD_SRC : 1;            /*!< [30..30] Automatic Source Reload. Reloads SARx register from
                                                     its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
      __IOM uint32_t RELOAD_DST : 1;            /*!< [31..31] Automatic Destination Reload. Reloads DARx register
                                                     from its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
    } CFG6_L_b;
  } ;
  
  union {
    __IOM uint32_t CFG6_H;                      /*!< (@ 0x00000254) Channel 6 high-32bits Configuration Register               */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode.                                                 */
            uint32_t            : 2;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control bit for secure transfers.                       */
      __IOM uint32_t DIRECT_CTL_EN : 1;         /*!< [4..4] Direct Control for channel enabling.                               */
      __IOM uint32_t CONT_SAR   : 1;            /*!< [5..5] Continuous for SAR between single block.                           */
      __IOM uint32_t CONT_DAR   : 1;            /*!< [6..6] Continuous for DAR between single block.                           */
      __IOM uint32_t SRC_PER    : 4;            /*!< [10..7] Assigns a hardware handshaking interface for the source
                                                     of channel x.                                                             */
      __IOM uint32_t DEST_PER   : 4;            /*!< [14..11] Assigns a hardware handshaking interface for the destination
                                                     of channel x.                                                             */
      __IOM uint32_t Extended_SRC_PER1 : 1;     /*!< [15..15] Extended 4th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (16, 128].                                              */
      __IOM uint32_t Extended_DEST_PER1 : 1;    /*!< [16..16] Extended 4th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (16, 128].                                   */
      __IOM uint32_t Extended_SRC_PER2 : 1;     /*!< [17..17] Extended 5th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (32, 128].                                              */
      __IOM uint32_t Extended_DEST_PER2 : 1;    /*!< [18..18] Extended 5th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (32, 128].                                   */
      __IOM uint32_t Extended_SRC_PER3 : 1;     /*!< [19..19] Extended 6th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (64, 128].                                              */
      __IOM uint32_t Extended_DEST_PER3 : 1;    /*!< [20..20] Extended 6th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (64, 128].                                   */
            uint32_t            : 11;
    } CFG6_H_b;
  } ;
  
  union {
    __IOM uint32_t SGR6_L;                      /*!< (@ 0x00000258) Channel 6 Source Gather Configuration Register             */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source gather interval.                                           */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source gather count. Source contiguous transfer count
                                                     between successive gather boundaries.                                     */
    } SGR6_L_b;
  } ;
  
  union {
    __IOM uint32_t SGR6_H;                      /*!< (@ 0x0000025C) Channel 6 Source Gather High Configuration Register        */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source gather circular streaming number. Enables circular
                                                     gather feature if set greater than 1.                                     */
      __IM  uint32_t BLOCK_TS_L : 16;           /*!< [31..16] Low 16-bits of Block Transfer Size. Indicates the total
                                                     number of single transactions per block transfer.                         */
    } SGR6_H_b;
  } ;
  __IM  uint32_t  RESERVED7[2];
  __IOM uint32_t  SAR7;                         /*!< (@ 0x00000268) Channel 7 Source Address Register                          */
  __IM  uint32_t  CURR_SAR7;                    /*!< (@ 0x0000026C) Channel 7 Current Source Address Register                  */
  __IOM uint32_t  DAR7;                         /*!< (@ 0x00000270) Channel 7 Destination Address Register                     */
  __IM  uint32_t  CURR_DAR7;                    /*!< (@ 0x00000274) Channel 7 Current Destination Address Register             */
  __IOM uint32_t  LLP7_L;                       /*!< (@ 0x00000278) Channel 7 low-32bits Linked List Pointer Register          */
  __IOM uint32_t  LLP7_H;                       /*!< (@ 0x0000027C) Channel 7 high-32bits Linked List Pointer Register         */
  
  union {
    __IOM uint32_t CTL7_L;                      /*!< (@ 0x00000280) Channel 7 low-32bits Control Register                      */
    
    struct {
      __IOM uint32_t INT_EN     : 1;            /*!< [0..0] Interrupt Enable Bit. Globally enables interrupt sources
                                                     for the channel.                                                          */
      __IOM uint32_t DST_TR_WIDTH : 3;          /*!< [3..1] Destination Transfer Width. Specifies width of data transfer
                                                     to destination.                                                           */
      __IOM uint32_t SRC_TR_WIDTH : 3;          /*!< [6..4] Source Transfer Width. Specifies width of data transfer
                                                     from source.                                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment. Indicates increment behavior
                                                     for destination address.                                                  */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment. Indicates increment behavior
                                                     for source address.                                                       */
      __IOM uint32_t DEST_MSIZE : 3;            /*!< [13..11] Number of data items per destination burst transaction.          */
      __IOM uint32_t SRC_MSIZE  : 3;            /*!< [16..14] Number of data items per source burst transaction.               */
      __IOM uint32_t SRC_GATHER_EN : 1;         /*!< [17..17] Enables gather on the source side if conditions in
                                                     address control align.                                                    */
      __IOM uint32_t DST_SCATTER_EN : 1;        /*!< [18..18] Enables scatter on the destination side if conditions
                                                     in address control align.                                                 */
            uint32_t            : 1;
      __IOM uint32_t TT_FC      : 4;            /*!< [23..20] Transfer Type and Flow Control. Supports multiple transfer
                                                     types, with specific flow control.                                        */
            uint32_t            : 3;
      __IOM uint32_t LLP_DST_EN : 1;            /*!< [27..27] Enables block chaining on the destination side if high
                                                     and LLPx_L.LOC is non-zero.                                               */
      __IOM uint32_t LLP_SRC_EN : 1;            /*!< [28..28] Enables block chaining on the source side if high and
                                                     LLPx_L.LOC is non-zero.                                                   */
            uint32_t            : 3;
    } CTL7_L_b;
  } ;
  
  union {
    __IOM uint32_t CTL7_H;                      /*!< (@ 0x00000284) Channel 7 high-32bits Control Register                     */
    
    struct {
      __IOM uint32_t BLOCK_TS   : 32;           /*!< [31..0] Block Transfer Size. Configures single transaction counts
                                                     per block, subject to AXI beat mapping.                                   */
    } CTL7_H_b;
  } ;
  __IOM uint32_t  BLK_COUNTER_REG7;             /*!< (@ 0x00000288) Channel 7 32bits Block Counter Register                    */
  __IOM uint32_t  REPEAT_PATTERN7;              /*!< (@ 0x0000028C) Channel 7 32bits Memory Repeat Pattern Register            */
  __IM  uint32_t  RESERVED8[6];
  
  union {
    __IOM uint32_t CFG7_L;                      /*!< (@ 0x000002A8) Channel 7 low-32bits Configuration Register                */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive.                              */
      __IM  uint32_t SRC_PCTL_OVER : 1;         /*!< [1..1] DMA Source bus protocol finish indicator.                          */
      __IM  uint32_t DST_PCTL_OVER : 1;         /*!< [2..2] DMA destination bus protocol finish indicator.                     */
            uint32_t            : 1;
      __IOM uint32_t CH_PRIOR   : 4;            /*!< [7..4] Channel priority configuration.                                    */
      __IOM uint32_t CH_SUSP    : 1;            /*!< [8..8] Channel Suspend. Suspends all DMA data transfers from
                                                     the source until this bit is cleared.                                     */
      __IOM uint32_t FIFO_EMPTY : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO.               */
      __IOM uint32_t HS_SEL_DST : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select.             */
      __IOM uint32_t HS_SEL_SRC : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select.                  */
            uint32_t            : 6;
      __IM  uint32_t DST_HS_POL : 1;            /*!< [18..18] Destination Handshaking Interface Polarity.                      */
      __IM  uint32_t SRC_HS_POL : 1;            /*!< [19..19] Source Handshaking Interface Polarity.                           */
            uint32_t            : 10;
      __IOM uint32_t RELOAD_SRC : 1;            /*!< [30..30] Automatic Source Reload. Reloads SARx register from
                                                     its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
      __IOM uint32_t RELOAD_DST : 1;            /*!< [31..31] Automatic Destination Reload. Reloads DARx register
                                                     from its initial value at the end of every block for multi-block
                                                     transfers.                                                                */
    } CFG7_L_b;
  } ;
  
  union {
    __IOM uint32_t CFG7_H;                      /*!< (@ 0x000002AC) Channel 7 high-32bits Configuration Register               */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode.                                                 */
            uint32_t            : 2;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control bit for secure transfers.                       */
      __IOM uint32_t DIRECT_CTL_EN : 1;         /*!< [4..4] Direct Control for channel enabling.                               */
      __IOM uint32_t CONT_SAR   : 1;            /*!< [5..5] Continuous for SAR between single block.                           */
      __IOM uint32_t CONT_DAR   : 1;            /*!< [6..6] Continuous for DAR between single block.                           */
      __IOM uint32_t SRC_PER    : 4;            /*!< [10..7] Assigns a hardware handshaking interface for the source
                                                     of channel x.                                                             */
      __IOM uint32_t DEST_PER   : 4;            /*!< [14..11] Assigns a hardware handshaking interface for the destination
                                                     of channel x.                                                             */
      __IOM uint32_t Extended_SRC_PER1 : 1;     /*!< [15..15] Extended 4th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (16, 128].                                              */
      __IOM uint32_t Extended_DEST_PER1 : 1;    /*!< [16..16] Extended 4th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (16, 128].                                   */
      __IOM uint32_t Extended_SRC_PER2 : 1;     /*!< [17..17] Extended 5th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (32, 128].                                              */
      __IOM uint32_t Extended_DEST_PER2 : 1;    /*!< [18..18] Extended 5th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (32, 128].                                   */
      __IOM uint32_t Extended_SRC_PER3 : 1;     /*!< [19..19] Extended 6th bit of SRC_PER if hardware handshake interfaces
                                                     are configured to (64, 128].                                              */
      __IOM uint32_t Extended_DEST_PER3 : 1;    /*!< [20..20] Extended 6th bit of DEST_PER if hardware handshake
                                                     interfaces are configured to (64, 128].                                   */
            uint32_t            : 11;
    } CFG7_H_b;
  } ;
  
  union {
    __IOM uint32_t SGR7_L;                      /*!< (@ 0x000002B0) Channel 7 Source Gather Configuration Register             */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source gather interval.                                           */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source gather count. Source contiguous transfer count
                                                     between successive gather boundaries.                                     */
    } SGR7_L_b;
  } ;
  
  union {
    __IOM uint32_t SGR7_H;                      /*!< (@ 0x000002B4) Channel 7 Source Gather High Configuration Register        */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source gather circular streaming number. Enables circular
                                                     gather feature if set greater than 1.                                     */
      __IM  uint32_t BLOCK_TS_L : 16;           /*!< [31..16] Low 16-bits of Block Transfer Size. Indicates the total
                                                     number of single transactions per block transfer.                         */
    } SGR7_H_b;
  } ;
  __IOM uint32_t  DSR7_L;                       /*!< (@ 0x000002B8) Channel 7 low-32bits Destination Scatter Register          */
  __IOM uint32_t  DSR7_H;                       /*!< (@ 0x000002BC) Channel 7 high-32bits Destination Scatter Register         */
  __IM  uint32_t  RAWTFR_L;                     /*!< (@ 0x000002C0) Raw Status for IntTfr Interrupt                            */
  __IM  uint32_t  RAWTFR_H;                     /*!< (@ 0x000002C4) Raw Status for Blk Counter Register                        */
  __IM  uint32_t  RAWBLOCK_L;                   /*!< (@ 0x000002C8) Raw Status for IntBlock Interrupt                          */
  __IM  uint32_t  RAWBLOCK_H;                   /*!< (@ 0x000002CC) Raw Status for Int_1_2_Block if defined                    */
  __IM  uint32_t  RAWERR_L;                     /*!< (@ 0x000002D0) Raw Status for IntErr Interrupt (protocol error)           */
  __IM  uint32_t  RESERVED9[4];
  __IM  uint32_t  RAWERR_H;                     /*!< (@ 0x000002E4) Raw Status for non-secure access secure register
                                                                    error if defined                                           */
  __IM  uint32_t  RESERVED10;
  __IM  uint32_t  STATUSTFR_L;                  /*!< (@ 0x000002EC) Status for IntTfr Interrupt                                */
  __IM  uint32_t  STATUSTFR_H;                  /*!< (@ 0x000002F0) Status for Blk Counter Interrupt                           */
  __IM  uint32_t  RESERVED11;
  __IM  uint32_t  STATUSBLOCK_L;                /*!< (@ 0x000002F8) Status for IntBlock Interrupt                              */
  __IM  uint32_t  RESERVED12[3];
  __IM  uint32_t  STATUSERR_L;                  /*!< (@ 0x00000308) Status for IntErr Interrupt (protocol error)               */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  MASKTFR_L;                    /*!< (@ 0x00000310) Mask for IntTfr Interrupt                                  */
  __IOM uint32_t  MASKTFR_H;                    /*!< (@ 0x00000314) Mask for Blk Counter Interrupt                             */
  __IOM uint32_t  MASKBLOCK_L;                  /*!< (@ 0x00000318) Mask for IntBlock Interrupt                                */
  __IOM uint32_t  MASKBLOCK_H;                  /*!< (@ 0x0000031C) Mask for Int_1_2_Block if defined                          */
  __IM  uint32_t  RESERVED14[4];
  __IOM uint32_t  MASKERR_L;                    /*!< (@ 0x00000330) Mask for IntErr Interrupt                                  */
  __IOM uint32_t  MASKERR_H;                    /*!< (@ 0x00000334) Mask for non-secure access secure register error
                                                                    if defined                                                 */
  __IOM uint32_t  CLEARTFR;                     /*!< (@ 0x00000338) MClear for IntTfr Interrupt                                */
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  CLEARBLOCK;                   /*!< (@ 0x00000340) MClear for IntBlock Interrupt                              */
  __IM  uint32_t  RESERVED16[5];
  __IOM uint32_t  CLEARERR;                     /*!< (@ 0x00000358) MClear for IntErr Interrupt                                */
  __IM  uint32_t  RESERVED17;
  
  union {
    __IM  uint32_t STATUSINT_L;                 /*!< (@ 0x00000360) Combined Interrupt Status (Low) Register                   */
    
    struct {
      __IM  uint32_t Tfr        : 1;            /*!< [0..0] OR of the contents of StatusTfr_L register.                        */
      __IM  uint32_t Block      : 1;            /*!< [1..1] OR of the contents of StatusBlock register.                        */
            uint32_t            : 2;
      __IM  uint32_t Error      : 1;            /*!< [4..4] OR of the contents of StatusErr register.                          */
      __IM  uint32_t Block_1_2  : 1;            /*!< [5..5] Reserved Condition: OR of the Status_1_2_Block register
                                                     contents if DMAC_1_2_BLK_TRANSFER_INT is defined. Otherwise,
                                                     0.                                                                        */
      __IM  uint32_t Block_Counter : 1;         /*!< [6..6] Reserved Condition: OR of the StatusTfr_H register contents
                                                     if DMAC_CHx_SUPPORT_BLK_COUNTER is defined. Otherwise,
                                                     0.                                                                        */
            uint32_t            : 25;
    } STATUSINT_L_b;
  } ;
  __IM  uint32_t  STATUSINT_H;                  /*!< (@ 0x00000364) Combined Interrupt Status (High) Register                  */
  __IM  uint32_t  RESERVED18[12];
  __IOM uint32_t  DMACFGREG;                    /*!< (@ 0x00000398) DMA Configuration Register                                 */
  __IM  uint32_t  RESERVED19;
  
  union {
    __IOM uint32_t CHENREG;                     /*!< (@ 0x000003A0) DMA low-32bits Channel Enable Register                     */
    
    struct {
      __IOM uint32_t CH_EN      : 8;            /*!< [7..0] Enables/Disables the channel. Setting this bit enables
                                                     a channel; clearing it disables the channel. - 0 = Disable
                                                     the Channel - 1 = Enable the Channel The CHENREG_L.CH_EN
                                                     bit is automatically cleared by hardware after the last
                                                     AXI transfer of the DMA transfer to the destination has
                                                     completed. Software can poll this bit to determine when
                                                     the channel is available for a new DMA transfer.                          */
      __IOM uint32_t CH_EN_WE   : 8;            /*!< [15..8] Channel enable write enable.                                      */
            uint32_t            : 16;
    } CHENREG_b;
  } ;
} DMAC_Type;                                    /*!< Size = 932 (0x3a4)                                                        */



/* =========================================================================================================================== */
/* ================                                         USB_CORE                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USB OTG Controller (USB_CORE)
  */

typedef struct {                                /*!< (@ 0x40040000) USB_CORE Structure                                         */
  
  union {
    __IOM uint32_t GOTGCTL;                     /*!< (@ 0x00000000) Control and Status Register                                */
    
    struct {
      __IM  uint32_t SesReqScs  : 1;            /*!< [0..0] Session Request Success                                            */
      __IOM uint32_t SesReq     : 1;            /*!< [1..1] Session Request                                                    */
      __IOM uint32_t VbvalidOvEn : 1;           /*!< [2..2] VBUS Valid Override Enable                                         */
      __IOM uint32_t VbvalidOvVal : 1;          /*!< [3..3] VBUS Valid OverrideValue (VbvalidOvVal)                            */
      __IOM uint32_t AvalidOvEn : 1;            /*!< [4..4] A-Peripheral Session Valid Override Enable                         */
      __IOM uint32_t AvalidOvVal : 1;           /*!< [5..5] A-Peripheral Session Valid OverrideValue (AvalidOvVal)             */
      __IOM uint32_t BvalidOvEn : 1;            /*!< [6..6] B-Peripheral Session Valid Override Enable                         */
      __IOM uint32_t BvalidOvVal : 1;           /*!< [7..7] B-Peripheral Session Valid OverrideValue (BvalidOvVal)             */
      __IM  uint32_t HstNegScs  : 1;            /*!< [8..8] Host Negotiation Success (HstNegScs)                               */
      __IOM uint32_t HNPReq     : 1;            /*!< [9..9] HNP Request (HNPReq)                                               */
      __IOM uint32_t HstSetHNPEn : 1;           /*!< [10..10] Host Set HNP Enable (HstSetHNPEn)                                */
      __IOM uint32_t DevHNPEn   : 1;            /*!< [11..11] Device HNP Enabled (DevHNPEn)                                    */
      __IOM uint32_t EHEn       : 1;            /*!< [12..12] Embedded Host Enable (EHEn)                                      */
            uint32_t            : 2;
      __IOM uint32_t DbnceFltrBypass : 1;       /*!< [15..15] Debounce Filter Bypass                                           */
      __IM  uint32_t ConIDSts   : 1;            /*!< [16..16] Connector ID Status                                              */
      __IM  uint32_t DbncTime   : 1;            /*!< [17..17] Debounce Time                                                    */
      __IM  uint32_t ASesVld    : 1;            /*!< [18..18] A-session Valid                                                  */
      __IM  uint32_t BSesVld    : 1;            /*!< [19..19] B-session Valid                                                  */
      __IOM uint32_t OTGVer     : 1;            /*!< [20..20] OTG Version                                                      */
      __IM  uint32_t CurMod     : 1;            /*!< [21..21] Current Mode of Operation                                        */
      __IM  uint32_t MultValIdBC : 5;           /*!< [26..22] Multi Valued ID pin (MultValIdBC)                                */
      __IOM uint32_t ChirpEn    : 1;            /*!< [27..27] Core asserting chirp_on before sending an actual Chirp
                                                     K signal on USB.                                                          */
            uint32_t            : 3;
      __IOM uint32_t Testmode_corr_eUSB2 : 1;   /*!< [31..31] Correction for eUSB2 PHY during Test mode                        */
    } GOTGCTL_b;
  } ;
  
  union {
    __IOM uint32_t GOTGINT;                     /*!< (@ 0x00000004) Interrupt Register                                         */
    
    struct {
            uint32_t            : 2;
      __IOM uint32_t SesEndDet  : 1;            /*!< [2..2] Session End Detected                                               */
            uint32_t            : 5;
      __IOM uint32_t SesReqSucStsChng : 1;      /*!< [8..8] Session Request Success Status Change                              */
      __IOM uint32_t HstNegSucStsChng : 1;      /*!< [9..9] Host Negotiation Success Status Change                             */
            uint32_t            : 7;
      __IOM uint32_t HstNegDet  : 1;            /*!< [17..17] Host Negotiation Detected                                        */
      __IOM uint32_t ADevTOUTChg : 1;           /*!< [18..18] A-Device Timeout Change                                          */
      __IOM uint32_t DbnceDone  : 1;            /*!< [19..19] Debounce Done                                                    */
      __IOM uint32_t MultValIpChng : 1;         /*!< [20..20] Indicates change in ACA pin value                                */
            uint32_t            : 11;
    } GOTGINT_b;
  } ;
  
  union {
    __IOM uint32_t GAHBCFG;                     /*!< (@ 0x00000008) AHB Configuration Register                                 */
    
    struct {
      __IOM uint32_t GlblIntrMsk : 1;           /*!< [0..0] Global Interrupt Mask                                              */
      __IOM uint32_t HBstLen    : 4;            /*!< [4..1] Burst Length/Type                                                  */
      __IOM uint32_t DMAEn      : 1;            /*!< [5..5] DMA Enable                                                         */
            uint32_t            : 1;
      __IOM uint32_t NPTxFEmpLvl : 1;           /*!< [7..7] Non-Periodic TxFIFO Empty Level                                    */
      __IOM uint32_t PTxFEmpLvl : 1;            /*!< [8..8] Periodic TxFIFO Empty Level                                        */
            uint32_t            : 12;
      __IOM uint32_t RemMemSupp : 1;            /*!< [21..21] Remote Memory Support                                            */
      __IOM uint32_t NotiAllDmaWrit : 1;        /*!< [22..22] Notify All DMA Write Transactions                                */
      __IOM uint32_t AHBSingle  : 1;            /*!< [23..23] AHB Single Support                                               */
      __IOM uint32_t InvDescEndianess : 1;      /*!< [24..24] Invert Descriptor Endianess                                      */
            uint32_t            : 7;
    } GAHBCFG_b;
  } ;
  
  union {
    __IOM uint32_t GUSBCFG;                     /*!< (@ 0x0000000C) USB Configuration Register                                 */
    
    struct {
      __IOM uint32_t TOutCal    : 3;            /*!< [2..0] HS/FS Timeout Calibration                                          */
      __IOM uint32_t PHYIf      : 1;            /*!< [3..3] PHY Interface                                                      */
      __IOM uint32_t ULPI_UTMI_Sel : 1;         /*!< [4..4] ULPI or UTMI+ Select                                               */
      __IOM uint32_t FSIntf     : 1;            /*!< [5..5] Full-Speed Serial Interface Select                                 */
      __IOM uint32_t PHYSel     : 1;            /*!< [6..6] PHY Selection                                                      */
      __IOM uint32_t DDRSel     : 1;            /*!< [7..7] ULPI DDR Select                                                    */
      __IOM uint32_t SRPCap     : 1;            /*!< [8..8] SRP-Capable                                                        */
      __IOM uint32_t HNPCap     : 1;            /*!< [9..9] HNP-Capable                                                        */
      __IOM uint32_t USBTrdTim  : 4;            /*!< [13..10] USB Turnaround Time                                              */
            uint32_t            : 1;
      __IOM uint32_t PhyLPwrClkSel : 1;         /*!< [15..15] PHY Low-Power Clock Select                                       */
      __IOM uint32_t OtgI2CSel  : 1;            /*!< [16..16] UTMIFS or I2C Interface Select                                   */
      __IOM uint32_t ULPIFsLs   : 1;            /*!< [17..17] ULPI FS/LS Select                                                */
      __IOM uint32_t ULPIAutoRes : 1;           /*!< [18..18] ULPI Auto Resume                                                 */
      __IOM uint32_t ULPIClkSusM : 1;           /*!< [19..19] ULPI Clock SuspendM                                              */
      __IOM uint32_t ULPIExtVbusDrv : 1;        /*!< [20..20] ULPI External VBUS Drive                                         */
      __IOM uint32_t ULPIExtVbusIndicator : 1;  /*!< [21..21] ULPI External VBUS Indicator                                     */
      __IOM uint32_t TermSelDLPulse : 1;        /*!< [22..22] TermSel DLine Pulsing Selection                                  */
      __IOM uint32_t Complement : 1;            /*!< [23..23] Indicator Complement Controls                                    */
      __IOM uint32_t Indicator  : 1;            /*!< [24..24] Indicator Pass Through                                           */
      __IOM uint32_t ULPI       : 1;            /*!< [25..25] ULPI Interface Protect Disable                                   */
      __IOM uint32_t IC_USBCap  : 1;            /*!< [26..26] IC_USB-Capable PHY Interface Selection                           */
      __IOM uint32_t IC_USBTrafCtl : 1;         /*!< [27..27] IC_USB-TrafficPullRemove Control                                 */
      __IOM uint32_t TxEndDelay : 1;            /*!< [28..28] Tx End Delay                                                     */
      __IOM uint32_t ForceHstMode : 1;          /*!< [29..29] Force Host Mode                                                  */
      __IOM uint32_t ForceDevMode : 1;          /*!< [30..30] Force Device Mode                                                */
      __IOM uint32_t CorruptTxPkt : 1;          /*!< [31..31] Corrupt Tx packet                                                */
    } GUSBCFG_b;
  } ;
  
  union {
    __IOM uint32_t GRSTCTL;                     /*!< (@ 0x00000010) Reset Register                                             */
    
    struct {
      __IOM uint32_t CSftRst    : 1;            /*!< [0..0] Core Soft Reset                                                    */
      __IOM uint32_t PIUFSSftRst : 1;           /*!< [1..1] PIU FS Soft Reset                                                  */
      __IOM uint32_t FrmCntrRst : 1;            /*!< [2..2] Host Frame Counter Reset                                           */
      __IOM uint32_t INTknQFlsh : 1;            /*!< [3..3] IN Token Queue Flush                                               */
      __IOM uint32_t RxFFlsh    : 1;            /*!< [4..4] RxFIFO Flush                                                       */
      __IOM uint32_t TxFFlsh    : 1;            /*!< [5..5] TxFIFO Flush                                                       */
      __IOM uint32_t TxFNum     : 5;            /*!< [10..6] TxFIFO Number                                                     */
            uint32_t            : 18;
      __IOM uint32_t CSftRstDone : 1;           /*!< [29..29] Core Soft Reset Done                                             */
      __IM  uint32_t DMAReq     : 1;            /*!< [30..30] DMA Request Signal                                               */
      __IM  uint32_t AHBIdle    : 1;            /*!< [31..31] AHB Master Idle                                                  */
    } GRSTCTL_b;
  } ;
  
  union {
    __IOM uint32_t GINTSTS;                     /*!< (@ 0x00000014) Interrupt Register                                         */
    
    struct {
      __IM  uint32_t CurMod     : 1;            /*!< [0..0] Current Mode of Operation                                          */
      __IOM uint32_t ModeMis    : 1;            /*!< [1..1] Mode Mismatch Interrupt                                            */
      __IM  uint32_t OTGInt     : 1;            /*!< [2..2] OTG Interrupt                                                      */
      __IOM uint32_t Sof        : 1;            /*!< [3..3] Start of (micro)Frame                                              */
      __IM  uint32_t RxFLvl     : 1;            /*!< [4..4] RxFIFO Non-Empty                                                   */
      __IM  uint32_t NPTxFEmp   : 1;            /*!< [5..5] Non-periodic TxFIFO Empty                                          */
      __IM  uint32_t GINNakEff  : 1;            /*!< [6..6] Global IN Non-periodic NAK Effective                               */
      __IM  uint32_t GOUTNakEff : 1;            /*!< [7..7] Global OUT NAK Effective                                           */
      __IOM uint32_t ULPICKINT  : 1;            /*!< [8..8] ULPI Carkit Interrupt                                              */
      __IOM uint32_t I2CINT     : 1;            /*!< [9..9] I2C Interrupt                                                      */
      __IOM uint32_t ErlySusp   : 1;            /*!< [10..10] Early Suspend                                                    */
      __IOM uint32_t USBSusp    : 1;            /*!< [11..11] USB Suspend                                                      */
      __IOM uint32_t USBRst     : 1;            /*!< [12..12] USB Reset                                                        */
      __IOM uint32_t EnumDone   : 1;            /*!< [13..13] Enumeration Done                                                 */
      __IOM uint32_t ISOOutDrop : 1;            /*!< [14..14] Isochronous OUT Packet Dropped Interrupt                         */
      __IOM uint32_t EOPF       : 1;            /*!< [15..15] End of Periodic Frame Interrupt                                  */
      __IOM uint32_t RstrDoneInt : 1;           /*!< [16..16] Restore Done Interrupt                                           */
      __IOM uint32_t EPMis      : 1;            /*!< [17..17] Endpoint Mismatch Interrupt                                      */
      __IM  uint32_t IEPInt     : 1;            /*!< [18..18] IN Endpoints Interrupt                                           */
      __IM  uint32_t OEPInt     : 1;            /*!< [19..19] OUT Endpoints Interrupt                                          */
      __IOM uint32_t incompISOIN : 1;           /*!< [20..20] Incomplete Isochronous IN Transfer                               */
      __IOM uint32_t incomplP   : 1;            /*!< [21..21] Incomplete Periodic Transfer                                     */
      __IOM uint32_t FetSusp    : 1;            /*!< [22..22] Data Fetch Suspended                                             */
      __IOM uint32_t ResetDet   : 1;            /*!< [23..23] Reset Detected Interrupt                                         */
      __IM  uint32_t PrtInt     : 1;            /*!< [24..24] Host Port Interrupt                                              */
      __IM  uint32_t HChInt     : 1;            /*!< [25..25] Host Channels Interrupt                                          */
      __IM  uint32_t PTxFEmp    : 1;            /*!< [26..26] Periodic TxFIFO Empty                                            */
      __IOM uint32_t LPM_Int    : 1;            /*!< [27..27] LPM Transaction Received Interrupt                               */
      __IOM uint32_t ConIDStsChng : 1;          /*!< [28..28] Connector ID Status Change                                       */
      __IOM uint32_t DisconnInt : 1;            /*!< [29..29] Disconnect Detected Interrupt                                    */
      __IOM uint32_t SessReqInt : 1;            /*!< [30..30] Session Request/New Session Detected Interrupt                   */
      __IOM uint32_t WkUpInt    : 1;            /*!< [31..31] Resume/Remote Wakeup Detected Interrupt                          */
    } GINTSTS_b;
  } ;
  
  union {
    __IOM uint32_t GINTMSK;                     /*!< (@ 0x00000018) Interrupt Mask Register                                    */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t ModeMisMsk : 1;            /*!< [1..1] Mode Mismatch Interrupt Mask                                       */
      __IOM uint32_t OTGIntMsk  : 1;            /*!< [2..2] OTG Interrupt Mask                                                 */
      __IOM uint32_t SofMsk     : 1;            /*!< [3..3] Start of Frame Mask                                                */
      __IOM uint32_t RxFLvlMsk  : 1;            /*!< [4..4] Receive FIFO Non-Empty Mask                                        */
      __IOM uint32_t NPTxFEmpMsk : 1;           /*!< [5..5] Non-periodic TxFIFO Empty Mask                                     */
      __IOM uint32_t GINNakEffMsk : 1;          /*!< [6..6] Global Non-periodic IN NAK Effective Mask, Device only             */
      __IOM uint32_t GOUTNakEffMsk : 1;         /*!< [7..7] Global OUT NAK Effective Mask, Device only                         */
      __IOM uint32_t ULPICKINTMsk : 1;          /*!< [8..8] ULPI Carkit Interrupt Mask                                         */
      __IOM uint32_t I2CIntMsk  : 1;            /*!< [9..9] I2C Interrupt Mask                                                 */
      __IOM uint32_t ErlySuspMsk : 1;           /*!< [10..10] Early Suspend Mask, Device only                                  */
      __IOM uint32_t USBSuspMsk : 1;            /*!< [11..11] USB Suspend Mask, Device only                                    */
      __IOM uint32_t USBRstMsk  : 1;            /*!< [12..12] USB Reset Mask, Device only                                      */
      __IOM uint32_t EnumDoneMsk : 1;           /*!< [13..13] Enumeration Done Mask, Device only                               */
      __IOM uint32_t ISOOutDropMsk : 1;         /*!< [14..14] Isochronous OUT Packet Dropped Interrupt Mask, Device
                                                     only                                                                      */
      __IOM uint32_t EOPFMsk    : 1;            /*!< [15..15] End of Periodic Frame Interrupt Mask, Device only                */
      __IOM uint32_t RstrDoneIntMsk : 1;        /*!< [16..16] Restore Done Interrupt Mask                                      */
      __IOM uint32_t EPMisMsk   : 1;            /*!< [17..17] Endpoint Mismatch Interrupt Mask, Device only                    */
      __IOM uint32_t IEPIntMsk  : 1;            /*!< [18..18] IN Endpoints Interrupt Mask, Device only                         */
      __IOM uint32_t OEPIntMsk  : 1;            /*!< [19..19] OUT Endpoints Interrupt Mask, Device only                        */
      __IOM uint32_t incompISOINMsk : 1;        /*!< [20..20] Incomplete Isochronous IN Transfer Mask, Device only             */
      __IOM uint32_t incomplPMsK : 1;           /*!< [21..21] Incomplete Periodic Transfer Mask, Host only                     */
      __IOM uint32_t FetSuspMsk : 1;            /*!< [22..22] Data Fetch Suspended Mask, Device only                           */
      __IOM uint32_t ResetDetMsk : 1;           /*!< [23..23] Reset Detected Interrupt Mask, Device only                       */
      __IOM uint32_t PrtIntMsk  : 1;            /*!< [24..24] Host Port Interrupt Mask, Host only                              */
      __IOM uint32_t HChIntMsk  : 1;            /*!< [25..25] Host Channels Interrupt Mask, Host only                          */
      __IOM uint32_t PTxFEmpMsk : 1;            /*!< [26..26] Periodic TxFIFO Empty Mask, Host only                            */
      __IOM uint32_t LPM_IntMsk : 1;            /*!< [27..27] LPM Transaction Received Interrupt Mask                          */
      __IOM uint32_t ConIDStsChngMsk : 1;       /*!< [28..28] Connector ID Status Change Mask                                  */
      __IOM uint32_t DisconnIntMsk : 1;         /*!< [29..29] Disconnect Detected Interrupt Mask                               */
      __IOM uint32_t SessReqIntMsk : 1;         /*!< [30..30] Session Request/New Session Detected Interrupt Mask              */
      __IOM uint32_t WkUpIntMsk : 1;            /*!< [31..31] Resume/Remote Wakeup Detected Interrupt Mask                     */
    } GINTMSK_b;
  } ;
  
  union {
    __IM  uint32_t GRXSTSR;                     /*!< (@ 0x0000001C) Receive Status Debug Read Register                         */
    
    struct {
      __IM  uint32_t ChNum      : 4;            /*!< [3..0] Channel Number / Endpoint Number                                   */
      __IM  uint32_t BCnt       : 11;           /*!< [14..4] Byte Count                                                        */
      __IM  uint32_t DPID       : 2;            /*!< [16..15] Data PID                                                         */
      __IM  uint32_t PktSts     : 4;            /*!< [20..17] Packet Status                                                    */
      __IM  uint32_t FN         : 4;            /*!< [24..21] Frame Number (Device only)                                       */
            uint32_t            : 7;
    } GRXSTSR_b;
  } ;
  
  union {
    __IM  uint32_t GRXSTSP;                     /*!< (@ 0x00000020) Receive Status Read/Pop Register                           */
    
    struct {
      __IM  uint32_t ChNum      : 4;            /*!< [3..0] Channel Number / Endpoint Number                                   */
      __IM  uint32_t BCnt       : 11;           /*!< [14..4] Byte Count                                                        */
      __IM  uint32_t DPID       : 2;            /*!< [16..15] Data PID                                                         */
      __IM  uint32_t PktSts     : 4;            /*!< [20..17] Packet Status                                                    */
      __IM  uint32_t FN         : 4;            /*!< [24..21] Frame Number (Device only)                                       */
            uint32_t            : 7;
    } GRXSTSP_b;
  } ;
  __IOM uint32_t  GRXFSIZ;                      /*!< (@ 0x00000024) Receive FIFO Size Register                                 */
  
  union {
    __IOM uint32_t GNPTXFSIZ;                   /*!< (@ 0x00000028) Non-periodic Transmit FIFO Size Register                   */
    
    struct {
      __IOM uint32_t NPTxFStAddr : 11;          /*!< [10..0] Non-periodic Transmit RAM Start Address                           */
            uint32_t            : 5;
      __IOM uint32_t NPTxFDep   : 11;           /*!< [26..16] Non-periodic TxFIFO Depth                                        */
            uint32_t            : 5;
    } GNPTXFSIZ_b;
  } ;
  
  union {
    __IM  uint32_t GNPTXSTS;                    /*!< (@ 0x0000002C) Non-periodic Transmit FIFO/Queue Status Register           */
    
    struct {
      __IM  uint32_t NPTxFSpcAvail : 16;        /*!< [15..0] Non-periodic TxFIFO Space Available                               */
      __IM  uint32_t NPTxQSpcAvail : 8;         /*!< [23..16] Non-periodic Transmit Request Queue Space Available              */
      __IM  uint32_t NPTxQTop   : 7;            /*!< [30..24] Top of the Non-periodic Transmit Request Queue                   */
            uint32_t            : 1;
    } GNPTXSTS_b;
  } ;
  __IOM uint32_t  GI2CCTL;                      /*!< (@ 0x00000030) I2C Access Register                                        */
  
  union {
    __IOM uint32_t GPVNDCTL;                    /*!< (@ 0x00000034) PHY Vendor Control Register                                */
    
    struct {
      __IOM uint32_t RegData    : 8;            /*!< [7..0] Register Data                                                      */
      __IOM uint32_t VCtrl      : 8;            /*!< [15..8] UTMI+ Vendor Control Register Address                             */
      __IOM uint32_t RegAddr    : 6;            /*!< [21..16] Register Address                                                 */
      __IOM uint32_t RegWr      : 1;            /*!< [22..22] Register Write                                                   */
            uint32_t            : 2;
      __IOM uint32_t NewRegReq  : 1;            /*!< [25..25] New Register Request                                             */
      __IM  uint32_t VStsBsy    : 1;            /*!< [26..26] VStatus Busy                                                     */
      __IOM uint32_t VStsDone   : 1;            /*!< [27..27] VStatus Done                                                     */
            uint32_t            : 3;
      __IOM uint32_t DisUlpiDrvr : 1;           /*!< [31..31] Disable ULPI Drivers                                             */
    } GPVNDCTL_b;
  } ;
  __IOM uint32_t  GGPIO;                        /*!< (@ 0x00000038) General Purpose Input/Output Register                      */
  __IOM uint32_t  GUID;                         /*!< (@ 0x0000003C) User ID Register                                           */
  __IM  uint32_t  GSNPSID;                      /*!< (@ 0x00000040) Synopsys ID Register                                       */
  __IM  uint32_t  GHWCFG1;                      /*!< (@ 0x00000044) User Hardware Configuration 1 Register                     */
  
  union {
    __IM  uint32_t GHWCFG2;                     /*!< (@ 0x00000048) User Hardware Configuration 2 Register                     */
    
    struct {
      __IM  uint32_t OtgMode    : 3;            /*!< [2..0] Mode of Operation                                                  */
      __IM  uint32_t OtgArch    : 2;            /*!< [4..3] Architecture                                                       */
      __IM  uint32_t SingPnt    : 1;            /*!< [5..5] Point-to-Point                                                     */
      __IM  uint32_t HSPhyType  : 2;            /*!< [7..6] High-Speed PHY Interface Type                                      */
      __IM  uint32_t FSPhyType  : 2;            /*!< [9..8] Full-Speed PHY Interface Type                                      */
      __IM  uint32_t NumDevEps  : 4;            /*!< [13..10] Number of Device Endpoints                                       */
      __IM  uint32_t NumHstChnl : 4;            /*!< [17..14] Number of Host Channels                                          */
      __IM  uint32_t PerioSupport : 1;          /*!< [18..18] Periodic OUT Channels Supported in Host Mode                     */
      __IM  uint32_t DynFifoSizing : 1;         /*!< [19..19] Dynamic FIFO Sizing Enabled                                      */
      __IM  uint32_t MultiProcIntrpt : 1;       /*!< [20..20] Multi Processor Interrupt Enabled                                */
            uint32_t            : 1;
      __IM  uint32_t NPTxQDepth : 2;            /*!< [23..22] Non-periodic Request Queue Depth                                 */
      __IM  uint32_t PTxQDepth  : 2;            /*!< [25..24] Host Mode Periodic Request Queue Depth                           */
      __IM  uint32_t TknQDepth  : 5;            /*!< [30..26] Device Mode IN Token Sequence Learning Queue Depth               */
      __IM  uint32_t OTG_ENABLE_IC_USB : 1;     /*!< [31..31] IC_USB mode specified for mode of operation                      */
    } GHWCFG2_b;
  } ;
  
  union {
    __IM  uint32_t GHWCFG3;                     /*!< (@ 0x0000004C) User Hardware Configuration 3 Register                     */
    
    struct {
      __IM  uint32_t XferSizeWidth : 4;         /*!< [3..0] Width of Transfer Size Counters                                    */
      __IM  uint32_t PktSizeWidth : 3;          /*!< [6..4] Width of Packet Size Counters                                      */
      __IM  uint32_t OtgEn      : 1;            /*!< [7..7] OTG Function Enabled                                               */
      __IM  uint32_t I2CIntSel  : 1;            /*!< [8..8] I2C Interface Selection                                            */
      __IM  uint32_t VndctlSupt : 1;            /*!< [9..9] Vendor Control Interface Support                                   */
      __IM  uint32_t OptFeature : 1;            /*!< [10..10] Optional Features Removed                                        */
      __IM  uint32_t RstType    : 1;            /*!< [11..11] Reset Style for Clocked Blocks                                   */
      __IM  uint32_t ADPSupport : 1;            /*!< [12..12] ADP Logic Support                                                */
      __IM  uint32_t HSICMode   : 1;            /*!< [13..13] HSIC Mode                                                        */
      __IM  uint32_t BCSupport  : 1;            /*!< [14..14] Battery Charger Support                                          */
      __IM  uint32_t LPMMode    : 1;            /*!< [15..15] LPM Mode                                                         */
      __IM  uint32_t DfifoDepth : 16;           /*!< [31..16] DFIFO Depth                                                      */
    } GHWCFG3_b;
  } ;
  
  union {
    __IM  uint32_t GHWCFG4;                     /*!< (@ 0x00000050) User Hardware Configuration 4 Register                     */
    
    struct {
      __IM  uint32_t NumDevPerioEps : 4;        /*!< [3..0] Number of Device Mode Periodic IN Endpoints                        */
      __IM  uint32_t PartialPwrDn : 1;          /*!< [4..4] Enable Partial Power Down                                          */
      __IM  uint32_t AhbFreq    : 1;            /*!< [5..5] Minimum AHB Frequency Less Than 60 MHz                             */
      __IM  uint32_t Hibernation : 1;           /*!< [6..6] Enable Hibernation                                                 */
      __IM  uint32_t ExtendedHibernation : 1;   /*!< [7..7] Enable Hibernation                                                 */
            uint32_t            : 1;
      __IM  uint32_t EnhancedLPMSupt1 : 1;      /*!< [9..9] Enhanced LPM Support1                                              */
      __IM  uint32_t ServIntFlow : 1;           /*!< [10..10] Service Interval Flow                                            */
      __IM  uint32_t ipgisocSupt : 1;           /*!< [11..11] Interpacket Gap ISOC OUT Worst-case Support                      */
      __IM  uint32_t ACGSupt    : 1;            /*!< [12..12] Active Clock Gating Support                                      */
      __IM  uint32_t EnhancedLPMSupt : 1;       /*!< [13..13] Enhanced LPM Support                                             */
      __IM  uint32_t PhyDataWidth : 2;          /*!< [15..14] UTMI+ PHY/ULPI-to-Internal UTMI+ Wrapper Data Width              */
      __IM  uint32_t NumCtlEps  : 4;            /*!< [19..16] Number of Device Mode Control Endpoints in Addition
                                                     to Endpoint 0                                                             */
      __IM  uint32_t IddgFltr   : 1;            /*!< [20..20] IDDIG Filter Enabled                                             */
      __IM  uint32_t VBusValidFltr : 1;         /*!< [21..21] VBUS Valid Filter Enabled                                        */
      __IM  uint32_t AValidFltr : 1;            /*!< [22..22] a_valid filter enabled                                           */
      __IM  uint32_t BValidFltr : 1;            /*!< [23..23] b_valid filter enabled                                           */
      __IM  uint32_t SessEndFltr : 1;           /*!< [24..24] Session end filter enabled                                       */
      __IM  uint32_t DedFifoMode : 1;           /*!< [25..25] Enable Dedicated Transmit FIFO for device IN Endpoints           */
      __IM  uint32_t INEps      : 4;            /*!< [29..26] Number of Device Mode IN Endpoints Including Control
                                                     Endpoints                                                                 */
      __IM  uint32_t DescDMAEnabled : 1;        /*!< [30..30] Scatter/Gather DMA configuration enabled                         */
      __IM  uint32_t DescDMA    : 1;            /*!< [31..31] Scatter/Gather DMA configuration                                 */
    } GHWCFG4_b;
  } ;
  
  union {
    __IOM uint32_t GLPMCFG;                     /*!< (@ 0x00000054) LPM Config Register                                        */
    
    struct {
      __IOM uint32_t LPMCap     : 1;            /*!< [0..0] LPM-Capable                                                        */
      __IOM uint32_t AppL1Res   : 1;            /*!< [1..1] LPM response programmed by application                             */
      __IOM uint32_t HIRD       : 4;            /*!< [5..2] Host-Initiated Resume Duration                                     */
      __IOM uint32_t bRemoteWake : 1;           /*!< [6..6] RemoteWakeEnable                                                   */
      __IOM uint32_t EnblSlpM   : 1;            /*!< [7..7] Enable utmi_sleep_n                                                */
      __IOM uint32_t HIRD_Thres : 5;            /*!< [12..8] BESL/HIRD Threshold                                               */
      __IOM uint32_t CoreL1Res  : 2;            /*!< [14..13] LPM Response                                                     */
      __IOM uint32_t SlpSts     : 1;            /*!< [15..15] Port Sleep Status                                                */
      __IOM uint32_t L1ResumeOK : 1;            /*!< [16..16] Sleep State Resume OK                                            */
      __IOM uint32_t LPM_Chnl_Indx : 4;         /*!< [20..17] LPM Channel Index                                                */
      __IOM uint32_t LPM_Retry_Cnt : 3;         /*!< [23..21] LPM Retry Count                                                  */
      __IOM uint32_t SndLPM     : 1;            /*!< [24..24] Send LPM Transaction                                             */
      __IM  uint32_t LPM_RetryCnt_Sts : 3;      /*!< [27..25] LPM Retry Count Status                                           */
      __IOM uint32_t LPM_EnBESL : 1;            /*!< [28..28] LPM Enable BESL                                                  */
      __IOM uint32_t LPM_RestoreSlpSts : 1;     /*!< [29..29] LPM Restore Sleep Status                                         */
      __IOM uint32_t HSICCon    : 1;            /*!< [30..30] HSIC-Connect                                                     */
      __IOM uint32_t InvSelHsic : 1;            /*!< [31..31] HSIC-Invert Select HSIC                                          */
    } GLPMCFG_b;
  } ;
  
  union {
    __IOM uint32_t GPWRDN;                      /*!< (@ 0x00000058) Global Power Down Register                                 */
    
    struct {
      __IOM uint32_t PMUIntSel  : 1;            /*!< [0..0] PMU Interrupt Select                                               */
      __IOM uint32_t PMUActv    : 1;            /*!< [1..1] PMU Active                                                         */
      __IOM uint32_t Restore    : 1;            /*!< [2..2] Restore.                                                           */
      __IOM uint32_t PwrDnClmp  : 1;            /*!< [3..3] Power Down Clamp                                                   */
      __IOM uint32_t PwrDnRst_n : 1;            /*!< [4..4] Power Down ResetN                                                  */
      __IOM uint32_t PwrDnSwtch : 1;            /*!< [5..5] Power Down Switch                                                  */
      __IOM uint32_t DisableVBUS : 1;           /*!< [6..6] Disable VBUS                                                       */
      __IOM uint32_t LnStsChng  : 1;            /*!< [7..7] Line State Change                                                  */
      __IOM uint32_t LineStageChangeMsk : 1;    /*!< [8..8] Line State Change Mask                                             */
      __IOM uint32_t ResetDetected : 1;         /*!< [9..9] Reset Detected                                                     */
      __IOM uint32_t ResetDetMsk : 1;           /*!< [10..10] Reset Detect Mask                                                */
      __IOM uint32_t DisconnectDetect : 1;      /*!< [11..11] Disconnect Detect                                                */
      __IOM uint32_t DisconnectDetectMsk : 1;   /*!< [12..12] Disconnect Detect Mask                                           */
      __IOM uint32_t ConnectDet : 1;            /*!< [13..13] Connect Detect                                                   */
      __IOM uint32_t ConnDetMsk : 1;            /*!< [14..14] Connect Detect Mask                                              */
      __IOM uint32_t SRPDetect  : 1;            /*!< [15..15] SRP Detect                                                       */
      __IOM uint32_t SRPDetectMsk : 1;          /*!< [16..16] SRP Detect Mask                                                  */
      __IOM uint32_t StsChngInt : 1;            /*!< [17..17] Status Change Interrupt                                          */
      __IOM uint32_t StsChngIntMsk : 1;         /*!< [18..18] Status Change Interrupt Mask                                     */
      __IM  uint32_t LineState  : 2;            /*!< [20..19] LineState.                                                       */
      __IM  uint32_t IDDIG      : 1;            /*!< [21..21] Status of signal IDDIG                                           */
      __IM  uint32_t BSessVld   : 1;            /*!< [22..22] B Session Valid                                                  */
      __IOM uint32_t ADPInt     : 1;            /*!< [23..23] ADP Interrupt                                                    */
      __IOM uint32_t MultValIdBC : 5;           /*!< [28..24] MultValIdBC                                                      */
            uint32_t            : 3;
    } GPWRDN_b;
  } ;
  
  union {
    __IOM uint32_t GDFIFOCFG;                   /*!< (@ 0x0000005C) Global DFIFO Configuration Register                        */
    
    struct {
      __IOM uint32_t GDFIFOCfg  : 16;           /*!< [15..0] GDFIFO Configuration                                              */
      __IOM uint32_t EPInfoBaseAddr : 16;       /*!< [31..16] Start address of the EP info controller                          */
    } GDFIFOCFG_b;
  } ;
  
  union {
    __IOM uint32_t GADPCTL;                     /*!< (@ 0x00000060) ADP Timer, Control and Status Register                     */
    
    struct {
      __IOM uint32_t PrbDschg   : 2;            /*!< [1..0] Probe Discharge                                                    */
      __IOM uint32_t PrbDelta   : 2;            /*!< [3..2] Probe Delta                                                        */
      __IOM uint32_t PrbPer     : 2;            /*!< [5..4] Probe Period                                                       */
      __IM  uint32_t RTIM       : 11;           /*!< [16..6] RAMP TIME                                                         */
      __IOM uint32_t EnaPrb     : 1;            /*!< [17..17] Enable Probe                                                     */
      __IOM uint32_t EnaSns     : 1;            /*!< [18..18] Enable Sense                                                     */
      __IOM uint32_t ADPRes     : 1;            /*!< [19..19] ADP Reset                                                        */
      __IOM uint32_t ADPEn      : 1;            /*!< [20..20] ADP Enable                                                       */
      __IOM uint32_t AdpPrbInt  : 1;            /*!< [21..21] ADP Probe Interrupt                                              */
      __IOM uint32_t AdpSnsInt  : 1;            /*!< [22..22] ADP Sense Interrupt                                              */
      __IOM uint32_t AdpToutInt : 1;            /*!< [23..23] ADP Timeout Interrupt                                            */
      __IOM uint32_t AdpPrbIntMsk : 1;          /*!< [24..24] ADP Probe Interrupt Mask                                         */
      __IOM uint32_t AdpSnsIntMsk : 1;          /*!< [25..25] ADP Sense Interrupt Mask                                         */
      __IOM uint32_t AdpToutMsk : 1;            /*!< [26..26] ADP Timeout Interrupt Mask                                       */
      __IOM uint32_t AR         : 2;            /*!< [28..27] Access Request                                                   */
            uint32_t            : 3;
    } GADPCTL_b;
  } ;
  
  union {
    __IOM uint32_t GREFCLK;                     /*!< (@ 0x00000064) ref_clk Control Register                                   */
    
    struct {
      __IOM uint32_t SOF_CNT_WKUP_ALERT : 10;   /*!< [9..0] Number of SOF's for wakeup alert                                   */
            uint32_t            : 4;
      __IOM uint32_t RefclkMode : 1;            /*!< [14..14] Refclk Mode of Operation                                         */
      __IOM uint32_t REFCLKPER  : 17;           /*!< [31..15] Period of ref_clk in terms of pico seconds                       */
    } GREFCLK_b;
  } ;
  
  union {
    __IOM uint32_t GINTMSK2;                    /*!< (@ 0x00000068) Interrupt Mask Register 2                                  */
    
    struct {
      __IOM uint32_t WkUpAlertIntMsk : 1;       /*!< [0..0] Remote WakeUp Alert Interrupt Mask                                 */
            uint32_t            : 31;
    } GINTMSK2_b;
  } ;
  
  union {
    __IOM uint32_t GINTSTS2;                    /*!< (@ 0x0000006C) Interrupt Register 2                                       */
    
    struct {
      __IOM uint32_t WkUpAlertInt : 1;          /*!< [0..0] Remote WakeUp Alert Interrupt                                      */
            uint32_t            : 31;
    } GINTSTS2_b;
  } ;
  __IM  uint32_t  RESERVED[36];
  __IOM uint32_t  HPTXFSIZ;                     /*!< (@ 0x00000100) Host Periodic Transmit FIFO Size Register                  */
  __IOM uint32_t  DIEPTXF[15];                  /*!< (@ 0x00000104) Device IN Endpoint Transmit FIFO Size Register             */
} USB_OTG_CORE_Type;                            /*!< Size = 320 (0x140)                                                        */



/* =========================================================================================================================== */
/* ================                                         USB_HOST                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USB OTG Host Controller (USB_HOST)
  */

typedef struct {                                /*!< (@ 0x40040400) USB_HOST Structure                                         */
  __IOM uint32_t  HCFG;                         /*!< (@ 0x00000000) Host Configuration Register                                */
  __IOM uint32_t  HFIR;                         /*!< (@ 0x00000004) Host Frame Interval Register                               */
  __IM  uint32_t  HFNUM;                        /*!< (@ 0x00000008) Host Frame Number/Frame Time Remaining Register            */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  HPTXSTS;                      /*!< (@ 0x00000010) Host Periodic Transmit FIFO/Queue Status Register          */
  __IM  uint32_t  HAINT;                        /*!< (@ 0x00000014) Host All Channels Interrupt Register                       */
  __IOM uint32_t  HAINTMSK;                     /*!< (@ 0x00000018) Host All Channels Interrupt Mask Register                  */
  __IOM uint32_t  HFLBAddr;                     /*!< (@ 0x0000001C) Host Frame List Base Address Register                      */
  __IM  uint32_t  RESERVED1[8];
  __IOM uint32_t  HPRT;                         /*!< (@ 0x00000040) Host Port Control and Status Register                      */
  __IM  uint32_t  RESERVED2[47];
  __IOM uint32_t  HCCHAR0;                      /*!< (@ 0x00000100) Host Channel 0 Characteristics Register                    */
  __IOM uint32_t  HCSPLT0;                      /*!< (@ 0x00000104) Host Channel 0 Split Control Register                      */
  __IOM uint32_t  HCINT0;                       /*!< (@ 0x00000108) Host Channel 0 Interrupt Register                          */
  __IOM uint32_t  HCINTMSK0;                    /*!< (@ 0x0000010C) Host Channel 0 Interrupt Mask Register                     */
  __IOM uint32_t  HCTSIZ0;                      /*!< (@ 0x00000110) Host Channel 0 Transfer Size Register                      */
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  HCCHAR1;                      /*!< (@ 0x00000120) Host Channel 1 Characteristics Register                    */
  __IOM uint32_t  HCSPLT1;                      /*!< (@ 0x00000124) Host Channel 1 Split Control Register                      */
  __IOM uint32_t  HCINT1;                       /*!< (@ 0x00000128) Host Channel 1 Interrupt Register                          */
  __IOM uint32_t  HCINTMSK1;                    /*!< (@ 0x0000012C) Host Channel 1 Interrupt Mask Register                     */
  __IOM uint32_t  HCTSIZ1;                      /*!< (@ 0x00000130) Host Channel 1 Transfer Size Register                      */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  HCCHAR2;                      /*!< (@ 0x00000140) Host Channel 2 Characteristics Register                    */
  __IOM uint32_t  HCSPLT2;                      /*!< (@ 0x00000144) Host Channel 2 Split Control Register                      */
  __IOM uint32_t  HCINT2;                       /*!< (@ 0x00000148) Host Channel 2 Interrupt Register                          */
  __IOM uint32_t  HCINTMSK2;                    /*!< (@ 0x0000014C) Host Channel 2 Interrupt Mask Register                     */
  __IOM uint32_t  HCTSIZ2;                      /*!< (@ 0x00000150) Host Channel 2 Transfer Size Register                      */
  __IM  uint32_t  RESERVED5[3];
  __IOM uint32_t  HCCHAR3;                      /*!< (@ 0x00000160) Host Channel 3 Characteristics Register                    */
  __IOM uint32_t  HCSPLT3;                      /*!< (@ 0x00000164) Host Channel 3 Split Control Register                      */
  __IOM uint32_t  HCINT3;                       /*!< (@ 0x00000168) Host Channel 3 Interrupt Register                          */
  __IOM uint32_t  HCINTMSK3;                    /*!< (@ 0x0000016C) Host Channel 3 Interrupt Mask Register                     */
  __IOM uint32_t  HCTSIZ3;                      /*!< (@ 0x00000170) Host Channel 3 Transfer Size Register                      */
} USB_OTG_HOST_Type;                            /*!< Size = 372 (0x174)                                                        */



/* =========================================================================================================================== */
/* ================                                        USB_DEVICE                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB OTG Device Controller (USB_DEVICE)
  */

typedef struct {                                /*!< (@ 0x40040800) USB_DEVICE Structure                                       */
  __IOM uint32_t  DCFG;                         /*!< (@ 0x00000000) Device Configuration Register                              */
  __IOM uint32_t  DCTL;                         /*!< (@ 0x00000004) Device Control Register                                    */
  __IOM uint32_t  DSTS;                         /*!< (@ 0x00000008) Device Status Register                                     */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DIEPMSK;                      /*!< (@ 0x00000010) Device IN Endpoint Common Interrupt Mask Register          */
  __IOM uint32_t  DOEPMSK;                      /*!< (@ 0x00000014) Device OUT Endpoint Common Interrupt Mask Register         */
  __IOM uint32_t  DAINT;                        /*!< (@ 0x00000018) Device All Endpoints Interrupt Register                    */
  __IOM uint32_t  DAINTMSK;                     /*!< (@ 0x0000001C) Device All Endpoints Interrupt Mask Register               */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  DVBUSDIS;                     /*!< (@ 0x00000028) Device VBUS Discharge Time Register                        */
  __IOM uint32_t  DVBUSPULSE;                   /*!< (@ 0x0000002C) Device VBUS Pulsing Time Register                          */
  __IOM uint32_t  DTHRCTL;                      /*!< (@ 0x00000030) Device Threshold Control Register                          */
  __IOM uint32_t  DIEPEMPMSK;                   /*!< (@ 0x00000034) Device IN Endpoint FIFO Empty Interrupt Mask
                                                                    Register                                                   */
  __IOM uint32_t  DEACHINT;                     /*!< (@ 0x00000038) Device Each Endpoints Interrupt Register                   */
  __IOM uint32_t  DEACHINTMSK0;                 /*!< (@ 0x0000003C) Device Each Endpoints Interrupt Mask Register              */
  __IOM uint32_t  DIEPTXF[16];                  /*!< (@ 0x00000040) Device Each IN Endpoint Interrupt Registers                */
  __IOM uint32_t  DOEPEACHMSK[16];              /*!< (@ 0x00000080) Device Each OUT Endpoint Interrupt Registers               */
} USB_OTG_DEVICE_Type;                          /*!< Size = 192 (0xc0)                                                         */



/* =========================================================================================================================== */
/* ================                                         USB_IN_EP                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB OTG IN-Endpoint Controller (USB_IN_EP)
  */

typedef struct {                                /*!< (@ 0x40040900) USB_IN_EP Structure                                        */
  __IOM uint32_t  DIEPCTL0;                     /*!< (@ 0x00000000) Device Control IN Endpoint 0 Control Register              */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DIEPINT0;                     /*!< (@ 0x00000008) Device IN Endpoint 0 Interrupt Register                    */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DIEPTSIZ0;                    /*!< (@ 0x00000010) Device IN Endpoint 0 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA0;                     /*!< (@ 0x00000014) Device IN Endpoint 0 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS0;                     /*!< (@ 0x00000018) Device IN Endpoint 0 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB0;                    /*!< (@ 0x0000001C) Device IN Endpoint 0 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL1;                     /*!< (@ 0x00000020) Device Control IN Endpoint 1 Control Register              */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  DIEPINT1;                     /*!< (@ 0x00000028) Device IN Endpoint 1 Interrupt Register                    */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  DIEPTSIZ1;                    /*!< (@ 0x00000030) Device IN Endpoint 1 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA1;                     /*!< (@ 0x00000034) Device IN Endpoint 1 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS1;                     /*!< (@ 0x00000038) Device IN Endpoint 1 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB1;                    /*!< (@ 0x0000003C) Device IN Endpoint 1 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL2;                     /*!< (@ 0x00000040) Device Control IN Endpoint 2 Control Register              */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  DIEPINT2;                     /*!< (@ 0x00000048) Device IN Endpoint 2 Interrupt Register                    */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  DIEPTSIZ2;                    /*!< (@ 0x00000050) Device IN Endpoint 2 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA2;                     /*!< (@ 0x00000054) Device IN Endpoint 2 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS2;                     /*!< (@ 0x00000058) Device IN Endpoint 2 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB2;                    /*!< (@ 0x0000005C) Device IN Endpoint 2 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL3;                     /*!< (@ 0x00000060) Device Control IN Endpoint 3 Control Register              */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  DIEPINT3;                     /*!< (@ 0x00000068) Device IN Endpoint 3 Interrupt Register                    */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  DIEPTSIZ3;                    /*!< (@ 0x00000070) Device IN Endpoint 3 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA3;                     /*!< (@ 0x00000074) Device IN Endpoint 3 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS3;                     /*!< (@ 0x00000078) Device IN Endpoint 3 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB3;                    /*!< (@ 0x0000007C) Device IN Endpoint 3 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL4;                     /*!< (@ 0x00000080) Device Control IN Endpoint 4 Control Register              */
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  DIEPINT4;                     /*!< (@ 0x00000088) Device IN Endpoint 4 Interrupt Register                    */
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  DIEPTSIZ4;                    /*!< (@ 0x00000090) Device IN Endpoint 4 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA4;                     /*!< (@ 0x00000094) Device IN Endpoint 4 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS4;                     /*!< (@ 0x00000098) Device IN Endpoint 4 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB4;                    /*!< (@ 0x0000009C) Device IN Endpoint 4 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL5;                     /*!< (@ 0x000000A0) Device Control IN Endpoint 5 Control Register              */
  __IM  uint32_t  RESERVED10;
  __IOM uint32_t  DIEPINT5;                     /*!< (@ 0x000000A8) Device IN Endpoint 5 Interrupt Register                    */
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  DIEPTSIZ5;                    /*!< (@ 0x000000B0) Device IN Endpoint 5 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA5;                     /*!< (@ 0x000000B4) Device IN Endpoint 5 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS5;                     /*!< (@ 0x000000B8) Device IN Endpoint 5 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB5;                    /*!< (@ 0x000000BC) Device IN Endpoint 5 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL6;                     /*!< (@ 0x000000C0) Device Control IN Endpoint 6 Control Register              */
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  DIEPINT6;                     /*!< (@ 0x000000C8) Device IN Endpoint 6 Interrupt Register                    */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  DIEPTSIZ6;                    /*!< (@ 0x000000D0) Device IN Endpoint 6 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA6;                     /*!< (@ 0x000000D4) Device IN Endpoint 6 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS6;                     /*!< (@ 0x000000D8) Device IN Endpoint 6 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB6;                    /*!< (@ 0x000000DC) Device IN Endpoint 6 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL7;                     /*!< (@ 0x000000E0) Device Control IN Endpoint 7 Control Register              */
  __IM  uint32_t  RESERVED14;
  __IOM uint32_t  DIEPINT7;                     /*!< (@ 0x000000E8) Device IN Endpoint 7 Interrupt Register                    */
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  DIEPTSIZ7;                    /*!< (@ 0x000000F0) Device IN Endpoint 7 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA7;                     /*!< (@ 0x000000F4) Device IN Endpoint 7 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS7;                     /*!< (@ 0x000000F8) Device IN Endpoint 7 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB7;                    /*!< (@ 0x000000FC) Device IN Endpoint 7 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL8;                     /*!< (@ 0x00000100) Device Control IN Endpoint 8 Control Register              */
  __IM  uint32_t  RESERVED16;
  __IOM uint32_t  DIEPINT8;                     /*!< (@ 0x00000108) Device IN Endpoint 8 Interrupt Register                    */
  __IM  uint32_t  RESERVED17;
  __IOM uint32_t  DIEPTSIZ8;                    /*!< (@ 0x00000110) Device IN Endpoint 8 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA8;                     /*!< (@ 0x00000114) Device IN Endpoint 8 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS8;                     /*!< (@ 0x00000118) Device IN Endpoint 8 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB8;                    /*!< (@ 0x0000011C) Device IN Endpoint 8 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL9;                     /*!< (@ 0x00000120) Device Control IN Endpoint 9 Control Register              */
  __IM  uint32_t  RESERVED18;
  __IOM uint32_t  DIEPINT9;                     /*!< (@ 0x00000128) Device IN Endpoint 9 Interrupt Register                    */
  __IM  uint32_t  RESERVED19;
  __IOM uint32_t  DIEPTSIZ9;                    /*!< (@ 0x00000130) Device IN Endpoint 9 Transfer Size Register                */
  __IOM uint32_t  DIEPDMA9;                     /*!< (@ 0x00000134) Device IN Endpoint 9 DMA Address Register                  */
  __IM  uint32_t  DTXFSTS9;                     /*!< (@ 0x00000138) Device IN Endpoint 9 Transmit FIFO Status Register         */
  __IOM uint32_t  DIEPDMAB9;                    /*!< (@ 0x0000013C) Device IN Endpoint 9 Buffer Address Register               */
  __IOM uint32_t  DIEPCTL10;                    /*!< (@ 0x00000140) Device Control IN Endpoint 10 Control Register             */
  __IM  uint32_t  RESERVED20;
  __IOM uint32_t  DIEPINT10;                    /*!< (@ 0x00000148) Device IN Endpoint 10 Interrupt Register                   */
  __IM  uint32_t  RESERVED21;
  __IOM uint32_t  DIEPTSIZ10;                   /*!< (@ 0x00000150) Device IN Endpoint 10 Transfer Size Register               */
  __IOM uint32_t  DIEPDMA10;                    /*!< (@ 0x00000154) Device IN Endpoint 10 DMA Address Register                 */
  __IM  uint32_t  DTXFSTS10;                    /*!< (@ 0x00000158) Device IN Endpoint 10 Transmit FIFO Status Register        */
  __IOM uint32_t  DIEPDMAB10;                   /*!< (@ 0x0000015C) Device IN Endpoint 10 Buffer Address Register              */
  __IOM uint32_t  DIEPCTL11;                    /*!< (@ 0x00000160) Device Control IN Endpoint 11 Control Register             */
  __IM  uint32_t  RESERVED22;
  __IOM uint32_t  DIEPINT11;                    /*!< (@ 0x00000168) Device IN Endpoint 11 Interrupt Register                   */
  __IM  uint32_t  RESERVED23;
  __IOM uint32_t  DIEPTSIZ11;                   /*!< (@ 0x00000170) Device IN Endpoint 11 Transfer Size Register               */
  __IOM uint32_t  DIEPDMA11;                    /*!< (@ 0x00000174) Device IN Endpoint 11 DMA Address Register                 */
  __IM  uint32_t  DTXFSTS11;                    /*!< (@ 0x00000178) Device IN Endpoint 11 Transmit FIFO Status Register        */
  __IOM uint32_t  DIEPDMAB11;                   /*!< (@ 0x0000017C) Device IN Endpoint 11 Buffer Address Register              */
  __IOM uint32_t  DIEPCTL12;                    /*!< (@ 0x00000180) Device Control IN Endpoint 12 Control Register             */
  __IM  uint32_t  RESERVED24;
  __IOM uint32_t  DIEPINT12;                    /*!< (@ 0x00000188) Device IN Endpoint 12 Interrupt Register                   */
  __IM  uint32_t  RESERVED25;
  __IOM uint32_t  DIEPTSIZ12;                   /*!< (@ 0x00000190) Device IN Endpoint 12 Transfer Size Register               */
  __IOM uint32_t  DIEPDMA12;                    /*!< (@ 0x00000194) Device IN Endpoint 12 DMA Address Register                 */
  __IM  uint32_t  DTXFSTS12;                    /*!< (@ 0x00000198) Device IN Endpoint 12 Transmit FIFO Status Register        */
  __IOM uint32_t  DIEPDMAB12;                   /*!< (@ 0x0000019C) Device IN Endpoint 12 Buffer Address Register              */
  __IOM uint32_t  DIEPCTL13;                    /*!< (@ 0x000001A0) Device Control IN Endpoint 13 Control Register             */
  __IM  uint32_t  RESERVED26;
  __IOM uint32_t  DIEPINT13;                    /*!< (@ 0x000001A8) Device IN Endpoint 13 Interrupt Register                   */
  __IM  uint32_t  RESERVED27;
  __IOM uint32_t  DIEPTSIZ13;                   /*!< (@ 0x000001B0) Device IN Endpoint 13 Transfer Size Register               */
  __IOM uint32_t  DIEPDMA13;                    /*!< (@ 0x000001B4) Device IN Endpoint 13 DMA Address Register                 */
  __IM  uint32_t  DTXFSTS13;                    /*!< (@ 0x000001B8) Device IN Endpoint 13 Transmit FIFO Status Register        */
  __IOM uint32_t  DIEPDMAB13;                   /*!< (@ 0x000001BC) Device IN Endpoint 13 Buffer Address Register              */
  __IOM uint32_t  DIEPCTL14;                    /*!< (@ 0x000001C0) Device Control IN Endpoint 14 Control Register             */
  __IM  uint32_t  RESERVED28;
  __IOM uint32_t  DIEPINT14;                    /*!< (@ 0x000001C8) Device IN Endpoint 14 Interrupt Register                   */
  __IM  uint32_t  RESERVED29;
  __IOM uint32_t  DIEPTSIZ14;                   /*!< (@ 0x000001D0) Device IN Endpoint 14 Transfer Size Register               */
  __IOM uint32_t  DIEPDMA14;                    /*!< (@ 0x000001D4) Device IN Endpoint 14 DMA Address Register                 */
  __IM  uint32_t  DTXFSTS14;                    /*!< (@ 0x000001D8) Device IN Endpoint 14 Transmit FIFO Status Register        */
  __IOM uint32_t  DIEPDMAB14;                   /*!< (@ 0x000001DC) Device IN Endpoint 14 Buffer Address Register              */
  __IOM uint32_t  DIEPCTL15;                    /*!< (@ 0x000001E0) Device Control IN Endpoint 15 Control Register             */
  __IM  uint32_t  RESERVED30;
  __IOM uint32_t  DIEPINT15;                    /*!< (@ 0x000001E8) Device IN Endpoint 15 Interrupt Register                   */
  __IM  uint32_t  RESERVED31;
  __IOM uint32_t  DIEPTSIZ15;                   /*!< (@ 0x000001F0) Device IN Endpoint 15 Transfer Size Register               */
  __IOM uint32_t  DIEPDMA15;                    /*!< (@ 0x000001F4) Device IN Endpoint 15 DMA Address Register                 */
  __IM  uint32_t  DTXFSTS15;                    /*!< (@ 0x000001F8) Device IN Endpoint 15 Transmit FIFO Status Register        */
  __IOM uint32_t  DIEPDMAB15;                   /*!< (@ 0x000001FC) Device IN Endpoint 15 Buffer Address Register              */
} USB_OTG_IN_EP_Type;                           /*!< Size = 512 (0x200)                                                        */



/* =========================================================================================================================== */
/* ================                                        USB_OUT_EP                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief USB OTG Out-Endpoint Controller (USB_OUT_EP)
  */

typedef struct {                                /*!< (@ 0x40040B00) USB_OUT_EP Structure                                       */
  __IOM uint32_t  DOEPCTL0;                     /*!< (@ 0x00000000) Device Control OUT Endpoint 0 Control Register             */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DOEPINT0;                     /*!< (@ 0x00000008) Device OUT Endpoint 0 Interrupt Register                   */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DOEPTSIZ0;                    /*!< (@ 0x00000010) Device OUT Endpoint 0 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA0;                     /*!< (@ 0x00000014) Device OUT Endpoint 0 DMA Address Register                 */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  DOEPDMAB0;                    /*!< (@ 0x0000001C) Device OUT Endpoint 0 DMA Buffer Address Register          */
  __IOM uint32_t  DOEPCTL1;                     /*!< (@ 0x00000020) Device Control OUT Endpoint 1 Control Register             */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  DOEPINT1;                     /*!< (@ 0x00000028) Device OUT Endpoint 1 Interrupt Register                   */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  DOEPTSIZ1;                    /*!< (@ 0x00000030) Device OUT Endpoint 1 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA1;                     /*!< (@ 0x00000034) Device OUT Endpoint 1 DMA Address Register                 */
  __IM  uint32_t  RESERVED5;
  __IM  uint32_t  DOEPDMAB1;                    /*!< (@ 0x0000003C) Device OUT Endpoint 1 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL2;                     /*!< (@ 0x00000040) Device Control OUT Endpoint 2 Control Register             */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  DOEPINT2;                     /*!< (@ 0x00000048) Device OUT Endpoint 2 Interrupt Register                   */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  DOEPTSIZ2;                    /*!< (@ 0x00000050) Device OUT Endpoint 2 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA2;                     /*!< (@ 0x00000054) Device OUT Endpoint 2 DMA Address Register                 */
  __IM  uint32_t  RESERVED8;
  __IM  uint32_t  DOEPDMAB2;                    /*!< (@ 0x0000005C) Device OUT Endpoint 2 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL3;                     /*!< (@ 0x00000060) Device Control OUT Endpoint 3 Control Register             */
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  DOEPINT3;                     /*!< (@ 0x00000068) Device OUT Endpoint 3 Interrupt Register                   */
  __IM  uint32_t  RESERVED10;
  __IOM uint32_t  DOEPTSIZ3;                    /*!< (@ 0x00000070) Device OUT Endpoint 3 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA3;                     /*!< (@ 0x00000074) Device OUT Endpoint 3 DMA Address Register                 */
  __IM  uint32_t  RESERVED11;
  __IM  uint32_t  DOEPDMAB3;                    /*!< (@ 0x0000007C) Device OUT Endpoint 3 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL4;                     /*!< (@ 0x00000080) Device Control OUT Endpoint 4 Control Register             */
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  DOEPINT4;                     /*!< (@ 0x00000088) Device OUT Endpoint 4 Interrupt Register                   */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  DOEPTSIZ4;                    /*!< (@ 0x00000090) Device OUT Endpoint 4 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA4;                     /*!< (@ 0x00000094) Device OUT Endpoint 4 DMA Address Register                 */
  __IM  uint32_t  RESERVED14;
  __IM  uint32_t  DOEPDMAB4;                    /*!< (@ 0x0000009C) Device OUT Endpoint 4 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL5;                     /*!< (@ 0x000000A0) Device Control OUT Endpoint 5 Control Register             */
  __IM  uint32_t  RESERVED15;
  __IOM uint32_t  DOEPINT5;                     /*!< (@ 0x000000A8) Device OUT Endpoint 5 Interrupt Register                   */
  __IM  uint32_t  RESERVED16;
  __IOM uint32_t  DOEPTSIZ5;                    /*!< (@ 0x000000B0) Device OUT Endpoint 5 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA5;                     /*!< (@ 0x000000B4) Device OUT Endpoint 5 DMA Address Register                 */
  __IM  uint32_t  RESERVED17;
  __IM  uint32_t  DOEPDMAB5;                    /*!< (@ 0x000000BC) Device OUT Endpoint 5 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL6;                     /*!< (@ 0x000000C0) Device Control OUT Endpoint 6 Control Register             */
  __IM  uint32_t  RESERVED18;
  __IOM uint32_t  DOEPINT6;                     /*!< (@ 0x000000C8) Device OUT Endpoint 6 Interrupt Register                   */
  __IM  uint32_t  RESERVED19;
  __IOM uint32_t  DOEPTSIZ6;                    /*!< (@ 0x000000D0) Device OUT Endpoint 6 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA6;                     /*!< (@ 0x000000D4) Device OUT Endpoint 6 DMA Address Register                 */
  __IM  uint32_t  RESERVED20;
  __IM  uint32_t  DOEPDMAB6;                    /*!< (@ 0x000000DC) Device OUT Endpoint 6 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL7;                     /*!< (@ 0x000000E0) Device Control OUT Endpoint 7 Control Register             */
  __IM  uint32_t  RESERVED21;
  __IOM uint32_t  DOEPINT7;                     /*!< (@ 0x000000E8) Device OUT Endpoint 7 Interrupt Register                   */
  __IM  uint32_t  RESERVED22;
  __IOM uint32_t  DOEPTSIZ7;                    /*!< (@ 0x000000F0) Device OUT Endpoint 7 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA7;                     /*!< (@ 0x000000F4) Device OUT Endpoint 7 DMA Address Register                 */
  __IM  uint32_t  RESERVED23;
  __IM  uint32_t  DOEPDMAB7;                    /*!< (@ 0x000000FC) Device OUT Endpoint 7 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL8;                     /*!< (@ 0x00000100) Device Control OUT Endpoint 8 Control Register             */
  __IM  uint32_t  RESERVED24;
  __IOM uint32_t  DOEPINT8;                     /*!< (@ 0x00000108) Device OUT Endpoint 8 Interrupt Register                   */
  __IM  uint32_t  RESERVED25;
  __IOM uint32_t  DOEPTSIZ8;                    /*!< (@ 0x00000110) Device OUT Endpoint 8 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA8;                     /*!< (@ 0x00000114) Device OUT Endpoint 8 DMA Address Register                 */
  __IM  uint32_t  RESERVED26;
  __IM  uint32_t  DOEPDMAB8;                    /*!< (@ 0x0000011C) Device OUT Endpoint 8 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL9;                     /*!< (@ 0x00000120) Device Control OUT Endpoint 9 Control Register             */
  __IM  uint32_t  RESERVED27;
  __IOM uint32_t  DOEPINT9;                     /*!< (@ 0x00000128) Device OUT Endpoint 9 Interrupt Register                   */
  __IM  uint32_t  RESERVED28;
  __IOM uint32_t  DOEPTSIZ9;                    /*!< (@ 0x00000130) Device OUT Endpoint 9 Transfer Size Register               */
  __IOM uint32_t  DOEPDMA9;                     /*!< (@ 0x00000134) Device OUT Endpoint 9 DMA Address Register                 */
  __IM  uint32_t  RESERVED29;
  __IM  uint32_t  DOEPDMAB9;                    /*!< (@ 0x0000013C) Device OUT Endpoint 9 Buffer Address Register              */
  __IOM uint32_t  DOEPCTL10;                    /*!< (@ 0x00000140) Device Control OUT Endpoint 10 Control Register            */
  __IM  uint32_t  RESERVED30;
  __IOM uint32_t  DOEPINT10;                    /*!< (@ 0x00000148) Device OUT Endpoint 10 Interrupt Register                  */
  __IM  uint32_t  RESERVED31;
  __IOM uint32_t  DOEPTSIZ10;                   /*!< (@ 0x00000150) Device OUT Endpoint 10 Transfer Size Register              */
  __IOM uint32_t  DOEPDMA10;                    /*!< (@ 0x00000154) Device OUT Endpoint 10 DMA Address Register                */
  __IM  uint32_t  RESERVED32;
  __IM  uint32_t  DOEPDMAB10;                   /*!< (@ 0x0000015C) Device OUT Endpoint 10 Buffer Address Register             */
  __IOM uint32_t  DOEPCTL11;                    /*!< (@ 0x00000160) Device Control OUT Endpoint 11 Control Register            */
  __IM  uint32_t  RESERVED33;
  __IOM uint32_t  DOEPINT11;                    /*!< (@ 0x00000168) Device OUT Endpoint 11 Interrupt Register                  */
  __IM  uint32_t  RESERVED34;
  __IOM uint32_t  DOEPTSIZ11;                   /*!< (@ 0x00000170) Device OUT Endpoint 11 Transfer Size Register              */
  __IOM uint32_t  DOEPDMA11;                    /*!< (@ 0x00000174) Device OUT Endpoint 11 DMA Address Register                */
  __IM  uint32_t  RESERVED35;
  __IM  uint32_t  DOEPDMAB11;                   /*!< (@ 0x0000017C) Device OUT Endpoint 11 Buffer Address Register             */
  __IOM uint32_t  DOEPCTL12;                    /*!< (@ 0x00000180) Device Control OUT Endpoint 12 Control Register            */
  __IM  uint32_t  RESERVED36;
  __IOM uint32_t  DOEPINT12;                    /*!< (@ 0x00000188) Device OUT Endpoint 12 Interrupt Register                  */
  __IM  uint32_t  RESERVED37;
  __IOM uint32_t  DOEPTSIZ12;                   /*!< (@ 0x00000190) Device OUT Endpoint 12 Transfer Size Register              */
  __IOM uint32_t  DOEPDMA12;                    /*!< (@ 0x00000194) Device OUT Endpoint 12 DMA Address Register                */
  __IM  uint32_t  RESERVED38;
  __IM  uint32_t  DOEPDMAB12;                   /*!< (@ 0x0000019C) Device OUT Endpoint 12 Buffer Address Register             */
  __IOM uint32_t  DOEPCTL13;                    /*!< (@ 0x000001A0) Device Control OUT Endpoint 13 Control Register            */
  __IM  uint32_t  RESERVED39;
  __IOM uint32_t  DOEPINT13;                    /*!< (@ 0x000001A8) Device OUT Endpoint 13 Interrupt Register                  */
  __IM  uint32_t  RESERVED40;
  __IOM uint32_t  DOEPTSIZ13;                   /*!< (@ 0x000001B0) Device OUT Endpoint 13 Transfer Size Register              */
  __IOM uint32_t  DOEPDMA13;                    /*!< (@ 0x000001B4) Device OUT Endpoint 13 DMA Address Register                */
  __IM  uint32_t  RESERVED41;
  __IM  uint32_t  DOEPDMAB13;                   /*!< (@ 0x000001BC) Device OUT Endpoint 13 Buffer Address Register             */
  __IOM uint32_t  DOEPCTL14;                    /*!< (@ 0x000001C0) Device Control OUT Endpoint 14 Control Register            */
  __IM  uint32_t  RESERVED42;
  __IOM uint32_t  DOEPINT14;                    /*!< (@ 0x000001C8) Device OUT Endpoint 14 Interrupt Register                  */
  __IM  uint32_t  RESERVED43;
  __IOM uint32_t  DOEPTSIZ14;                   /*!< (@ 0x000001D0) Device OUT Endpoint 14 Transfer Size Register              */
  __IOM uint32_t  DOEPDMA14;                    /*!< (@ 0x000001D4) Device OUT Endpoint 14 DMA Address Register                */
  __IM  uint32_t  RESERVED44;
  __IM  uint32_t  DOEPDMAB14;                   /*!< (@ 0x000001DC) Device OUT Endpoint 14 Buffer Address Register             */
  __IOM uint32_t  DOEPCTL15;                    /*!< (@ 0x000001E0) Device Control OUT Endpoint 15 Control Register            */
  __IM  uint32_t  RESERVED45;
  __IOM uint32_t  DOEPINT15;                    /*!< (@ 0x000001E8) Device OUT Endpoint 15 Interrupt Register                  */
  __IM  uint32_t  RESERVED46;
  __IOM uint32_t  DOEPTSIZ15;                   /*!< (@ 0x000001F0) Device OUT Endpoint 15 Transfer Size Register              */
  __IOM uint32_t  DOEPDMA15;                    /*!< (@ 0x000001F4) Device OUT Endpoint 15 DMA Address Register                */
  __IM  uint32_t  RESERVED47;
  __IM  uint32_t  DOEPDMAB15;                   /*!< (@ 0x000001FC) Device OUT Endpoint 15 Buffer Address Register             */
} USB_OTG_OUT_EP_Type;                          /*!< Size = 512 (0x200)                                                        */



/* =========================================================================================================================== */
/* ================                                          SYSTEM                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Controller (SYSTEM)
  */

typedef struct {                                /*!< (@ 0x40100000) SYSTEM Structure                                           */
  
  union {
    __IOM uint32_t PERICLKPWRTOP;               /*!< (@ 0x00000000) Peripheral Power Clock Control Register 0                  */
    
    struct {
      __IOM uint32_t USB_DPHY_TOP : 1;          /*!< [0..0] USB DPHY Clock Power Control                                       */
      __IOM uint32_t GPIO_TOP   : 1;            /*!< [1..1] IO Clock Power Control                                             */
      __IOM uint32_t RC24MREF_TOP : 1;          /*!< [2..2] RC 24M Ref Clock Power Control                                     */
      __IOM uint32_t RC24MCAL_TOP : 1;          /*!< [3..3] RC 24M Cal Clock Power Control                                     */
      __IOM uint32_t TACHO_TOP  : 1;            /*!< [4..4] Tachometer Clock Power Control                                     */
      __IOM uint32_t RC32KREF_TOP : 1;          /*!< [5..5] RC 32K Ref Clock Power Control                                     */
      __IOM uint32_t RC32KCAL_TOP : 1;          /*!< [6..6] RC 32K Cal Clock Power Control                                     */
      __IOM uint32_t WDT_TOP    : 1;            /*!< [7..7] Watchdog Timer Clock Power Control                                 */
      __IOM uint32_t PWM_TOP    : 1;            /*!< [8..8] PWM Clock Power Control                                            */
      __IOM uint32_t TMR_TOP    : 1;            /*!< [9..9] Timer Clock Power Control                                          */
      __IOM uint32_t CRC_TOP    : 1;            /*!< [10..10] CRC Clock Power Control                                          */
      __IOM uint32_t MATRIX_TOP : 1;            /*!< [11..11] Matrix Clock Power Control                                       */
      __IOM uint32_t UART_TOP   : 1;            /*!< [12..12] UART Clock Power Control                                         */
      __IOM uint32_t ADC_TOP    : 1;            /*!< [13..13] ADC Clock Power Control                                          */
      __IOM uint32_t STRIP_TOP  : 1;            /*!< [14..14] Strip Clock Power Control                                        */
      __IOM uint32_t I2C_TOP    : 1;            /*!< [15..15] I2C Clock Power Control                                          */
      __IOM uint32_t SPIS_TOP   : 1;            /*!< [16..16] SPI Slave Clock Power Control                                    */
      __IOM uint32_t SPIM_TOP   : 1;            /*!< [17..17] SPI Master Clock Power Control                                   */
      __IOM uint32_t I3C_TOP    : 1;            /*!< [18..18] I3C Clock Power Control                                          */
      __IOM uint32_t APB_TOP    : 1;            /*!< [19..19] APB Clock Power Control                                          */
      __IOM uint32_t USB_TOP    : 1;            /*!< [20..20] USB Clock Power Control                                          */
      __IOM uint32_t SYS_TOP    : 1;            /*!< [21..21] System Clock Power Control                                       */
            uint32_t            : 8;
      __IOM uint32_t SOFTRST_GATING : 1;        /*!< [30..30] Software Reset External Gating                                   */
      __IOM uint32_t SOFTRST    : 1;            /*!< [31..31] Software Reset (Write 1 to Clear)                                */
    } PERICLKPWRTOP_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKSEL0;                 /*!< (@ 0x00000004) PERICLKSEL0 register                                       */
    
    struct {
      __IOM uint32_t TACH_SRC   : 2;            /*!< [1..0] TACH Clock Source Select                                           */
      __IOM uint32_t TMR_SRC    : 2;            /*!< [3..2] TMR Clock Source Select                                            */
      __IOM uint32_t CRC_SRC    : 2;            /*!< [5..4] CRC Source Select                                                  */
      __IOM uint32_t MATRIX_SRC : 2;            /*!< [7..6] Dot Matrix LED Clock Source Select                                 */
      __IOM uint32_t UART_SRC   : 2;            /*!< [9..8] UART Clock Source Select                                           */
      __IOM uint32_t ADC_SRC    : 2;            /*!< [11..10] ADC Clock Source Select                                          */
      __IOM uint32_t STRIP      : 2;            /*!< [13..12] STRIP Clock Source Select                                        */
      __IOM uint32_t I2C_SRC    : 2;            /*!< [15..14] I2C Clock Source Select                                          */
      __IOM uint32_t SPIS_SRC   : 2;            /*!< [17..16] SPI Slave Clock Source Select                                    */
      __IOM uint32_t SPIM_SRC   : 2;            /*!< [19..18] SPI Master Clock Source Select                                   */
      __IOM uint32_t PWM_SRC    : 2;            /*!< [21..20] PWM Clock Source Select                                          */
      __IOM uint32_t APB_SRC    : 2;            /*!< [23..22] Async Bus Clock Source Select                                    */
      __IOM uint32_t SYS_SRC    : 2;            /*!< [25..24] System Clock Source Select                                       */
            uint32_t            : 6;
    } PERICLKSEL0_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKPWR0;                 /*!< (@ 0x00000008) Peripheral Clock Power Control Register 0                  */
    
    struct {
      __IOM uint32_t STRIP0_IP  : 1;            /*!< [0..0] STRIP0 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t STRIP1_IP  : 1;            /*!< [1..1] STRIP1 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t STRIP2_IP  : 1;            /*!< [2..2] STRIP2 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t STRIP3_IP  : 1;            /*!< [3..3] STRIP3 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t STRIP4_IP  : 1;            /*!< [4..4] STRIP4 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t STRIP5_IP  : 1;            /*!< [5..5] STRIP5 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t STRIP6_IP  : 1;            /*!< [6..6] STRIP6 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t STRIP7_IP  : 1;            /*!< [7..7] STRIP7 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t STRIP8_IP  : 1;            /*!< [8..8] STRIP8 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t I2C0_IP    : 1;            /*!< [9..9] I2C0 clock enable: 0=Disable, 1=Enable                             */
      __IOM uint32_t I2C1_IP    : 1;            /*!< [10..10] I2C1 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t I2C2_IP    : 1;            /*!< [11..11] I2C2 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t I2CDBG_IP  : 1;            /*!< [12..12] I2C Debug clock enable: 0=Disable, 1=Enable                      */
      __IOM uint32_t SWD_IP     : 1;            /*!< [13..13] SWD clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t SPIS_IP    : 1;            /*!< [14..14] SPIS clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t SPIM_IP    : 1;            /*!< [15..15] SPIM clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t I3C_IP     : 1;            /*!< [16..16] I3C clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t USB_IP     : 1;            /*!< [17..17] USB clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t EXTR_SPIC_IP : 1;          /*!< [18..18] EXTR SPIC clock enable: 0=Disable, 1=Enable                      */
      __IOM uint32_t INTR_SPIC_IP : 1;          /*!< [19..19] INTR SPIC clock enable: 0=Disable, 1=Enable                      */
      __IOM uint32_t DMA_IP     : 1;            /*!< [20..20] DMA clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t CPU_IP     : 1;            /*!< [21..21] CPU clock enable: 0=Disable, 1=Enable                            */
            uint32_t            : 10;
    } PERICLKPWR0_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKPWR1;                 /*!< (@ 0x0000000C) Peripheral Clock Power Control Register 1                  */
    
    struct {
      __IOM uint32_t RC24REF_IP : 1;            /*!< [0..0] RC24REF clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t RC24CAL_IP : 1;            /*!< [1..1] RC24CAL clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t RC32REF_IP : 1;            /*!< [2..2] RC32REF clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t RC32CAL_IP : 1;            /*!< [3..3] RC32CAL clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t TACHO0_IP  : 1;            /*!< [4..4] TACHO0 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TACHO1_IP  : 1;            /*!< [5..5] TACHO1 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TACHO2_IP  : 1;            /*!< [6..6] TACHO2 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TACHO3_IP  : 1;            /*!< [7..7] TACHO3 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TMR0_IP    : 1;            /*!< [8..8] TMR0 clock enable: 0=Disable, 1=Enable                             */
      __IOM uint32_t TMR1_IP    : 1;            /*!< [9..9] TMR1 clock enable: 0=Disable, 1=Enable                             */
      __IOM uint32_t TMR2_IP    : 1;            /*!< [10..10] TMR2 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TMR3_IP    : 1;            /*!< [11..11] TMR3 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t USB_DPHY_IP : 1;           /*!< [12..12] USB_DPHY clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t GPIO_IP    : 1;            /*!< [13..13] IO clock enable: 0=Disable, 1=Enable                             */
      __IOM uint32_t WDT_IP     : 1;            /*!< [14..14] WDT clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t UART_IP    : 1;            /*!< [15..15] URAT clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t ADC_IP     : 1;            /*!< [16..16] ADC clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t CRC_IP     : 1;            /*!< [17..17] CRC clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t MATRIX_IP  : 1;            /*!< [18..18] MATRIX clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t EFUSE_IP   : 1;            /*!< [19..19] EFUSE clock enable: 0=Disable, 1=Enable                          */
            uint32_t            : 12;
    } PERICLKPWR1_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKPWR2;                 /*!< (@ 0x00000010) Peripheral Clock Power Control Register 2                  */
    
    struct {
      __IOM uint32_t LEDPWM0_IP : 1;            /*!< [0..0] LEDPWM0 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM1_IP : 1;            /*!< [1..1] LEDPWM1 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM2_IP : 1;            /*!< [2..2] LEDPWM2 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM3_IP : 1;            /*!< [3..3] LEDPWM3 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM4_IP : 1;            /*!< [4..4] LEDPWM4 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM5_IP : 1;            /*!< [5..5] LEDPWM5 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM6_IP : 1;            /*!< [6..6] LEDPWM6 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM7_IP : 1;            /*!< [7..7] LEDPWM7 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM8_IP : 1;            /*!< [8..8] LEDPWM8 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM9_IP : 1;            /*!< [9..9] LEDPWM9 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM10_IP : 1;           /*!< [10..10] LEDPWM10 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM11_IP : 1;           /*!< [11..11] LEDPWM11 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM12_IP : 1;           /*!< [12..12] LEDPWM12 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM13_IP : 1;           /*!< [13..13] LEDPWM13 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM14_IP : 1;           /*!< [14..14] LEDPWM14 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM15_IP : 1;           /*!< [15..15] LEDPWM15 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM16_IP : 1;           /*!< [16..16] LEDPWM16 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM17_IP : 1;           /*!< [17..17] LEDPWM17 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM18_IP : 1;           /*!< [18..18] LEDPWM18 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM19_IP : 1;           /*!< [19..19] LEDPWM19 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM20_IP : 1;           /*!< [20..20] LEDPWM20 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM21_IP : 1;           /*!< [21..21] LEDPWM21 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM22_IP : 1;           /*!< [22..22] LEDPWM22 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM23_IP : 1;           /*!< [23..23] LEDPWM23 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM24_IP : 1;           /*!< [24..24] LEDPWM24 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM25_IP : 1;           /*!< [25..25] LEDPWM25 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM26_IP : 1;           /*!< [26..26] LEDPWM26 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM27_IP : 1;           /*!< [27..27] LEDPWM27 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM28_IP : 1;           /*!< [28..28] LEDPWM28 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM29_IP : 1;           /*!< [29..29] LEDPWM29 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM30_IP : 1;           /*!< [30..30] LEDPWM30 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM31_IP : 1;           /*!< [31..31] LEDPWM31 clock enable: 0=Disable, 1=Enable                       */
    } PERICLKPWR2_b;
  } ;
  
  union {
    __IOM uint32_t APBCLKPWR0;                  /*!< (@ 0x00000014) APB Clock Power Control Register 0                         */
    
    struct {
      __IOM uint32_t TACHO0_APB : 1;            /*!< [0..0] TACHO0 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TACHO1_APB : 1;            /*!< [1..1] TACHO1 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TACHO2_APB : 1;            /*!< [2..2] TACHO2 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TACHO3_APB : 1;            /*!< [3..3] TACHO3 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t TMR0_APB   : 1;            /*!< [4..4] TMR0 clock enable: 0=Disable, 1=Enable                             */
      __IOM uint32_t TMR1_APB   : 1;            /*!< [5..5] TMR1 clock enable: 0=Disable, 1=Enable                             */
      __IOM uint32_t TMR2_APB   : 1;            /*!< [6..6] TMR2 clock enable: 0=Disable, 1=Enable                             */
      __IOM uint32_t TMR3_APB   : 1;            /*!< [7..7] TMR3 clock enable: 0=Disable, 1=Enable                             */
      __IOM uint32_t GPIO_APB   : 1;            /*!< [8..8] IO clock enable: 0=Disable, 1=Enable                               */
      __IOM uint32_t WDT_APB    : 1;            /*!< [9..9] WDT clock enable: 0=Disable, 1=Enable                              */
      __IOM uint32_t UART_APB   : 1;            /*!< [10..10] UART clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t ADC_APB    : 1;            /*!< [11..11] ADC clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t STRIP0_APB : 1;            /*!< [12..12] STRIP0 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t STRIP1_APB : 1;            /*!< [13..13] STRIP1 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t STRIP2_APB : 1;            /*!< [14..14] STRIP2 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t STRIP3_APB : 1;            /*!< [15..15] STRIP3 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t STRIP4_APB : 1;            /*!< [16..16] STRIP4 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t STRIP5_APB : 1;            /*!< [17..17] STRIP5 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t STRIP6_APB : 1;            /*!< [18..18] STRIP6 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t STRIP7_APB : 1;            /*!< [19..19] STRIP7 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t STRIP8_APB : 1;            /*!< [20..20] STRIP8 clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t I2C0_APB   : 1;            /*!< [21..21] I2C0 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t I2C1_APB   : 1;            /*!< [22..22] I2C1 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t I2C2_APB   : 1;            /*!< [23..23] I2C2 clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t I2CDBG_APB : 1;            /*!< [24..24] I2C Debug clock enable: 0=Disable, 1=Enable                      */
      __IOM uint32_t SPIS_APB   : 1;            /*!< [25..25] SPIS clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t SPIM_APB   : 1;            /*!< [26..26] SPIM clock enable: 0=Disable, 1=Enable                           */
      __IOM uint32_t CRC_APB    : 1;            /*!< [27..27] CRC clock enable: 0=Disable, 1=Enable                            */
      __IOM uint32_t MATRIX_APB : 1;            /*!< [28..28] MATRIX clock enable: 0=Disable, 1=Enable                         */
      __IOM uint32_t USB_APB    : 1;            /*!< [29..29] USB clock enable: 0=Disable, 1=Enable                            */
            uint32_t            : 2;
    } APBCLKPWR0_b;
  } ;
  
  union {
    __IOM uint32_t APBCLKPWR1;                  /*!< (@ 0x00000018) APB Clock Power Control Register 1                         */
    
    struct {
      __IOM uint32_t LEDPWM0_APB : 1;           /*!< [0..0] LEDPWM0 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM1_APB : 1;           /*!< [1..1] LEDPWM1 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM2_APB : 1;           /*!< [2..2] LEDPWM2 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM3_APB : 1;           /*!< [3..3] LEDPWM3 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM4_APB : 1;           /*!< [4..4] LEDPWM4 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM5_APB : 1;           /*!< [5..5] LEDPWM5 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM6_APB : 1;           /*!< [6..6] LEDPWM6 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM7_APB : 1;           /*!< [7..7] LEDPWM7 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM8_APB : 1;           /*!< [8..8] LEDPWM8 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM9_APB : 1;           /*!< [9..9] LEDPWM9 clock enable: 0=Disable, 1=Enable                          */
      __IOM uint32_t LEDPWM10_APB : 1;          /*!< [10..10] LEDPWM10 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM11_APB : 1;          /*!< [11..11] LEDPWM11 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM12_APB : 1;          /*!< [12..12] LEDPWM12 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM13_APB : 1;          /*!< [13..13] LEDPWM13 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM14_APB : 1;          /*!< [14..14] LEDPWM14 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM15_APB : 1;          /*!< [15..15] LEDPWM15 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM16_APB : 1;          /*!< [16..16] LEDPWM16 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM17_APB : 1;          /*!< [17..17] LEDPWM17 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM18_APB : 1;          /*!< [18..18] LEDPWM18 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM19_APB : 1;          /*!< [19..19] LEDPWM19 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM20_APB : 1;          /*!< [20..20] LEDPWM20 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM21_APB : 1;          /*!< [21..21] LEDPWM21 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM22_APB : 1;          /*!< [22..22] LEDPWM22 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM23_APB : 1;          /*!< [23..23] LEDPWM23 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM24_APB : 1;          /*!< [24..24] LEDPWM24 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM25_APB : 1;          /*!< [25..25] LEDPWM25 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM26_APB : 1;          /*!< [26..26] LEDPWM26 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM27_APB : 1;          /*!< [27..27] LEDPWM27 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM28_APB : 1;          /*!< [28..28] LEDPWM28 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM29_APB : 1;          /*!< [29..29] LEDPWM29 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM30_APB : 1;          /*!< [30..30] LEDPWM30 clock enable: 0=Disable, 1=Enable                       */
      __IOM uint32_t LEDPWM31_APB : 1;          /*!< [31..31] LEDPWM31 clock enable: 0=Disable, 1=Enable                       */
    } APBCLKPWR1_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKSEL1;                 /*!< (@ 0x0000001C) Clock Source Select for CTS1 IP                            */
    
    struct {
      __IOM uint32_t SPIS_IP_SRC : 2;           /*!< [1..0] SPI Slave IP 0 Clock Source Select                                 */
      __IOM uint32_t SPIS_APB_SRC : 1;          /*!< [2..2] SPI Slave IP 0 Async Bus Clock Source Select                       */
            uint32_t            : 1;
      __IOM uint32_t SPIM_IP_SRC : 2;           /*!< [5..4] SPI Master IP 0 Clock Source Select                                */
      __IOM uint32_t SPIM_APB_SRC : 1;          /*!< [6..6] SPI Master IP 0 Async Bus Clock Source Select                      */
            uint32_t            : 1;
      __IOM uint32_t I2C0_IP_SRC : 2;           /*!< [9..8] I2C IP 0 Clock Source Select                                       */
      __IOM uint32_t I2C0_APB_SRC : 1;          /*!< [10..10] I2C IP 0 Async Bus Clock Source Select                           */
            uint32_t            : 1;
      __IOM uint32_t I2C1_IP_SRC : 2;           /*!< [13..12] I2C IP 1 Clock Source Select                                     */
      __IOM uint32_t I2C1_APB_SRC : 1;          /*!< [14..14] I2C IP 1 Async Bus Clock Source Select                           */
            uint32_t            : 1;
      __IOM uint32_t I2C2_IP_SRC : 2;           /*!< [17..16] I2C IP 2 Clock Source Select                                     */
      __IOM uint32_t I2C2_APB_SRC : 1;          /*!< [18..18] I2C IP 2 Async Bus Clock Source Select                           */
            uint32_t            : 1;
      __IOM uint32_t I2C_DBG_IP_SRC : 2;        /*!< [21..20] I2C Debug Clock Source Select                                    */
      __IOM uint32_t I2C_DBG_APB_SRC : 1;       /*!< [22..22] I2C Debug Async Bus Clock Source Select                          */
            uint32_t            : 1;
      __IOM uint32_t MATRIX_IP_SRC : 2;         /*!< [25..24] Dot Matrix LED IP Clock Source Select                            */
      __IOM uint32_t MATRIX_APB_SRC : 1;        /*!< [26..26] Dot Matrix LED Async Bus Clock Source Select                     */
            uint32_t            : 1;
      __IOM uint32_t ADC_IP_SRC : 2;            /*!< [29..28] ADC Control Clock Source Select                                  */
      __IOM uint32_t ADC_APB_SRC : 1;           /*!< [30..30] ADC Async Bus Clock Source Select                                */
            uint32_t            : 1;
    } PERICLKSEL1_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKSEL2;                 /*!< (@ 0x00000020) Peripheral Clock Select Register 2                         */
    
    struct {
      __IOM uint32_t CPU_SRC    : 1;            /*!< [0..0] CPU Clock Source Select                                            */
      __IOM uint32_t DMA_IP_SRC : 1;            /*!< [1..1] DMA Clock Source Select                                            */
      __IOM uint32_t INTR_SPIC_IP_SRC : 1;      /*!< [2..2] SPIC INTR Clock Source Select                                      */
      __IOM uint32_t EXTR_SPIC_IP_SRC : 1;      /*!< [3..3] SPIC EXTR Clock Source Select                                      */
      __IOM uint32_t SWD_IP_SRC : 2;            /*!< [5..4] SWD Clock Source Select                                            */
      __IOM uint32_t I3C_IP_SRC : 2;            /*!< [7..6] I3C IP Clock Source Select                                         */
      __IOM uint32_t USB_DPHY_SRC : 1;          /*!< [8..8] USB DPHY IP Clock Source Select                                    */
      __IOM uint32_t WDT_APB_SRC : 1;           /*!< [9..9] WDT Async Bus Clock Source Select                                  */
      __IOM uint32_t GPIO_APB_SRC : 1;          /*!< [10..10] GPIO Async Bus Clock Source Select                               */
      __IOM uint32_t EFUSE_IP_SRC : 1;          /*!< [11..11] eFuse Clock Source Select                                        */
      __IOM uint32_t TACHO0_APB_SRC : 1;        /*!< [12..12] TACH IP 0 Async Bus Clock Source Select                          */
      __IOM uint32_t TACHO1_APB_SRC : 1;        /*!< [13..13] TACH IP 1 Async Bus Clock Source Select                          */
      __IOM uint32_t TACHO2_APB_SRC : 1;        /*!< [14..14] TACH IP 2 Async Bus Clock Source Select                          */
      __IOM uint32_t TACHO3_APB_SRC : 1;        /*!< [15..15] TACH IP 3 Async Bus Clock Source Select                          */
      __IOM uint32_t TACHO0_IP_SRC : 1;         /*!< [16..16] TACH IP 0 Clock Source Select                                    */
      __IOM uint32_t TACHO1_IP_SRC : 1;         /*!< [17..17] TACH IP 1 Clock Source Select                                    */
      __IOM uint32_t TACHO2_IP_SRC : 1;         /*!< [18..18] TACH IP 2 Clock Source Select                                    */
      __IOM uint32_t TACHO3_IP_SRC : 1;         /*!< [19..19] TACH IP 3 Clock Source Select                                    */
      __IOM uint32_t CRC_IP_SRC : 2;            /*!< [21..20] Turbo Memory Comparator IP Clock Source Select                   */
      __IOM uint32_t CRC_APB_SRC : 1;           /*!< [22..22] Turbo Memory Comparator Async Bus Clock Source Select            */
            uint32_t            : 1;
      __IOM uint32_t TMR0_IP_SRC : 2;           /*!< [25..24] Timer IP 0 Clock Source Select                                   */
      __IOM uint32_t TMR0_APB_SRC : 1;          /*!< [26..26] Timer IP 0 Async Bus Clock Source Select                         */
            uint32_t            : 1;
      __IOM uint32_t TMR1_IP_SRC : 2;           /*!< [29..28] Timer IP 1 Clock Source Select                                   */
      __IOM uint32_t TMR1_APB_SRC : 1;          /*!< [30..30] Timer IP 1 Async Bus Clock Source Select                         */
            uint32_t            : 1;
    } PERICLKSEL2_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKSEL3;                 /*!< (@ 0x00000024) Peripheral Clock Select Register 3                         */
    
    struct {
      __IOM uint32_t PWM0_APB_SRC : 1;          /*!< [0..0] Clock source select for LED async bus[0]                           */
      __IOM uint32_t PWM1_APB_SRC : 1;          /*!< [1..1] Clock source select for LED async bus[1]                           */
      __IOM uint32_t PWM2_APB_SRC : 1;          /*!< [2..2] Clock source select for LED async bus[2]                           */
      __IOM uint32_t PWM3_APB_SRC : 1;          /*!< [3..3] Clock source select for LED async bus[3]                           */
      __IOM uint32_t PWM4_APB_SRC : 1;          /*!< [4..4] Clock source select for LED async bus[4]                           */
      __IOM uint32_t PWM5_APB_SRC : 1;          /*!< [5..5] Clock source select for LED async bus[5]                           */
      __IOM uint32_t PWM6_APB_SRC : 1;          /*!< [6..6] Clock source select for LED async bus[6]                           */
      __IOM uint32_t PWM7_APB_SRC : 1;          /*!< [7..7] Clock source select for LED async bus[7]                           */
      __IOM uint32_t PWM8_APB_SRC : 1;          /*!< [8..8] Clock source select for LED async bus[8]                           */
      __IOM uint32_t PWM9_APB_SRC : 1;          /*!< [9..9] Clock source select for LED async bus[9]                           */
      __IOM uint32_t PWM10_APB_SRC : 1;         /*!< [10..10] Clock source select for LED async bus[10]                        */
      __IOM uint32_t PWM11_APB_SRC : 1;         /*!< [11..11] Clock source select for LED async bus[11]                        */
      __IOM uint32_t PWM12_APB_SRC : 1;         /*!< [12..12] Clock source select for LED async bus[12]                        */
      __IOM uint32_t PWM13_APB_SRC : 1;         /*!< [13..13] Clock source select for LED async bus[13]                        */
      __IOM uint32_t PWM14_APB_SRC : 1;         /*!< [14..14] Clock source select for LED async bus[14]                        */
      __IOM uint32_t PWM15_APB_SRC : 1;         /*!< [15..15] Clock source select for LED async bus[15]                        */
      __IOM uint32_t PWM16_APB_SRC : 1;         /*!< [16..16] Clock source select for LED async bus[16]                        */
      __IOM uint32_t PWM17_APB_SRC : 1;         /*!< [17..17] Clock source select for LED async bus[17]                        */
      __IOM uint32_t PWM18_APB_SRC : 1;         /*!< [18..18] Clock source select for LED async bus[18]                        */
      __IOM uint32_t PWM19_APB_SRC : 1;         /*!< [19..19] Clock source select for LED async bus[19]                        */
      __IOM uint32_t PWM20_APB_SRC : 1;         /*!< [20..20] Clock source select for LED async bus[20]                        */
      __IOM uint32_t PWM21_APB_SRC : 1;         /*!< [21..21] Clock source select for LED async bus[21]                        */
      __IOM uint32_t PWM22_APB_SRC : 1;         /*!< [22..22] Clock source select for LED async bus[22]                        */
      __IOM uint32_t PWM23_APB_SRC : 1;         /*!< [23..23] Clock source select for LED async bus[23]                        */
      __IOM uint32_t PWM24_APB_SRC : 1;         /*!< [24..24] Clock source select for LED async bus[24]                        */
      __IOM uint32_t PWM25_APB_SRC : 1;         /*!< [25..25] Clock source select for LED async bus[25]                        */
      __IOM uint32_t PWM26_APB_SRC : 1;         /*!< [26..26] Clock source select for LED async bus[26]                        */
      __IOM uint32_t PWM27_APB_SRC : 1;         /*!< [27..27] Clock source select for LED async bus[27]                        */
      __IOM uint32_t PWM28_APB_SRC : 1;         /*!< [28..28] Clock source select for LED async bus[28]                        */
      __IOM uint32_t PWM29_APB_SRC : 1;         /*!< [29..29] Clock source select for LED async bus[29]                        */
      __IOM uint32_t PWM30_APB_SRC : 1;         /*!< [30..30] Clock source select for LED async bus[30]                        */
      __IOM uint32_t PWM31_APB_SRC : 1;         /*!< [31..31] Clock source select for LED async bus[31]                        */
    } PERICLKSEL3_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKSEL4;                 /*!< (@ 0x00000028) Peripheral Clock Select Register 4                         */
    
    struct {
      __IOM uint32_t STRIP5_IP_SRC : 2;         /*!< [1..0] Clock source select for strip IP[5]                                */
      __IOM uint32_t STRIP5_APB_SRC : 1;        /*!< [2..2] Clock source select for strip IP[5] async bus                      */
            uint32_t            : 1;
      __IOM uint32_t STRIP6_IP_SRC : 2;         /*!< [5..4] Clock source select for strip IP[6]                                */
      __IOM uint32_t STRIP6_APB_SRC : 1;        /*!< [6..6] Clock source select for strip IP[6] async bus                      */
            uint32_t            : 1;
      __IOM uint32_t STRIP7_IP_SRC : 2;         /*!< [9..8] Clock source select for strip IP[7]                                */
      __IOM uint32_t STRIP7_APB_SRC : 1;        /*!< [10..10] Clock source select for strip IP[7] async bus                    */
            uint32_t            : 1;
      __IOM uint32_t STRIP8_IP_SRC : 2;         /*!< [13..12] Clock source select for strip IP[8]                              */
      __IOM uint32_t STRIP8_APB_SRC : 1;        /*!< [14..14] Clock source select for strip IP[8] async bus                    */
            uint32_t            : 1;
      __IOM uint32_t UART_IP_SRC : 2;           /*!< [17..16] Clock source select for UART                                     */
      __IOM uint32_t UART_APB_SRC : 1;          /*!< [18..18] Clock source select for UART async bus                           */
            uint32_t            : 1;
      __IOM uint32_t TMR2_IP_SRC : 2;           /*!< [21..20] Clock source select for Timer IP2                                */
      __IOM uint32_t TMR2_APB_SRC : 1;          /*!< [22..22] Clock source select for Timer IP2 async bus                      */
            uint32_t            : 1;
      __IOM uint32_t TMR3_IP_SRC : 2;           /*!< [25..24] Clock source select for Timer IP3                                */
      __IOM uint32_t TMR3_APB_SRC : 1;          /*!< [26..26] Clock source select for Timer IP3 async bus                      */
            uint32_t            : 1;
      __IOM uint32_t USB_APB_SRC : 1;           /*!< [28..28] Clock source select for USB async bus                            */
            uint32_t            : 3;
    } PERICLKSEL4_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKSEL5;                 /*!< (@ 0x0000002C) Peripheral Clock Select Register 5                         */
    
    struct {
      __IOM uint32_t STRIP0_IP_SRC : 2;         /*!< [1..0] Clock source select for strip IP[0]                                */
      __IOM uint32_t STRIP0_APB_SRC : 1;        /*!< [2..2] Clock source select for strip IP[0] async bus                      */
            uint32_t            : 1;
      __IOM uint32_t STRIP1_IP_SRC : 2;         /*!< [5..4] Clock source select for strip IP[1]                                */
      __IOM uint32_t STRIP1_APB_SRC : 1;        /*!< [6..6] Clock source select for strip IP[1] async bus                      */
            uint32_t            : 1;
      __IOM uint32_t STRIP2_IP_SRC : 2;         /*!< [9..8] Clock source select for strip IP[2]                                */
      __IOM uint32_t STRIP2_APB_SRC : 1;        /*!< [10..10] Clock source select for strip IP[2] async bus                    */
            uint32_t            : 1;
      __IOM uint32_t STRIP3_IP_SRC : 2;         /*!< [13..12] Clock source select for strip IP[3]                              */
      __IOM uint32_t STRIP3_APB_SRC : 1;        /*!< [14..14] Clock source select for strip IP[3] async bus                    */
            uint32_t            : 1;
      __IOM uint32_t STRIP4_IP_SRC : 2;         /*!< [17..16] Clock source select for strip IP[4]                              */
      __IOM uint32_t STRIP4_APB_SRC : 1;        /*!< [18..18] Clock source select for strip IP[4] async bus                    */
            uint32_t            : 13;
    } PERICLKSEL5_b;
  } ;
  __IOM uint32_t  PERIRST0;                     /*!< (@ 0x00000030) PERIPHERAL RESET CONTROL REGISTER #0                       */
  __IOM uint32_t  PERIRST1;                     /*!< (@ 0x00000034) PERIPHERAL RESET CONTROL REGISTER #1                       */
  __IOM uint32_t  PERIRST2;                     /*!< (@ 0x00000038) PERIPHERAL RESET CONTROL REGISTER #2                       */
  __IOM uint32_t  PERIRST3;                     /*!< (@ 0x0000003C) PERIPHERAL RESET CONTROL REGISTER #3                       */
  __IOM uint32_t  PERIRST4;                     /*!< (@ 0x00000040) PERIPHERAL RESET CONTROL REGISTER #4                       */
  __IOM uint32_t  PERIRST5;                     /*!< (@ 0x00000044) PERIPHERAL RESET CONTROL REGISTER #5                       */
  __IOM uint32_t  PERIRST6;                     /*!< (@ 0x00000048) PERIPHERAL RESET CONTROL REGISTER #6                       */
  __IOM uint32_t  PERIRST7;                     /*!< (@ 0x0000004C) PERIPHERAL RESET CONTROL REGISTER #7                       */
  __IOM uint32_t  PERIRST8;                     /*!< (@ 0x00000050) PERIPHERAL RESET CONTROL REGISTER #8                       */
  __IOM uint32_t  CPUINITADDR0;                 /*!< (@ 0x00000054) CPU INITIAL ADDRESS REGISTER #0                            */
  __IOM uint32_t  CPUINITADDR1;                 /*!< (@ 0x00000058) CPU INITIAL ADDRESS REGISTER #1                            */
  __IOM uint32_t  SLEEPCTRL;                    /*!< (@ 0x0000005C) SLEEP CONTROL REGISTER                                     */
  __IOM uint32_t  ADCCLKCTRL;                   /*!< (@ 0x00000060) ADC CLOCK CONTROL REGISTER                                 */
  __IOM uint32_t  USBCTRL;                      /*!< (@ 0x00000064) FPGA USB CONTROL REGISTER                                  */
} SYSTEM_Type;                                  /*!< Size = 104 (0x68)                                                         */



/* =========================================================================================================================== */
/* ================                                           RCCAL                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief RC Calibration Controller (RCCAL)
  */

typedef struct {                                /*!< (@ 0x40100100) RCCAL Structure                                            */
  __IOM uint32_t  CTRLR0;                       /*!< (@ 0x00000000) Control Register 0                                         */
  __IOM uint32_t  RC25RESULT;                   /*!< (@ 0x00000004) RC25M Result Register                                      */
  __IOM uint32_t  RC32RESULT;                   /*!< (@ 0x00000008) RC32K Result Register                                      */
  __IOM uint32_t  RCDIFF;                       /*!< (@ 0x0000000C) RC25M/RC32K Diff Register                                  */
  __IOM uint32_t  RC25CTRL;                     /*!< (@ 0x00000010) RC25M Analog Control Register                              */
  __IOM uint32_t  RC32CTRL;                     /*!< (@ 0x00000014) RC32K Analog Control Register                              */
} RCCAL_Type;                                   /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPIM                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI Master Controller (SPIM)
  */

typedef struct {                                /*!< (@ 0x40100300) SPIM Structure                                             */
  
  union {
    __IOM uint32_t CTRLR0;                      /*!< (@ 0x00000000) Control Register 0                                         */
    
    struct {
      __IOM uint32_t DFS        : 4;            /*!< [3..0] Data Frame Size. Determines the size of the data transfer
                                                     in serial frames.                                                         */
            uint32_t            : 2;
      __IOM uint32_t SCPH       : 1;            /*!< [6..6] Serial Clock Phase. Determines the capture edge of the
                                                     serial clock in relation to the slave select signal.                      */
      __IOM uint32_t SCP        : 1;            /*!< [7..7] Used to select the polarity of the inactive serial clock.          */
      __IOM uint32_t TM         : 2;            /*!< [9..8] Transmit Mode                                                      */
      __IOM uint32_t SLV_OE     : 1;            /*!< [10..10] Slave Output Enable                                              */
      __IOM uint32_t SRL        : 1;            /*!< [11..11] Shift Register Loop                                              */
      __IOM uint32_t CFS        : 4;            /*!< [15..12] Control Frame Size                                               */
      __IOM uint32_t DFS_32     : 5;            /*!< [20..16] Varies Data Frame Size up to 32 bits.                            */
      __IOM uint32_t SPI_FRF    : 2;            /*!< [22..21] Selects the serial protocol frame format. Valid when
                                                     the frame format is set to Motorola SPI.                                  */
            uint32_t            : 9;
    } CTRLR0_b;
  } ;
  
  union {
    __IOM uint32_t CTRLR1;                      /*!< (@ 0x00000004) Control Register 1                                         */
    
    struct {
      __IOM uint32_t NDF        : 16;           /*!< [15..0] Number of Data Frames. Represents the total number of
                                                     data frames for the transaction.                                          */
            uint32_t            : 16;
    } CTRLR1_b;
  } ;
  
  union {
    __IOM uint32_t SSIENR;                      /*!< (@ 0x00000008) SSI Enable Register                                        */
    
    struct {
      __IOM uint32_t SSI_EN     : 1;            /*!< [0..0] SSI Enable.                                                        */
            uint32_t            : 31;
    } SSIENR_b;
  } ;
  
  union {
    __IOM uint32_t MWCR;                        /*!< (@ 0x0000000C) Microwire Control Register                                 */
    
    struct {
      __IOM uint32_t MWMOD      : 1;            /*!< [0..0] Microwire Transfer Mode. Configures the transfer mode
                                                     of the Microwire.                                                         */
      __IOM uint32_t MDD        : 1;            /*!< [1..1] Microwire Control. Specifies the direction of data flow
                                                     for SSI.                                                                  */
      __IOM uint32_t MHS        : 1;            /*!< [2..2] Microwire Handshaking. Controls the handshaking interface
                                                     of the Microwire.                                                         */
            uint32_t            : 29;
    } MWCR_b;
  } ;
  __IOM uint32_t  SER;                          /*!< (@ 0x00000010) Slave Enable Register                                      */
  
  union {
    __IOM uint32_t BAUDR;                       /*!< (@ 0x00000014) Baud Rate Register                                         */
    
    struct {
      __IOM uint32_t SCKDV      : 16;           /*!< [15..0] SSI Clock Divider. Determines the output serial clock
                                                     frequency.  The formula for the output clock: Fsclk_out
                                                     = Fssi_clk / SCKDV.                                                       */
            uint32_t            : 16;
    } BAUDR_b;
  } ;
  __IOM uint32_t  TXFTLR;                       /*!< (@ 0x00000018) Transmit FIFO Threshold Level Register                     */
  __IOM uint32_t  RXFTLR;                       /*!< (@ 0x0000001C) Receive FIFO Threshold Level Register                      */
  __IM  uint32_t  TXFLR;                        /*!< (@ 0x00000020) Transmit FIFO Level Register                               */
  __IM  uint32_t  RXFLR;                        /*!< (@ 0x00000024) Receive FIFO Level Register                                */
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x00000028) Status Register                                            */
    
    struct {
      __IM  uint32_t BUSY       : 1;            /*!< [0..0] SSI Busy Flag. Indicates if the SSI is actively transferring
                                                     data.                                                                     */
      __IM  uint32_t TFNF       : 1;            /*!< [1..1] Transmit FIFO Not Full. Indicates if the transmit FIFO
                                                     is not full.                                                              */
      __IM  uint32_t TFE        : 1;            /*!< [2..2] Transmit FIFO Empty. Indicates if the transmit FIFO is
                                                     empty.                                                                    */
      __IM  uint32_t RFNE       : 1;            /*!< [3..3] Receive FIFO Not Empty. Indicates if the receive FIFO
                                                     contains data.                                                            */
      __IM  uint32_t RFF        : 1;            /*!< [4..4] Receive FIFO Full. Indicates the status of the receive
                                                     FIFO.                                                                     */
      __IM  uint32_t TXE        : 1;            /*!< [5..5] Transmission Error. Indicates an error occurred during
                                                     transmission.                                                             */
      __IM  uint32_t DCOL       : 1;            /*!< [6..6] Data Collision Error. Indicates a collision occurred
                                                     during transmission.                                                      */
            uint32_t            : 25;
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t IMR;                         /*!< (@ 0x0000002C) Interrupt Mask Register                                    */
    
    struct {
      __IOM uint32_t TXEIM      : 1;            /*!< [0..0] Transmit FIFO Empty Interrupt Mask. Controls the masking
                                                     of the ssi_txe_intr interrupt.                                            */
      __IOM uint32_t TXOIM      : 1;            /*!< [1..1] Transmit FIFO Overflow Interrupt Mask. Controls the masking
                                                     of the ssi_txo_intr interrupt.                                            */
      __IOM uint32_t RXUIM      : 1;            /*!< [2..2] Receive FIFO Underflow Interrupt Mask. Controls the masking
                                                     of the ssi_rxu_intr interrupt.                                            */
      __IOM uint32_t RXOIM      : 1;            /*!< [3..3] Receive FIFO Overflow Interrupt Mask. Controls the masking
                                                     of the ssi_rxo_intr interrupt.                                            */
      __IOM uint32_t RXFIM      : 1;            /*!< [4..4] Receive FIFO Full Interrupt Mask. Controls the masking
                                                     of the ssi_rxf_intr interrupt.                                            */
      __IOM uint32_t MSTIM      : 1;            /*!< [5..5] Multi-Master Contention Interrupt Mask. Controls the
                                                     masking of the ssi_mst_intr interrupt.                                    */
            uint32_t            : 26;
    } IMR_b;
  } ;
  
  union {
    __IM  uint32_t ISR;                         /*!< (@ 0x00000030) Interrupt Status Register                                  */
    
    struct {
      __IM  uint32_t TXEIS      : 1;            /*!< [0..0] Transmit FIFO Empty Interrupt Status. Indicates the status
                                                     of the ssi_txe_intr interrupt after masking.                              */
      __IM  uint32_t TXOIS      : 1;            /*!< [1..1] Transmit FIFO Overflow Interrupt Status. Indicates the
                                                     status of the ssi_txo_intr interrupt after masking.                       */
      __IM  uint32_t RXUIS      : 1;            /*!< [2..2] Receive FIFO Underflow Interrupt Status. Indicates the
                                                     status of the ssi_rxu_intr interrupt after masking.                       */
      __IM  uint32_t RXOIS      : 1;            /*!< [3..3] Receive FIFO Overflow Interrupt Status. Indicates the
                                                     status of the ssi_rxo_intr interrupt after masking.                       */
      __IM  uint32_t RXFIS      : 1;            /*!< [4..4] Receive FIFO Full Interrupt Status. Indicates the status
                                                     of the ssi_rxf_intr interrupt after masking.                              */
      __IM  uint32_t MSTIS      : 1;            /*!< [5..5] Multi-Master Contention Interrupt Status. Indicates the
                                                     status of the ssi_mst_intr interrupt after masking.                       */
            uint32_t            : 26;
    } ISR_b;
  } ;
  
  union {
    __IM  uint32_t RISR;                        /*!< (@ 0x00000034) Raw Interrupt Status Register                              */
    
    struct {
      __IM  uint32_t TXEIR      : 1;            /*!< [0..0] Transmit FIFO Empty Raw Interrupt Status. Indicates the
                                                     status of the ssi_txe_intr interrupt prior to masking.                    */
      __IM  uint32_t TXOIR      : 1;            /*!< [1..1] Transmit FIFO Overflow Raw Interrupt Status. Indicates
                                                     the status of the ssi_txo_intr interrupt prior to masking.                */
      __IM  uint32_t RXUIR      : 1;            /*!< [2..2] Receive FIFO Underflow Raw Interrupt Status. Indicates
                                                     the status of the ssi_rxu_intr interrupt prior to masking.                */
      __IM  uint32_t RXOIR      : 1;            /*!< [3..3] Receive FIFO Overflow Raw Interrupt Status. Indicates
                                                     the status of the ssi_rxo_intr interrupt prior to masking.                */
      __IM  uint32_t RXFIR      : 1;            /*!< [4..4] Receive FIFO Full Raw Interrupt Status. Indicates the
                                                     status of the ssi_rxf_intr interrupt prior to masking.                    */
      __IM  uint32_t MSTIR      : 1;            /*!< [5..5] Multi-Master Contention Raw Interrupt Status. Indicates
                                                     the status of the ssi_mst_intr interrupt prior to masking.                */
            uint32_t            : 26;
    } RISR_b;
  } ;
  __OM  uint32_t  TXOICR;                       /*!< (@ 0x00000038) Transmit FIFO Overflow Interrupt Clear Register            */
  __OM  uint32_t  RXOICR;                       /*!< (@ 0x0000003C) Receive FIFO Overflow Interrupt Clear Register             */
  __OM  uint32_t  RXUICR;                       /*!< (@ 0x00000040) Receive FIFO Underflow Interrupt Clear Register            */
  __OM  uint32_t  MSTICR;                       /*!< (@ 0x00000044) Multi-Master Interrupt Clear Register                      */
  __OM  uint32_t  ICR;                          /*!< (@ 0x00000048) Interrupt Clear Register                                   */
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x0000004C) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t RDMAE      : 1;            /*!< [0..0] Receive DMA Enable. Controls the enable status of the
                                                     receive DMA operation.                                                    */
      __IOM uint32_t TDMAE      : 1;            /*!< [1..1] Transmit DMA Enable. Controls the enable status of the
                                                     transmit DMA operation.                                                   */
            uint32_t            : 30;
    } DMACR_b;
  } ;
  __IOM uint32_t  DMATDLR;                      /*!< (@ 0x00000050) DMA Transmit Data Level Register                           */
  __IOM uint32_t  DMARDLR;                      /*!< (@ 0x00000054) DMA Receive Data Level Register                            */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000058) Identification Register                                    */
  __IM  uint32_t  SSI_VERSION_ID;               /*!< (@ 0x0000005C) SSI Version ID Register                                    */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000060) Data Register                                              */
  __IM  uint32_t  RESERVED[35];
  __IOM uint32_t  RX_SAMPLE_DLY;                /*!< (@ 0x000000F0) Receive Sample Delay Register                              */
  
  union {
    __IOM uint32_t SPI_CTRLR0;                  /*!< (@ 0x000000F4) SPI Control Register                                       */
    
    struct {
      __IOM uint32_t TRANS_TYPE : 2;            /*!< [1..0] Address and instruction transfer format.                           */
      __IOM uint32_t ADDR_L     : 4;            /*!< [5..2] Address Length.                                                    */
            uint32_t            : 2;
      __IOM uint32_t INST_L     : 2;            /*!< [9..8] Instruction Length.                                                */
            uint32_t            : 1;
      __IOM uint32_t WAIT_CYCLES : 5;           /*!< [15..11] Wait cycles.                                                     */
      __IOM uint32_t SPI_DDR_EN : 1;            /*!< [16..16] SPI DDR Enable bit.                                              */
      __IOM uint32_t INST_DDR_EN : 1;           /*!< [17..17] Instruction DDR Enable bit.                                      */
      __IOM uint32_t SPI_RXDS_EN : 1;           /*!< [18..18] Read data strobe enable bit.                                     */
            uint32_t            : 13;
    } SPI_CTRLR0_b;
  } ;
  __IOM uint32_t  TXD_DRIVE_EDGE;               /*!< (@ 0x000000F8) Transmit Drive Edge Register                               */
} DW_SPI_Type;                                  /*!< Size = 252 (0xfc)                                                         */



/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief UART Controller (UART)
  */

typedef struct {                                /*!< (@ 0x40100700) UART Structure                                             */
  
  union {
    __IM  uint32_t RBR;                         /*!< (@ 0x00000000) RECEIVE BUFFER REGISTER                                    */
    __IOM uint32_t THR;                         /*!< (@ 0x00000000) TRANSMIT HOLDING REGISTER                                  */
    __IOM uint32_t DLL;                         /*!< (@ 0x00000000) DIVISOR LATCH LOW REGISTER                                 */
  };
  
  union {
    __IOM uint32_t DLH;                         /*!< (@ 0x00000004) DIVISOR LATCH HIGH REGISTER                                */
    
    union {
      __IOM uint32_t IER;                       /*!< (@ 0x00000004) INTRRRUPT ENABLE REGISTER                                  */
      
      struct {
        __IOM uint32_t ERBFI    : 1;            /*!< [0..0] Enable Received Data Available Interrupt                           */
        __IOM uint32_t ETBEI    : 1;            /*!< [1..1] Enable Transmit Holding Register Empty Interrupt                   */
        __IOM uint32_t ELSI     : 1;            /*!< [2..2] Enable Receiver Line Status Interrupt                              */
        __IOM uint32_t EDSSI    : 1;            /*!< [3..3] Enable Modem Status Interrupt                                      */
              uint32_t          : 3;
        __IOM uint32_t PTIME    : 1;            /*!< [7..7] Programmable THRE Interrupt Mode Enable                            */
              uint32_t          : 24;
      } IER_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t IIR;                       /*!< (@ 0x00000008) INTERRUPT IDENTIFICATION                                   */
      
      struct {
        __IM  uint32_t IID      : 4;            /*!< [3..0] Interrupt ID                                                       */
              uint32_t          : 2;
        __IM  uint32_t FIFOSE   : 2;            /*!< [7..6] FIFOs Enabled                                                      */
              uint32_t          : 24;
      } IIR_b;
    } ;
    
    union {
      __IOM uint32_t FCR;                       /*!< (@ 0x00000008) FIFO CONTROL REGISTER                                      */
      
      struct {
        __IOM uint32_t FIFOE    : 1;            /*!< [0..0] FIFO Enabled                                                       */
        __IOM uint32_t RFIFOR   : 1;            /*!< [1..1] Rx FIFO Reset                                                      */
        __IOM uint32_t XFIFOR   : 1;            /*!< [2..2] Tx FIFO Reset                                                      */
        __IOM uint32_t DMAM     : 1;            /*!< [3..3] DMA Mode                                                           */
        __IOM uint32_t TET      : 2;            /*!< [5..4] TX Empty Trigger Level                                             */
        __IOM uint32_t RCVR     : 2;            /*!< [7..6] Rx Trigger Level                                                   */
              uint32_t          : 24;
      } FCR_b;
    } ;
  };
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) LINE CONTROL REGISTER                                      */
    
    struct {
      __IOM uint32_t DLS        : 2;            /*!< [1..0] Data Length Select                                                 */
      __IOM uint32_t STOP       : 1;            /*!< [2..2] Number of Stop Bits                                                */
      __IOM uint32_t PEN        : 1;            /*!< [3..3] Parity Enable                                                      */
      __IOM uint32_t EPS        : 1;            /*!< [4..4] Even Parity Select                                                 */
      __IOM uint32_t STP        : 1;            /*!< [5..5] Stick Parity                                                       */
      __IOM uint32_t BC         : 1;            /*!< [6..6] Break Control Bit                                                  */
      __IOM uint32_t DLAB       : 1;            /*!< [7..7] Divisor Latch Access Bit                                           */
            uint32_t            : 24;
    } LCR_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IM  uint32_t LSR;                         /*!< (@ 0x00000014) LINE STATUS REGISTER                                       */
    
    struct {
      __IM  uint32_t DR         : 1;            /*!< [0..0] Data Ready Bit                                                     */
      __IM  uint32_t OE         : 1;            /*!< [1..1] Overrun Error bit                                                  */
      __IM  uint32_t PE         : 1;            /*!< [2..2] Parity Error bit                                                   */
      __IM  uint32_t FE         : 1;            /*!< [3..3] Framing Error bit                                                  */
      __IM  uint32_t BI         : 1;            /*!< [4..4] Break Interrupt bit                                                */
      __IM  uint32_t THRE       : 1;            /*!< [5..5] Transmit Holding Register Empty bit                                */
      __IM  uint32_t TEMT       : 1;            /*!< [6..6] Transmitter Empty Bit                                              */
      __IM  uint32_t RFE        : 1;            /*!< [7..7] Receiver FIFO Error                                                */
            uint32_t            : 24;
    } LSR_b;
  } ;
  __IM  uint32_t  RESERVED1[25];
  
  union {
    __IM  uint32_t USR;                         /*!< (@ 0x0000007C) UART Status Register                                       */
    
    struct {
      __IM  uint32_t BUSY       : 1;            /*!< [0..0] UART Busy                                                          */
      __IM  uint32_t TFNF       : 1;            /*!< [1..1] Transmit FIFO Not Full                                             */
      __IM  uint32_t TFE        : 1;            /*!< [2..2] Transmit FIFO Empty                                                */
      __IM  uint32_t RFNE       : 1;            /*!< [3..3] Receive FIFO Not Empty                                             */
      __IM  uint32_t RFF        : 1;            /*!< [4..4] Receive FIFO Full                                                  */
            uint32_t            : 27;
    } USR_b;
  } ;
  __IM  uint32_t  TFL;                          /*!< (@ 0x00000080) UART TRANSMIT FIFO LEVEL                                   */
  __IM  uint32_t  RFL;                          /*!< (@ 0x00000084) UART RECEIVE FIFO LEVEL                                    */
  
  union {
    __OM  uint32_t SRR;                         /*!< (@ 0x00000088) UART SOFTWARE RESET REGISTER                               */
    
    struct {
      __OM  uint32_t UR         : 1;            /*!< [0..0] UART Reset                                                         */
      __OM  uint32_t RFR        : 1;            /*!< [1..1] RCVR FIFO Reset                                                    */
      __OM  uint32_t XFR        : 1;            /*!< [2..2] XMIT FIFO Reset                                                    */
            uint32_t            : 29;
    } SRR_b;
  } ;
} DW_UART_Type;                                 /*!< Size = 140 (0x8c)                                                         */



/* =========================================================================================================================== */
/* ================                                          TACHO0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Tachometer Controller (TACHO0)
  */

typedef struct {                                /*!< (@ 0x40100900) TACHO0 Structure                                           */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable Tachometer Controller                                       */
      __IOM uint32_t FILTEREN   : 1;            /*!< [1..1] Enable Filter of Tachometer                                        */
      __IOM uint32_t SELEDGE    : 2;            /*!< [3..2] Select Edges of Tachometer                                         */
      __IOM uint32_t READMODE   : 1;            /*!< [4..4] Select Reading Mode of Tachometer                                  */
            uint32_t            : 11;
      __IM  uint32_t CNT        : 16;           /*!< [31..16] Counter of Tachometer                                            */
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000004) STATUS REGISTER                                            */
    
    struct {
      __IOM uint32_t LIMIT      : 1;            /*!< [0..0] Limit status of Tachometer                                         */
      __IM  uint32_t PIN        : 1;            /*!< [1..1] Pin Status of Tachometer                                           */
      __IOM uint32_t CHG        : 1;            /*!< [2..2] Tachometer Input Changes Its Status                                */
      __IOM uint32_t CNTRDY     : 1;            /*!< [3..3] Status of Count Ready                                              */
      __IOM uint32_t FAIL       : 1;            /*!< [4..4] Status of Count Ready                                              */
            uint32_t            : 27;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t LIMITH;                      /*!< (@ 0x00000008) HIGH-LIMIT REGISTER                                        */
    
    struct {
      __IOM uint32_t VAL        : 16;           /*!< [15..0] High limit value                                                  */
            uint32_t            : 16;
    } LIMITH_b;
  } ;
  
  union {
    __IOM uint32_t LIMITL;                      /*!< (@ 0x0000000C) LOW-LIMIT REGISTER                                         */
    
    struct {
      __IOM uint32_t VAL        : 16;           /*!< [15..0] Low limit value                                                   */
            uint32_t            : 16;
    } LIMITL_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t LIMITEN    : 1;            /*!< [0..0] Limit Interrupt Enable                                             */
      __IOM uint32_t CNTRDYEN   : 1;            /*!< [1..1] Ready to count Interrupt Enable                                    */
      __IOM uint32_t CHGEN      : 1;            /*!< [2..2] Input Change Interrupt Enable                                      */
      __IOM uint32_t FAILEN     : 1;            /*!< [3..3] Fail Interrupt Enable                                              */
            uint32_t            : 28;
    } INTEN_b;
  } ;
  __IOM uint32_t  THRESHOLD;                    /*!< (@ 0x00000014) THRESHOLD REGISTER                                         */
  __IOM uint32_t  TIMEOUT;                      /*!< (@ 0x00000018) TIMEOUT REGISTER                                           */
} TACHO_Type;                                   /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief WDT Controller (WDT)
  */

typedef struct {                                /*!< (@ 0x40100980) WDT Structure                                              */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable WDT                                                         */
      __IOM uint32_t RSTEN      : 1;            /*!< [1..1] Enable WDT to Reset System                                         */
      __IOM uint32_t RELOAD     : 1;            /*!< [2..2] Reload WDT Counter                                                 */
      __IOM uint32_t CLRRSTFLAG : 1;            /*!< [3..3] Clear WDT reset flag                                               */
            uint32_t            : 28;
    } CTRL_b;
  } ;
  
  union {
    __IM  uint32_t STS;                         /*!< (@ 0x00000004) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t RSTFLAG    : 1;            /*!< [0..0] Reset Flag                                                         */
            uint32_t            : 31;
    } STS_b;
  } ;
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000008) INITIAL COUNTER REGISTER                                   */
  __IOM uint32_t  DIV;                          /*!< (@ 0x0000000C) DIVIDER REGISTER                                           */
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t WDTINTEN   : 1;            /*!< [0..0] Enable WDT Interrupt                                               */
            uint32_t            : 31;
    } INTEN_b;
  } ;
} WDT_Type;                                     /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DW I2C Controller (I2C0)
  */

typedef struct {                                /*!< (@ 0x40101000) I2C0 Structure                                             */
  
  union {
    __IOM uint32_t CON;                         /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t MATSER     : 1;            /*!< [0..0] Enable/Disable Master Mode                                         */
      __IOM uint32_t SPEED      : 2;            /*!< [2..1] Speed Mode                                                         */
      __IOM uint32_t SLV10BIT   : 1;            /*!< [3..3] Slave Responds To 7-bit Or 10-bit Addresses                        */
      __IOM uint32_t MST10BIT   : 1;            /*!< [4..4] Master Is 7-bit Or 10-bit Addressing Mode                          */
      __IOM uint32_t RESTREN    : 1;            /*!< [5..5] Enable/Disable Master Restart                                      */
      __IOM uint32_t SLVDISABLE : 1;            /*!< [6..6] Enable/Disable Slave Mode                                          */
      __IOM uint32_t STPDET     : 1;            /*!< [7..7] How Slave Issues Stop Detection Interrupt                          */
      __IOM uint32_t TXEMPTYCTRL : 1;           /*!< [8..8] Controls the Generation Of The Tx Empty Interrupt                  */
      __IOM uint32_t RXFULLHLDC : 1;            /*!< [9..9] Hold the Bus When The Rx FIFO Is Full Or Not                       */
      __IOM uint32_t STPMSTACTIVE : 1;          /*!< [10..10] How I2c Controller Issues The Stop Detection Interrupt           */
      __IOM uint32_t BUSCLREN   : 1;            /*!< [11..11] Enables the Bus Clear Feature                                    */
            uint32_t            : 20;
    } CON_b;
  } ;
  
  union {
    __IOM uint32_t TAR;                         /*!< (@ 0x00000004) TARGET ADDRESS REGISTER                                    */
    
    struct {
      __IOM uint32_t TAR        : 10;           /*!< [9..0] Target Address For Any Master Transaction                          */
      __IOM uint32_t GCORSTR    : 1;            /*!< [10..10] Indicates Whether A General Call Or Start Byte Command           */
      __IOM uint32_t SPECIAL    : 1;            /*!< [11..11] Indicates Whether Software Performs A Device-id Or
                                                     General Call Or Start Byte Command                                        */
            uint32_t            : 20;
    } TAR_b;
  } ;
  
  union {
    __IOM uint32_t SAR;                         /*!< (@ 0x00000008) SLAVE ADDRESS REGISTER                                     */
    
    struct {
      __IOM uint32_t SAR        : 10;           /*!< [9..0] Holds The Slave Address When The I2c Is Operating As
                                                     A Slave                                                                   */
            uint32_t            : 22;
    } SAR_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DATACMD;                     /*!< (@ 0x00000010) DATA BUFFER AND COMMAND REGISTER                           */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The Data To Be Transmitted Or Received On The I2C Bus              */
      __OM  uint32_t CMD        : 1;            /*!< [8..8] Controls Whether A Read Or A Write Is Performed                    */
      __OM  uint32_t STOP       : 1;            /*!< [9..9] Controls Whether A Stop Is Issued After The Byte Is Sent
                                                     Or Received                                                               */
      __OM  uint32_t RESTART    : 1;            /*!< [10..10] Controls Whether a RESTART Is Issued Before The Byte
                                                     Is Sent Or Received                                                       */
      __IM  uint32_t FIRSTDATA  : 1;            /*!< [11..11] Indicates The First Data Byte Received After The Address
                                                     Phase                                                                     */
            uint32_t            : 20;
    } DATACMD_b;
  } ;
  
  union {
    __IOM uint32_t SCLHCNT;                     /*!< (@ 0x00000014) STANDARD SPEED I2C CLOCK SCL HIGH COUNT REGISTER           */
    
    struct {
      __IOM uint32_t HCNT       : 16;           /*!< [15..0] Sets the SCL Clock High-period Count For Standard Speed           */
            uint32_t            : 16;
    } SCLHCNT_b;
  } ;
  
  union {
    __IOM uint32_t SCLLCNT;                     /*!< (@ 0x00000018) STANDARD SPEED I2C CLOCK SCL LOW COUNT REGISTER            */
    
    struct {
      __IOM uint32_t LCNT       : 16;           /*!< [15..0] Sets the SCL Clock Low-period Count For Standard Speed            */
            uint32_t            : 16;
    } SCLLCNT_b;
  } ;
  
  union {
    __IOM uint32_t FSSCLHCNT;                   /*!< (@ 0x0000001C) FAST MODE SCL HIGH COUNT REGISTER                          */
    
    struct {
      __IOM uint32_t HCNT       : 16;           /*!< [15..0] Sets the SCL Clock High-period Count For Fast Speed               */
            uint32_t            : 16;
    } FSSCLHCNT_b;
  } ;
  
  union {
    __IOM uint32_t FSSCLLCNT;                   /*!< (@ 0x00000020) FAST MODE SCL LOW COUNT REGISTER                           */
    
    struct {
      __IOM uint32_t LCNT       : 16;           /*!< [15..0] Sets the SCL Clock Low-period Count For Fast Speed                */
            uint32_t            : 16;
    } FSSCLLCNT_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IM  uint32_t INTSTAT;                     /*!< (@ 0x0000002C) I2C INTERRUPT STATUS REGISTER                              */
    
    struct {
      __IM  uint32_t RXUNDER    : 1;            /*!< [0..0] RX_UNDER Interrupt                                                 */
      __IM  uint32_t RXOVER     : 1;            /*!< [1..1] RX_OVER Interrupt                                                  */
      __IM  uint32_t RXFULL     : 1;            /*!< [2..2] RX_FULL Interrupt                                                  */
      __IM  uint32_t TXOVER     : 1;            /*!< [3..3] TX_OVER Interrupt                                                  */
      __IM  uint32_t TXEMPTY    : 1;            /*!< [4..4] TX_EMPTY Interrupt                                                 */
      __IM  uint32_t RDREQ      : 1;            /*!< [5..5] RD_REQ interrupt                                                   */
      __IM  uint32_t TXABRT     : 1;            /*!< [6..6] TX_ABRT Interrupt                                                  */
      __IM  uint32_t RXDONE     : 1;            /*!< [7..7] RX_DONE Interrupt                                                  */
      __IM  uint32_t ACTIVITY   : 1;            /*!< [8..8] ACTIVITY Interrupt                                                 */
      __IM  uint32_t STOPDET    : 1;            /*!< [9..9] STOP_DET Interrupt                                                 */
      __IM  uint32_t STARTDET   : 1;            /*!< [10..10] START_DET Interrupt                                              */
      __IM  uint32_t GENCALL    : 1;            /*!< [11..11] GEN_CALL Interrupt                                               */
      __IM  uint32_t RESTARTDET : 1;            /*!< [12..12] RESTART_DET Interrupt                                            */
      __IM  uint32_t MSTONHOLD  : 1;            /*!< [13..13] MASTER_ON_HOLD Interrupt                                         */
      __IM  uint32_t SCLSTUCKLOW : 1;           /*!< [14..14] SCL_STUCK_AT_LOW Interrupt                                       */
      __IM  uint32_t WRREQ      : 1;            /*!< [15..15] WR_REQ Interrupt                                                 */
            uint32_t            : 16;
    } INTSTAT_b;
  } ;
  
  union {
    __IOM uint32_t INTMASK;                     /*!< (@ 0x00000030) INTERRUPT MASK REGISTER                                    */
    
    struct {
      __IOM uint32_t RXUNDERMSK : 1;            /*!< [0..0] RX_UNDER Interrupt Mask                                            */
      __IOM uint32_t RXOVERMSK  : 1;            /*!< [1..1] RX_OVER Interrupt Mask                                             */
      __IOM uint32_t RXFULLMSK  : 1;            /*!< [2..2] RX_FULL Interrupt Mask                                             */
      __IOM uint32_t TXOVERMSK  : 1;            /*!< [3..3] TX_OVER Interrupt Mask                                             */
      __IOM uint32_t TXEMPTYMSK : 1;            /*!< [4..4] TX_EMPTY Interrupt Mask                                            */
      __IOM uint32_t RDREQMSK   : 1;            /*!< [5..5] RD_REQ Interrupt Mask                                              */
      __IOM uint32_t TXABRTMSK  : 1;            /*!< [6..6] TX_ABRT Interrupt Mask                                             */
      __IOM uint32_t RXDONEMSK  : 1;            /*!< [7..7] RX_DONE Interrupt Mask                                             */
      __IOM uint32_t ACTIVITYMSK : 1;           /*!< [8..8] ACTIVITY Interrupt Mask                                            */
      __IOM uint32_t STOPDETMSK : 1;            /*!< [9..9] STOP_DET Interrupt Mask                                            */
      __IOM uint32_t STARTDETMSK : 1;           /*!< [10..10] START_DET Interrupt Mask                                         */
      __IOM uint32_t GENCALLMSK : 1;            /*!< [11..11] GEN_CALL Interrupt Mask                                          */
      __IOM uint32_t RESTARTDETMSK : 1;         /*!< [12..12] RESTART_DET Interrupt Mask                                       */
      __IOM uint32_t MSTONHOLDMSK : 1;          /*!< [13..13] MASTER_ON_HOLD Interrupt Mask                                    */
      __IOM uint32_t SCLSTUCKLOWMSK : 1;        /*!< [14..14] SCL_STUCK_AT_LOW Interrupt Mask                                  */
      __IOM uint32_t WRREQMSK   : 1;            /*!< [15..15] WR_REQ Interrupt Mask                                            */
            uint32_t            : 16;
    } INTMASK_b;
  } ;
  
  union {
    __IOM uint32_t RAWINTSTAT;                  /*!< (@ 0x00000034) INTERRUPT STATUS REGISTER                                  */
    
    struct {
      __IM  uint32_t RXUNDERRAW : 1;            /*!< [0..0] RX_UNDER Interrupt Status                                          */
      __IM  uint32_t RXOVERRAW  : 1;            /*!< [1..1] RX_UNDER Interrupt Status                                          */
      __IM  uint32_t RXFULLRAW  : 1;            /*!< [2..2] RX_UNDER Interrupt Status                                          */
      __IM  uint32_t TXOVERRAW  : 1;            /*!< [3..3] TX_OVER Interrupt Status                                           */
      __IM  uint32_t TXEMPTYRAW : 1;            /*!< [4..4] TX_EMPTY Interrupt Status                                          */
      __IM  uint32_t RDREQRAW   : 1;            /*!< [5..5] RD_REQ Interrupt Status                                            */
      __IM  uint32_t TXABRTRAW  : 1;            /*!< [6..6] TX_ABRT Interrupt Status                                           */
      __IM  uint32_t RXDONERAW  : 1;            /*!< [7..7] RX_DONE Interrupt Status                                           */
      __IM  uint32_t ACTIVITYRAW : 1;           /*!< [8..8] I2C Controller Activity                                            */
      __IM  uint32_t STOPDETRAW : 1;            /*!< [9..9] STOP_DET Interrupt Status                                          */
      __IM  uint32_t STARTDETRAW : 1;           /*!< [10..10] START_DET Interrupt Status                                       */
      __IM  uint32_t GENCALLRAW : 1;            /*!< [11..11] GEN_CALL Interrupt Status                                        */
      __IM  uint32_t RESTARTDETRAW : 1;         /*!< [12..12] RESTART_DET Interrupt Status                                     */
      __IM  uint32_t MSTONHOLDRAW : 1;          /*!< [13..13] MASTER_ON_HOLD Interrupt Status                                  */
      __IM  uint32_t SCLSTUCKLOWRAW : 1;        /*!< [14..14] SCL_STUCK_AT_LOW Interrupt Status                                */
      __IM  uint32_t WRREQRAW   : 1;            /*!< [15..15] WR_REQ Interrupt Status                                          */
            uint32_t            : 16;
    } RAWINTSTAT_b;
  } ;
  
  union {
    __IOM uint32_t RXTL;                        /*!< (@ 0x00000038) I2C RECEIVE FIFO THRESHOLD REGISTER                        */
    
    struct {
      __IOM uint32_t THRES      : 8;            /*!< [7..0] Receive FIFO Threshold Level                                       */
            uint32_t            : 24;
    } RXTL_b;
  } ;
  
  union {
    __IOM uint32_t TXTL;                        /*!< (@ 0x0000003C) I2C TRANSMIT FIFO THRESHOLD REGISTER                       */
    
    struct {
      __IOM uint32_t THRES      : 8;            /*!< [7..0] Transmit FIFO Threshold Level                                      */
            uint32_t            : 24;
    } TXTL_b;
  } ;
  __IM  uint32_t  CLRINT;                       /*!< (@ 0x00000040) CLEAR COMBINED AND INDIVIDUAL INTERRUPT REGISTER           */
  __IM  uint32_t  CLRRXUNDER;                   /*!< (@ 0x00000044) Clear RX_UNDER Interrupt                                   */
  __IM  uint32_t  CLRRXOVER;                    /*!< (@ 0x00000048) Clear RX_OVER Interrupt Register                           */
  __IM  uint32_t  CLRTXOVER;                    /*!< (@ 0x0000004C) Clear TX_OVER Interrupt Register                           */
  __IM  uint32_t  CLRRDREQ;                     /*!< (@ 0x00000050) Clear RD_REQ Interrupt Register                            */
  __IM  uint32_t  CLRTXABRT;                    /*!< (@ 0x00000054) Clear TX_ABRT Interrupt Register                           */
  __IM  uint32_t  CLRRXDONE;                    /*!< (@ 0x00000058) Clear RX_DONE Interrupt Register                           */
  __IM  uint32_t  CLRACTIVITY;                  /*!< (@ 0x0000005C) Clear ACTIVITY Interrupt Register                          */
  __IM  uint32_t  CLRSTOPDET;                   /*!< (@ 0x00000060) Clear STOP_DET Interrupt Register                          */
  __IM  uint32_t  CLRSTARTDET;                  /*!< (@ 0x00000064) Clear START_DET Interrupt Register                         */
  __IM  uint32_t  CLRGENCALL;                   /*!< (@ 0x00000068) Clear GEN_CALL Interrupt Register                          */
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x0000006C) ENABLE REGISTER                                            */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Controls Whether The I2C Controller Is Enabled                     */
      __IOM uint32_t ABORT      : 1;            /*!< [1..1] Initiates The Transfer Abort                                       */
      __IOM uint32_t TXCMDBLOCK : 1;            /*!< [2..2] Blocks The Transmission Of Data On I2c Bus Or Not                  */
      __IOM uint32_t SDARECOVEN : 1;            /*!< [3..3] Control Knob To Initiate The SDA Recovery Mechanism                */
            uint32_t            : 28;
    } ENABLE_b;
  } ;
  
  union {
    __IM  uint32_t STATUS;                      /*!< (@ 0x00000070) I2C STATUS Register                                        */
    
    struct {
      __IM  uint32_t ACTIVITY   : 1;            /*!< [0..0] I2C Activity Status                                                */
      __IM  uint32_t TFNF       : 1;            /*!< [1..1] Transmit FIFO Not Full                                             */
      __IM  uint32_t TFE        : 1;            /*!< [2..2] Transmit FIFO Completely Empty                                     */
      __IM  uint32_t RFNE       : 1;            /*!< [3..3] Receive FIFO Not Empty                                             */
      __IM  uint32_t RFF        : 1;            /*!< [4..4] Receive FIFO Completely Full                                       */
      __IM  uint32_t MSTACTIVITY : 1;           /*!< [5..5] Master FSM Activity Status                                         */
      __IM  uint32_t SLVACTIVITY : 1;           /*!< [6..6] Slave FSM Activity Status                                          */
      __IM  uint32_t MSTHOLDTXEMPTY : 1;        /*!< [7..7] Indicates The Bus Hold When The Master Holds The Bus
                                                     Because Of The Tx FIFO Being Empty                                        */
      __IM  uint32_t MSTHOLDRXFULL : 1;         /*!< [8..8] INdicates The Bus Hold In Master Mode Due To Rx FIFO
                                                     Is Full And Additional Byte Has Been Received                             */
      __IM  uint32_t SLVHOLDTXEMPTY : 1;        /*!< [9..9] Indicates The Bus Hold In Slave Mode Due To Rx FIFO Is
                                                     Full And Additional Byte Has Been Received                                */
      __IM  uint32_t SLVHOLDRXFULL : 1;         /*!< [10..10] Indicates The Bus Hold In Slave Mode Due To Rx FIFO
                                                     Is Full And Additional Byte Has Been Received                             */
      __IM  uint32_t SDANOTRECOV : 1;           /*!< [11..11] Indicates That SDA Stuck At Low Is Not Recovered After
                                                     The Recovery Mechanism                                                    */
            uint32_t            : 20;
    } STATUS_b;
  } ;
  __IOM uint32_t  TXFLR;                        /*!< (@ 0x00000074) I2C TRANSMIT FIFO LEVEL REGISTER                           */
  __IOM uint32_t  RXFLR;                        /*!< (@ 0x00000078) I2C RECEIVE FIFO LEVEL REGISTER                            */
  
  union {
    __IOM uint32_t SDAHOLD;                     /*!< (@ 0x0000007C) I2C SDA HOLD TIME LENGTH REGISTER                          */
    
    struct {
      __IOM uint32_t SDATXHOLD  : 16;           /*!< [15..0] Sets The Required SDA Hold Time In Units Of clk Period            */
      __IOM uint32_t SDARXHOLD  : 8;            /*!< [23..16] Sets the required SDA hold time in units of I2C clk
                                                     period                                                                    */
            uint32_t            : 8;
    } SDAHOLD_b;
  } ;
  
  union {
    __IOM uint32_t TXABRTSRC;                   /*!< (@ 0x00000080) I2C TRANSMIT ABORT SOURCE REGISTER                         */
    
    struct {
      __IM  uint32_t ADDR7BNAK  : 1;            /*!< [0..0] Indicates That The Master Is In 7-bit Addressing Mode
                                                     And The Address Sent Was Not Acknowledged By Any Slave                    */
      __IM  uint32_t ADDR10BNAK1 : 1;           /*!< [1..1] Indicates That The Master Is In 10-bit Address Mode And
                                                     The First 10-bit Address Byte Was Not Acknowledged By Any
                                                     Slave                                                                     */
      __IM  uint32_t ADDR10BNACK2 : 1;          /*!< [2..2] Indicates That The Master Is In 10-bit Address Mode And
                                                     The Second 10-bit Address Byte Was Not Acknowledged By
                                                     Any Slave                                                                 */
      __IM  uint32_t TXDATANAK  : 1;            /*!< [3..3] Indicates The Master-mode Only Bit. When Themaster Receives
                                                     An Acknowledgement For The Address                                        */
      __IM  uint32_t GCALLNAK   : 1;            /*!< [4..4] Indicates That I2C Controller In Master Mode Has Sent
                                                     A General Call And No Slave On The Bus Acknowledged The
                                                     General Call                                                              */
      __IM  uint32_t GCALLREAD  : 1;            /*!< [5..5] Indicates That Dw_apb_i2c In The Master Mode Has Sent
                                                     A General Call But The User Programmed The Byte Following
                                                     The General Call To Be A Read From The Bus                                */
      __IM  uint32_t HSACKDET   : 1;            /*!< [6..6] Indicates That The Master Is In High Speed Mode And The
                                                     High Speed Master Code Was Acknowledged                                   */
      __IM  uint32_t SBYTEACKET : 1;            /*!< [7..7] Indicates That The Master Has Sent A START Byte And The
                                                     START Byte Was Acknowledged                                               */
      __IM  uint32_t HSNORSTRT  : 1;            /*!< [8..8] Indicates That The Restart Is Disabled                             */
      __IM  uint32_t SBYTENORSTRT : 1;          /*!< [9..9] Indicates That The Restart Is Disabled                             */
      __IM  uint32_t ADDR10BRDNORSTRT : 1;      /*!< [10..10] Indicates That The Restart Is Disabled                           */
      __IM  uint32_t MASTERIDS  : 1;            /*!< [11..11] Indicates That The User Tries To Initiate A Master
                                                     Operation With The Master Mode Disabled                                   */
      __IM  uint32_t ARBLOST    : 1;            /*!< [12..12] This Field Specifies That The Master Has Lost Arbitration        */
      __IM  uint32_t SLVFLUSHTXFIFO : 1;        /*!< [13..13] This Field Specifies That The Slave Has Received A
                                                     Read Command And Some Data Exists In The TX FIFO                          */
      __IM  uint32_t SLVARBLOST : 1;            /*!< [14..14] This Field Indicates That A Slave Has Lost The Bus
                                                     While Transmitting Data To A Remote Master                                */
      __IM  uint32_t SLVRDINTX  : 1;            /*!< [15..15] When The Processor Side Responds To A Slave Mode Request
                                                     For Data To Be Transmitted To A Remote Master And User
                                                     Writes A 1 In Cmd (bit 8) Of Ic_data_cmd Register                         */
      __IM  uint32_t USRABRT    : 1;            /*!< [16..16] This Is A Master-mode-only Bit. Master Has Detected
                                                     The Transfer Abort                                                        */
      __IM  uint32_t SDASTUCKLOW : 1;           /*!< [17..17] This Is A Master-mode-only Bit. Master Detects The
                                                     SDA Stuck At Low                                                          */
      __IM  uint32_t DEVNAK     : 1;            /*!< [18..18] Master Is Initiating The DEVICE_ID Transfer And The
                                                     Device Id Sent Was Not Acknowledged By Any Slave                          */
      __IM  uint32_t DEVSLVADDRNAK : 1;         /*!< [19..19] Master Is Initiating The DEVICE_ID Transfer And The
                                                     Slave Address Sent Was Not Acknowledged By Any Slave                      */
      __IM  uint32_t DEVWRITE   : 1;            /*!< [20..20] Master Is Initiating The DEVICE_ID Transfer And The
                                                     Tx-FIFO Consists Of Write Commands                                        */
            uint32_t            : 2;
      __IM  uint32_t TXFLUSHCNT : 9;            /*!< [31..23] Indicates The Number Of Tx FIFO Data Commands Which
                                                     Are Flushed Due To TX_ABRT Interrupt                                      */
    } TXABRTSRC_b;
  } ;
  
  union {
    __IOM uint32_t SLVDATANACKONLY;             /*!< (@ 0x00000084) GENERATE SLAVE DATA NACK REGISTER                          */
    
    struct {
      __IOM uint32_t NAK        : 1;            /*!< [0..0] Generate Nack. This Nack Generation Only Occurs When
                                                     I2C Controller Is A Slave-receiver                                        */
            uint32_t            : 31;
    } SLVDATANACKONLY_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t SDASETUP;                    /*!< (@ 0x00000094) I2C SDA SETUP REGISTER                                     */
    
    struct {
      __IOM uint32_t SETUP      : 8;            /*!< [7..0] SDA Setup (tSU:DAT)                                                */
            uint32_t            : 24;
    } SDASETUP_b;
  } ;
  
  union {
    __IOM uint32_t ACKGENCALL;                  /*!< (@ 0x00000098) I2C ACK GENERAL CALL REGISTER                              */
    
    struct {
      __IOM uint32_t ACK        : 1;            /*!< [0..0] ACK General Call                                                   */
            uint32_t            : 31;
    } ACKGENCALL_b;
  } ;
  
  union {
    __IM  uint32_t ENSTS;                       /*!< (@ 0x0000009C) I2C ENABLE STATUS REGISTER                                 */
    
    struct {
      __IM  uint32_t ENABLE     : 1;            /*!< [0..0] IC Enable Status                                                   */
      __IM  uint32_t SLVDISBUSY : 1;            /*!< [1..1] Slave Disabled While Busy (Transmit, Receive)                      */
      __IM  uint32_t SLVRXDATALOST : 1;         /*!< [2..2] Slave Received Data Lost                                           */
            uint32_t            : 29;
    } ENSTS_b;
  } ;
  
  union {
    __IOM uint32_t SPKLEN;                      /*!< (@ 0x000000A0) I2C SS, FS OR FM+ RO UFM SPIKE SUPPRESSION LIMIT           */
    
    struct {
      __IOM uint32_t LEN        : 8;            /*!< [7..0] Sets the Duration, Measured In Clk Cycle                           */
            uint32_t            : 24;
    } SPKLEN_b;
  } ;
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  CLRRESTARTDET;                /*!< (@ 0x000000A8) CLEAR RESTART_DET INTERRUPT REGISTER                       */
  __IOM uint32_t  SCLLOWTO;                     /*!< (@ 0x000000AC) I2C SCL STUCK AT LOW TIMEOUT REGISTER                      */
  __IOM uint32_t  SDALOWTO;                     /*!< (@ 0x000000B0) I2C SDA STUCK AT LOW TIMEOUT REGISTER                      */
  __IOM uint32_t  CLRSCLSTUCKDET;               /*!< (@ 0x000000B4) CLEAR SCL STUCK AT LOW DETECT INTERRUPT REGISTER           */
} DW_I2C_Type;                                  /*!< Size = 184 (0xb8)                                                         */



/* =========================================================================================================================== */
/* ================                                          STRIP0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief ARGB LED STRIP Controller (STRIP0)
  */

typedef struct {                                /*!< (@ 0x40101600) STRIP0 Structure                                           */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) LED STRIP CONTROL REGISTER                                 */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] LED STRIP ENABLE                                                   */
      __IOM uint32_t START      : 1;            /*!< [1..1] LED STRIP START. 1=Start data buffer transmit. W1C clears          */
      __IOM uint32_t STOP       : 1;            /*!< [2..2] LED STRIP STOP. 1=stop after this transmit cycle is complete       */
      __IOM uint32_t PENDEN     : 1;            /*!< [3..3] LED STRIP PENDING CODE ENABLE                                      */
      __IOM uint32_t MDSEL      : 2;            /*!< [5..4] LED MODE SELECT                                                    */
      __IOM uint32_t FINISHINTEN : 1;           /*!< [6..6] LED STRIP FINISH INTERRUPT ENABLE                                  */
      __IOM uint32_t FINISHINTSTS : 1;          /*!< [7..7] LED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy
                                                     flag from 1 to 0                                                          */
      __IOM uint32_t FINISHSTS  : 1;            /*!< [8..8] LED STRIP FINISH STATUS: 1=Data transfer is finished;
                                                     0=interface is idle                                                       */
            uint32_t            : 7;
      __IOM uint32_t REPCY      : 8;            /*!< [23..16] LED STRIP REPEAT CYCLE. Output strip data size is [REPCY
                                                     * (TRANSLEN +1)]                                                          */
            uint32_t            : 8;
    } CONTROL_b;
  } ;
  
  union {
    __IOM uint32_t CODE0;                       /*!< (@ 0x00000004) LED STRIP 0 CODE                                           */
    
    struct {
      __IOM uint32_t ZCLW       : 6;            /*!< [5..0] LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW
                                                     + 2) * period of clk_fnd (40ns)                                           */
            uint32_t            : 2;
      __IOM uint32_t ZCHW       : 6;            /*!< [13..8] LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW
                                                     + 2) * period of clk_fnd (40ns)                                           */
            uint32_t            : 18;
    } CODE0_b;
  } ;
  
  union {
    __IOM uint32_t CODE1;                       /*!< (@ 0x00000008) LED STRIP 1 CODE                                           */
    
    struct {
      __IOM uint32_t OCLW       : 6;            /*!< [5..0] LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW
                                                     + 2) * period of clk_fnd (40ns)                                           */
            uint32_t            : 2;
      __IOM uint32_t OCHW       : 6;            /*!< [13..8] LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW
                                                     + 2) * period of clk_fnd (40ns)                                           */
            uint32_t            : 18;
    } CODE1_b;
  } ;
  
  union {
    __IOM uint32_t RSTW;                        /*!< (@ 0x0000000C) LED STRIP RESET WIDTH REGISTER                             */
    
    struct {
      __IOM uint32_t RSTW       : 32;           /*!< [31..0] LED strip reset time = (RSTW + 1) * period of clk_fnd
                                                     (40ns).  RSTLW [5:0] is treated as 1_11111b internally.                   */
    } RSTW_b;
  } ;
  
  union {
    __IOM uint32_t PENDW;                       /*!< (@ 0x00000010) Pending Width Control Register                             */
    
    struct {
      __IOM uint32_t PENDW      : 6;            /*!< [5..0] These bits control pending time before the next LED strip
                                                     data is transferred.                                                      */
            uint32_t            : 26;
    } PENDW_b;
  } ;
  
  union {
    __IOM uint32_t DSRC;                        /*!< (@ 0x00000014) LED STRIP Data Source Address                              */
    
    struct {
      __IOM uint32_t TRANSADD   : 32;           /*!< [31..0] Before starting an LED STRIP Transmit, this field must
                                                     be initialized to contain the Base Address of the buffer
                                                     in SRAM.                                                                  */
    } DSRC_b;
  } ;
  
  union {
    __IOM uint32_t TRANSLEN;                    /*!< (@ 0x00000018) Transmit Length Register                                   */
    
    struct {
      __IOM uint32_t TRANSLEN   : 14;           /*!< [13..0] Specifies how many bytes are to be transmitted from
                                                     the Transmit Buffer memory.                                               */
            uint32_t            : 18;
    } TRANSLEN_b;
  } ;
  
  union {
    __IOM uint32_t ADVCMD;                      /*!< (@ 0x0000001C) Advanced Command Register                                  */
    
    struct {
      __IOM uint32_t ADVEN      : 1;            /*!< [0..0] Enable advanced command execution                                  */
      __IOM uint32_t ADVCMD     : 3;            /*!< [3..1] Advanced command selector.  0x00: AVD_TH50 0x01: AVD_TH20
                                                     0x02: AVD_SLEEP 0x03: AVD_WAKEUP 0x04: AVD_SET_ID 0x05:
                                                     AVD_CLEAN_ID 0x06: AVD_CHECK_ID 0x07: AVD_SPECIFY_ID                      */
            uint32_t            : 28;
    } ADVCMD_b;
  } ;
  
  union {
    __IOM uint32_t TH50CTRL0;                   /*!< (@ 0x00000020) ADV_TH50 Command Timing Register                           */
    
    struct {
      __IOM uint32_t TH50H1T    : 12;           /*!< [11..0] Indicate the 1st high pulse width (number of count base
                                                     on 24MHz) of ADV_TH50 command.                                            */
            uint32_t            : 4;
      __IOM uint32_t TH50L1T    : 12;           /*!< [27..16] Indicate the 1st low pulse width (number of count base
                                                     on 24MHz) of ADV_TH50 command.                                            */
            uint32_t            : 4;
    } TH50CTRL0_b;
  } ;
  
  union {
    __IOM uint32_t TH50CTRL1;                   /*!< (@ 0x00000024) ADV_TH50 2nd Pulse Timing Register                         */
    
    struct {
      __IOM uint32_t TH50H2T    : 12;           /*!< [11..0] Indicate the 2nd high pulse width (number of count based
                                                     on 24MHz) of ADV_TH50 command.                                            */
            uint32_t            : 4;
      __IOM uint32_t TH50L2T    : 12;           /*!< [27..16] Indicate the 2nd low pulse width (number of count based
                                                     on 24MHz) of ADV_TH50 command.                                            */
            uint32_t            : 4;
    } TH50CTRL1_b;
  } ;
  
  union {
    __IOM uint32_t TH50RX;                      /*!< (@ 0x00000028) TH50 Receive Register                                      */
    
    struct {
      __IOM uint32_t RX_TH50_PRE : 8;           /*!< [7..0] TH50 pre-received data (bits 7:0).                                 */
      __IOM uint32_t RX_TH50    : 8;            /*!< [15..8] Received TH50 data (bits 15:8).                                   */
            uint32_t            : 16;
    } TH50RX_b;
  } ;
  
  union {
    __IOM uint32_t TH50TO;                      /*!< (@ 0x0000002C) ADV_TH50 Timeout Register                                  */
    
    struct {
      __IOM uint32_t TH50TO     : 12;           /*!< [11..0] Indicate the timeout pulse width (number of count based
                                                     on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when
                                                     there is no response pulse within the time of TH50TO.                     */
            uint32_t            : 20;
    } TH50TO_b;
  } ;
  
  union {
    __IOM uint32_t AVDPRLCTRL0;                 /*!< (@ 0x00000030) ARGB Gen2 Parallel Control Register 0                      */
    
    struct {
      __IOM uint32_t TH20HT     : 12;           /*!< [11..0] High pulse width (counts, 24MHz) of ADV_TH20 command              */
      __IOM uint32_t ADVWKLT    : 8;            /*!< [19..12] Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command,
                                                     default ~1ms                                                              */
      __IOM uint32_t ADVWKHT    : 8;            /*!< [27..20] High pulse width (counts, 24MHz) of ADV_WAKUP command            */
      __IOM uint32_t ADVID      : 4;            /*!< [31..28] Dynamic ID number for ARGB gen2 parallel mode                    */
    } AVDPRLCTRL0_b;
  } ;
  
  union {
    __IOM uint32_t AVDPRLCTRL1;                 /*!< (@ 0x00000034) ARGB Gen2 Parallel Control Register 1                      */
    
    struct {
      __IOM uint32_t PRLHT      : 12;           /*!< [11..0] High pulse width (counts, 24MHz) of ADV_SET_ID command            */
            uint32_t            : 4;
      __IOM uint32_t PRLLT      : 12;           /*!< [27..16] Low pulse width (counts, 24MHz) of ADV_SET_ID command            */
            uint32_t            : 4;
    } AVDPRLCTRL1_b;
  } ;
  
  union {
    __IOM uint32_t AVDPRLTO;                    /*!< (@ 0x00000038) ADV_SET_ID Timeout Register                                */
    
    struct {
      __IOM uint32_t PRLTO      : 12;           /*!< [11..0] Timeout low pulse width (counts, 24MHz) of ADV_SET_ID
                                                     command                                                                   */
            uint32_t            : 20;
    } AVDPRLTO_b;
  } ;
  
  union {
    __IOM uint32_t RECVADDR;                    /*!< (@ 0x0000003C) SRAM Address for Receiving Gen2 ARGB Data                  */
    
    struct {
      __IOM uint32_t RECVADDR   : 32;           /*!< [31..0] SRAM address for receiving Gen2 ARGB data                         */
    } RECVADDR_b;
  } ;
  
  union {
    __IOM uint32_t RECVCNT;                     /*!< (@ 0x00000040) Receive Data Count Register                                */
    
    struct {
      __IOM uint32_t RECVCNT    : 8;            /*!< [7..0] Receive data count                                                 */
            uint32_t            : 24;
    } RECVCNT_b;
  } ;
  
  union {
    __IOM uint32_t ADVSTS;                      /*!< (@ 0x00000044) Status Register                                            */
    
    struct {
      __IOM uint32_t ADVTO      : 1;            /*!< [0..0] Timeout Flag (W1C)                                                 */
      __IOM uint32_t ID_ACK     : 1;            /*!< [1..1] ID Acknowledge (W1C)                                               */
            uint32_t            : 30;
    } ADVSTS_b;
  } ;
  
  union {
    __IOM uint32_t ADVINT;                      /*!< (@ 0x00000048) ADV Interrupt Enable Register                              */
    
    struct {
      __IOM uint32_t ADVTOINT_EN : 1;           /*!< [0..0] ADV Timeout Interrupt Enable                                       */
            uint32_t            : 31;
    } ADVINT_b;
  } ;
} STRIP_Type;                                   /*!< Size = 76 (0x4c)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Controller (GPIO)
  */

typedef struct {                                /*!< (@ 0x40110000) GPIO Structure                                             */
  
  union {
    __IOM uint32_t GCR[61];                     /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t DIR        : 1;            /*!< [0..0] Direction                                                          */
      __IOM uint32_t INDETEN    : 1;            /*!< [1..1] Input Detection Enable                                             */
      __IOM uint32_t INVOLMD    : 1;            /*!< [2..2] Input Voltage Mode                                                 */
      __IM  uint32_t PINSTS     : 1;            /*!< [3..3] Status of GPIO Pin                                                 */
            uint32_t            : 4;
      __IOM uint32_t MFCTRL     : 3;            /*!< [10..8] Multiple Function Control                                         */
      __IOM uint32_t OUTDRV     : 1;            /*!< [11..11] Driving Current Selection                                        */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [12..12] Slew Rate Selection                                              */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [13..13] Internal Pull-Down Resistor Enable                               */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [14..14] Internal Pull-Up Resistor Enable                                 */
      __IOM uint32_t SCHEN      : 1;            /*!< [15..15] Schmitter-Trigger Enable                                         */
      __IOM uint32_t OUTMD      : 1;            /*!< [16..16] Output Mode Selection                                            */
      __IOM uint32_t OUTCTRL    : 1;            /*!< [17..17] Output Control                                                   */
            uint32_t            : 6;
      __IOM uint32_t INTCTRL    : 3;            /*!< [26..24] Type of GPIO Interrupt                                           */
            uint32_t            : 1;
      __IOM uint32_t INTEN      : 1;            /*!< [28..28] Interrupt Enable                                                 */
            uint32_t            : 2;
      __IOM uint32_t INTSTS     : 1;            /*!< [31..31] Interrupt Status                                                 */
    } GCR_b[61];
  } ;
} GPIO_Type;                                    /*!< Size = 244 (0xf4)                                                         */



/* =========================================================================================================================== */
/* ================                                          PWMLED0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief PWM LED Controller (PWMLED0)
  */

typedef struct {                                /*!< (@ 0x40121000) PWMLED0 Structure                                          */
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000000) MODE REGISTER                                              */
    
    struct {
      __IOM uint32_t SEL        : 2;            /*!< [1..0] Mode Selection                                                     */
            uint32_t            : 30;
    } MODE_b;
  } ;
  
  union {
    __IOM uint32_t DL;                          /*!< (@ 0x00000004) DUTY LIMIT REGISTER                                        */
    
    struct {
      __IOM uint32_t MINV       : 8;            /*!< [7..0] Minimum Duty Cycle                                                 */
      __IOM uint32_t MAXV       : 8;            /*!< [15..8] Maximum Duty Cycle                                                */
            uint32_t            : 16;
    } DL_b;
  } ;
  
  union {
    __IOM uint32_t WT;                          /*!< (@ 0x00000008) WAIT TIME REGISTER                                         */
    
    struct {
      __IOM uint32_t LKV        : 12;           /*!< [11..0] Low wait-time                                                     */
            uint32_t            : 4;
      __IOM uint32_t HKV        : 12;           /*!< [27..16] High wait-time                                                   */
            uint32_t            : 4;
    } WT_b;
  } ;
  
  union {
    __IOM uint32_t SD;                          /*!< (@ 0x0000000C) STEP DUTY REGISTER                                         */
    
    struct {
      __IOM uint32_t STEP0DV    : 4;            /*!< [3..0] Step0 Duty Value                                                   */
      __IOM uint32_t STEP1DV    : 4;            /*!< [7..4] Step1 Duty Value                                                   */
      __IOM uint32_t STEP2DV    : 4;            /*!< [11..8] Step2 Duty Value                                                  */
      __IOM uint32_t STEP3DV    : 4;            /*!< [15..12] Step3 Duty Value                                                 */
      __IOM uint32_t STEP4DV    : 4;            /*!< [19..16] Step4 Duty Value                                                 */
      __IOM uint32_t STEP5DV    : 4;            /*!< [23..20] Step5 Duty Value                                                 */
      __IOM uint32_t STEP6DV    : 4;            /*!< [27..24] Step6 Duty Value                                                 */
      __IOM uint32_t STEP7DV    : 4;            /*!< [31..28] Step7 Duty Value                                                 */
    } SD_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000010) STEP TIME REGISTER                                         */
    
    struct {
      __IOM uint32_t STEP0TV    : 4;            /*!< [3..0] Step0 Time Value                                                   */
      __IOM uint32_t STEP1TV    : 4;            /*!< [7..4] Step1 Time Value                                                   */
      __IOM uint32_t STEP2TV    : 4;            /*!< [11..8] Step2 Time Value                                                  */
      __IOM uint32_t STEP3TV    : 4;            /*!< [15..12] Step3 Time Value                                                 */
      __IOM uint32_t STEP4TV    : 4;            /*!< [19..16] Step4 Time Value                                                 */
      __IOM uint32_t STEP5TV    : 4;            /*!< [23..20] Step5 Time Value                                                 */
      __IOM uint32_t STEP6TV    : 4;            /*!< [27..24] Step6 Time Value                                                 */
      __IOM uint32_t STEP7TV    : 4;            /*!< [31..28] Step7 Time Value                                                 */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000014) CONTROL REGISTER                                           */
    
    struct {
            uint32_t            : 16;
      __IOM uint32_t CYCLE      : 8;            /*!< [23..16] The number of output cycle                                       */
            uint32_t            : 4;
      __IOM uint32_t OUTPUT     : 1;            /*!< [28..28] Control the output method                                        */
      __IOM uint32_t INVT       : 1;            /*!< [29..29] Output Inverter Control                                          */
      __IOM uint32_t RST        : 1;            /*!< [30..30] Reset PWM LED Controller                                         */
      __IOM uint32_t EN         : 1;            /*!< [31..31] Enable PWMLED Controller                                         */
    } CTRL_b;
  } ;
} PWMLED_Type;                                  /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           TMR0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer Controller (TMR0)
  */

typedef struct {                                /*!< (@ 0x40121400) TMR0 Structure                                             */
  __IOM uint32_t  LDCNT;                        /*!< (@ 0x00000000) LOAD COUNTER REGISTER                                      */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000004) CURRENT COUNTER REGISTER                                   */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000008) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable Timer Contoller                                             */
      __IOM uint32_t MDSEL      : 1;            /*!< [1..1] Timer Operating Mode Selection                                     */
      __IOM uint32_t INTEN      : 1;            /*!< [2..2] Enable Timer Interrupt                                             */
      __IOM uint32_t STOP       : 1;            /*!< [3..3] Stop timer                                                         */
            uint32_t            : 28;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t INTSTS;                      /*!< (@ 0x0000000C) INTERRUPT STATUS REGISTER                                  */
    
    struct {
      __IOM uint32_t STS        : 1;            /*!< [0..0] Timer Interrupt Status                                             */
            uint32_t            : 31;
    } INTSTS_b;
  } ;
} TMR_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           CRC32                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief CRC32 Engine (CRC32)
  */

typedef struct {                                /*!< (@ 0x40122000) CRC32 Structure                                            */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) Control register                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable CRC32. Controls whether CRC32 is enabled or disabled.       */
      __IOM uint32_t INIT       : 1;            /*!< [1..1] Initialize checksum. Resets CHKSUM to 0xFFFFFFFF and
                                                     auto-clears to '0'.                                                       */
            uint32_t            : 30;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t INPUT;                       /*!< (@ 0x00000004) Data input register for CRC32 computation.                 */
    
    struct {
      __IOM uint32_t INPUT      : 32;           /*!< [31..0] Data input for CRC32.                                             */
    } INPUT_b;
  } ;
  __IOM uint32_t  RESULT;                       /*!< (@ 0x00000008) CRC32 Result Register                                      */
  __IOM uint32_t  CHKSUM;                       /*!< (@ 0x0000000C) Checksum Result Register                                   */
} CRC_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                          DOTMTX0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Dot Matrix Controller (DOTMTX0)
  */

typedef struct {                                /*!< (@ 0x40122100) DOTMTX0 Structure                                          */
  
  union {
    __IOM uint32_t DATASRC;                     /*!< (@ 0x00000000) Register indicating the source address for PWM
                                                                    data.                                                      */
    
    struct {
      __IOM uint32_t DSRC       : 32;           /*!< [31..0] Source address for PWM data.                                      */
    } DATASRC_b;
  } ;
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000004) Control register for matrix operations including
                                                                    interrupts and scan control.                               */
    
    struct {
      __IOM uint32_t START      : 1;            /*!< [0..0] Control matrix scan start or stop.                                 */
      __IOM uint32_t INTEN      : 1;            /*!< [1..1] Enable matrix interrupt.                                           */
      __IOM uint32_t INTTYPE    : 1;            /*!< [2..2] Interrupt type. Determines interrupt behavior for matrix
                                                     scans.                                                                    */
            uint32_t            : 29;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t COLCTRL;                     /*!< (@ 0x00000008) Column control register for matrix PWM and reference
                                                                    setup.                                                     */
    
    struct {
      __IOM uint32_t CHEN       : 16;           /*!< [15..0] Indicates which PWM channels are used for the matrix.             */
      __IOM uint32_t REFCH      : 4;            /*!< [19..16] Indicates which PWM channel is the reference source.             */
      __IOM uint32_t ROUND      : 8;            /*!< [27..20] Number of PWM cycles to run during the same row before
                                                     switching.                                                                */
            uint32_t            : 4;
    } COLCTRL_b;
  } ;
  
  union {
    __IOM uint32_t ROWCTRL;                     /*!< (@ 0x0000000C) Row control register for setting polarity and
                                                                    scan timing for dot matrix.                                */
    
    struct {
      __IOM uint32_t PSWNUM     : 4;            /*!< [3..0] Indicate how many scan rows the matrix uses.                       */
      __IOM uint32_t SWDELAY    : 8;            /*!< [11..4] Sets delay time before/after row scan switch.                     */
      __IOM uint32_t PSWODEN    : 10;           /*!< [21..12] Enable open-drain configuration on PSWn.                         */
      __IOM uint32_t PSWPOL     : 10;           /*!< [31..22] Setting active polarity for PSWn.                                */
    } ROWCTRL_b;
  } ;
  
  union {
    __IOM uint32_t ROWORD0;                     /*!< (@ 0x00000010) Register specifying scan order for matrix rows.            */
    
    struct {
      __IOM uint32_t PSWORD0    : 4;            /*!< [3..0] Indicate scan order for PSW0 row.                                  */
      __IOM uint32_t PSWORD1    : 4;            /*!< [7..4] Reference PSWORD0.                                                 */
      __IOM uint32_t PSWORD2    : 4;            /*!< [11..8] Reference PSWORD0.                                                */
      __IOM uint32_t PSWORD3    : 4;            /*!< [15..12] Reference PSWORD0.                                               */
      __IOM uint32_t PSWORD4    : 4;            /*!< [19..16] Reference PSWORD0.                                               */
      __IOM uint32_t PSWORD5    : 4;            /*!< [23..20] Reference PSWORD0.                                               */
      __IOM uint32_t PSWORD6    : 4;            /*!< [27..24] Reference PSWORD0.                                               */
      __IOM uint32_t PSWORD7    : 4;            /*!< [31..28] Reference PSWORD0.                                               */
    } ROWORD0_b;
  } ;
  
  union {
    __IOM uint32_t ROWORD1;                     /*!< (@ 0x00000014) Additional row control specifying scan order
                                                                    for remaining rows.                                        */
    
    struct {
      __IOM uint32_t PSWORD8    : 4;            /*!< [3..0] Reference PSWORD0.                                                 */
      __IOM uint32_t PSWORD9    : 4;            /*!< [7..4] Reference PSWORD0.                                                 */
            uint32_t            : 24;
    } ROWORD1_b;
  } ;
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000018) Status control register for matrix operations.             */
    
    struct {
      __IM  uint32_t CURROUND   : 8;            /*!< [7..0] Indicates current PWM cycle round for the matrix.                  */
      __IM  uint32_t CURROW     : 4;            /*!< [11..8] Indicates current scan row for matrix operation.                  */
      __IOM uint32_t INTSTS     : 1;            /*!< [12..12] Interrupt flag for matrix operation.                             */
      __IOM uint32_t INTRDRDY   : 1;            /*!< [13..13] Interrupt flag for APB read without response.                    */
      __IOM uint32_t INTWRRDY   : 1;            /*!< [14..14] Interrupt flag for APB write without response.                   */
            uint32_t            : 17;
    } STS_b;
  } ;
  __IOM uint32_t  PWMADDR;                      /*!< (@ 0x0000001C) Indicate the written address for PWM data.                 */
} DOTMTX_Type;                                  /*!< Size = 32 (0x20)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define ITR_SPIC_BASE               0x40000000UL
#define ETR_SPIC_BASE               0x40001000UL
#define DMA_BASE                    0x40002000UL
#define USB_CORE_BASE               0x40040000UL
#define USB_HOST_BASE               0x40040400UL
#define USB_DEVICE_BASE             0x40040800UL
#define USB_IN_EP_BASE              0x40040900UL
#define USB_OUT_EP_BASE             0x40040B00UL
#define SYSTEM_BASE                 0x40100000UL
#define RCCAL_BASE                  0x40100100UL
#define SPIM_BASE                   0x40100300UL
#define SPIS_BASE                   0x40100400UL
#define UART_BASE                   0x40100700UL
#define TACHO0_BASE                 0x40100900UL
#define TACHO1_BASE                 0x40100920UL
#define TACHO2_BASE                 0x40100940UL
#define TACHO3_BASE                 0x40100960UL
#define WDT_BASE                    0x40100980UL
#define I2C0_BASE                   0x40101000UL
#define I2C1_BASE                   0x40101200UL
#define I2C2_BASE                   0x40101400UL
#define STRIP0_BASE                 0x40101600UL
#define STRIP1_BASE                 0x40101700UL
#define STRIP2_BASE                 0x40101800UL
#define STRIP3_BASE                 0x40101900UL
#define STRIP4_BASE                 0x40101A00UL
#define STRIP5_BASE                 0x40101B00UL
#define STRIP6_BASE                 0x40101C00UL
#define STRIP7_BASE                 0x40101D00UL
#define STRIP8_BASE                 0x40101E00UL
#define GPIO_BASE                   0x40110000UL
#define PWMLED0_BASE                0x40121000UL
#define PWMLED1_BASE                0x40121020UL
#define PWMLED2_BASE                0x40121040UL
#define PWMLED3_BASE                0x40121060UL
#define PWMLED4_BASE                0x40121080UL
#define PWMLED5_BASE                0x401210A0UL
#define PWMLED6_BASE                0x401210C0UL
#define PWMLED7_BASE                0x401210E0UL
#define PWMLED8_BASE                0x40121100UL
#define PWMLED9_BASE                0x40121120UL
#define PWMLED10_BASE               0x40121140UL
#define PWMLED11_BASE               0x40121160UL
#define PWMLED12_BASE               0x40121180UL
#define PWMLED13_BASE               0x401211A0UL
#define PWMLED14_BASE               0x401211C0UL
#define PWMLED15_BASE               0x401211E0UL
#define PWMLED16_BASE               0x40121200UL
#define PWMLED17_BASE               0x40121220UL
#define PWMLED18_BASE               0x40121240UL
#define PWMLED19_BASE               0x40121260UL
#define PWMLED20_BASE               0x40121280UL
#define PWMLED21_BASE               0x401212A0UL
#define PWMLED22_BASE               0x401212C0UL
#define PWMLED23_BASE               0x401212E0UL
#define PWMLED24_BASE               0x40121300UL
#define PWMLED25_BASE               0x40121320UL
#define PWMLED26_BASE               0x40121340UL
#define PWMLED27_BASE               0x40121360UL
#define PWMLED28_BASE               0x40121380UL
#define PWMLED29_BASE               0x401213A0UL
#define PWMLED30_BASE               0x401213C0UL
#define PWMLED31_BASE               0x401213E0UL
#define TMR0_BASE                   0x40121400UL
#define TMR1_BASE                   0x40121410UL
#define TMR2_BASE                   0x40121420UL
#define TMR3_BASE                   0x40121430UL
#define CRC32_BASE                  0x40122000UL
#define DOTMTX0_BASE                0x40122100UL
#define DOTMTX1_BASE                0x40122120UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define ITR_SPIC                    ((SPIC_Type*)              ITR_SPIC_BASE)
#define ETR_SPIC                    ((SPIC_Type*)              ETR_SPIC_BASE)
#define DMA                         ((DMAC_Type*)              DMA_BASE)
#define USB_CORE                    ((USB_OTG_CORE_Type*)      USB_CORE_BASE)
#define USB_HOST                    ((USB_OTG_HOST_Type*)      USB_HOST_BASE)
#define USB_DEVICE                  ((USB_OTG_DEVICE_Type*)    USB_DEVICE_BASE)
#define USB_IN_EP                   ((USB_OTG_IN_EP_Type*)     USB_IN_EP_BASE)
#define USB_OUT_EP                  ((USB_OTG_OUT_EP_Type*)    USB_OUT_EP_BASE)
#define SYSTEM                      ((SYSTEM_Type*)            SYSTEM_BASE)
#define RCCAL                       ((RCCAL_Type*)             RCCAL_BASE)
#define SPIM                        ((DW_SPI_Type*)            SPIM_BASE)
#define SPIS                        ((DW_SPI_Type*)            SPIS_BASE)
#define UART                        ((DW_UART_Type*)           UART_BASE)
#define TACHO0                      ((TACHO_Type*)             TACHO0_BASE)
#define TACHO1                      ((TACHO_Type*)             TACHO1_BASE)
#define TACHO2                      ((TACHO_Type*)             TACHO2_BASE)
#define TACHO3                      ((TACHO_Type*)             TACHO3_BASE)
#define WDT                         ((WDT_Type*)               WDT_BASE)
#define I2C0                        ((DW_I2C_Type*)            I2C0_BASE)
#define I2C1                        ((DW_I2C_Type*)            I2C1_BASE)
#define I2C2                        ((DW_I2C_Type*)            I2C2_BASE)
#define STRIP0                      ((STRIP_Type*)             STRIP0_BASE)
#define STRIP1                      ((STRIP_Type*)             STRIP1_BASE)
#define STRIP2                      ((STRIP_Type*)             STRIP2_BASE)
#define STRIP3                      ((STRIP_Type*)             STRIP3_BASE)
#define STRIP4                      ((STRIP_Type*)             STRIP4_BASE)
#define STRIP5                      ((STRIP_Type*)             STRIP5_BASE)
#define STRIP6                      ((STRIP_Type*)             STRIP6_BASE)
#define STRIP7                      ((STRIP_Type*)             STRIP7_BASE)
#define STRIP8                      ((STRIP_Type*)             STRIP8_BASE)
#define GPIO                        ((GPIO_Type*)              GPIO_BASE)
#define PWMLED0                     ((PWMLED_Type*)            PWMLED0_BASE)
#define PWMLED1                     ((PWMLED_Type*)            PWMLED1_BASE)
#define PWMLED2                     ((PWMLED_Type*)            PWMLED2_BASE)
#define PWMLED3                     ((PWMLED_Type*)            PWMLED3_BASE)
#define PWMLED4                     ((PWMLED_Type*)            PWMLED4_BASE)
#define PWMLED5                     ((PWMLED_Type*)            PWMLED5_BASE)
#define PWMLED6                     ((PWMLED_Type*)            PWMLED6_BASE)
#define PWMLED7                     ((PWMLED_Type*)            PWMLED7_BASE)
#define PWMLED8                     ((PWMLED_Type*)            PWMLED8_BASE)
#define PWMLED9                     ((PWMLED_Type*)            PWMLED9_BASE)
#define PWMLED10                    ((PWMLED_Type*)            PWMLED10_BASE)
#define PWMLED11                    ((PWMLED_Type*)            PWMLED11_BASE)
#define PWMLED12                    ((PWMLED_Type*)            PWMLED12_BASE)
#define PWMLED13                    ((PWMLED_Type*)            PWMLED13_BASE)
#define PWMLED14                    ((PWMLED_Type*)            PWMLED14_BASE)
#define PWMLED15                    ((PWMLED_Type*)            PWMLED15_BASE)
#define PWMLED16                    ((PWMLED_Type*)            PWMLED16_BASE)
#define PWMLED17                    ((PWMLED_Type*)            PWMLED17_BASE)
#define PWMLED18                    ((PWMLED_Type*)            PWMLED18_BASE)
#define PWMLED19                    ((PWMLED_Type*)            PWMLED19_BASE)
#define PWMLED20                    ((PWMLED_Type*)            PWMLED20_BASE)
#define PWMLED21                    ((PWMLED_Type*)            PWMLED21_BASE)
#define PWMLED22                    ((PWMLED_Type*)            PWMLED22_BASE)
#define PWMLED23                    ((PWMLED_Type*)            PWMLED23_BASE)
#define PWMLED24                    ((PWMLED_Type*)            PWMLED24_BASE)
#define PWMLED25                    ((PWMLED_Type*)            PWMLED25_BASE)
#define PWMLED26                    ((PWMLED_Type*)            PWMLED26_BASE)
#define PWMLED27                    ((PWMLED_Type*)            PWMLED27_BASE)
#define PWMLED28                    ((PWMLED_Type*)            PWMLED28_BASE)
#define PWMLED29                    ((PWMLED_Type*)            PWMLED29_BASE)
#define PWMLED30                    ((PWMLED_Type*)            PWMLED30_BASE)
#define PWMLED31                    ((PWMLED_Type*)            PWMLED31_BASE)
#define TMR0                        ((TMR_Type*)               TMR0_BASE)
#define TMR1                        ((TMR_Type*)               TMR1_BASE)
#define TMR2                        ((TMR_Type*)               TMR2_BASE)
#define TMR3                        ((TMR_Type*)               TMR3_BASE)
#define CRC32                       ((CRC_Type*)               CRC32_BASE)
#define DOTMTX0                     ((DOTMTX_Type*)            DOTMTX0_BASE)
#define DOTMTX1                     ((DOTMTX_Type*)            DOTMTX1_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           SPIC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CTRLR0  ========================================================= */
#define SPIC_CTRLR0_USER_MODE_Pos         (31UL)                    /*!< USER_MODE (Bit 31)                                    */
#define SPIC_CTRLR0_USER_MODE_Msk         (0x80000000UL)            /*!< USER_MODE (Bitfield-Mask: 0x01)                       */
#define SPIC_CTRLR0_UAR_Pos               (30UL)                    /*!< UAR (Bit 30)                                          */
#define SPIC_CTRLR0_UAR_Msk               (0x40000000UL)            /*!< UAR (Bitfield-Mask: 0x01)                             */
#define SPIC_CTRLR0_CK_MTIMES_Pos         (23UL)                    /*!< CK_MTIMES (Bit 23)                                    */
#define SPIC_CTRLR0_CK_MTIMES_Msk         (0xf800000UL)             /*!< CK_MTIMES (Bitfield-Mask: 0x1f)                       */
#define SPIC_CTRLR0_FAST_RD_Pos           (22UL)                    /*!< FAST_RD (Bit 22)                                      */
#define SPIC_CTRLR0_FAST_RD_Msk           (0x400000UL)              /*!< FAST_RD (Bitfield-Mask: 0x01)                         */
#define SPIC_CTRLR0_CMD_CH_Pos            (20UL)                    /*!< CMD_CH (Bit 20)                                       */
#define SPIC_CTRLR0_CMD_CH_Msk            (0x300000UL)              /*!< CMD_CH (Bitfield-Mask: 0x03)                          */
#define SPIC_CTRLR0_DATA_CH_Pos           (18UL)                    /*!< DATA_CH (Bit 18)                                      */
#define SPIC_CTRLR0_DATA_CH_Msk           (0xc0000UL)               /*!< DATA_CH (Bitfield-Mask: 0x03)                         */
#define SPIC_CTRLR0_ADDR_CH_Pos           (16UL)                    /*!< ADDR_CH (Bit 16)                                      */
#define SPIC_CTRLR0_ADDR_CH_Msk           (0x30000UL)               /*!< ADDR_CH (Bitfield-Mask: 0x03)                         */
#define SPIC_CTRLR0_DDR_EN_CMD_CH_Pos     (15UL)                    /*!< DDR_EN_CMD_CH (Bit 15)                                */
#define SPIC_CTRLR0_DDR_EN_CMD_CH_Msk     (0x8000UL)                /*!< DDR_EN_CMD_CH (Bitfield-Mask: 0x01)                   */
#define SPIC_CTRLR0_DDR_EN_DATA_CH_Pos    (14UL)                    /*!< DDR_EN_DATA_CH (Bit 14)                               */
#define SPIC_CTRLR0_DDR_EN_DATA_CH_Msk    (0x4000UL)                /*!< DDR_EN_DATA_CH (Bitfield-Mask: 0x01)                  */
#define SPIC_CTRLR0_DDR_EN_ADDR_CH_Pos    (13UL)                    /*!< DDR_EN_ADDR_CH (Bit 13)                               */
#define SPIC_CTRLR0_DDR_EN_ADDR_CH_Msk    (0x2000UL)                /*!< DDR_EN_ADDR_CH (Bitfield-Mask: 0x01)                  */
#define SPIC_CTRLR0_GCLK_DIS_Pos          (10UL)                    /*!< GCLK_DIS (Bit 10)                                     */
#define SPIC_CTRLR0_GCLK_DIS_Msk          (0x400UL)                 /*!< GCLK_DIS (Bitfield-Mask: 0x01)                        */
#define SPIC_CTRLR0_TMOD_Pos              (8UL)                     /*!< TMOD (Bit 8)                                          */
#define SPIC_CTRLR0_TMOD_Msk              (0x300UL)                 /*!< TMOD (Bitfield-Mask: 0x03)                            */
#define SPIC_CTRLR0_SCPOL_Pos             (7UL)                     /*!< SCPOL (Bit 7)                                         */
#define SPIC_CTRLR0_SCPOL_Msk             (0x80UL)                  /*!< SCPOL (Bitfield-Mask: 0x01)                           */
#define SPIC_CTRLR0_SCPH_Pos              (6UL)                     /*!< SCPH (Bit 6)                                          */
#define SPIC_CTRLR0_SCPH_Msk              (0x40UL)                  /*!< SCPH (Bitfield-Mask: 0x01)                            */
#define SPIC_CTRLR0_SIPOL_EN_Pos          (5UL)                     /*!< SIPOL_EN (Bit 5)                                      */
#define SPIC_CTRLR0_SIPOL_EN_Msk          (0x20UL)                  /*!< SIPOL_EN (Bitfield-Mask: 0x01)                        */
#define SPIC_CTRLR0_SIPOL_Pos             (0UL)                     /*!< SIPOL (Bit 0)                                         */
#define SPIC_CTRLR0_SIPOL_Msk             (0x1fUL)                  /*!< SIPOL (Bitfield-Mask: 0x1f)                           */
/* ========================================================  RX_NDF  ========================================================= */
#define SPIC_RX_NDF_NDF_Pos               (0UL)                     /*!< NDF (Bit 0)                                           */
#define SPIC_RX_NDF_NDF_Msk               (0x1ffffffUL)             /*!< NDF (Bitfield-Mask: 0x1ffffff)                        */
/* ========================================================  SSIENR  ========================================================= */
#define SPIC_SSIENR_CUR_GP_Pos            (10UL)                    /*!< CUR_GP (Bit 10)                                       */
#define SPIC_SSIENR_CUR_GP_Msk            (0xc00UL)                 /*!< CUR_GP (Bitfield-Mask: 0x03)                          */
#define SPIC_SSIENR_GP_NUM_Pos            (8UL)                     /*!< GP_NUM (Bit 8)                                        */
#define SPIC_SSIENR_GP_NUM_Msk            (0x300UL)                 /*!< GP_NUM (Bitfield-Mask: 0x03)                          */
#define SPIC_SSIENR_PGM_RST_TEST_EN_Pos   (4UL)                     /*!< PGM_RST_TEST_EN (Bit 4)                               */
#define SPIC_SSIENR_PGM_RST_TEST_EN_Msk   (0x10UL)                  /*!< PGM_RST_TEST_EN (Bitfield-Mask: 0x01)                 */
#define SPIC_SSIENR_FRQC_Pos              (2UL)                     /*!< FRQC (Bit 2)                                          */
#define SPIC_SSIENR_FRQC_Msk              (0x4UL)                   /*!< FRQC (Bitfield-Mask: 0x01)                            */
#define SPIC_SSIENR_ATCK_CMD_Pos          (1UL)                     /*!< ATCK_CMD (Bit 1)                                      */
#define SPIC_SSIENR_ATCK_CMD_Msk          (0x2UL)                   /*!< ATCK_CMD (Bitfield-Mask: 0x01)                        */
#define SPIC_SSIENR_SPIC_EN_Pos           (0UL)                     /*!< SPIC_EN (Bit 0)                                       */
#define SPIC_SSIENR_SPIC_EN_Msk           (0x1UL)                   /*!< SPIC_EN (Bitfield-Mask: 0x01)                         */
/* ==========================================================  SER  ========================================================== */
/* =========================================================  BAUDR  ========================================================= */
#define SPIC_BAUDR_SCKDV_Pos              (0UL)                     /*!< SCKDV (Bit 0)                                         */
#define SPIC_BAUDR_SCKDV_Msk              (0xfffUL)                 /*!< SCKDV (Bitfield-Mask: 0xfff)                          */
/* ========================================================  TXFTLR  ========================================================= */
#define SPIC_TXFTLR_TFT_Pos               (0UL)                     /*!< TFT (Bit 0)                                           */
#define SPIC_TXFTLR_TFT_Msk               (0x1fUL)                  /*!< TFT (Bitfield-Mask: 0x1f)                             */
/* ========================================================  RXFTLR  ========================================================= */
#define SPIC_RXFTLR_RFT_Pos               (0UL)                     /*!< RFT (Bit 0)                                           */
#define SPIC_RXFTLR_RFT_Msk               (0x1fUL)                  /*!< RFT (Bitfield-Mask: 0x1f)                             */
/* =========================================================  TXFLR  ========================================================= */
#define SPIC_TXFLR_TXFLR_Pos              (0UL)                     /*!< TXFLR (Bit 0)                                         */
#define SPIC_TXFLR_TXFLR_Msk              (0x3fUL)                  /*!< TXFLR (Bitfield-Mask: 0x3f)                           */
/* =========================================================  RXFLR  ========================================================= */
#define SPIC_RXFLR_RXFLR_Pos              (0UL)                     /*!< RXFLR (Bit 0)                                         */
#define SPIC_RXFLR_RXFLR_Msk              (0x3fUL)                  /*!< RXFLR (Bitfield-Mask: 0x3f)                           */
/* ==========================================================  SR  =========================================================== */
#define SPIC_SR_ATWR_RDSR_N_Pos           (8UL)                     /*!< ATWR_RDSR_N (Bit 8)                                   */
#define SPIC_SR_ATWR_RDSR_N_Msk           (0x100UL)                 /*!< ATWR_RDSR_N (Bitfield-Mask: 0x01)                     */
#define SPIC_SR_BOOT_FIN_Pos              (7UL)                     /*!< BOOT_FIN (Bit 7)                                      */
#define SPIC_SR_BOOT_FIN_Msk              (0x80UL)                  /*!< BOOT_FIN (Bitfield-Mask: 0x01)                        */
#define SPIC_SR_DCOL_Pos                  (6UL)                     /*!< DCOL (Bit 6)                                          */
#define SPIC_SR_DCOL_Msk                  (0x40UL)                  /*!< DCOL (Bitfield-Mask: 0x01)                            */
#define SPIC_SR_TXE_Pos                   (5UL)                     /*!< TXE (Bit 5)                                           */
#define SPIC_SR_TXE_Msk                   (0x20UL)                  /*!< TXE (Bitfield-Mask: 0x01)                             */
#define SPIC_SR_RFF_Pos                   (4UL)                     /*!< RFF (Bit 4)                                           */
#define SPIC_SR_RFF_Msk                   (0x10UL)                  /*!< RFF (Bitfield-Mask: 0x01)                             */
#define SPIC_SR_RFNE_Pos                  (3UL)                     /*!< RFNE (Bit 3)                                          */
#define SPIC_SR_RFNE_Msk                  (0x8UL)                   /*!< RFNE (Bitfield-Mask: 0x01)                            */
#define SPIC_SR_TFE_Pos                   (2UL)                     /*!< TFE (Bit 2)                                           */
#define SPIC_SR_TFE_Msk                   (0x4UL)                   /*!< TFE (Bitfield-Mask: 0x01)                             */
#define SPIC_SR_TFNF_Pos                  (1UL)                     /*!< TFNF (Bit 1)                                          */
#define SPIC_SR_TFNF_Msk                  (0x2UL)                   /*!< TFNF (Bitfield-Mask: 0x01)                            */
#define SPIC_SR_BUSY_Pos                  (0UL)                     /*!< BUSY (Bit 0)                                          */
#define SPIC_SR_BUSY_Msk                  (0x1UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
/* ==========================================================  IMR  ========================================================== */
#define SPIC_IMR_ACSIM_Pos                (11UL)                    /*!< ACSIM (Bit 11)                                        */
#define SPIC_IMR_ACSIM_Msk                (0x800UL)                 /*!< ACSIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_RXSIM_Pos                (10UL)                    /*!< RXSIM (Bit 10)                                        */
#define SPIC_IMR_RXSIM_Msk                (0x400UL)                 /*!< RXSIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_TXSIM_Pos                (9UL)                     /*!< TXSIM (Bit 9)                                         */
#define SPIC_IMR_TXSIM_Msk                (0x200UL)                 /*!< TXSIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_ACEIM_Pos                (8UL)                     /*!< ACEIM (Bit 8)                                         */
#define SPIC_IMR_ACEIM_Msk                (0x100UL)                 /*!< ACEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_BYEIM_Pos                (7UL)                     /*!< BYEIM (Bit 7)                                         */
#define SPIC_IMR_BYEIM_Msk                (0x80UL)                  /*!< BYEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_WBEIM_Pos                (6UL)                     /*!< WBEIM (Bit 6)                                         */
#define SPIC_IMR_WBEIM_Msk                (0x40UL)                  /*!< WBEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_FSEIM_Pos                (5UL)                     /*!< FSEIM (Bit 5)                                         */
#define SPIC_IMR_FSEIM_Msk                (0x20UL)                  /*!< FSEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_RXFIM_Pos                (4UL)                     /*!< RXFIM (Bit 4)                                         */
#define SPIC_IMR_RXFIM_Msk                (0x10UL)                  /*!< RXFIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_RXOIM_Pos                (3UL)                     /*!< RXOIM (Bit 3)                                         */
#define SPIC_IMR_RXOIM_Msk                (0x8UL)                   /*!< RXOIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_RXUIM_Pos                (2UL)                     /*!< RXUIM (Bit 2)                                         */
#define SPIC_IMR_RXUIM_Msk                (0x4UL)                   /*!< RXUIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_TXOIM_Pos                (1UL)                     /*!< TXOIM (Bit 1)                                         */
#define SPIC_IMR_TXOIM_Msk                (0x2UL)                   /*!< TXOIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_TXEIM_Pos                (0UL)                     /*!< TXEIM (Bit 0)                                         */
#define SPIC_IMR_TXEIM_Msk                (0x1UL)                   /*!< TXEIM (Bitfield-Mask: 0x01)                           */
/* ==========================================================  ISR  ========================================================== */
#define SPIC_ISR_ACSIS_Pos                (11UL)                    /*!< ACSIS (Bit 11)                                        */
#define SPIC_ISR_ACSIS_Msk                (0x800UL)                 /*!< ACSIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_RXSIS_Pos                (10UL)                    /*!< RXSIS (Bit 10)                                        */
#define SPIC_ISR_RXSIS_Msk                (0x400UL)                 /*!< RXSIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_TXSIS_Pos                (9UL)                     /*!< TXSIS (Bit 9)                                         */
#define SPIC_ISR_TXSIS_Msk                (0x200UL)                 /*!< TXSIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_ACEIS_Pos                (8UL)                     /*!< ACEIS (Bit 8)                                         */
#define SPIC_ISR_ACEIS_Msk                (0x100UL)                 /*!< ACEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_BYEIS_Pos                (7UL)                     /*!< BYEIS (Bit 7)                                         */
#define SPIC_ISR_BYEIS_Msk                (0x80UL)                  /*!< BYEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_WBEIS_Pos                (6UL)                     /*!< WBEIS (Bit 6)                                         */
#define SPIC_ISR_WBEIS_Msk                (0x40UL)                  /*!< WBEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_FSEIS_Pos                (5UL)                     /*!< FSEIS (Bit 5)                                         */
#define SPIC_ISR_FSEIS_Msk                (0x20UL)                  /*!< FSEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_RXFIS_Pos                (4UL)                     /*!< RXFIS (Bit 4)                                         */
#define SPIC_ISR_RXFIS_Msk                (0x10UL)                  /*!< RXFIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_RXOIS_Pos                (3UL)                     /*!< RXOIS (Bit 3)                                         */
#define SPIC_ISR_RXOIS_Msk                (0x8UL)                   /*!< RXOIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_RXUIS_Pos                (2UL)                     /*!< RXUIS (Bit 2)                                         */
#define SPIC_ISR_RXUIS_Msk                (0x4UL)                   /*!< RXUIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_TXOIS_Pos                (1UL)                     /*!< TXOIS (Bit 1)                                         */
#define SPIC_ISR_TXOIS_Msk                (0x2UL)                   /*!< TXOIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_TXEIS_Pos                (0UL)                     /*!< TXEIS (Bit 0)                                         */
#define SPIC_ISR_TXEIS_Msk                (0x1UL)                   /*!< TXEIS (Bitfield-Mask: 0x01)                           */
/* =========================================================  RISR  ========================================================== */
#define SPIC_RISR_ACSIR_Pos               (11UL)                    /*!< ACSIR (Bit 11)                                        */
#define SPIC_RISR_ACSIR_Msk               (0x800UL)                 /*!< ACSIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_RXSIR_Pos               (10UL)                    /*!< RXSIR (Bit 10)                                        */
#define SPIC_RISR_RXSIR_Msk               (0x400UL)                 /*!< RXSIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_TXSIR_Pos               (9UL)                     /*!< TXSIR (Bit 9)                                         */
#define SPIC_RISR_TXSIR_Msk               (0x200UL)                 /*!< TXSIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_ACEIR_Pos               (8UL)                     /*!< ACEIR (Bit 8)                                         */
#define SPIC_RISR_ACEIR_Msk               (0x100UL)                 /*!< ACEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_BYEIR_Pos               (7UL)                     /*!< BYEIR (Bit 7)                                         */
#define SPIC_RISR_BYEIR_Msk               (0x80UL)                  /*!< BYEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_WBEIR_Pos               (6UL)                     /*!< WBEIR (Bit 6)                                         */
#define SPIC_RISR_WBEIR_Msk               (0x40UL)                  /*!< WBEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_FSEIR_Pos               (5UL)                     /*!< FSEIR (Bit 5)                                         */
#define SPIC_RISR_FSEIR_Msk               (0x20UL)                  /*!< FSEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_RXFIR_Pos               (4UL)                     /*!< RXFIR (Bit 4)                                         */
#define SPIC_RISR_RXFIR_Msk               (0x10UL)                  /*!< RXFIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_RXOIR_Pos               (3UL)                     /*!< RXOIR (Bit 3)                                         */
#define SPIC_RISR_RXOIR_Msk               (0x8UL)                   /*!< RXOIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_RXUIR_Pos               (2UL)                     /*!< RXUIR (Bit 2)                                         */
#define SPIC_RISR_RXUIR_Msk               (0x4UL)                   /*!< RXUIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_TXOIR_Pos               (1UL)                     /*!< TXOIR (Bit 1)                                         */
#define SPIC_RISR_TXOIR_Msk               (0x2UL)                   /*!< TXOIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_TXEIR_Pos               (0UL)                     /*!< TXEIR (Bit 0)                                         */
#define SPIC_RISR_TXEIR_Msk               (0x1UL)                   /*!< TXEIR (Bitfield-Mask: 0x01)                           */
/* ========================================================  TXOICR  ========================================================= */
/* ========================================================  RXOICR  ========================================================= */
/* ========================================================  RXUICR  ========================================================= */
/* ========================================================  MSTICR  ========================================================= */
/* ==========================================================  ICR  ========================================================== */
/* =========================================================  DMACR  ========================================================= */
#define SPIC_DMACR_TX_DMAC_EN_Pos         (1UL)                     /*!< TX_DMAC_EN (Bit 1)                                    */
#define SPIC_DMACR_TX_DMAC_EN_Msk         (0x2UL)                   /*!< TX_DMAC_EN (Bitfield-Mask: 0x01)                      */
#define SPIC_DMACR_RX_DMAC_EN_Pos         (0UL)                     /*!< RX_DMAC_EN (Bit 0)                                    */
#define SPIC_DMACR_RX_DMAC_EN_Msk         (0x1UL)                   /*!< RX_DMAC_EN (Bitfield-Mask: 0x01)                      */
/* ========================================================  DMATDLR  ======================================================== */
/* ========================================================  DMARDLR  ======================================================== */
/* ==========================================================  IDR  ========================================================== */
/* =====================================================  SPIC_VERSION  ====================================================== */
/* ==========================================================  DR  =========================================================== */
/* =========================================================  DM_DR  ========================================================= */
/* ===================================================  READ_FAST_SINGLE  ==================================================== */
/* ====================================================  READ_DUAL_DATA  ===================================================== */
/* ==================================================  READ_DUAL_ADDR_DATA  ================================================== */
/* ====================================================  READ_QUAD_DATA  ===================================================== */
/* ==================================================  READ_QUAD_ADDR_DATA  ================================================== */
#define SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_CMD_Pos (24UL)            /*!< EXIT_PRM_CMD (Bit 24)                                 */
#define SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_CMD_Msk (0xff000000UL)    /*!< EXIT_PRM_CMD (Bitfield-Mask: 0xff)                    */
#define SPIC_READ_QUAD_ADDR_DATA_PRM_VAL_Pos (16UL)                 /*!< PRM_VAL (Bit 16)                                      */
#define SPIC_READ_QUAD_ADDR_DATA_PRM_VAL_Msk (0xff0000UL)           /*!< PRM_VAL (Bitfield-Mask: 0xff)                         */
#define SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_DUM_LEN_Pos (8UL)         /*!< EXIT_PRM_DUM_LEN (Bit 8)                              */
#define SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_DUM_LEN_Msk (0xff00UL)    /*!< EXIT_PRM_DUM_LEN (Bitfield-Mask: 0xff)                */
#define SPIC_READ_QUAD_ADDR_DATA_RD_QUAD_IO_CMD_Pos (0UL)           /*!< RD_QUAD_IO_CMD (Bit 0)                                */
#define SPIC_READ_QUAD_ADDR_DATA_RD_QUAD_IO_CMD_Msk (0xffUL)        /*!< RD_QUAD_IO_CMD (Bitfield-Mask: 0xff)                  */
/* =====================================================  WRITE_SINGLE  ====================================================== */
/* ====================================================  WRITE_DUAL_DATA  ==================================================== */
/* =================================================  WRITE_DUAL_ADDR_DATA  ================================================== */
/* ====================================================  WRITE_QUAD_DATA  ==================================================== */
/* =================================================  WRITE_QUAD_ADDR_DATA  ================================================== */
/* =====================================================  WRITE_ENABLE  ====================================================== */
#define SPIC_WRITE_ENABLE_WR_EN_CMD_2nd_BYTE_Pos (8UL)              /*!< WR_EN_CMD_2nd_BYTE (Bit 8)                            */
#define SPIC_WRITE_ENABLE_WR_EN_CMD_2nd_BYTE_Msk (0xff00UL)         /*!< WR_EN_CMD_2nd_BYTE (Bitfield-Mask: 0xff)              */
#define SPIC_WRITE_ENABLE_WR_EN_CMD_1st_BYTE_Pos (0UL)              /*!< WR_EN_CMD_1st_BYTE (Bit 0)                            */
#define SPIC_WRITE_ENABLE_WR_EN_CMD_1st_BYTE_Msk (0xffUL)           /*!< WR_EN_CMD_1st_BYTE (Bitfield-Mask: 0xff)              */
/* ======================================================  READ_STATUS  ====================================================== */
#define SPIC_READ_STATUS_INTERVAL_EN_Pos  (31UL)                    /*!< INTERVAL_EN (Bit 31)                                  */
#define SPIC_READ_STATUS_INTERVAL_EN_Msk  (0x80000000UL)            /*!< INTERVAL_EN (Bitfield-Mask: 0x01)                     */
#define SPIC_READ_STATUS_INTERVAL_ODD_Pos (30UL)                    /*!< INTERVAL_ODD (Bit 30)                                 */
#define SPIC_READ_STATUS_INTERVAL_ODD_Msk (0x40000000UL)            /*!< INTERVAL_ODD (Bitfield-Mask: 0x01)                    */
#define SPIC_READ_STATUS_ST_CMD_LEN_Pos   (28UL)                    /*!< ST_CMD_LEN (Bit 28)                                   */
#define SPIC_READ_STATUS_ST_CMD_LEN_Msk   (0x30000000UL)            /*!< ST_CMD_LEN (Bitfield-Mask: 0x03)                      */
#define SPIC_READ_STATUS_ST_CMD_CH_Pos    (26UL)                    /*!< ST_CMD_CH (Bit 26)                                    */
#define SPIC_READ_STATUS_ST_CMD_CH_Msk    (0xc000000UL)             /*!< ST_CMD_CH (Bitfield-Mask: 0x03)                       */
#define SPIC_READ_STATUS_ST_CMD_DDR_EN_Pos (25UL)                   /*!< ST_CMD_DDR_EN (Bit 25)                                */
#define SPIC_READ_STATUS_ST_CMD_DDR_EN_Msk (0x2000000UL)            /*!< ST_CMD_DDR_EN (Bitfield-Mask: 0x01)                   */
#define SPIC_READ_STATUS_RD_ST_CMD_3rd_BYTE_Pos (16UL)              /*!< RD_ST_CMD_3rd_BYTE (Bit 16)                           */
#define SPIC_READ_STATUS_RD_ST_CMD_3rd_BYTE_Msk (0xff0000UL)        /*!< RD_ST_CMD_3rd_BYTE (Bitfield-Mask: 0xff)              */
#define SPIC_READ_STATUS_RD_ST_CMD_2nd_BYTE_Pos (8UL)               /*!< RD_ST_CMD_2nd_BYTE (Bit 8)                            */
#define SPIC_READ_STATUS_RD_ST_CMD_2nd_BYTE_Msk (0xff00UL)          /*!< RD_ST_CMD_2nd_BYTE (Bitfield-Mask: 0xff)              */
#define SPIC_READ_STATUS_RD_ST_CMD_1st_BYTE_Pos (0UL)               /*!< RD_ST_CMD_1st_BYTE (Bit 0)                            */
#define SPIC_READ_STATUS_RD_ST_CMD_1st_BYTE_Msk (0xffUL)            /*!< RD_ST_CMD_1st_BYTE (Bitfield-Mask: 0xff)              */
/* ========================================================  CTRLR2  ========================================================= */
#define SPIC_CTRLR2_RD_WEIGHT_Pos         (19UL)                    /*!< RD_WEIGHT (Bit 19)                                    */
#define SPIC_CTRLR2_RD_WEIGHT_Msk         (0xf80000UL)              /*!< RD_WEIGHT (Bitfield-Mask: 0x1f)                       */
#define SPIC_CTRLR2_WR_VL_EN_Pos          (17UL)                    /*!< WR_VL_EN (Bit 17)                                     */
#define SPIC_CTRLR2_WR_VL_EN_Msk          (0x20000UL)               /*!< WR_VL_EN (Bitfield-Mask: 0x01)                        */
#define SPIC_CTRLR2_RD_VALID_EN_Pos       (16UL)                    /*!< RD_VALID_EN (Bit 16)                                  */
#define SPIC_CTRLR2_RD_VALID_EN_Msk       (0x10000UL)               /*!< RD_VALID_EN (Bitfield-Mask: 0x01)                     */
#define SPIC_CTRLR2_DIS_WRAP_ALIGN_Pos    (15UL)                    /*!< DIS_WRAP_ALIGN (Bit 15)                               */
#define SPIC_CTRLR2_DIS_WRAP_ALIGN_Msk    (0x8000UL)                /*!< DIS_WRAP_ALIGN (Bitfield-Mask: 0x01)                  */
#define SPIC_CTRLR2_DIS_DM_CA_Pos         (14UL)                    /*!< DIS_DM_CA (Bit 14)                                    */
#define SPIC_CTRLR2_DIS_DM_CA_Msk         (0x4000UL)                /*!< DIS_DM_CA (Bitfield-Mask: 0x01)                       */
#define SPIC_CTRLR2_FULL_WR_Pos           (13UL)                    /*!< FULL_WR (Bit 13)                                      */
#define SPIC_CTRLR2_FULL_WR_Msk           (0x2000UL)                /*!< FULL_WR (Bitfield-Mask: 0x01)                         */
#define SPIC_CTRLR2_DM_ACT_Pos            (12UL)                    /*!< DM_ACT (Bit 12)                                       */
#define SPIC_CTRLR2_DM_ACT_Msk            (0x1000UL)                /*!< DM_ACT (Bitfield-Mask: 0x01)                          */
#define SPIC_CTRLR2_RX_FIFO_ENTRY_Pos     (8UL)                     /*!< RX_FIFO_ENTRY (Bit 8)                                 */
#define SPIC_CTRLR2_RX_FIFO_ENTRY_Msk     (0xf00UL)                 /*!< RX_FIFO_ENTRY (Bitfield-Mask: 0x0f)                   */
#define SPIC_CTRLR2_TX_FIFO_ENTRY_Pos     (4UL)                     /*!< TX_FIFO_ENTRY (Bit 4)                                 */
#define SPIC_CTRLR2_TX_FIFO_ENTRY_Msk     (0xf0UL)                  /*!< TX_FIFO_ENTRY (Bitfield-Mask: 0x0f)                   */
#define SPIC_CTRLR2_DR_FIXED_Pos          (3UL)                     /*!< DR_FIXED (Bit 3)                                      */
#define SPIC_CTRLR2_DR_FIXED_Msk          (0x8UL)                   /*!< DR_FIXED (Bitfield-Mask: 0x01)                        */
#define SPIC_CTRLR2_WPN_DNUM_Pos          (2UL)                     /*!< WPN_DNUM (Bit 2)                                      */
#define SPIC_CTRLR2_WPN_DNUM_Msk          (0x4UL)                   /*!< WPN_DNUM (Bitfield-Mask: 0x01)                        */
#define SPIC_CTRLR2_WPN_SET_Pos           (1UL)                     /*!< WPN_SET (Bit 1)                                       */
#define SPIC_CTRLR2_WPN_SET_Msk           (0x2UL)                   /*!< WPN_SET (Bitfield-Mask: 0x01)                         */
#define SPIC_CTRLR2_SO_DNUM_Pos           (0UL)                     /*!< SO_DNUM (Bit 0)                                       */
#define SPIC_CTRLR2_SO_DNUM_Msk           (0x1UL)                   /*!< SO_DNUM (Bitfield-Mask: 0x01)                         */
/* ========================================================  FBAUDR  ========================================================= */
/* ======================================================  USER_LENGTH  ====================================================== */
#define SPIC_USER_LENGTH_USER_ADDR_LENGTH_Pos (16UL)                /*!< USER_ADDR_LENGTH (Bit 16)                             */
#define SPIC_USER_LENGTH_USER_ADDR_LENGTH_Msk (0xf0000UL)           /*!< USER_ADDR_LENGTH (Bitfield-Mask: 0x0f)                */
#define SPIC_USER_LENGTH_USER_CMD_LENGTH_Pos (12UL)                 /*!< USER_CMD_LENGTH (Bit 12)                              */
#define SPIC_USER_LENGTH_USER_CMD_LENGTH_Msk (0x3000UL)             /*!< USER_CMD_LENGTH (Bitfield-Mask: 0x03)                 */
#define SPIC_USER_LENGTH_USER_RD_DUMMY_LENGTH_Pos (0UL)             /*!< USER_RD_DUMMY_LENGTH (Bit 0)                          */
#define SPIC_USER_LENGTH_USER_RD_DUMMY_LENGTH_Msk (0xfffUL)         /*!< USER_RD_DUMMY_LENGTH (Bitfield-Mask: 0xfff)           */
/* ======================================================  AUTO_LENGTH  ====================================================== */
#define SPIC_AUTO_LENGTH_RDSR_DUMMY_LENGTH_Pos (20UL)               /*!< RDSR_DUMMY_LENGTH (Bit 20)                            */
#define SPIC_AUTO_LENGTH_RDSR_DUMMY_LENGTH_Msk (0xff00000UL)        /*!< RDSR_DUMMY_LENGTH (Bitfield-Mask: 0xff)               */
#define SPIC_AUTO_LENGTH_AUTO_ADDR_LENGTH_Pos (16UL)                /*!< AUTO_ADDR_LENGTH (Bit 16)                             */
#define SPIC_AUTO_LENGTH_AUTO_ADDR_LENGTH_Msk (0xf0000UL)           /*!< AUTO_ADDR_LENGTH (Bitfield-Mask: 0x0f)                */
#define SPIC_AUTO_LENGTH_IN_PHYSICAL_CYC_Pos (12UL)                 /*!< IN_PHYSICAL_CYC (Bit 12)                              */
#define SPIC_AUTO_LENGTH_IN_PHYSICAL_CYC_Msk (0xf000UL)             /*!< IN_PHYSICAL_CYC (Bitfield-Mask: 0x0f)                 */
#define SPIC_AUTO_LENGTH_RD_DUMMY_LENGTH_Pos (0UL)                  /*!< RD_DUMMY_LENGTH (Bit 0)                               */
#define SPIC_AUTO_LENGTH_RD_DUMMY_LENGTH_Msk (0xfffUL)              /*!< RD_DUMMY_LENGTH (Bitfield-Mask: 0xfff)                */
/* =======================================================  VALID_CMD  ======================================================= */
#define SPIC_VALID_CMD_SEQ_WR_EN_Pos      (15UL)                    /*!< SEQ_WR_EN (Bit 15)                                    */
#define SPIC_VALID_CMD_SEQ_WR_EN_Msk      (0x8000UL)                /*!< SEQ_WR_EN (Bitfield-Mask: 0x01)                       */
#define SPIC_VALID_CMD_SEQ_RD_EN_Pos      (14UL)                    /*!< SEQ_RD_EN (Bit 14)                                    */
#define SPIC_VALID_CMD_SEQ_RD_EN_Msk      (0x4000UL)                /*!< SEQ_RD_EN (Bitfield-Mask: 0x01)                       */
#define SPIC_VALID_CMD_DUM_EN_Pos         (13UL)                    /*!< DUM_EN (Bit 13)                                       */
#define SPIC_VALID_CMD_DUM_EN_Msk         (0x2000UL)                /*!< DUM_EN (Bitfield-Mask: 0x01)                          */
#define SPIC_VALID_CMD_CTRLR0_CH_Pos      (12UL)                    /*!< CTRLR0_CH (Bit 12)                                    */
#define SPIC_VALID_CMD_CTRLR0_CH_Msk      (0x1000UL)                /*!< CTRLR0_CH (Bitfield-Mask: 0x01)                       */
#define SPIC_VALID_CMD_PRM_EN_Pos         (11UL)                    /*!< PRM_EN (Bit 11)                                       */
#define SPIC_VALID_CMD_PRM_EN_Msk         (0x800UL)                 /*!< PRM_EN (Bitfield-Mask: 0x01)                          */
#define SPIC_VALID_CMD_RM_WEN_Pos         (10UL)                    /*!< RM_WEN (Bit 10)                                       */
#define SPIC_VALID_CMD_RM_WEN_Msk         (0x400UL)                 /*!< RM_WEN (Bitfield-Mask: 0x01)                          */
#define SPIC_VALID_CMD_RM_RDSR_Pos        (9UL)                     /*!< RM_RDSR (Bit 9)                                       */
#define SPIC_VALID_CMD_RM_RDSR_Msk        (0x200UL)                 /*!< RM_RDSR (Bitfield-Mask: 0x01)                         */
#define SPIC_VALID_CMD_WR_QUAD_II_Pos     (8UL)                     /*!< WR_QUAD_II (Bit 8)                                    */
#define SPIC_VALID_CMD_WR_QUAD_II_Msk     (0x100UL)                 /*!< WR_QUAD_II (Bitfield-Mask: 0x01)                      */
#define SPIC_VALID_CMD_WR_QUAD_I_Pos      (7UL)                     /*!< WR_QUAD_I (Bit 7)                                     */
#define SPIC_VALID_CMD_WR_QUAD_I_Msk      (0x80UL)                  /*!< WR_QUAD_I (Bitfield-Mask: 0x01)                       */
#define SPIC_VALID_CMD_WR_DUAL_II_Pos     (6UL)                     /*!< WR_DUAL_II (Bit 6)                                    */
#define SPIC_VALID_CMD_WR_DUAL_II_Msk     (0x40UL)                  /*!< WR_DUAL_II (Bitfield-Mask: 0x01)                      */
#define SPIC_VALID_CMD_WR_DUAL_I_Pos      (5UL)                     /*!< WR_DUAL_I (Bit 5)                                     */
#define SPIC_VALID_CMD_WR_DUAL_I_Msk      (0x20UL)                  /*!< WR_DUAL_I (Bitfield-Mask: 0x01)                       */
#define SPIC_VALID_CMD_RD_QUAD_IO_Pos     (4UL)                     /*!< RD_QUAD_IO (Bit 4)                                    */
#define SPIC_VALID_CMD_RD_QUAD_IO_Msk     (0x10UL)                  /*!< RD_QUAD_IO (Bitfield-Mask: 0x01)                      */
#define SPIC_VALID_CMD_RD_QUAD_O_Pos      (3UL)                     /*!< RD_QUAD_O (Bit 3)                                     */
#define SPIC_VALID_CMD_RD_QUAD_O_Msk      (0x8UL)                   /*!< RD_QUAD_O (Bitfield-Mask: 0x01)                       */
#define SPIC_VALID_CMD_RD_DUAL_IO_Pos     (2UL)                     /*!< RD_DUAL_IO (Bit 2)                                    */
#define SPIC_VALID_CMD_RD_DUAL_IO_Msk     (0x4UL)                   /*!< RD_DUAL_IO (Bitfield-Mask: 0x01)                      */
#define SPIC_VALID_CMD_RD_DUAL_I_Pos      (1UL)                     /*!< RD_DUAL_I (Bit 1)                                     */
#define SPIC_VALID_CMD_RD_DUAL_I_Msk      (0x2UL)                   /*!< RD_DUAL_I (Bitfield-Mask: 0x01)                       */
#define SPIC_VALID_CMD_FRD_SINGLE_Pos     (0UL)                     /*!< FRD_SINGLE (Bit 0)                                    */
#define SPIC_VALID_CMD_FRD_SINGLE_Msk     (0x1UL)                   /*!< FRD_SINGLE (Bitfield-Mask: 0x01)                      */
/* ======================================================  FLASH_SIZE  ======================================================= */
/* ======================================================  FLUSH_FIFO  ======================================================= */
#define SPIC_FLUSH_FIFO_FLUSH_ST_FIFO_Pos (2UL)                     /*!< FLUSH_ST_FIFO (Bit 2)                                 */
#define SPIC_FLUSH_FIFO_FLUSH_ST_FIFO_Msk (0x4UL)                   /*!< FLUSH_ST_FIFO (Bitfield-Mask: 0x01)                   */
#define SPIC_FLUSH_FIFO_FLUSH_DR_FIFO_Pos (1UL)                     /*!< FLUSH_DR_FIFO (Bit 1)                                 */
#define SPIC_FLUSH_FIFO_FLUSH_DR_FIFO_Msk (0x2UL)                   /*!< FLUSH_DR_FIFO (Bitfield-Mask: 0x01)                   */
#define SPIC_FLUSH_FIFO_FLUSH_ALL_Pos     (0UL)                     /*!< FLUSH_ALL (Bit 0)                                     */
#define SPIC_FLUSH_FIFO_FLUSH_ALL_Msk     (0x1UL)                   /*!< FLUSH_ALL (Bitfield-Mask: 0x01)                       */
/* =======================================================  DUM_BYTE  ======================================================== */
/* ========================================================  TX_NDF  ========================================================= */
/* ======================================================  DEVICE_INFO  ====================================================== */
/* =========================================================  TPR0  ========================================================== */
/* =====================================================  AUTO_LENGTH2  ====================================================== */
/* =========================================================  TPR1  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           DMAC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  SAR0  ========================================================== */
/* =======================================================  CURR_SAR0  ======================================================= */
/* =========================================================  DAR0  ========================================================== */
/* =======================================================  CURR_DAR0  ======================================================= */
/* ========================================================  LLP0_L  ========================================================= */
/* ========================================================  LLP0_H  ========================================================= */
/* ========================================================  CTL0_L  ========================================================= */
#define DMAC_CTL0_L_LLP_SRC_EN_Pos        (28UL)                    /*!< LLP_SRC_EN (Bit 28)                                   */
#define DMAC_CTL0_L_LLP_SRC_EN_Msk        (0x10000000UL)            /*!< LLP_SRC_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL0_L_LLP_DST_EN_Pos        (27UL)                    /*!< LLP_DST_EN (Bit 27)                                   */
#define DMAC_CTL0_L_LLP_DST_EN_Msk        (0x8000000UL)             /*!< LLP_DST_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL0_L_TT_FC_Pos             (20UL)                    /*!< TT_FC (Bit 20)                                        */
#define DMAC_CTL0_L_TT_FC_Msk             (0xf00000UL)              /*!< TT_FC (Bitfield-Mask: 0x0f)                           */
#define DMAC_CTL0_L_DST_SCATTER_EN_Pos    (18UL)                    /*!< DST_SCATTER_EN (Bit 18)                               */
#define DMAC_CTL0_L_DST_SCATTER_EN_Msk    (0x40000UL)               /*!< DST_SCATTER_EN (Bitfield-Mask: 0x01)                  */
#define DMAC_CTL0_L_SRC_GATHER_EN_Pos     (17UL)                    /*!< SRC_GATHER_EN (Bit 17)                                */
#define DMAC_CTL0_L_SRC_GATHER_EN_Msk     (0x20000UL)               /*!< SRC_GATHER_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CTL0_L_SRC_MSIZE_Pos         (14UL)                    /*!< SRC_MSIZE (Bit 14)                                    */
#define DMAC_CTL0_L_SRC_MSIZE_Msk         (0x1c000UL)               /*!< SRC_MSIZE (Bitfield-Mask: 0x07)                       */
#define DMAC_CTL0_L_DEST_MSIZE_Pos        (11UL)                    /*!< DEST_MSIZE (Bit 11)                                   */
#define DMAC_CTL0_L_DEST_MSIZE_Msk        (0x3800UL)                /*!< DEST_MSIZE (Bitfield-Mask: 0x07)                      */
#define DMAC_CTL0_L_SINC_Pos              (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMAC_CTL0_L_SINC_Msk              (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL0_L_DINC_Pos              (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMAC_CTL0_L_DINC_Msk              (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL0_L_SRC_TR_WIDTH_Pos      (4UL)                     /*!< SRC_TR_WIDTH (Bit 4)                                  */
#define DMAC_CTL0_L_SRC_TR_WIDTH_Msk      (0x70UL)                  /*!< SRC_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL0_L_DST_TR_WIDTH_Pos      (1UL)                     /*!< DST_TR_WIDTH (Bit 1)                                  */
#define DMAC_CTL0_L_DST_TR_WIDTH_Msk      (0xeUL)                   /*!< DST_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL0_L_INT_EN_Pos            (0UL)                     /*!< INT_EN (Bit 0)                                        */
#define DMAC_CTL0_L_INT_EN_Msk            (0x1UL)                   /*!< INT_EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  CTL1_L  ========================================================= */
#define DMAC_CTL1_L_LLP_SRC_EN_Pos        (28UL)                    /*!< LLP_SRC_EN (Bit 28)                                   */
#define DMAC_CTL1_L_LLP_SRC_EN_Msk        (0x10000000UL)            /*!< LLP_SRC_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL1_L_LLP_DST_EN_Pos        (27UL)                    /*!< LLP_DST_EN (Bit 27)                                   */
#define DMAC_CTL1_L_LLP_DST_EN_Msk        (0x8000000UL)             /*!< LLP_DST_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL1_L_TT_FC_Pos             (20UL)                    /*!< TT_FC (Bit 20)                                        */
#define DMAC_CTL1_L_TT_FC_Msk             (0xf00000UL)              /*!< TT_FC (Bitfield-Mask: 0x0f)                           */
#define DMAC_CTL1_L_DST_SCATTER_EN_Pos    (18UL)                    /*!< DST_SCATTER_EN (Bit 18)                               */
#define DMAC_CTL1_L_DST_SCATTER_EN_Msk    (0x40000UL)               /*!< DST_SCATTER_EN (Bitfield-Mask: 0x01)                  */
#define DMAC_CTL1_L_SRC_GATHER_EN_Pos     (17UL)                    /*!< SRC_GATHER_EN (Bit 17)                                */
#define DMAC_CTL1_L_SRC_GATHER_EN_Msk     (0x20000UL)               /*!< SRC_GATHER_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CTL1_L_SRC_MSIZE_Pos         (14UL)                    /*!< SRC_MSIZE (Bit 14)                                    */
#define DMAC_CTL1_L_SRC_MSIZE_Msk         (0x1c000UL)               /*!< SRC_MSIZE (Bitfield-Mask: 0x07)                       */
#define DMAC_CTL1_L_DEST_MSIZE_Pos        (11UL)                    /*!< DEST_MSIZE (Bit 11)                                   */
#define DMAC_CTL1_L_DEST_MSIZE_Msk        (0x3800UL)                /*!< DEST_MSIZE (Bitfield-Mask: 0x07)                      */
#define DMAC_CTL1_L_SINC_Pos              (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMAC_CTL1_L_SINC_Msk              (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL1_L_DINC_Pos              (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMAC_CTL1_L_DINC_Msk              (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL1_L_SRC_TR_WIDTH_Pos      (4UL)                     /*!< SRC_TR_WIDTH (Bit 4)                                  */
#define DMAC_CTL1_L_SRC_TR_WIDTH_Msk      (0x70UL)                  /*!< SRC_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL1_L_DST_TR_WIDTH_Pos      (1UL)                     /*!< DST_TR_WIDTH (Bit 1)                                  */
#define DMAC_CTL1_L_DST_TR_WIDTH_Msk      (0xeUL)                   /*!< DST_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL1_L_INT_EN_Pos            (0UL)                     /*!< INT_EN (Bit 0)                                        */
#define DMAC_CTL1_L_INT_EN_Msk            (0x1UL)                   /*!< INT_EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  CTL2_L  ========================================================= */
#define DMAC_CTL2_L_LLP_SRC_EN_Pos        (28UL)                    /*!< LLP_SRC_EN (Bit 28)                                   */
#define DMAC_CTL2_L_LLP_SRC_EN_Msk        (0x10000000UL)            /*!< LLP_SRC_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL2_L_LLP_DST_EN_Pos        (27UL)                    /*!< LLP_DST_EN (Bit 27)                                   */
#define DMAC_CTL2_L_LLP_DST_EN_Msk        (0x8000000UL)             /*!< LLP_DST_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL2_L_TT_FC_Pos             (20UL)                    /*!< TT_FC (Bit 20)                                        */
#define DMAC_CTL2_L_TT_FC_Msk             (0xf00000UL)              /*!< TT_FC (Bitfield-Mask: 0x0f)                           */
#define DMAC_CTL2_L_DST_SCATTER_EN_Pos    (18UL)                    /*!< DST_SCATTER_EN (Bit 18)                               */
#define DMAC_CTL2_L_DST_SCATTER_EN_Msk    (0x40000UL)               /*!< DST_SCATTER_EN (Bitfield-Mask: 0x01)                  */
#define DMAC_CTL2_L_SRC_GATHER_EN_Pos     (17UL)                    /*!< SRC_GATHER_EN (Bit 17)                                */
#define DMAC_CTL2_L_SRC_GATHER_EN_Msk     (0x20000UL)               /*!< SRC_GATHER_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CTL2_L_SRC_MSIZE_Pos         (14UL)                    /*!< SRC_MSIZE (Bit 14)                                    */
#define DMAC_CTL2_L_SRC_MSIZE_Msk         (0x1c000UL)               /*!< SRC_MSIZE (Bitfield-Mask: 0x07)                       */
#define DMAC_CTL2_L_DEST_MSIZE_Pos        (11UL)                    /*!< DEST_MSIZE (Bit 11)                                   */
#define DMAC_CTL2_L_DEST_MSIZE_Msk        (0x3800UL)                /*!< DEST_MSIZE (Bitfield-Mask: 0x07)                      */
#define DMAC_CTL2_L_SINC_Pos              (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMAC_CTL2_L_SINC_Msk              (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL2_L_DINC_Pos              (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMAC_CTL2_L_DINC_Msk              (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL2_L_SRC_TR_WIDTH_Pos      (4UL)                     /*!< SRC_TR_WIDTH (Bit 4)                                  */
#define DMAC_CTL2_L_SRC_TR_WIDTH_Msk      (0x70UL)                  /*!< SRC_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL2_L_DST_TR_WIDTH_Pos      (1UL)                     /*!< DST_TR_WIDTH (Bit 1)                                  */
#define DMAC_CTL2_L_DST_TR_WIDTH_Msk      (0xeUL)                   /*!< DST_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL2_L_INT_EN_Pos            (0UL)                     /*!< INT_EN (Bit 0)                                        */
#define DMAC_CTL2_L_INT_EN_Msk            (0x1UL)                   /*!< INT_EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  CTL3_L  ========================================================= */
#define DMAC_CTL3_L_LLP_SRC_EN_Pos        (28UL)                    /*!< LLP_SRC_EN (Bit 28)                                   */
#define DMAC_CTL3_L_LLP_SRC_EN_Msk        (0x10000000UL)            /*!< LLP_SRC_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL3_L_LLP_DST_EN_Pos        (27UL)                    /*!< LLP_DST_EN (Bit 27)                                   */
#define DMAC_CTL3_L_LLP_DST_EN_Msk        (0x8000000UL)             /*!< LLP_DST_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL3_L_TT_FC_Pos             (20UL)                    /*!< TT_FC (Bit 20)                                        */
#define DMAC_CTL3_L_TT_FC_Msk             (0xf00000UL)              /*!< TT_FC (Bitfield-Mask: 0x0f)                           */
#define DMAC_CTL3_L_DST_SCATTER_EN_Pos    (18UL)                    /*!< DST_SCATTER_EN (Bit 18)                               */
#define DMAC_CTL3_L_DST_SCATTER_EN_Msk    (0x40000UL)               /*!< DST_SCATTER_EN (Bitfield-Mask: 0x01)                  */
#define DMAC_CTL3_L_SRC_GATHER_EN_Pos     (17UL)                    /*!< SRC_GATHER_EN (Bit 17)                                */
#define DMAC_CTL3_L_SRC_GATHER_EN_Msk     (0x20000UL)               /*!< SRC_GATHER_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CTL3_L_SRC_MSIZE_Pos         (14UL)                    /*!< SRC_MSIZE (Bit 14)                                    */
#define DMAC_CTL3_L_SRC_MSIZE_Msk         (0x1c000UL)               /*!< SRC_MSIZE (Bitfield-Mask: 0x07)                       */
#define DMAC_CTL3_L_DEST_MSIZE_Pos        (11UL)                    /*!< DEST_MSIZE (Bit 11)                                   */
#define DMAC_CTL3_L_DEST_MSIZE_Msk        (0x3800UL)                /*!< DEST_MSIZE (Bitfield-Mask: 0x07)                      */
#define DMAC_CTL3_L_SINC_Pos              (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMAC_CTL3_L_SINC_Msk              (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL3_L_DINC_Pos              (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMAC_CTL3_L_DINC_Msk              (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL3_L_SRC_TR_WIDTH_Pos      (4UL)                     /*!< SRC_TR_WIDTH (Bit 4)                                  */
#define DMAC_CTL3_L_SRC_TR_WIDTH_Msk      (0x70UL)                  /*!< SRC_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL3_L_DST_TR_WIDTH_Pos      (1UL)                     /*!< DST_TR_WIDTH (Bit 1)                                  */
#define DMAC_CTL3_L_DST_TR_WIDTH_Msk      (0xeUL)                   /*!< DST_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL3_L_INT_EN_Pos            (0UL)                     /*!< INT_EN (Bit 0)                                        */
#define DMAC_CTL3_L_INT_EN_Msk            (0x1UL)                   /*!< INT_EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  CTL4_L  ========================================================= */
#define DMAC_CTL4_L_LLP_SRC_EN_Pos        (28UL)                    /*!< LLP_SRC_EN (Bit 28)                                   */
#define DMAC_CTL4_L_LLP_SRC_EN_Msk        (0x10000000UL)            /*!< LLP_SRC_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL4_L_LLP_DST_EN_Pos        (27UL)                    /*!< LLP_DST_EN (Bit 27)                                   */
#define DMAC_CTL4_L_LLP_DST_EN_Msk        (0x8000000UL)             /*!< LLP_DST_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL4_L_TT_FC_Pos             (20UL)                    /*!< TT_FC (Bit 20)                                        */
#define DMAC_CTL4_L_TT_FC_Msk             (0xf00000UL)              /*!< TT_FC (Bitfield-Mask: 0x0f)                           */
#define DMAC_CTL4_L_DST_SCATTER_EN_Pos    (18UL)                    /*!< DST_SCATTER_EN (Bit 18)                               */
#define DMAC_CTL4_L_DST_SCATTER_EN_Msk    (0x40000UL)               /*!< DST_SCATTER_EN (Bitfield-Mask: 0x01)                  */
#define DMAC_CTL4_L_SRC_GATHER_EN_Pos     (17UL)                    /*!< SRC_GATHER_EN (Bit 17)                                */
#define DMAC_CTL4_L_SRC_GATHER_EN_Msk     (0x20000UL)               /*!< SRC_GATHER_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CTL4_L_SRC_MSIZE_Pos         (14UL)                    /*!< SRC_MSIZE (Bit 14)                                    */
#define DMAC_CTL4_L_SRC_MSIZE_Msk         (0x1c000UL)               /*!< SRC_MSIZE (Bitfield-Mask: 0x07)                       */
#define DMAC_CTL4_L_DEST_MSIZE_Pos        (11UL)                    /*!< DEST_MSIZE (Bit 11)                                   */
#define DMAC_CTL4_L_DEST_MSIZE_Msk        (0x3800UL)                /*!< DEST_MSIZE (Bitfield-Mask: 0x07)                      */
#define DMAC_CTL4_L_SINC_Pos              (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMAC_CTL4_L_SINC_Msk              (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL4_L_DINC_Pos              (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMAC_CTL4_L_DINC_Msk              (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL4_L_SRC_TR_WIDTH_Pos      (4UL)                     /*!< SRC_TR_WIDTH (Bit 4)                                  */
#define DMAC_CTL4_L_SRC_TR_WIDTH_Msk      (0x70UL)                  /*!< SRC_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL4_L_DST_TR_WIDTH_Pos      (1UL)                     /*!< DST_TR_WIDTH (Bit 1)                                  */
#define DMAC_CTL4_L_DST_TR_WIDTH_Msk      (0xeUL)                   /*!< DST_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL4_L_INT_EN_Pos            (0UL)                     /*!< INT_EN (Bit 0)                                        */
#define DMAC_CTL4_L_INT_EN_Msk            (0x1UL)                   /*!< INT_EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  CTL5_L  ========================================================= */
#define DMAC_CTL5_L_LLP_SRC_EN_Pos        (28UL)                    /*!< LLP_SRC_EN (Bit 28)                                   */
#define DMAC_CTL5_L_LLP_SRC_EN_Msk        (0x10000000UL)            /*!< LLP_SRC_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL5_L_LLP_DST_EN_Pos        (27UL)                    /*!< LLP_DST_EN (Bit 27)                                   */
#define DMAC_CTL5_L_LLP_DST_EN_Msk        (0x8000000UL)             /*!< LLP_DST_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL5_L_TT_FC_Pos             (20UL)                    /*!< TT_FC (Bit 20)                                        */
#define DMAC_CTL5_L_TT_FC_Msk             (0xf00000UL)              /*!< TT_FC (Bitfield-Mask: 0x0f)                           */
#define DMAC_CTL5_L_DST_SCATTER_EN_Pos    (18UL)                    /*!< DST_SCATTER_EN (Bit 18)                               */
#define DMAC_CTL5_L_DST_SCATTER_EN_Msk    (0x40000UL)               /*!< DST_SCATTER_EN (Bitfield-Mask: 0x01)                  */
#define DMAC_CTL5_L_SRC_GATHER_EN_Pos     (17UL)                    /*!< SRC_GATHER_EN (Bit 17)                                */
#define DMAC_CTL5_L_SRC_GATHER_EN_Msk     (0x20000UL)               /*!< SRC_GATHER_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CTL5_L_SRC_MSIZE_Pos         (14UL)                    /*!< SRC_MSIZE (Bit 14)                                    */
#define DMAC_CTL5_L_SRC_MSIZE_Msk         (0x1c000UL)               /*!< SRC_MSIZE (Bitfield-Mask: 0x07)                       */
#define DMAC_CTL5_L_DEST_MSIZE_Pos        (11UL)                    /*!< DEST_MSIZE (Bit 11)                                   */
#define DMAC_CTL5_L_DEST_MSIZE_Msk        (0x3800UL)                /*!< DEST_MSIZE (Bitfield-Mask: 0x07)                      */
#define DMAC_CTL5_L_SINC_Pos              (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMAC_CTL5_L_SINC_Msk              (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL5_L_DINC_Pos              (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMAC_CTL5_L_DINC_Msk              (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL5_L_SRC_TR_WIDTH_Pos      (4UL)                     /*!< SRC_TR_WIDTH (Bit 4)                                  */
#define DMAC_CTL5_L_SRC_TR_WIDTH_Msk      (0x70UL)                  /*!< SRC_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL5_L_DST_TR_WIDTH_Pos      (1UL)                     /*!< DST_TR_WIDTH (Bit 1)                                  */
#define DMAC_CTL5_L_DST_TR_WIDTH_Msk      (0xeUL)                   /*!< DST_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL5_L_INT_EN_Pos            (0UL)                     /*!< INT_EN (Bit 0)                                        */
#define DMAC_CTL5_L_INT_EN_Msk            (0x1UL)                   /*!< INT_EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  CTL6_L  ========================================================= */
#define DMAC_CTL6_L_LLP_SRC_EN_Pos        (28UL)                    /*!< LLP_SRC_EN (Bit 28)                                   */
#define DMAC_CTL6_L_LLP_SRC_EN_Msk        (0x10000000UL)            /*!< LLP_SRC_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL6_L_LLP_DST_EN_Pos        (27UL)                    /*!< LLP_DST_EN (Bit 27)                                   */
#define DMAC_CTL6_L_LLP_DST_EN_Msk        (0x8000000UL)             /*!< LLP_DST_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL6_L_TT_FC_Pos             (20UL)                    /*!< TT_FC (Bit 20)                                        */
#define DMAC_CTL6_L_TT_FC_Msk             (0xf00000UL)              /*!< TT_FC (Bitfield-Mask: 0x0f)                           */
#define DMAC_CTL6_L_DST_SCATTER_EN_Pos    (18UL)                    /*!< DST_SCATTER_EN (Bit 18)                               */
#define DMAC_CTL6_L_DST_SCATTER_EN_Msk    (0x40000UL)               /*!< DST_SCATTER_EN (Bitfield-Mask: 0x01)                  */
#define DMAC_CTL6_L_SRC_GATHER_EN_Pos     (17UL)                    /*!< SRC_GATHER_EN (Bit 17)                                */
#define DMAC_CTL6_L_SRC_GATHER_EN_Msk     (0x20000UL)               /*!< SRC_GATHER_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CTL6_L_SRC_MSIZE_Pos         (14UL)                    /*!< SRC_MSIZE (Bit 14)                                    */
#define DMAC_CTL6_L_SRC_MSIZE_Msk         (0x1c000UL)               /*!< SRC_MSIZE (Bitfield-Mask: 0x07)                       */
#define DMAC_CTL6_L_DEST_MSIZE_Pos        (11UL)                    /*!< DEST_MSIZE (Bit 11)                                   */
#define DMAC_CTL6_L_DEST_MSIZE_Msk        (0x3800UL)                /*!< DEST_MSIZE (Bitfield-Mask: 0x07)                      */
#define DMAC_CTL6_L_SINC_Pos              (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMAC_CTL6_L_SINC_Msk              (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL6_L_DINC_Pos              (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMAC_CTL6_L_DINC_Msk              (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL6_L_SRC_TR_WIDTH_Pos      (4UL)                     /*!< SRC_TR_WIDTH (Bit 4)                                  */
#define DMAC_CTL6_L_SRC_TR_WIDTH_Msk      (0x70UL)                  /*!< SRC_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL6_L_DST_TR_WIDTH_Pos      (1UL)                     /*!< DST_TR_WIDTH (Bit 1)                                  */
#define DMAC_CTL6_L_DST_TR_WIDTH_Msk      (0xeUL)                   /*!< DST_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL6_L_INT_EN_Pos            (0UL)                     /*!< INT_EN (Bit 0)                                        */
#define DMAC_CTL6_L_INT_EN_Msk            (0x1UL)                   /*!< INT_EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  CTL7_L  ========================================================= */
#define DMAC_CTL7_L_LLP_SRC_EN_Pos        (28UL)                    /*!< LLP_SRC_EN (Bit 28)                                   */
#define DMAC_CTL7_L_LLP_SRC_EN_Msk        (0x10000000UL)            /*!< LLP_SRC_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL7_L_LLP_DST_EN_Pos        (27UL)                    /*!< LLP_DST_EN (Bit 27)                                   */
#define DMAC_CTL7_L_LLP_DST_EN_Msk        (0x8000000UL)             /*!< LLP_DST_EN (Bitfield-Mask: 0x01)                      */
#define DMAC_CTL7_L_TT_FC_Pos             (20UL)                    /*!< TT_FC (Bit 20)                                        */
#define DMAC_CTL7_L_TT_FC_Msk             (0xf00000UL)              /*!< TT_FC (Bitfield-Mask: 0x0f)                           */
#define DMAC_CTL7_L_DST_SCATTER_EN_Pos    (18UL)                    /*!< DST_SCATTER_EN (Bit 18)                               */
#define DMAC_CTL7_L_DST_SCATTER_EN_Msk    (0x40000UL)               /*!< DST_SCATTER_EN (Bitfield-Mask: 0x01)                  */
#define DMAC_CTL7_L_SRC_GATHER_EN_Pos     (17UL)                    /*!< SRC_GATHER_EN (Bit 17)                                */
#define DMAC_CTL7_L_SRC_GATHER_EN_Msk     (0x20000UL)               /*!< SRC_GATHER_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CTL7_L_SRC_MSIZE_Pos         (14UL)                    /*!< SRC_MSIZE (Bit 14)                                    */
#define DMAC_CTL7_L_SRC_MSIZE_Msk         (0x1c000UL)               /*!< SRC_MSIZE (Bitfield-Mask: 0x07)                       */
#define DMAC_CTL7_L_DEST_MSIZE_Pos        (11UL)                    /*!< DEST_MSIZE (Bit 11)                                   */
#define DMAC_CTL7_L_DEST_MSIZE_Msk        (0x3800UL)                /*!< DEST_MSIZE (Bitfield-Mask: 0x07)                      */
#define DMAC_CTL7_L_SINC_Pos              (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMAC_CTL7_L_SINC_Msk              (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL7_L_DINC_Pos              (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMAC_CTL7_L_DINC_Msk              (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMAC_CTL7_L_SRC_TR_WIDTH_Pos      (4UL)                     /*!< SRC_TR_WIDTH (Bit 4)                                  */
#define DMAC_CTL7_L_SRC_TR_WIDTH_Msk      (0x70UL)                  /*!< SRC_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL7_L_DST_TR_WIDTH_Pos      (1UL)                     /*!< DST_TR_WIDTH (Bit 1)                                  */
#define DMAC_CTL7_L_DST_TR_WIDTH_Msk      (0xeUL)                   /*!< DST_TR_WIDTH (Bitfield-Mask: 0x07)                    */
#define DMAC_CTL7_L_INT_EN_Pos            (0UL)                     /*!< INT_EN (Bit 0)                                        */
#define DMAC_CTL7_L_INT_EN_Msk            (0x1UL)                   /*!< INT_EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  CTL0_H  ========================================================= */
#define DMAC_CTL0_H_BLOCK_TS_Pos          (0UL)                     /*!< BLOCK_TS (Bit 0)                                      */
#define DMAC_CTL0_H_BLOCK_TS_Msk          (0xffffffffUL)            /*!< BLOCK_TS (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  CTL1_H  ========================================================= */
#define DMAC_CTL1_H_BLOCK_TS_Pos          (0UL)                     /*!< BLOCK_TS (Bit 0)                                      */
#define DMAC_CTL1_H_BLOCK_TS_Msk          (0xffffffffUL)            /*!< BLOCK_TS (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  CTL2_H  ========================================================= */
#define DMAC_CTL2_H_BLOCK_TS_Pos          (0UL)                     /*!< BLOCK_TS (Bit 0)                                      */
#define DMAC_CTL2_H_BLOCK_TS_Msk          (0xffffffffUL)            /*!< BLOCK_TS (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  CTL3_H  ========================================================= */
#define DMAC_CTL3_H_BLOCK_TS_Pos          (0UL)                     /*!< BLOCK_TS (Bit 0)                                      */
#define DMAC_CTL3_H_BLOCK_TS_Msk          (0xffffffffUL)            /*!< BLOCK_TS (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  CTL4_H  ========================================================= */
#define DMAC_CTL4_H_BLOCK_TS_Pos          (0UL)                     /*!< BLOCK_TS (Bit 0)                                      */
#define DMAC_CTL4_H_BLOCK_TS_Msk          (0xffffffffUL)            /*!< BLOCK_TS (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  CTL5_H  ========================================================= */
#define DMAC_CTL5_H_BLOCK_TS_Pos          (0UL)                     /*!< BLOCK_TS (Bit 0)                                      */
#define DMAC_CTL5_H_BLOCK_TS_Msk          (0xffffffffUL)            /*!< BLOCK_TS (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  CTL6_H  ========================================================= */
#define DMAC_CTL6_H_BLOCK_TS_Pos          (0UL)                     /*!< BLOCK_TS (Bit 0)                                      */
#define DMAC_CTL6_H_BLOCK_TS_Msk          (0xffffffffUL)            /*!< BLOCK_TS (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  CTL7_H  ========================================================= */
#define DMAC_CTL7_H_BLOCK_TS_Pos          (0UL)                     /*!< BLOCK_TS (Bit 0)                                      */
#define DMAC_CTL7_H_BLOCK_TS_Msk          (0xffffffffUL)            /*!< BLOCK_TS (Bitfield-Mask: 0xffffffff)                  */
/* ===================================================  BLK_COUNTER_REG0  ==================================================== */
/* ====================================================  REPEAT_PATTERN0  ==================================================== */
/* ========================================================  CFG0_L  ========================================================= */
#define DMAC_CFG0_L_RELOAD_DST_Pos        (31UL)                    /*!< RELOAD_DST (Bit 31)                                   */
#define DMAC_CFG0_L_RELOAD_DST_Msk        (0x80000000UL)            /*!< RELOAD_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG0_L_RELOAD_SRC_Pos        (30UL)                    /*!< RELOAD_SRC (Bit 30)                                   */
#define DMAC_CFG0_L_RELOAD_SRC_Msk        (0x40000000UL)            /*!< RELOAD_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG0_L_SRC_HS_POL_Pos        (19UL)                    /*!< SRC_HS_POL (Bit 19)                                   */
#define DMAC_CFG0_L_SRC_HS_POL_Msk        (0x80000UL)               /*!< SRC_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG0_L_DST_HS_POL_Pos        (18UL)                    /*!< DST_HS_POL (Bit 18)                                   */
#define DMAC_CFG0_L_DST_HS_POL_Msk        (0x40000UL)               /*!< DST_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG0_L_HS_SEL_SRC_Pos        (11UL)                    /*!< HS_SEL_SRC (Bit 11)                                   */
#define DMAC_CFG0_L_HS_SEL_SRC_Msk        (0x800UL)                 /*!< HS_SEL_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG0_L_HS_SEL_DST_Pos        (10UL)                    /*!< HS_SEL_DST (Bit 10)                                   */
#define DMAC_CFG0_L_HS_SEL_DST_Msk        (0x400UL)                 /*!< HS_SEL_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG0_L_FIFO_EMPTY_Pos        (9UL)                     /*!< FIFO_EMPTY (Bit 9)                                    */
#define DMAC_CFG0_L_FIFO_EMPTY_Msk        (0x200UL)                 /*!< FIFO_EMPTY (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG0_L_CH_SUSP_Pos           (8UL)                     /*!< CH_SUSP (Bit 8)                                       */
#define DMAC_CFG0_L_CH_SUSP_Msk           (0x100UL)                 /*!< CH_SUSP (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG0_L_CH_PRIOR_Pos          (4UL)                     /*!< CH_PRIOR (Bit 4)                                      */
#define DMAC_CFG0_L_CH_PRIOR_Msk          (0xf0UL)                  /*!< CH_PRIOR (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG0_L_DST_PCTL_OVER_Pos     (2UL)                     /*!< DST_PCTL_OVER (Bit 2)                                 */
#define DMAC_CFG0_L_DST_PCTL_OVER_Msk     (0x4UL)                   /*!< DST_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG0_L_SRC_PCTL_OVER_Pos     (1UL)                     /*!< SRC_PCTL_OVER (Bit 1)                                 */
#define DMAC_CFG0_L_SRC_PCTL_OVER_Msk     (0x2UL)                   /*!< SRC_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG0_L_INACTIVE_Pos          (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMAC_CFG0_L_INACTIVE_Msk          (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
/* ========================================================  CFG1_L  ========================================================= */
#define DMAC_CFG1_L_RELOAD_DST_Pos        (31UL)                    /*!< RELOAD_DST (Bit 31)                                   */
#define DMAC_CFG1_L_RELOAD_DST_Msk        (0x80000000UL)            /*!< RELOAD_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG1_L_RELOAD_SRC_Pos        (30UL)                    /*!< RELOAD_SRC (Bit 30)                                   */
#define DMAC_CFG1_L_RELOAD_SRC_Msk        (0x40000000UL)            /*!< RELOAD_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG1_L_SRC_HS_POL_Pos        (19UL)                    /*!< SRC_HS_POL (Bit 19)                                   */
#define DMAC_CFG1_L_SRC_HS_POL_Msk        (0x80000UL)               /*!< SRC_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG1_L_DST_HS_POL_Pos        (18UL)                    /*!< DST_HS_POL (Bit 18)                                   */
#define DMAC_CFG1_L_DST_HS_POL_Msk        (0x40000UL)               /*!< DST_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG1_L_HS_SEL_SRC_Pos        (11UL)                    /*!< HS_SEL_SRC (Bit 11)                                   */
#define DMAC_CFG1_L_HS_SEL_SRC_Msk        (0x800UL)                 /*!< HS_SEL_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG1_L_HS_SEL_DST_Pos        (10UL)                    /*!< HS_SEL_DST (Bit 10)                                   */
#define DMAC_CFG1_L_HS_SEL_DST_Msk        (0x400UL)                 /*!< HS_SEL_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG1_L_FIFO_EMPTY_Pos        (9UL)                     /*!< FIFO_EMPTY (Bit 9)                                    */
#define DMAC_CFG1_L_FIFO_EMPTY_Msk        (0x200UL)                 /*!< FIFO_EMPTY (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG1_L_CH_SUSP_Pos           (8UL)                     /*!< CH_SUSP (Bit 8)                                       */
#define DMAC_CFG1_L_CH_SUSP_Msk           (0x100UL)                 /*!< CH_SUSP (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG1_L_CH_PRIOR_Pos          (4UL)                     /*!< CH_PRIOR (Bit 4)                                      */
#define DMAC_CFG1_L_CH_PRIOR_Msk          (0xf0UL)                  /*!< CH_PRIOR (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG1_L_DST_PCTL_OVER_Pos     (2UL)                     /*!< DST_PCTL_OVER (Bit 2)                                 */
#define DMAC_CFG1_L_DST_PCTL_OVER_Msk     (0x4UL)                   /*!< DST_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG1_L_SRC_PCTL_OVER_Pos     (1UL)                     /*!< SRC_PCTL_OVER (Bit 1)                                 */
#define DMAC_CFG1_L_SRC_PCTL_OVER_Msk     (0x2UL)                   /*!< SRC_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG1_L_INACTIVE_Pos          (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMAC_CFG1_L_INACTIVE_Msk          (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
/* ========================================================  CFG2_L  ========================================================= */
#define DMAC_CFG2_L_RELOAD_DST_Pos        (31UL)                    /*!< RELOAD_DST (Bit 31)                                   */
#define DMAC_CFG2_L_RELOAD_DST_Msk        (0x80000000UL)            /*!< RELOAD_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG2_L_RELOAD_SRC_Pos        (30UL)                    /*!< RELOAD_SRC (Bit 30)                                   */
#define DMAC_CFG2_L_RELOAD_SRC_Msk        (0x40000000UL)            /*!< RELOAD_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG2_L_SRC_HS_POL_Pos        (19UL)                    /*!< SRC_HS_POL (Bit 19)                                   */
#define DMAC_CFG2_L_SRC_HS_POL_Msk        (0x80000UL)               /*!< SRC_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG2_L_DST_HS_POL_Pos        (18UL)                    /*!< DST_HS_POL (Bit 18)                                   */
#define DMAC_CFG2_L_DST_HS_POL_Msk        (0x40000UL)               /*!< DST_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG2_L_HS_SEL_SRC_Pos        (11UL)                    /*!< HS_SEL_SRC (Bit 11)                                   */
#define DMAC_CFG2_L_HS_SEL_SRC_Msk        (0x800UL)                 /*!< HS_SEL_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG2_L_HS_SEL_DST_Pos        (10UL)                    /*!< HS_SEL_DST (Bit 10)                                   */
#define DMAC_CFG2_L_HS_SEL_DST_Msk        (0x400UL)                 /*!< HS_SEL_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG2_L_FIFO_EMPTY_Pos        (9UL)                     /*!< FIFO_EMPTY (Bit 9)                                    */
#define DMAC_CFG2_L_FIFO_EMPTY_Msk        (0x200UL)                 /*!< FIFO_EMPTY (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG2_L_CH_SUSP_Pos           (8UL)                     /*!< CH_SUSP (Bit 8)                                       */
#define DMAC_CFG2_L_CH_SUSP_Msk           (0x100UL)                 /*!< CH_SUSP (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG2_L_CH_PRIOR_Pos          (4UL)                     /*!< CH_PRIOR (Bit 4)                                      */
#define DMAC_CFG2_L_CH_PRIOR_Msk          (0xf0UL)                  /*!< CH_PRIOR (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG2_L_DST_PCTL_OVER_Pos     (2UL)                     /*!< DST_PCTL_OVER (Bit 2)                                 */
#define DMAC_CFG2_L_DST_PCTL_OVER_Msk     (0x4UL)                   /*!< DST_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG2_L_SRC_PCTL_OVER_Pos     (1UL)                     /*!< SRC_PCTL_OVER (Bit 1)                                 */
#define DMAC_CFG2_L_SRC_PCTL_OVER_Msk     (0x2UL)                   /*!< SRC_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG2_L_INACTIVE_Pos          (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMAC_CFG2_L_INACTIVE_Msk          (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
/* ========================================================  CFG3_L  ========================================================= */
#define DMAC_CFG3_L_RELOAD_DST_Pos        (31UL)                    /*!< RELOAD_DST (Bit 31)                                   */
#define DMAC_CFG3_L_RELOAD_DST_Msk        (0x80000000UL)            /*!< RELOAD_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG3_L_RELOAD_SRC_Pos        (30UL)                    /*!< RELOAD_SRC (Bit 30)                                   */
#define DMAC_CFG3_L_RELOAD_SRC_Msk        (0x40000000UL)            /*!< RELOAD_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG3_L_SRC_HS_POL_Pos        (19UL)                    /*!< SRC_HS_POL (Bit 19)                                   */
#define DMAC_CFG3_L_SRC_HS_POL_Msk        (0x80000UL)               /*!< SRC_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG3_L_DST_HS_POL_Pos        (18UL)                    /*!< DST_HS_POL (Bit 18)                                   */
#define DMAC_CFG3_L_DST_HS_POL_Msk        (0x40000UL)               /*!< DST_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG3_L_HS_SEL_SRC_Pos        (11UL)                    /*!< HS_SEL_SRC (Bit 11)                                   */
#define DMAC_CFG3_L_HS_SEL_SRC_Msk        (0x800UL)                 /*!< HS_SEL_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG3_L_HS_SEL_DST_Pos        (10UL)                    /*!< HS_SEL_DST (Bit 10)                                   */
#define DMAC_CFG3_L_HS_SEL_DST_Msk        (0x400UL)                 /*!< HS_SEL_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG3_L_FIFO_EMPTY_Pos        (9UL)                     /*!< FIFO_EMPTY (Bit 9)                                    */
#define DMAC_CFG3_L_FIFO_EMPTY_Msk        (0x200UL)                 /*!< FIFO_EMPTY (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG3_L_CH_SUSP_Pos           (8UL)                     /*!< CH_SUSP (Bit 8)                                       */
#define DMAC_CFG3_L_CH_SUSP_Msk           (0x100UL)                 /*!< CH_SUSP (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG3_L_CH_PRIOR_Pos          (4UL)                     /*!< CH_PRIOR (Bit 4)                                      */
#define DMAC_CFG3_L_CH_PRIOR_Msk          (0xf0UL)                  /*!< CH_PRIOR (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG3_L_DST_PCTL_OVER_Pos     (2UL)                     /*!< DST_PCTL_OVER (Bit 2)                                 */
#define DMAC_CFG3_L_DST_PCTL_OVER_Msk     (0x4UL)                   /*!< DST_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG3_L_SRC_PCTL_OVER_Pos     (1UL)                     /*!< SRC_PCTL_OVER (Bit 1)                                 */
#define DMAC_CFG3_L_SRC_PCTL_OVER_Msk     (0x2UL)                   /*!< SRC_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG3_L_INACTIVE_Pos          (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMAC_CFG3_L_INACTIVE_Msk          (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
/* ========================================================  CFG4_L  ========================================================= */
#define DMAC_CFG4_L_RELOAD_DST_Pos        (31UL)                    /*!< RELOAD_DST (Bit 31)                                   */
#define DMAC_CFG4_L_RELOAD_DST_Msk        (0x80000000UL)            /*!< RELOAD_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG4_L_RELOAD_SRC_Pos        (30UL)                    /*!< RELOAD_SRC (Bit 30)                                   */
#define DMAC_CFG4_L_RELOAD_SRC_Msk        (0x40000000UL)            /*!< RELOAD_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG4_L_SRC_HS_POL_Pos        (19UL)                    /*!< SRC_HS_POL (Bit 19)                                   */
#define DMAC_CFG4_L_SRC_HS_POL_Msk        (0x80000UL)               /*!< SRC_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG4_L_DST_HS_POL_Pos        (18UL)                    /*!< DST_HS_POL (Bit 18)                                   */
#define DMAC_CFG4_L_DST_HS_POL_Msk        (0x40000UL)               /*!< DST_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG4_L_HS_SEL_SRC_Pos        (11UL)                    /*!< HS_SEL_SRC (Bit 11)                                   */
#define DMAC_CFG4_L_HS_SEL_SRC_Msk        (0x800UL)                 /*!< HS_SEL_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG4_L_HS_SEL_DST_Pos        (10UL)                    /*!< HS_SEL_DST (Bit 10)                                   */
#define DMAC_CFG4_L_HS_SEL_DST_Msk        (0x400UL)                 /*!< HS_SEL_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG4_L_FIFO_EMPTY_Pos        (9UL)                     /*!< FIFO_EMPTY (Bit 9)                                    */
#define DMAC_CFG4_L_FIFO_EMPTY_Msk        (0x200UL)                 /*!< FIFO_EMPTY (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG4_L_CH_SUSP_Pos           (8UL)                     /*!< CH_SUSP (Bit 8)                                       */
#define DMAC_CFG4_L_CH_SUSP_Msk           (0x100UL)                 /*!< CH_SUSP (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG4_L_CH_PRIOR_Pos          (4UL)                     /*!< CH_PRIOR (Bit 4)                                      */
#define DMAC_CFG4_L_CH_PRIOR_Msk          (0xf0UL)                  /*!< CH_PRIOR (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG4_L_DST_PCTL_OVER_Pos     (2UL)                     /*!< DST_PCTL_OVER (Bit 2)                                 */
#define DMAC_CFG4_L_DST_PCTL_OVER_Msk     (0x4UL)                   /*!< DST_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG4_L_SRC_PCTL_OVER_Pos     (1UL)                     /*!< SRC_PCTL_OVER (Bit 1)                                 */
#define DMAC_CFG4_L_SRC_PCTL_OVER_Msk     (0x2UL)                   /*!< SRC_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG4_L_INACTIVE_Pos          (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMAC_CFG4_L_INACTIVE_Msk          (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
/* ========================================================  CFG5_L  ========================================================= */
#define DMAC_CFG5_L_RELOAD_DST_Pos        (31UL)                    /*!< RELOAD_DST (Bit 31)                                   */
#define DMAC_CFG5_L_RELOAD_DST_Msk        (0x80000000UL)            /*!< RELOAD_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG5_L_RELOAD_SRC_Pos        (30UL)                    /*!< RELOAD_SRC (Bit 30)                                   */
#define DMAC_CFG5_L_RELOAD_SRC_Msk        (0x40000000UL)            /*!< RELOAD_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG5_L_SRC_HS_POL_Pos        (19UL)                    /*!< SRC_HS_POL (Bit 19)                                   */
#define DMAC_CFG5_L_SRC_HS_POL_Msk        (0x80000UL)               /*!< SRC_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG5_L_DST_HS_POL_Pos        (18UL)                    /*!< DST_HS_POL (Bit 18)                                   */
#define DMAC_CFG5_L_DST_HS_POL_Msk        (0x40000UL)               /*!< DST_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG5_L_HS_SEL_SRC_Pos        (11UL)                    /*!< HS_SEL_SRC (Bit 11)                                   */
#define DMAC_CFG5_L_HS_SEL_SRC_Msk        (0x800UL)                 /*!< HS_SEL_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG5_L_HS_SEL_DST_Pos        (10UL)                    /*!< HS_SEL_DST (Bit 10)                                   */
#define DMAC_CFG5_L_HS_SEL_DST_Msk        (0x400UL)                 /*!< HS_SEL_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG5_L_FIFO_EMPTY_Pos        (9UL)                     /*!< FIFO_EMPTY (Bit 9)                                    */
#define DMAC_CFG5_L_FIFO_EMPTY_Msk        (0x200UL)                 /*!< FIFO_EMPTY (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG5_L_CH_SUSP_Pos           (8UL)                     /*!< CH_SUSP (Bit 8)                                       */
#define DMAC_CFG5_L_CH_SUSP_Msk           (0x100UL)                 /*!< CH_SUSP (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG5_L_CH_PRIOR_Pos          (4UL)                     /*!< CH_PRIOR (Bit 4)                                      */
#define DMAC_CFG5_L_CH_PRIOR_Msk          (0xf0UL)                  /*!< CH_PRIOR (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG5_L_DST_PCTL_OVER_Pos     (2UL)                     /*!< DST_PCTL_OVER (Bit 2)                                 */
#define DMAC_CFG5_L_DST_PCTL_OVER_Msk     (0x4UL)                   /*!< DST_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG5_L_SRC_PCTL_OVER_Pos     (1UL)                     /*!< SRC_PCTL_OVER (Bit 1)                                 */
#define DMAC_CFG5_L_SRC_PCTL_OVER_Msk     (0x2UL)                   /*!< SRC_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG5_L_INACTIVE_Pos          (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMAC_CFG5_L_INACTIVE_Msk          (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
/* ========================================================  CFG6_L  ========================================================= */
#define DMAC_CFG6_L_RELOAD_DST_Pos        (31UL)                    /*!< RELOAD_DST (Bit 31)                                   */
#define DMAC_CFG6_L_RELOAD_DST_Msk        (0x80000000UL)            /*!< RELOAD_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG6_L_RELOAD_SRC_Pos        (30UL)                    /*!< RELOAD_SRC (Bit 30)                                   */
#define DMAC_CFG6_L_RELOAD_SRC_Msk        (0x40000000UL)            /*!< RELOAD_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG6_L_SRC_HS_POL_Pos        (19UL)                    /*!< SRC_HS_POL (Bit 19)                                   */
#define DMAC_CFG6_L_SRC_HS_POL_Msk        (0x80000UL)               /*!< SRC_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG6_L_DST_HS_POL_Pos        (18UL)                    /*!< DST_HS_POL (Bit 18)                                   */
#define DMAC_CFG6_L_DST_HS_POL_Msk        (0x40000UL)               /*!< DST_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG6_L_HS_SEL_SRC_Pos        (11UL)                    /*!< HS_SEL_SRC (Bit 11)                                   */
#define DMAC_CFG6_L_HS_SEL_SRC_Msk        (0x800UL)                 /*!< HS_SEL_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG6_L_HS_SEL_DST_Pos        (10UL)                    /*!< HS_SEL_DST (Bit 10)                                   */
#define DMAC_CFG6_L_HS_SEL_DST_Msk        (0x400UL)                 /*!< HS_SEL_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG6_L_FIFO_EMPTY_Pos        (9UL)                     /*!< FIFO_EMPTY (Bit 9)                                    */
#define DMAC_CFG6_L_FIFO_EMPTY_Msk        (0x200UL)                 /*!< FIFO_EMPTY (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG6_L_CH_SUSP_Pos           (8UL)                     /*!< CH_SUSP (Bit 8)                                       */
#define DMAC_CFG6_L_CH_SUSP_Msk           (0x100UL)                 /*!< CH_SUSP (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG6_L_CH_PRIOR_Pos          (4UL)                     /*!< CH_PRIOR (Bit 4)                                      */
#define DMAC_CFG6_L_CH_PRIOR_Msk          (0xf0UL)                  /*!< CH_PRIOR (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG6_L_DST_PCTL_OVER_Pos     (2UL)                     /*!< DST_PCTL_OVER (Bit 2)                                 */
#define DMAC_CFG6_L_DST_PCTL_OVER_Msk     (0x4UL)                   /*!< DST_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG6_L_SRC_PCTL_OVER_Pos     (1UL)                     /*!< SRC_PCTL_OVER (Bit 1)                                 */
#define DMAC_CFG6_L_SRC_PCTL_OVER_Msk     (0x2UL)                   /*!< SRC_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG6_L_INACTIVE_Pos          (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMAC_CFG6_L_INACTIVE_Msk          (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
/* ========================================================  CFG7_L  ========================================================= */
#define DMAC_CFG7_L_RELOAD_DST_Pos        (31UL)                    /*!< RELOAD_DST (Bit 31)                                   */
#define DMAC_CFG7_L_RELOAD_DST_Msk        (0x80000000UL)            /*!< RELOAD_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG7_L_RELOAD_SRC_Pos        (30UL)                    /*!< RELOAD_SRC (Bit 30)                                   */
#define DMAC_CFG7_L_RELOAD_SRC_Msk        (0x40000000UL)            /*!< RELOAD_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG7_L_SRC_HS_POL_Pos        (19UL)                    /*!< SRC_HS_POL (Bit 19)                                   */
#define DMAC_CFG7_L_SRC_HS_POL_Msk        (0x80000UL)               /*!< SRC_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG7_L_DST_HS_POL_Pos        (18UL)                    /*!< DST_HS_POL (Bit 18)                                   */
#define DMAC_CFG7_L_DST_HS_POL_Msk        (0x40000UL)               /*!< DST_HS_POL (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG7_L_HS_SEL_SRC_Pos        (11UL)                    /*!< HS_SEL_SRC (Bit 11)                                   */
#define DMAC_CFG7_L_HS_SEL_SRC_Msk        (0x800UL)                 /*!< HS_SEL_SRC (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG7_L_HS_SEL_DST_Pos        (10UL)                    /*!< HS_SEL_DST (Bit 10)                                   */
#define DMAC_CFG7_L_HS_SEL_DST_Msk        (0x400UL)                 /*!< HS_SEL_DST (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG7_L_FIFO_EMPTY_Pos        (9UL)                     /*!< FIFO_EMPTY (Bit 9)                                    */
#define DMAC_CFG7_L_FIFO_EMPTY_Msk        (0x200UL)                 /*!< FIFO_EMPTY (Bitfield-Mask: 0x01)                      */
#define DMAC_CFG7_L_CH_SUSP_Pos           (8UL)                     /*!< CH_SUSP (Bit 8)                                       */
#define DMAC_CFG7_L_CH_SUSP_Msk           (0x100UL)                 /*!< CH_SUSP (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG7_L_CH_PRIOR_Pos          (4UL)                     /*!< CH_PRIOR (Bit 4)                                      */
#define DMAC_CFG7_L_CH_PRIOR_Msk          (0xf0UL)                  /*!< CH_PRIOR (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG7_L_DST_PCTL_OVER_Pos     (2UL)                     /*!< DST_PCTL_OVER (Bit 2)                                 */
#define DMAC_CFG7_L_DST_PCTL_OVER_Msk     (0x4UL)                   /*!< DST_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG7_L_SRC_PCTL_OVER_Pos     (1UL)                     /*!< SRC_PCTL_OVER (Bit 1)                                 */
#define DMAC_CFG7_L_SRC_PCTL_OVER_Msk     (0x2UL)                   /*!< SRC_PCTL_OVER (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG7_L_INACTIVE_Pos          (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMAC_CFG7_L_INACTIVE_Msk          (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
/* ========================================================  CFG0_H  ========================================================= */
#define DMAC_CFG0_H_Extended_DEST_PER3_Pos (20UL)                   /*!< Extended_DEST_PER3 (Bit 20)                           */
#define DMAC_CFG0_H_Extended_DEST_PER3_Msk (0x100000UL)             /*!< Extended_DEST_PER3 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG0_H_Extended_SRC_PER3_Pos (19UL)                    /*!< Extended_SRC_PER3 (Bit 19)                            */
#define DMAC_CFG0_H_Extended_SRC_PER3_Msk (0x80000UL)               /*!< Extended_SRC_PER3 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG0_H_Extended_DEST_PER2_Pos (18UL)                   /*!< Extended_DEST_PER2 (Bit 18)                           */
#define DMAC_CFG0_H_Extended_DEST_PER2_Msk (0x40000UL)              /*!< Extended_DEST_PER2 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG0_H_Extended_SRC_PER2_Pos (17UL)                    /*!< Extended_SRC_PER2 (Bit 17)                            */
#define DMAC_CFG0_H_Extended_SRC_PER2_Msk (0x20000UL)               /*!< Extended_SRC_PER2 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG0_H_Extended_DEST_PER1_Pos (16UL)                   /*!< Extended_DEST_PER1 (Bit 16)                           */
#define DMAC_CFG0_H_Extended_DEST_PER1_Msk (0x10000UL)              /*!< Extended_DEST_PER1 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG0_H_Extended_SRC_PER1_Pos (15UL)                    /*!< Extended_SRC_PER1 (Bit 15)                            */
#define DMAC_CFG0_H_Extended_SRC_PER1_Msk (0x8000UL)                /*!< Extended_SRC_PER1 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG0_H_DEST_PER_Pos          (11UL)                    /*!< DEST_PER (Bit 11)                                     */
#define DMAC_CFG0_H_DEST_PER_Msk          (0x7800UL)                /*!< DEST_PER (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG0_H_SRC_PER_Pos           (7UL)                     /*!< SRC_PER (Bit 7)                                       */
#define DMAC_CFG0_H_SRC_PER_Msk           (0x780UL)                 /*!< SRC_PER (Bitfield-Mask: 0x0f)                         */
#define DMAC_CFG0_H_CONT_DAR_Pos          (6UL)                     /*!< CONT_DAR (Bit 6)                                      */
#define DMAC_CFG0_H_CONT_DAR_Msk          (0x40UL)                  /*!< CONT_DAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG0_H_CONT_SAR_Pos          (5UL)                     /*!< CONT_SAR (Bit 5)                                      */
#define DMAC_CFG0_H_CONT_SAR_Msk          (0x20UL)                  /*!< CONT_SAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG0_H_DIRECT_CTL_EN_Pos     (4UL)                     /*!< DIRECT_CTL_EN (Bit 4)                                 */
#define DMAC_CFG0_H_DIRECT_CTL_EN_Msk     (0x10UL)                  /*!< DIRECT_CTL_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG0_H_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMAC_CFG0_H_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG0_H_FCMODE_Pos            (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMAC_CFG0_H_FCMODE_Msk            (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
/* ========================================================  CFG1_H  ========================================================= */
#define DMAC_CFG1_H_Extended_DEST_PER3_Pos (20UL)                   /*!< Extended_DEST_PER3 (Bit 20)                           */
#define DMAC_CFG1_H_Extended_DEST_PER3_Msk (0x100000UL)             /*!< Extended_DEST_PER3 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG1_H_Extended_SRC_PER3_Pos (19UL)                    /*!< Extended_SRC_PER3 (Bit 19)                            */
#define DMAC_CFG1_H_Extended_SRC_PER3_Msk (0x80000UL)               /*!< Extended_SRC_PER3 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG1_H_Extended_DEST_PER2_Pos (18UL)                   /*!< Extended_DEST_PER2 (Bit 18)                           */
#define DMAC_CFG1_H_Extended_DEST_PER2_Msk (0x40000UL)              /*!< Extended_DEST_PER2 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG1_H_Extended_SRC_PER2_Pos (17UL)                    /*!< Extended_SRC_PER2 (Bit 17)                            */
#define DMAC_CFG1_H_Extended_SRC_PER2_Msk (0x20000UL)               /*!< Extended_SRC_PER2 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG1_H_Extended_DEST_PER1_Pos (16UL)                   /*!< Extended_DEST_PER1 (Bit 16)                           */
#define DMAC_CFG1_H_Extended_DEST_PER1_Msk (0x10000UL)              /*!< Extended_DEST_PER1 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG1_H_Extended_SRC_PER1_Pos (15UL)                    /*!< Extended_SRC_PER1 (Bit 15)                            */
#define DMAC_CFG1_H_Extended_SRC_PER1_Msk (0x8000UL)                /*!< Extended_SRC_PER1 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG1_H_DEST_PER_Pos          (11UL)                    /*!< DEST_PER (Bit 11)                                     */
#define DMAC_CFG1_H_DEST_PER_Msk          (0x7800UL)                /*!< DEST_PER (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG1_H_SRC_PER_Pos           (7UL)                     /*!< SRC_PER (Bit 7)                                       */
#define DMAC_CFG1_H_SRC_PER_Msk           (0x780UL)                 /*!< SRC_PER (Bitfield-Mask: 0x0f)                         */
#define DMAC_CFG1_H_CONT_DAR_Pos          (6UL)                     /*!< CONT_DAR (Bit 6)                                      */
#define DMAC_CFG1_H_CONT_DAR_Msk          (0x40UL)                  /*!< CONT_DAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG1_H_CONT_SAR_Pos          (5UL)                     /*!< CONT_SAR (Bit 5)                                      */
#define DMAC_CFG1_H_CONT_SAR_Msk          (0x20UL)                  /*!< CONT_SAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG1_H_DIRECT_CTL_EN_Pos     (4UL)                     /*!< DIRECT_CTL_EN (Bit 4)                                 */
#define DMAC_CFG1_H_DIRECT_CTL_EN_Msk     (0x10UL)                  /*!< DIRECT_CTL_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG1_H_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMAC_CFG1_H_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG1_H_FCMODE_Pos            (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMAC_CFG1_H_FCMODE_Msk            (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
/* ========================================================  CFG2_H  ========================================================= */
#define DMAC_CFG2_H_Extended_DEST_PER3_Pos (20UL)                   /*!< Extended_DEST_PER3 (Bit 20)                           */
#define DMAC_CFG2_H_Extended_DEST_PER3_Msk (0x100000UL)             /*!< Extended_DEST_PER3 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG2_H_Extended_SRC_PER3_Pos (19UL)                    /*!< Extended_SRC_PER3 (Bit 19)                            */
#define DMAC_CFG2_H_Extended_SRC_PER3_Msk (0x80000UL)               /*!< Extended_SRC_PER3 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG2_H_Extended_DEST_PER2_Pos (18UL)                   /*!< Extended_DEST_PER2 (Bit 18)                           */
#define DMAC_CFG2_H_Extended_DEST_PER2_Msk (0x40000UL)              /*!< Extended_DEST_PER2 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG2_H_Extended_SRC_PER2_Pos (17UL)                    /*!< Extended_SRC_PER2 (Bit 17)                            */
#define DMAC_CFG2_H_Extended_SRC_PER2_Msk (0x20000UL)               /*!< Extended_SRC_PER2 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG2_H_Extended_DEST_PER1_Pos (16UL)                   /*!< Extended_DEST_PER1 (Bit 16)                           */
#define DMAC_CFG2_H_Extended_DEST_PER1_Msk (0x10000UL)              /*!< Extended_DEST_PER1 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG2_H_Extended_SRC_PER1_Pos (15UL)                    /*!< Extended_SRC_PER1 (Bit 15)                            */
#define DMAC_CFG2_H_Extended_SRC_PER1_Msk (0x8000UL)                /*!< Extended_SRC_PER1 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG2_H_DEST_PER_Pos          (11UL)                    /*!< DEST_PER (Bit 11)                                     */
#define DMAC_CFG2_H_DEST_PER_Msk          (0x7800UL)                /*!< DEST_PER (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG2_H_SRC_PER_Pos           (7UL)                     /*!< SRC_PER (Bit 7)                                       */
#define DMAC_CFG2_H_SRC_PER_Msk           (0x780UL)                 /*!< SRC_PER (Bitfield-Mask: 0x0f)                         */
#define DMAC_CFG2_H_CONT_DAR_Pos          (6UL)                     /*!< CONT_DAR (Bit 6)                                      */
#define DMAC_CFG2_H_CONT_DAR_Msk          (0x40UL)                  /*!< CONT_DAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG2_H_CONT_SAR_Pos          (5UL)                     /*!< CONT_SAR (Bit 5)                                      */
#define DMAC_CFG2_H_CONT_SAR_Msk          (0x20UL)                  /*!< CONT_SAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG2_H_DIRECT_CTL_EN_Pos     (4UL)                     /*!< DIRECT_CTL_EN (Bit 4)                                 */
#define DMAC_CFG2_H_DIRECT_CTL_EN_Msk     (0x10UL)                  /*!< DIRECT_CTL_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG2_H_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMAC_CFG2_H_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG2_H_FCMODE_Pos            (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMAC_CFG2_H_FCMODE_Msk            (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
/* ========================================================  CFG3_H  ========================================================= */
#define DMAC_CFG3_H_Extended_DEST_PER3_Pos (20UL)                   /*!< Extended_DEST_PER3 (Bit 20)                           */
#define DMAC_CFG3_H_Extended_DEST_PER3_Msk (0x100000UL)             /*!< Extended_DEST_PER3 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG3_H_Extended_SRC_PER3_Pos (19UL)                    /*!< Extended_SRC_PER3 (Bit 19)                            */
#define DMAC_CFG3_H_Extended_SRC_PER3_Msk (0x80000UL)               /*!< Extended_SRC_PER3 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG3_H_Extended_DEST_PER2_Pos (18UL)                   /*!< Extended_DEST_PER2 (Bit 18)                           */
#define DMAC_CFG3_H_Extended_DEST_PER2_Msk (0x40000UL)              /*!< Extended_DEST_PER2 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG3_H_Extended_SRC_PER2_Pos (17UL)                    /*!< Extended_SRC_PER2 (Bit 17)                            */
#define DMAC_CFG3_H_Extended_SRC_PER2_Msk (0x20000UL)               /*!< Extended_SRC_PER2 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG3_H_Extended_DEST_PER1_Pos (16UL)                   /*!< Extended_DEST_PER1 (Bit 16)                           */
#define DMAC_CFG3_H_Extended_DEST_PER1_Msk (0x10000UL)              /*!< Extended_DEST_PER1 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG3_H_Extended_SRC_PER1_Pos (15UL)                    /*!< Extended_SRC_PER1 (Bit 15)                            */
#define DMAC_CFG3_H_Extended_SRC_PER1_Msk (0x8000UL)                /*!< Extended_SRC_PER1 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG3_H_DEST_PER_Pos          (11UL)                    /*!< DEST_PER (Bit 11)                                     */
#define DMAC_CFG3_H_DEST_PER_Msk          (0x7800UL)                /*!< DEST_PER (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG3_H_SRC_PER_Pos           (7UL)                     /*!< SRC_PER (Bit 7)                                       */
#define DMAC_CFG3_H_SRC_PER_Msk           (0x780UL)                 /*!< SRC_PER (Bitfield-Mask: 0x0f)                         */
#define DMAC_CFG3_H_CONT_DAR_Pos          (6UL)                     /*!< CONT_DAR (Bit 6)                                      */
#define DMAC_CFG3_H_CONT_DAR_Msk          (0x40UL)                  /*!< CONT_DAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG3_H_CONT_SAR_Pos          (5UL)                     /*!< CONT_SAR (Bit 5)                                      */
#define DMAC_CFG3_H_CONT_SAR_Msk          (0x20UL)                  /*!< CONT_SAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG3_H_DIRECT_CTL_EN_Pos     (4UL)                     /*!< DIRECT_CTL_EN (Bit 4)                                 */
#define DMAC_CFG3_H_DIRECT_CTL_EN_Msk     (0x10UL)                  /*!< DIRECT_CTL_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG3_H_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMAC_CFG3_H_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG3_H_FCMODE_Pos            (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMAC_CFG3_H_FCMODE_Msk            (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
/* ========================================================  CFG4_H  ========================================================= */
#define DMAC_CFG4_H_Extended_DEST_PER3_Pos (20UL)                   /*!< Extended_DEST_PER3 (Bit 20)                           */
#define DMAC_CFG4_H_Extended_DEST_PER3_Msk (0x100000UL)             /*!< Extended_DEST_PER3 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG4_H_Extended_SRC_PER3_Pos (19UL)                    /*!< Extended_SRC_PER3 (Bit 19)                            */
#define DMAC_CFG4_H_Extended_SRC_PER3_Msk (0x80000UL)               /*!< Extended_SRC_PER3 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG4_H_Extended_DEST_PER2_Pos (18UL)                   /*!< Extended_DEST_PER2 (Bit 18)                           */
#define DMAC_CFG4_H_Extended_DEST_PER2_Msk (0x40000UL)              /*!< Extended_DEST_PER2 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG4_H_Extended_SRC_PER2_Pos (17UL)                    /*!< Extended_SRC_PER2 (Bit 17)                            */
#define DMAC_CFG4_H_Extended_SRC_PER2_Msk (0x20000UL)               /*!< Extended_SRC_PER2 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG4_H_Extended_DEST_PER1_Pos (16UL)                   /*!< Extended_DEST_PER1 (Bit 16)                           */
#define DMAC_CFG4_H_Extended_DEST_PER1_Msk (0x10000UL)              /*!< Extended_DEST_PER1 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG4_H_Extended_SRC_PER1_Pos (15UL)                    /*!< Extended_SRC_PER1 (Bit 15)                            */
#define DMAC_CFG4_H_Extended_SRC_PER1_Msk (0x8000UL)                /*!< Extended_SRC_PER1 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG4_H_DEST_PER_Pos          (11UL)                    /*!< DEST_PER (Bit 11)                                     */
#define DMAC_CFG4_H_DEST_PER_Msk          (0x7800UL)                /*!< DEST_PER (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG4_H_SRC_PER_Pos           (7UL)                     /*!< SRC_PER (Bit 7)                                       */
#define DMAC_CFG4_H_SRC_PER_Msk           (0x780UL)                 /*!< SRC_PER (Bitfield-Mask: 0x0f)                         */
#define DMAC_CFG4_H_CONT_DAR_Pos          (6UL)                     /*!< CONT_DAR (Bit 6)                                      */
#define DMAC_CFG4_H_CONT_DAR_Msk          (0x40UL)                  /*!< CONT_DAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG4_H_CONT_SAR_Pos          (5UL)                     /*!< CONT_SAR (Bit 5)                                      */
#define DMAC_CFG4_H_CONT_SAR_Msk          (0x20UL)                  /*!< CONT_SAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG4_H_DIRECT_CTL_EN_Pos     (4UL)                     /*!< DIRECT_CTL_EN (Bit 4)                                 */
#define DMAC_CFG4_H_DIRECT_CTL_EN_Msk     (0x10UL)                  /*!< DIRECT_CTL_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG4_H_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMAC_CFG4_H_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG4_H_FCMODE_Pos            (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMAC_CFG4_H_FCMODE_Msk            (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
/* ========================================================  CFG5_H  ========================================================= */
#define DMAC_CFG5_H_Extended_DEST_PER3_Pos (20UL)                   /*!< Extended_DEST_PER3 (Bit 20)                           */
#define DMAC_CFG5_H_Extended_DEST_PER3_Msk (0x100000UL)             /*!< Extended_DEST_PER3 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG5_H_Extended_SRC_PER3_Pos (19UL)                    /*!< Extended_SRC_PER3 (Bit 19)                            */
#define DMAC_CFG5_H_Extended_SRC_PER3_Msk (0x80000UL)               /*!< Extended_SRC_PER3 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG5_H_Extended_DEST_PER2_Pos (18UL)                   /*!< Extended_DEST_PER2 (Bit 18)                           */
#define DMAC_CFG5_H_Extended_DEST_PER2_Msk (0x40000UL)              /*!< Extended_DEST_PER2 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG5_H_Extended_SRC_PER2_Pos (17UL)                    /*!< Extended_SRC_PER2 (Bit 17)                            */
#define DMAC_CFG5_H_Extended_SRC_PER2_Msk (0x20000UL)               /*!< Extended_SRC_PER2 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG5_H_Extended_DEST_PER1_Pos (16UL)                   /*!< Extended_DEST_PER1 (Bit 16)                           */
#define DMAC_CFG5_H_Extended_DEST_PER1_Msk (0x10000UL)              /*!< Extended_DEST_PER1 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG5_H_Extended_SRC_PER1_Pos (15UL)                    /*!< Extended_SRC_PER1 (Bit 15)                            */
#define DMAC_CFG5_H_Extended_SRC_PER1_Msk (0x8000UL)                /*!< Extended_SRC_PER1 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG5_H_DEST_PER_Pos          (11UL)                    /*!< DEST_PER (Bit 11)                                     */
#define DMAC_CFG5_H_DEST_PER_Msk          (0x7800UL)                /*!< DEST_PER (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG5_H_SRC_PER_Pos           (7UL)                     /*!< SRC_PER (Bit 7)                                       */
#define DMAC_CFG5_H_SRC_PER_Msk           (0x780UL)                 /*!< SRC_PER (Bitfield-Mask: 0x0f)                         */
#define DMAC_CFG5_H_CONT_DAR_Pos          (6UL)                     /*!< CONT_DAR (Bit 6)                                      */
#define DMAC_CFG5_H_CONT_DAR_Msk          (0x40UL)                  /*!< CONT_DAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG5_H_CONT_SAR_Pos          (5UL)                     /*!< CONT_SAR (Bit 5)                                      */
#define DMAC_CFG5_H_CONT_SAR_Msk          (0x20UL)                  /*!< CONT_SAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG5_H_DIRECT_CTL_EN_Pos     (4UL)                     /*!< DIRECT_CTL_EN (Bit 4)                                 */
#define DMAC_CFG5_H_DIRECT_CTL_EN_Msk     (0x10UL)                  /*!< DIRECT_CTL_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG5_H_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMAC_CFG5_H_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG5_H_FCMODE_Pos            (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMAC_CFG5_H_FCMODE_Msk            (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
/* ========================================================  CFG6_H  ========================================================= */
#define DMAC_CFG6_H_Extended_DEST_PER3_Pos (20UL)                   /*!< Extended_DEST_PER3 (Bit 20)                           */
#define DMAC_CFG6_H_Extended_DEST_PER3_Msk (0x100000UL)             /*!< Extended_DEST_PER3 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG6_H_Extended_SRC_PER3_Pos (19UL)                    /*!< Extended_SRC_PER3 (Bit 19)                            */
#define DMAC_CFG6_H_Extended_SRC_PER3_Msk (0x80000UL)               /*!< Extended_SRC_PER3 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG6_H_Extended_DEST_PER2_Pos (18UL)                   /*!< Extended_DEST_PER2 (Bit 18)                           */
#define DMAC_CFG6_H_Extended_DEST_PER2_Msk (0x40000UL)              /*!< Extended_DEST_PER2 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG6_H_Extended_SRC_PER2_Pos (17UL)                    /*!< Extended_SRC_PER2 (Bit 17)                            */
#define DMAC_CFG6_H_Extended_SRC_PER2_Msk (0x20000UL)               /*!< Extended_SRC_PER2 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG6_H_Extended_DEST_PER1_Pos (16UL)                   /*!< Extended_DEST_PER1 (Bit 16)                           */
#define DMAC_CFG6_H_Extended_DEST_PER1_Msk (0x10000UL)              /*!< Extended_DEST_PER1 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG6_H_Extended_SRC_PER1_Pos (15UL)                    /*!< Extended_SRC_PER1 (Bit 15)                            */
#define DMAC_CFG6_H_Extended_SRC_PER1_Msk (0x8000UL)                /*!< Extended_SRC_PER1 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG6_H_DEST_PER_Pos          (11UL)                    /*!< DEST_PER (Bit 11)                                     */
#define DMAC_CFG6_H_DEST_PER_Msk          (0x7800UL)                /*!< DEST_PER (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG6_H_SRC_PER_Pos           (7UL)                     /*!< SRC_PER (Bit 7)                                       */
#define DMAC_CFG6_H_SRC_PER_Msk           (0x780UL)                 /*!< SRC_PER (Bitfield-Mask: 0x0f)                         */
#define DMAC_CFG6_H_CONT_DAR_Pos          (6UL)                     /*!< CONT_DAR (Bit 6)                                      */
#define DMAC_CFG6_H_CONT_DAR_Msk          (0x40UL)                  /*!< CONT_DAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG6_H_CONT_SAR_Pos          (5UL)                     /*!< CONT_SAR (Bit 5)                                      */
#define DMAC_CFG6_H_CONT_SAR_Msk          (0x20UL)                  /*!< CONT_SAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG6_H_DIRECT_CTL_EN_Pos     (4UL)                     /*!< DIRECT_CTL_EN (Bit 4)                                 */
#define DMAC_CFG6_H_DIRECT_CTL_EN_Msk     (0x10UL)                  /*!< DIRECT_CTL_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG6_H_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMAC_CFG6_H_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG6_H_FCMODE_Pos            (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMAC_CFG6_H_FCMODE_Msk            (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
/* ========================================================  CFG7_H  ========================================================= */
#define DMAC_CFG7_H_Extended_DEST_PER3_Pos (20UL)                   /*!< Extended_DEST_PER3 (Bit 20)                           */
#define DMAC_CFG7_H_Extended_DEST_PER3_Msk (0x100000UL)             /*!< Extended_DEST_PER3 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG7_H_Extended_SRC_PER3_Pos (19UL)                    /*!< Extended_SRC_PER3 (Bit 19)                            */
#define DMAC_CFG7_H_Extended_SRC_PER3_Msk (0x80000UL)               /*!< Extended_SRC_PER3 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG7_H_Extended_DEST_PER2_Pos (18UL)                   /*!< Extended_DEST_PER2 (Bit 18)                           */
#define DMAC_CFG7_H_Extended_DEST_PER2_Msk (0x40000UL)              /*!< Extended_DEST_PER2 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG7_H_Extended_SRC_PER2_Pos (17UL)                    /*!< Extended_SRC_PER2 (Bit 17)                            */
#define DMAC_CFG7_H_Extended_SRC_PER2_Msk (0x20000UL)               /*!< Extended_SRC_PER2 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG7_H_Extended_DEST_PER1_Pos (16UL)                   /*!< Extended_DEST_PER1 (Bit 16)                           */
#define DMAC_CFG7_H_Extended_DEST_PER1_Msk (0x10000UL)              /*!< Extended_DEST_PER1 (Bitfield-Mask: 0x01)              */
#define DMAC_CFG7_H_Extended_SRC_PER1_Pos (15UL)                    /*!< Extended_SRC_PER1 (Bit 15)                            */
#define DMAC_CFG7_H_Extended_SRC_PER1_Msk (0x8000UL)                /*!< Extended_SRC_PER1 (Bitfield-Mask: 0x01)               */
#define DMAC_CFG7_H_DEST_PER_Pos          (11UL)                    /*!< DEST_PER (Bit 11)                                     */
#define DMAC_CFG7_H_DEST_PER_Msk          (0x7800UL)                /*!< DEST_PER (Bitfield-Mask: 0x0f)                        */
#define DMAC_CFG7_H_SRC_PER_Pos           (7UL)                     /*!< SRC_PER (Bit 7)                                       */
#define DMAC_CFG7_H_SRC_PER_Msk           (0x780UL)                 /*!< SRC_PER (Bitfield-Mask: 0x0f)                         */
#define DMAC_CFG7_H_CONT_DAR_Pos          (6UL)                     /*!< CONT_DAR (Bit 6)                                      */
#define DMAC_CFG7_H_CONT_DAR_Msk          (0x40UL)                  /*!< CONT_DAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG7_H_CONT_SAR_Pos          (5UL)                     /*!< CONT_SAR (Bit 5)                                      */
#define DMAC_CFG7_H_CONT_SAR_Msk          (0x20UL)                  /*!< CONT_SAR (Bitfield-Mask: 0x01)                        */
#define DMAC_CFG7_H_DIRECT_CTL_EN_Pos     (4UL)                     /*!< DIRECT_CTL_EN (Bit 4)                                 */
#define DMAC_CFG7_H_DIRECT_CTL_EN_Msk     (0x10UL)                  /*!< DIRECT_CTL_EN (Bitfield-Mask: 0x01)                   */
#define DMAC_CFG7_H_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMAC_CFG7_H_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMAC_CFG7_H_FCMODE_Pos            (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMAC_CFG7_H_FCMODE_Msk            (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
/* ========================================================  SGR0_L  ========================================================= */
#define DMAC_SGR0_L_SGC_Pos               (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMAC_SGR0_L_SGC_Msk               (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
#define DMAC_SGR0_L_SGI_Pos               (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMAC_SGR0_L_SGI_Msk               (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  SGR1_L  ========================================================= */
#define DMAC_SGR1_L_SGC_Pos               (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMAC_SGR1_L_SGC_Msk               (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
#define DMAC_SGR1_L_SGI_Pos               (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMAC_SGR1_L_SGI_Msk               (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  SGR2_L  ========================================================= */
#define DMAC_SGR2_L_SGC_Pos               (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMAC_SGR2_L_SGC_Msk               (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
#define DMAC_SGR2_L_SGI_Pos               (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMAC_SGR2_L_SGI_Msk               (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  SGR3_L  ========================================================= */
#define DMAC_SGR3_L_SGC_Pos               (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMAC_SGR3_L_SGC_Msk               (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
#define DMAC_SGR3_L_SGI_Pos               (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMAC_SGR3_L_SGI_Msk               (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  SGR4_L  ========================================================= */
#define DMAC_SGR4_L_SGC_Pos               (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMAC_SGR4_L_SGC_Msk               (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
#define DMAC_SGR4_L_SGI_Pos               (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMAC_SGR4_L_SGI_Msk               (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  SGR5_L  ========================================================= */
#define DMAC_SGR5_L_SGC_Pos               (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMAC_SGR5_L_SGC_Msk               (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
#define DMAC_SGR5_L_SGI_Pos               (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMAC_SGR5_L_SGI_Msk               (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  SGR6_L  ========================================================= */
#define DMAC_SGR6_L_SGC_Pos               (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMAC_SGR6_L_SGC_Msk               (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
#define DMAC_SGR6_L_SGI_Pos               (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMAC_SGR6_L_SGI_Msk               (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  SGR7_L  ========================================================= */
#define DMAC_SGR7_L_SGC_Pos               (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMAC_SGR7_L_SGC_Msk               (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
#define DMAC_SGR7_L_SGI_Pos               (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMAC_SGR7_L_SGI_Msk               (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  SGR0_H  ========================================================= */
#define DMAC_SGR0_H_BLOCK_TS_L_Pos        (16UL)                    /*!< BLOCK_TS_L (Bit 16)                                   */
#define DMAC_SGR0_H_BLOCK_TS_L_Msk        (0xffff0000UL)            /*!< BLOCK_TS_L (Bitfield-Mask: 0xffff)                    */
#define DMAC_SGR0_H_SGSN_Pos              (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMAC_SGR0_H_SGSN_Msk              (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  SGR1_H  ========================================================= */
#define DMAC_SGR1_H_BLOCK_TS_L_Pos        (16UL)                    /*!< BLOCK_TS_L (Bit 16)                                   */
#define DMAC_SGR1_H_BLOCK_TS_L_Msk        (0xffff0000UL)            /*!< BLOCK_TS_L (Bitfield-Mask: 0xffff)                    */
#define DMAC_SGR1_H_SGSN_Pos              (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMAC_SGR1_H_SGSN_Msk              (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  SGR2_H  ========================================================= */
#define DMAC_SGR2_H_BLOCK_TS_L_Pos        (16UL)                    /*!< BLOCK_TS_L (Bit 16)                                   */
#define DMAC_SGR2_H_BLOCK_TS_L_Msk        (0xffff0000UL)            /*!< BLOCK_TS_L (Bitfield-Mask: 0xffff)                    */
#define DMAC_SGR2_H_SGSN_Pos              (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMAC_SGR2_H_SGSN_Msk              (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  SGR3_H  ========================================================= */
#define DMAC_SGR3_H_BLOCK_TS_L_Pos        (16UL)                    /*!< BLOCK_TS_L (Bit 16)                                   */
#define DMAC_SGR3_H_BLOCK_TS_L_Msk        (0xffff0000UL)            /*!< BLOCK_TS_L (Bitfield-Mask: 0xffff)                    */
#define DMAC_SGR3_H_SGSN_Pos              (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMAC_SGR3_H_SGSN_Msk              (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  SGR4_H  ========================================================= */
#define DMAC_SGR4_H_BLOCK_TS_L_Pos        (16UL)                    /*!< BLOCK_TS_L (Bit 16)                                   */
#define DMAC_SGR4_H_BLOCK_TS_L_Msk        (0xffff0000UL)            /*!< BLOCK_TS_L (Bitfield-Mask: 0xffff)                    */
#define DMAC_SGR4_H_SGSN_Pos              (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMAC_SGR4_H_SGSN_Msk              (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  SGR5_H  ========================================================= */
#define DMAC_SGR5_H_BLOCK_TS_L_Pos        (16UL)                    /*!< BLOCK_TS_L (Bit 16)                                   */
#define DMAC_SGR5_H_BLOCK_TS_L_Msk        (0xffff0000UL)            /*!< BLOCK_TS_L (Bitfield-Mask: 0xffff)                    */
#define DMAC_SGR5_H_SGSN_Pos              (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMAC_SGR5_H_SGSN_Msk              (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  SGR6_H  ========================================================= */
#define DMAC_SGR6_H_BLOCK_TS_L_Pos        (16UL)                    /*!< BLOCK_TS_L (Bit 16)                                   */
#define DMAC_SGR6_H_BLOCK_TS_L_Msk        (0xffff0000UL)            /*!< BLOCK_TS_L (Bitfield-Mask: 0xffff)                    */
#define DMAC_SGR6_H_SGSN_Pos              (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMAC_SGR6_H_SGSN_Msk              (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  SGR7_H  ========================================================= */
#define DMAC_SGR7_H_BLOCK_TS_L_Pos        (16UL)                    /*!< BLOCK_TS_L (Bit 16)                                   */
#define DMAC_SGR7_H_BLOCK_TS_L_Msk        (0xffff0000UL)            /*!< BLOCK_TS_L (Bitfield-Mask: 0xffff)                    */
#define DMAC_SGR7_H_SGSN_Pos              (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMAC_SGR7_H_SGSN_Msk              (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  DSR0_L  ========================================================= */
/* ========================================================  DSR0_H  ========================================================= */
/* =========================================================  SAR1  ========================================================== */
/* =======================================================  CURR_SAR1  ======================================================= */
/* =========================================================  DAR1  ========================================================== */
/* =======================================================  CURR_DAR1  ======================================================= */
/* ========================================================  LLP1_L  ========================================================= */
/* ========================================================  LLP1_H  ========================================================= */
/* ===================================================  BLK_COUNTER_REG1  ==================================================== */
/* ====================================================  REPEAT_PATTERN1  ==================================================== */
/* ========================================================  DSR1_L  ========================================================= */
/* ========================================================  DSR1_H  ========================================================= */
/* =========================================================  SAR2  ========================================================== */
/* =======================================================  CURR_SAR2  ======================================================= */
/* =========================================================  DAR2  ========================================================== */
/* =======================================================  CURR_DAR2  ======================================================= */
/* ========================================================  LLP2_L  ========================================================= */
/* ========================================================  LLP2_H  ========================================================= */
/* ===================================================  BLK_COUNTER_REG2  ==================================================== */
/* ====================================================  REPEAT_PATTERN2  ==================================================== */
/* ========================================================  DSR2_L  ========================================================= */
/* ========================================================  DSR2_H  ========================================================= */
/* =========================================================  SAR3  ========================================================== */
/* =======================================================  CURR_SAR3  ======================================================= */
/* =========================================================  DAR3  ========================================================== */
/* =======================================================  CURR_DAR3  ======================================================= */
/* ========================================================  LLP3_L  ========================================================= */
/* ========================================================  LLP3_H  ========================================================= */
/* ===================================================  BLK_COUNTER_REG3  ==================================================== */
/* ====================================================  REPEAT_PATTERN3  ==================================================== */
/* ========================================================  DSR3_L  ========================================================= */
/* ========================================================  DSR3_H  ========================================================= */
/* =========================================================  SAR4  ========================================================== */
/* =======================================================  CURR_SAR4  ======================================================= */
/* =========================================================  DAR4  ========================================================== */
/* =======================================================  CURR_DAR4  ======================================================= */
/* ========================================================  LLP4_L  ========================================================= */
/* ========================================================  LLP4_H  ========================================================= */
/* ===================================================  BLK_COUNTER_REG4  ==================================================== */
/* ====================================================  REPEAT_PATTERN4  ==================================================== */
/* ========================================================  DSR4_L  ========================================================= */
/* ========================================================  DSR4_H  ========================================================= */
/* =========================================================  SAR5  ========================================================== */
/* =======================================================  CURR_SAR5  ======================================================= */
/* =========================================================  DAR5  ========================================================== */
/* =======================================================  CURR_DAR5  ======================================================= */
/* ========================================================  LLP5_L  ========================================================= */
/* ========================================================  LLP5_H  ========================================================= */
/* ===================================================  BLK_COUNTER_REG5  ==================================================== */
/* ====================================================  REPEAT_PATTERN5  ==================================================== */
/* ========================================================  DSR5_L  ========================================================= */
/* ========================================================  DSR5_H  ========================================================= */
/* =========================================================  SAR6  ========================================================== */
/* =======================================================  CURR_SAR6  ======================================================= */
/* =========================================================  DAR6  ========================================================== */
/* =======================================================  CURR_DAR6  ======================================================= */
/* ========================================================  LLP6_L  ========================================================= */
/* ========================================================  LLP6_H  ========================================================= */
/* ===================================================  BLK_COUNTER_REG6  ==================================================== */
/* ====================================================  REPEAT_PATTERN6  ==================================================== */
/* =========================================================  SAR7  ========================================================== */
/* =======================================================  CURR_SAR7  ======================================================= */
/* =========================================================  DAR7  ========================================================== */
/* =======================================================  CURR_DAR7  ======================================================= */
/* ========================================================  LLP7_L  ========================================================= */
/* ========================================================  LLP7_H  ========================================================= */
/* ===================================================  BLK_COUNTER_REG7  ==================================================== */
/* ====================================================  REPEAT_PATTERN7  ==================================================== */
/* ========================================================  DSR7_L  ========================================================= */
/* ========================================================  DSR7_H  ========================================================= */
/* =======================================================  RAWTFR_L  ======================================================== */
/* =======================================================  RAWTFR_H  ======================================================== */
/* ======================================================  RAWBLOCK_L  ======================================================= */
/* ======================================================  RAWBLOCK_H  ======================================================= */
/* =======================================================  RAWERR_L  ======================================================== */
/* =======================================================  RAWERR_H  ======================================================== */
/* ======================================================  STATUSTFR_L  ====================================================== */
/* ======================================================  STATUSTFR_H  ====================================================== */
/* =====================================================  STATUSBLOCK_L  ===================================================== */
/* ======================================================  STATUSERR_L  ====================================================== */
/* =======================================================  MASKTFR_L  ======================================================= */
/* =======================================================  MASKTFR_H  ======================================================= */
/* ======================================================  MASKBLOCK_L  ====================================================== */
/* ======================================================  MASKBLOCK_H  ====================================================== */
/* =======================================================  MASKERR_L  ======================================================= */
/* =======================================================  MASKERR_H  ======================================================= */
/* =======================================================  CLEARTFR  ======================================================== */
/* ======================================================  CLEARBLOCK  ======================================================= */
/* =======================================================  CLEARERR  ======================================================== */
/* ======================================================  STATUSINT_L  ====================================================== */
#define DMAC_STATUSINT_L_Block_Counter_Pos (6UL)                    /*!< Block_Counter (Bit 6)                                 */
#define DMAC_STATUSINT_L_Block_Counter_Msk (0x40UL)                 /*!< Block_Counter (Bitfield-Mask: 0x01)                   */
#define DMAC_STATUSINT_L_Block_1_2_Pos    (5UL)                     /*!< Block_1_2 (Bit 5)                                     */
#define DMAC_STATUSINT_L_Block_1_2_Msk    (0x20UL)                  /*!< Block_1_2 (Bitfield-Mask: 0x01)                       */
#define DMAC_STATUSINT_L_Error_Pos        (4UL)                     /*!< Error (Bit 4)                                         */
#define DMAC_STATUSINT_L_Error_Msk        (0x10UL)                  /*!< Error (Bitfield-Mask: 0x01)                           */
#define DMAC_STATUSINT_L_Block_Pos        (1UL)                     /*!< Block (Bit 1)                                         */
#define DMAC_STATUSINT_L_Block_Msk        (0x2UL)                   /*!< Block (Bitfield-Mask: 0x01)                           */
#define DMAC_STATUSINT_L_Tfr_Pos          (0UL)                     /*!< Tfr (Bit 0)                                           */
#define DMAC_STATUSINT_L_Tfr_Msk          (0x1UL)                   /*!< Tfr (Bitfield-Mask: 0x01)                             */
/* ======================================================  STATUSINT_H  ====================================================== */
/* =======================================================  DMACFGREG  ======================================================= */
/* ========================================================  CHENREG  ======================================================== */
#define DMAC_CHENREG_CH_EN_WE_Pos         (8UL)                     /*!< CH_EN_WE (Bit 8)                                      */
#define DMAC_CHENREG_CH_EN_WE_Msk         (0xff00UL)                /*!< CH_EN_WE (Bitfield-Mask: 0xff)                        */
#define DMAC_CHENREG_CH_EN_Pos            (0UL)                     /*!< CH_EN (Bit 0)                                         */
#define DMAC_CHENREG_CH_EN_Msk            (0xffUL)                  /*!< CH_EN (Bitfield-Mask: 0xff)                           */


/* =========================================================================================================================== */
/* ================                                       USB_OTG_CORE                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  GOTGCTL  ======================================================== */
#define USB_OTG_CORE_GOTGCTL_Testmode_corr_eUSB2_Pos (31UL)         /*!< Testmode_corr_eUSB2 (Bit 31)                          */
#define USB_OTG_CORE_GOTGCTL_Testmode_corr_eUSB2_Msk (0x80000000UL) /*!< Testmode_corr_eUSB2 (Bitfield-Mask: 0x01)             */
#define USB_OTG_CORE_GOTGCTL_ChirpEn_Pos  (27UL)                    /*!< ChirpEn (Bit 27)                                      */
#define USB_OTG_CORE_GOTGCTL_ChirpEn_Msk  (0x8000000UL)             /*!< ChirpEn (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GOTGCTL_MultValIdBC_Pos (22UL)                 /*!< MultValIdBC (Bit 22)                                  */
#define USB_OTG_CORE_GOTGCTL_MultValIdBC_Msk (0x7c00000UL)          /*!< MultValIdBC (Bitfield-Mask: 0x1f)                     */
#define USB_OTG_CORE_GOTGCTL_CurMod_Pos   (21UL)                    /*!< CurMod (Bit 21)                                       */
#define USB_OTG_CORE_GOTGCTL_CurMod_Msk   (0x200000UL)              /*!< CurMod (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GOTGCTL_OTGVer_Pos   (20UL)                    /*!< OTGVer (Bit 20)                                       */
#define USB_OTG_CORE_GOTGCTL_OTGVer_Msk   (0x100000UL)              /*!< OTGVer (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GOTGCTL_BSesVld_Pos  (19UL)                    /*!< BSesVld (Bit 19)                                      */
#define USB_OTG_CORE_GOTGCTL_BSesVld_Msk  (0x80000UL)               /*!< BSesVld (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GOTGCTL_ASesVld_Pos  (18UL)                    /*!< ASesVld (Bit 18)                                      */
#define USB_OTG_CORE_GOTGCTL_ASesVld_Msk  (0x40000UL)               /*!< ASesVld (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GOTGCTL_DbncTime_Pos (17UL)                    /*!< DbncTime (Bit 17)                                     */
#define USB_OTG_CORE_GOTGCTL_DbncTime_Msk (0x20000UL)               /*!< DbncTime (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GOTGCTL_ConIDSts_Pos (16UL)                    /*!< ConIDSts (Bit 16)                                     */
#define USB_OTG_CORE_GOTGCTL_ConIDSts_Msk (0x10000UL)               /*!< ConIDSts (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GOTGCTL_DbnceFltrBypass_Pos (15UL)             /*!< DbnceFltrBypass (Bit 15)                              */
#define USB_OTG_CORE_GOTGCTL_DbnceFltrBypass_Msk (0x8000UL)         /*!< DbnceFltrBypass (Bitfield-Mask: 0x01)                 */
#define USB_OTG_CORE_GOTGCTL_EHEn_Pos     (12UL)                    /*!< EHEn (Bit 12)                                         */
#define USB_OTG_CORE_GOTGCTL_EHEn_Msk     (0x1000UL)                /*!< EHEn (Bitfield-Mask: 0x01)                            */
#define USB_OTG_CORE_GOTGCTL_DevHNPEn_Pos (11UL)                    /*!< DevHNPEn (Bit 11)                                     */
#define USB_OTG_CORE_GOTGCTL_DevHNPEn_Msk (0x800UL)                 /*!< DevHNPEn (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GOTGCTL_HstSetHNPEn_Pos (10UL)                 /*!< HstSetHNPEn (Bit 10)                                  */
#define USB_OTG_CORE_GOTGCTL_HstSetHNPEn_Msk (0x400UL)              /*!< HstSetHNPEn (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GOTGCTL_HNPReq_Pos   (9UL)                     /*!< HNPReq (Bit 9)                                        */
#define USB_OTG_CORE_GOTGCTL_HNPReq_Msk   (0x200UL)                 /*!< HNPReq (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GOTGCTL_HstNegScs_Pos (8UL)                    /*!< HstNegScs (Bit 8)                                     */
#define USB_OTG_CORE_GOTGCTL_HstNegScs_Msk (0x100UL)                /*!< HstNegScs (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GOTGCTL_BvalidOvVal_Pos (7UL)                  /*!< BvalidOvVal (Bit 7)                                   */
#define USB_OTG_CORE_GOTGCTL_BvalidOvVal_Msk (0x80UL)               /*!< BvalidOvVal (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GOTGCTL_BvalidOvEn_Pos (6UL)                   /*!< BvalidOvEn (Bit 6)                                    */
#define USB_OTG_CORE_GOTGCTL_BvalidOvEn_Msk (0x40UL)                /*!< BvalidOvEn (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GOTGCTL_AvalidOvVal_Pos (5UL)                  /*!< AvalidOvVal (Bit 5)                                   */
#define USB_OTG_CORE_GOTGCTL_AvalidOvVal_Msk (0x20UL)               /*!< AvalidOvVal (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GOTGCTL_AvalidOvEn_Pos (4UL)                   /*!< AvalidOvEn (Bit 4)                                    */
#define USB_OTG_CORE_GOTGCTL_AvalidOvEn_Msk (0x10UL)                /*!< AvalidOvEn (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GOTGCTL_VbvalidOvVal_Pos (3UL)                 /*!< VbvalidOvVal (Bit 3)                                  */
#define USB_OTG_CORE_GOTGCTL_VbvalidOvVal_Msk (0x8UL)               /*!< VbvalidOvVal (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GOTGCTL_VbvalidOvEn_Pos (2UL)                  /*!< VbvalidOvEn (Bit 2)                                   */
#define USB_OTG_CORE_GOTGCTL_VbvalidOvEn_Msk (0x4UL)                /*!< VbvalidOvEn (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GOTGCTL_SesReq_Pos   (1UL)                     /*!< SesReq (Bit 1)                                        */
#define USB_OTG_CORE_GOTGCTL_SesReq_Msk   (0x2UL)                   /*!< SesReq (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GOTGCTL_SesReqScs_Pos (0UL)                    /*!< SesReqScs (Bit 0)                                     */
#define USB_OTG_CORE_GOTGCTL_SesReqScs_Msk (0x1UL)                  /*!< SesReqScs (Bitfield-Mask: 0x01)                       */
/* ========================================================  GOTGINT  ======================================================== */
#define USB_OTG_CORE_GOTGINT_MultValIpChng_Pos (20UL)               /*!< MultValIpChng (Bit 20)                                */
#define USB_OTG_CORE_GOTGINT_MultValIpChng_Msk (0x100000UL)         /*!< MultValIpChng (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GOTGINT_DbnceDone_Pos (19UL)                   /*!< DbnceDone (Bit 19)                                    */
#define USB_OTG_CORE_GOTGINT_DbnceDone_Msk (0x80000UL)              /*!< DbnceDone (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GOTGINT_ADevTOUTChg_Pos (18UL)                 /*!< ADevTOUTChg (Bit 18)                                  */
#define USB_OTG_CORE_GOTGINT_ADevTOUTChg_Msk (0x40000UL)            /*!< ADevTOUTChg (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GOTGINT_HstNegDet_Pos (17UL)                   /*!< HstNegDet (Bit 17)                                    */
#define USB_OTG_CORE_GOTGINT_HstNegDet_Msk (0x20000UL)              /*!< HstNegDet (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GOTGINT_HstNegSucStsChng_Pos (9UL)             /*!< HstNegSucStsChng (Bit 9)                              */
#define USB_OTG_CORE_GOTGINT_HstNegSucStsChng_Msk (0x200UL)         /*!< HstNegSucStsChng (Bitfield-Mask: 0x01)                */
#define USB_OTG_CORE_GOTGINT_SesReqSucStsChng_Pos (8UL)             /*!< SesReqSucStsChng (Bit 8)                              */
#define USB_OTG_CORE_GOTGINT_SesReqSucStsChng_Msk (0x100UL)         /*!< SesReqSucStsChng (Bitfield-Mask: 0x01)                */
#define USB_OTG_CORE_GOTGINT_SesEndDet_Pos (2UL)                    /*!< SesEndDet (Bit 2)                                     */
#define USB_OTG_CORE_GOTGINT_SesEndDet_Msk (0x4UL)                  /*!< SesEndDet (Bitfield-Mask: 0x01)                       */
/* ========================================================  GAHBCFG  ======================================================== */
#define USB_OTG_CORE_GAHBCFG_InvDescEndianess_Pos (24UL)            /*!< InvDescEndianess (Bit 24)                             */
#define USB_OTG_CORE_GAHBCFG_InvDescEndianess_Msk (0x1000000UL)     /*!< InvDescEndianess (Bitfield-Mask: 0x01)                */
#define USB_OTG_CORE_GAHBCFG_AHBSingle_Pos (23UL)                   /*!< AHBSingle (Bit 23)                                    */
#define USB_OTG_CORE_GAHBCFG_AHBSingle_Msk (0x800000UL)             /*!< AHBSingle (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GAHBCFG_NotiAllDmaWrit_Pos (22UL)              /*!< NotiAllDmaWrit (Bit 22)                               */
#define USB_OTG_CORE_GAHBCFG_NotiAllDmaWrit_Msk (0x400000UL)        /*!< NotiAllDmaWrit (Bitfield-Mask: 0x01)                  */
#define USB_OTG_CORE_GAHBCFG_RemMemSupp_Pos (21UL)                  /*!< RemMemSupp (Bit 21)                                   */
#define USB_OTG_CORE_GAHBCFG_RemMemSupp_Msk (0x200000UL)            /*!< RemMemSupp (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GAHBCFG_PTxFEmpLvl_Pos (8UL)                   /*!< PTxFEmpLvl (Bit 8)                                    */
#define USB_OTG_CORE_GAHBCFG_PTxFEmpLvl_Msk (0x100UL)               /*!< PTxFEmpLvl (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GAHBCFG_NPTxFEmpLvl_Pos (7UL)                  /*!< NPTxFEmpLvl (Bit 7)                                   */
#define USB_OTG_CORE_GAHBCFG_NPTxFEmpLvl_Msk (0x80UL)               /*!< NPTxFEmpLvl (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GAHBCFG_DMAEn_Pos    (5UL)                     /*!< DMAEn (Bit 5)                                         */
#define USB_OTG_CORE_GAHBCFG_DMAEn_Msk    (0x20UL)                  /*!< DMAEn (Bitfield-Mask: 0x01)                           */
#define USB_OTG_CORE_GAHBCFG_HBstLen_Pos  (1UL)                     /*!< HBstLen (Bit 1)                                       */
#define USB_OTG_CORE_GAHBCFG_HBstLen_Msk  (0x1eUL)                  /*!< HBstLen (Bitfield-Mask: 0x0f)                         */
#define USB_OTG_CORE_GAHBCFG_GlblIntrMsk_Pos (0UL)                  /*!< GlblIntrMsk (Bit 0)                                   */
#define USB_OTG_CORE_GAHBCFG_GlblIntrMsk_Msk (0x1UL)                /*!< GlblIntrMsk (Bitfield-Mask: 0x01)                     */
/* ========================================================  GUSBCFG  ======================================================== */
#define USB_OTG_CORE_GUSBCFG_CorruptTxPkt_Pos (31UL)                /*!< CorruptTxPkt (Bit 31)                                 */
#define USB_OTG_CORE_GUSBCFG_CorruptTxPkt_Msk (0x80000000UL)        /*!< CorruptTxPkt (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GUSBCFG_ForceDevMode_Pos (30UL)                /*!< ForceDevMode (Bit 30)                                 */
#define USB_OTG_CORE_GUSBCFG_ForceDevMode_Msk (0x40000000UL)        /*!< ForceDevMode (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GUSBCFG_ForceHstMode_Pos (29UL)                /*!< ForceHstMode (Bit 29)                                 */
#define USB_OTG_CORE_GUSBCFG_ForceHstMode_Msk (0x20000000UL)        /*!< ForceHstMode (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GUSBCFG_TxEndDelay_Pos (28UL)                  /*!< TxEndDelay (Bit 28)                                   */
#define USB_OTG_CORE_GUSBCFG_TxEndDelay_Msk (0x10000000UL)          /*!< TxEndDelay (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GUSBCFG_IC_USBTrafCtl_Pos (27UL)               /*!< IC_USBTrafCtl (Bit 27)                                */
#define USB_OTG_CORE_GUSBCFG_IC_USBTrafCtl_Msk (0x8000000UL)        /*!< IC_USBTrafCtl (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GUSBCFG_IC_USBCap_Pos (26UL)                   /*!< IC_USBCap (Bit 26)                                    */
#define USB_OTG_CORE_GUSBCFG_IC_USBCap_Msk (0x4000000UL)            /*!< IC_USBCap (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GUSBCFG_ULPI_Pos     (25UL)                    /*!< ULPI (Bit 25)                                         */
#define USB_OTG_CORE_GUSBCFG_ULPI_Msk     (0x2000000UL)             /*!< ULPI (Bitfield-Mask: 0x01)                            */
#define USB_OTG_CORE_GUSBCFG_Indicator_Pos (24UL)                   /*!< Indicator (Bit 24)                                    */
#define USB_OTG_CORE_GUSBCFG_Indicator_Msk (0x1000000UL)            /*!< Indicator (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GUSBCFG_Complement_Pos (23UL)                  /*!< Complement (Bit 23)                                   */
#define USB_OTG_CORE_GUSBCFG_Complement_Msk (0x800000UL)            /*!< Complement (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GUSBCFG_TermSelDLPulse_Pos (22UL)              /*!< TermSelDLPulse (Bit 22)                               */
#define USB_OTG_CORE_GUSBCFG_TermSelDLPulse_Msk (0x400000UL)        /*!< TermSelDLPulse (Bitfield-Mask: 0x01)                  */
#define USB_OTG_CORE_GUSBCFG_ULPIExtVbusIndicator_Pos (21UL)        /*!< ULPIExtVbusIndicator (Bit 21)                         */
#define USB_OTG_CORE_GUSBCFG_ULPIExtVbusIndicator_Msk (0x200000UL)  /*!< ULPIExtVbusIndicator (Bitfield-Mask: 0x01)            */
#define USB_OTG_CORE_GUSBCFG_ULPIExtVbusDrv_Pos (20UL)              /*!< ULPIExtVbusDrv (Bit 20)                               */
#define USB_OTG_CORE_GUSBCFG_ULPIExtVbusDrv_Msk (0x100000UL)        /*!< ULPIExtVbusDrv (Bitfield-Mask: 0x01)                  */
#define USB_OTG_CORE_GUSBCFG_ULPIClkSusM_Pos (19UL)                 /*!< ULPIClkSusM (Bit 19)                                  */
#define USB_OTG_CORE_GUSBCFG_ULPIClkSusM_Msk (0x80000UL)            /*!< ULPIClkSusM (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GUSBCFG_ULPIAutoRes_Pos (18UL)                 /*!< ULPIAutoRes (Bit 18)                                  */
#define USB_OTG_CORE_GUSBCFG_ULPIAutoRes_Msk (0x40000UL)            /*!< ULPIAutoRes (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GUSBCFG_ULPIFsLs_Pos (17UL)                    /*!< ULPIFsLs (Bit 17)                                     */
#define USB_OTG_CORE_GUSBCFG_ULPIFsLs_Msk (0x20000UL)               /*!< ULPIFsLs (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GUSBCFG_OtgI2CSel_Pos (16UL)                   /*!< OtgI2CSel (Bit 16)                                    */
#define USB_OTG_CORE_GUSBCFG_OtgI2CSel_Msk (0x10000UL)              /*!< OtgI2CSel (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GUSBCFG_PhyLPwrClkSel_Pos (15UL)               /*!< PhyLPwrClkSel (Bit 15)                                */
#define USB_OTG_CORE_GUSBCFG_PhyLPwrClkSel_Msk (0x8000UL)           /*!< PhyLPwrClkSel (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GUSBCFG_USBTrdTim_Pos (10UL)                   /*!< USBTrdTim (Bit 10)                                    */
#define USB_OTG_CORE_GUSBCFG_USBTrdTim_Msk (0x3c00UL)               /*!< USBTrdTim (Bitfield-Mask: 0x0f)                       */
#define USB_OTG_CORE_GUSBCFG_HNPCap_Pos   (9UL)                     /*!< HNPCap (Bit 9)                                        */
#define USB_OTG_CORE_GUSBCFG_HNPCap_Msk   (0x200UL)                 /*!< HNPCap (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GUSBCFG_SRPCap_Pos   (8UL)                     /*!< SRPCap (Bit 8)                                        */
#define USB_OTG_CORE_GUSBCFG_SRPCap_Msk   (0x100UL)                 /*!< SRPCap (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GUSBCFG_DDRSel_Pos   (7UL)                     /*!< DDRSel (Bit 7)                                        */
#define USB_OTG_CORE_GUSBCFG_DDRSel_Msk   (0x80UL)                  /*!< DDRSel (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GUSBCFG_PHYSel_Pos   (6UL)                     /*!< PHYSel (Bit 6)                                        */
#define USB_OTG_CORE_GUSBCFG_PHYSel_Msk   (0x40UL)                  /*!< PHYSel (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GUSBCFG_FSIntf_Pos   (5UL)                     /*!< FSIntf (Bit 5)                                        */
#define USB_OTG_CORE_GUSBCFG_FSIntf_Msk   (0x20UL)                  /*!< FSIntf (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GUSBCFG_ULPI_UTMI_Sel_Pos (4UL)                /*!< ULPI_UTMI_Sel (Bit 4)                                 */
#define USB_OTG_CORE_GUSBCFG_ULPI_UTMI_Sel_Msk (0x10UL)             /*!< ULPI_UTMI_Sel (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GUSBCFG_PHYIf_Pos    (3UL)                     /*!< PHYIf (Bit 3)                                         */
#define USB_OTG_CORE_GUSBCFG_PHYIf_Msk    (0x8UL)                   /*!< PHYIf (Bitfield-Mask: 0x01)                           */
#define USB_OTG_CORE_GUSBCFG_TOutCal_Pos  (0UL)                     /*!< TOutCal (Bit 0)                                       */
#define USB_OTG_CORE_GUSBCFG_TOutCal_Msk  (0x7UL)                   /*!< TOutCal (Bitfield-Mask: 0x07)                         */
/* ========================================================  GRSTCTL  ======================================================== */
#define USB_OTG_CORE_GRSTCTL_AHBIdle_Pos  (31UL)                    /*!< AHBIdle (Bit 31)                                      */
#define USB_OTG_CORE_GRSTCTL_AHBIdle_Msk  (0x80000000UL)            /*!< AHBIdle (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GRSTCTL_DMAReq_Pos   (30UL)                    /*!< DMAReq (Bit 30)                                       */
#define USB_OTG_CORE_GRSTCTL_DMAReq_Msk   (0x40000000UL)            /*!< DMAReq (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GRSTCTL_CSftRstDone_Pos (29UL)                 /*!< CSftRstDone (Bit 29)                                  */
#define USB_OTG_CORE_GRSTCTL_CSftRstDone_Msk (0x20000000UL)         /*!< CSftRstDone (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GRSTCTL_TxFNum_Pos   (6UL)                     /*!< TxFNum (Bit 6)                                        */
#define USB_OTG_CORE_GRSTCTL_TxFNum_Msk   (0x7c0UL)                 /*!< TxFNum (Bitfield-Mask: 0x1f)                          */
#define USB_OTG_CORE_GRSTCTL_TxFFlsh_Pos  (5UL)                     /*!< TxFFlsh (Bit 5)                                       */
#define USB_OTG_CORE_GRSTCTL_TxFFlsh_Msk  (0x20UL)                  /*!< TxFFlsh (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GRSTCTL_RxFFlsh_Pos  (4UL)                     /*!< RxFFlsh (Bit 4)                                       */
#define USB_OTG_CORE_GRSTCTL_RxFFlsh_Msk  (0x10UL)                  /*!< RxFFlsh (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GRSTCTL_INTknQFlsh_Pos (3UL)                   /*!< INTknQFlsh (Bit 3)                                    */
#define USB_OTG_CORE_GRSTCTL_INTknQFlsh_Msk (0x8UL)                 /*!< INTknQFlsh (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GRSTCTL_FrmCntrRst_Pos (2UL)                   /*!< FrmCntrRst (Bit 2)                                    */
#define USB_OTG_CORE_GRSTCTL_FrmCntrRst_Msk (0x4UL)                 /*!< FrmCntrRst (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GRSTCTL_PIUFSSftRst_Pos (1UL)                  /*!< PIUFSSftRst (Bit 1)                                   */
#define USB_OTG_CORE_GRSTCTL_PIUFSSftRst_Msk (0x2UL)                /*!< PIUFSSftRst (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GRSTCTL_CSftRst_Pos  (0UL)                     /*!< CSftRst (Bit 0)                                       */
#define USB_OTG_CORE_GRSTCTL_CSftRst_Msk  (0x1UL)                   /*!< CSftRst (Bitfield-Mask: 0x01)                         */
/* ========================================================  GINTSTS  ======================================================== */
#define USB_OTG_CORE_GINTSTS_WkUpInt_Pos  (31UL)                    /*!< WkUpInt (Bit 31)                                      */
#define USB_OTG_CORE_GINTSTS_WkUpInt_Msk  (0x80000000UL)            /*!< WkUpInt (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GINTSTS_SessReqInt_Pos (30UL)                  /*!< SessReqInt (Bit 30)                                   */
#define USB_OTG_CORE_GINTSTS_SessReqInt_Msk (0x40000000UL)          /*!< SessReqInt (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTSTS_DisconnInt_Pos (29UL)                  /*!< DisconnInt (Bit 29)                                   */
#define USB_OTG_CORE_GINTSTS_DisconnInt_Msk (0x20000000UL)          /*!< DisconnInt (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTSTS_ConIDStsChng_Pos (28UL)                /*!< ConIDStsChng (Bit 28)                                 */
#define USB_OTG_CORE_GINTSTS_ConIDStsChng_Msk (0x10000000UL)        /*!< ConIDStsChng (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GINTSTS_LPM_Int_Pos  (27UL)                    /*!< LPM_Int (Bit 27)                                      */
#define USB_OTG_CORE_GINTSTS_LPM_Int_Msk  (0x8000000UL)             /*!< LPM_Int (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GINTSTS_PTxFEmp_Pos  (26UL)                    /*!< PTxFEmp (Bit 26)                                      */
#define USB_OTG_CORE_GINTSTS_PTxFEmp_Msk  (0x4000000UL)             /*!< PTxFEmp (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GINTSTS_HChInt_Pos   (25UL)                    /*!< HChInt (Bit 25)                                       */
#define USB_OTG_CORE_GINTSTS_HChInt_Msk   (0x2000000UL)             /*!< HChInt (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTSTS_PrtInt_Pos   (24UL)                    /*!< PrtInt (Bit 24)                                       */
#define USB_OTG_CORE_GINTSTS_PrtInt_Msk   (0x1000000UL)             /*!< PrtInt (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTSTS_ResetDet_Pos (23UL)                    /*!< ResetDet (Bit 23)                                     */
#define USB_OTG_CORE_GINTSTS_ResetDet_Msk (0x800000UL)              /*!< ResetDet (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GINTSTS_FetSusp_Pos  (22UL)                    /*!< FetSusp (Bit 22)                                      */
#define USB_OTG_CORE_GINTSTS_FetSusp_Msk  (0x400000UL)              /*!< FetSusp (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GINTSTS_incomplP_Pos (21UL)                    /*!< incomplP (Bit 21)                                     */
#define USB_OTG_CORE_GINTSTS_incomplP_Msk (0x200000UL)              /*!< incomplP (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GINTSTS_incompISOIN_Pos (20UL)                 /*!< incompISOIN (Bit 20)                                  */
#define USB_OTG_CORE_GINTSTS_incompISOIN_Msk (0x100000UL)           /*!< incompISOIN (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GINTSTS_OEPInt_Pos   (19UL)                    /*!< OEPInt (Bit 19)                                       */
#define USB_OTG_CORE_GINTSTS_OEPInt_Msk   (0x80000UL)               /*!< OEPInt (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTSTS_IEPInt_Pos   (18UL)                    /*!< IEPInt (Bit 18)                                       */
#define USB_OTG_CORE_GINTSTS_IEPInt_Msk   (0x40000UL)               /*!< IEPInt (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTSTS_EPMis_Pos    (17UL)                    /*!< EPMis (Bit 17)                                        */
#define USB_OTG_CORE_GINTSTS_EPMis_Msk    (0x20000UL)               /*!< EPMis (Bitfield-Mask: 0x01)                           */
#define USB_OTG_CORE_GINTSTS_RstrDoneInt_Pos (16UL)                 /*!< RstrDoneInt (Bit 16)                                  */
#define USB_OTG_CORE_GINTSTS_RstrDoneInt_Msk (0x10000UL)            /*!< RstrDoneInt (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GINTSTS_EOPF_Pos     (15UL)                    /*!< EOPF (Bit 15)                                         */
#define USB_OTG_CORE_GINTSTS_EOPF_Msk     (0x8000UL)                /*!< EOPF (Bitfield-Mask: 0x01)                            */
#define USB_OTG_CORE_GINTSTS_ISOOutDrop_Pos (14UL)                  /*!< ISOOutDrop (Bit 14)                                   */
#define USB_OTG_CORE_GINTSTS_ISOOutDrop_Msk (0x4000UL)              /*!< ISOOutDrop (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTSTS_EnumDone_Pos (13UL)                    /*!< EnumDone (Bit 13)                                     */
#define USB_OTG_CORE_GINTSTS_EnumDone_Msk (0x2000UL)                /*!< EnumDone (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GINTSTS_USBRst_Pos   (12UL)                    /*!< USBRst (Bit 12)                                       */
#define USB_OTG_CORE_GINTSTS_USBRst_Msk   (0x1000UL)                /*!< USBRst (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTSTS_USBSusp_Pos  (11UL)                    /*!< USBSusp (Bit 11)                                      */
#define USB_OTG_CORE_GINTSTS_USBSusp_Msk  (0x800UL)                 /*!< USBSusp (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GINTSTS_ErlySusp_Pos (10UL)                    /*!< ErlySusp (Bit 10)                                     */
#define USB_OTG_CORE_GINTSTS_ErlySusp_Msk (0x400UL)                 /*!< ErlySusp (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GINTSTS_I2CINT_Pos   (9UL)                     /*!< I2CINT (Bit 9)                                        */
#define USB_OTG_CORE_GINTSTS_I2CINT_Msk   (0x200UL)                 /*!< I2CINT (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTSTS_ULPICKINT_Pos (8UL)                    /*!< ULPICKINT (Bit 8)                                     */
#define USB_OTG_CORE_GINTSTS_ULPICKINT_Msk (0x100UL)                /*!< ULPICKINT (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTSTS_GOUTNakEff_Pos (7UL)                   /*!< GOUTNakEff (Bit 7)                                    */
#define USB_OTG_CORE_GINTSTS_GOUTNakEff_Msk (0x80UL)                /*!< GOUTNakEff (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTSTS_GINNakEff_Pos (6UL)                    /*!< GINNakEff (Bit 6)                                     */
#define USB_OTG_CORE_GINTSTS_GINNakEff_Msk (0x40UL)                 /*!< GINNakEff (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTSTS_NPTxFEmp_Pos (5UL)                     /*!< NPTxFEmp (Bit 5)                                      */
#define USB_OTG_CORE_GINTSTS_NPTxFEmp_Msk (0x20UL)                  /*!< NPTxFEmp (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GINTSTS_RxFLvl_Pos   (4UL)                     /*!< RxFLvl (Bit 4)                                        */
#define USB_OTG_CORE_GINTSTS_RxFLvl_Msk   (0x10UL)                  /*!< RxFLvl (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTSTS_Sof_Pos      (3UL)                     /*!< Sof (Bit 3)                                           */
#define USB_OTG_CORE_GINTSTS_Sof_Msk      (0x8UL)                   /*!< Sof (Bitfield-Mask: 0x01)                             */
#define USB_OTG_CORE_GINTSTS_OTGInt_Pos   (2UL)                     /*!< OTGInt (Bit 2)                                        */
#define USB_OTG_CORE_GINTSTS_OTGInt_Msk   (0x4UL)                   /*!< OTGInt (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTSTS_ModeMis_Pos  (1UL)                     /*!< ModeMis (Bit 1)                                       */
#define USB_OTG_CORE_GINTSTS_ModeMis_Msk  (0x2UL)                   /*!< ModeMis (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GINTSTS_CurMod_Pos   (0UL)                     /*!< CurMod (Bit 0)                                        */
#define USB_OTG_CORE_GINTSTS_CurMod_Msk   (0x1UL)                   /*!< CurMod (Bitfield-Mask: 0x01)                          */
/* ========================================================  GINTMSK  ======================================================== */
#define USB_OTG_CORE_GINTMSK_WkUpIntMsk_Pos (31UL)                  /*!< WkUpIntMsk (Bit 31)                                   */
#define USB_OTG_CORE_GINTMSK_WkUpIntMsk_Msk (0x80000000UL)          /*!< WkUpIntMsk (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTMSK_SessReqIntMsk_Pos (30UL)               /*!< SessReqIntMsk (Bit 30)                                */
#define USB_OTG_CORE_GINTMSK_SessReqIntMsk_Msk (0x40000000UL)       /*!< SessReqIntMsk (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GINTMSK_DisconnIntMsk_Pos (29UL)               /*!< DisconnIntMsk (Bit 29)                                */
#define USB_OTG_CORE_GINTMSK_DisconnIntMsk_Msk (0x20000000UL)       /*!< DisconnIntMsk (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GINTMSK_ConIDStsChngMsk_Pos (28UL)             /*!< ConIDStsChngMsk (Bit 28)                              */
#define USB_OTG_CORE_GINTMSK_ConIDStsChngMsk_Msk (0x10000000UL)     /*!< ConIDStsChngMsk (Bitfield-Mask: 0x01)                 */
#define USB_OTG_CORE_GINTMSK_LPM_IntMsk_Pos (27UL)                  /*!< LPM_IntMsk (Bit 27)                                   */
#define USB_OTG_CORE_GINTMSK_LPM_IntMsk_Msk (0x8000000UL)           /*!< LPM_IntMsk (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTMSK_PTxFEmpMsk_Pos (26UL)                  /*!< PTxFEmpMsk (Bit 26)                                   */
#define USB_OTG_CORE_GINTMSK_PTxFEmpMsk_Msk (0x4000000UL)           /*!< PTxFEmpMsk (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTMSK_HChIntMsk_Pos (25UL)                   /*!< HChIntMsk (Bit 25)                                    */
#define USB_OTG_CORE_GINTMSK_HChIntMsk_Msk (0x2000000UL)            /*!< HChIntMsk (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTMSK_PrtIntMsk_Pos (24UL)                   /*!< PrtIntMsk (Bit 24)                                    */
#define USB_OTG_CORE_GINTMSK_PrtIntMsk_Msk (0x1000000UL)            /*!< PrtIntMsk (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTMSK_ResetDetMsk_Pos (23UL)                 /*!< ResetDetMsk (Bit 23)                                  */
#define USB_OTG_CORE_GINTMSK_ResetDetMsk_Msk (0x800000UL)           /*!< ResetDetMsk (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GINTMSK_FetSuspMsk_Pos (22UL)                  /*!< FetSuspMsk (Bit 22)                                   */
#define USB_OTG_CORE_GINTMSK_FetSuspMsk_Msk (0x400000UL)            /*!< FetSuspMsk (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTMSK_incomplPMsK_Pos (21UL)                 /*!< incomplPMsK (Bit 21)                                  */
#define USB_OTG_CORE_GINTMSK_incomplPMsK_Msk (0x200000UL)           /*!< incomplPMsK (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GINTMSK_incompISOINMsk_Pos (20UL)              /*!< incompISOINMsk (Bit 20)                               */
#define USB_OTG_CORE_GINTMSK_incompISOINMsk_Msk (0x100000UL)        /*!< incompISOINMsk (Bitfield-Mask: 0x01)                  */
#define USB_OTG_CORE_GINTMSK_OEPIntMsk_Pos (19UL)                   /*!< OEPIntMsk (Bit 19)                                    */
#define USB_OTG_CORE_GINTMSK_OEPIntMsk_Msk (0x80000UL)              /*!< OEPIntMsk (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTMSK_IEPIntMsk_Pos (18UL)                   /*!< IEPIntMsk (Bit 18)                                    */
#define USB_OTG_CORE_GINTMSK_IEPIntMsk_Msk (0x40000UL)              /*!< IEPIntMsk (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTMSK_EPMisMsk_Pos (17UL)                    /*!< EPMisMsk (Bit 17)                                     */
#define USB_OTG_CORE_GINTMSK_EPMisMsk_Msk (0x20000UL)               /*!< EPMisMsk (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GINTMSK_RstrDoneIntMsk_Pos (16UL)              /*!< RstrDoneIntMsk (Bit 16)                               */
#define USB_OTG_CORE_GINTMSK_RstrDoneIntMsk_Msk (0x10000UL)         /*!< RstrDoneIntMsk (Bitfield-Mask: 0x01)                  */
#define USB_OTG_CORE_GINTMSK_EOPFMsk_Pos  (15UL)                    /*!< EOPFMsk (Bit 15)                                      */
#define USB_OTG_CORE_GINTMSK_EOPFMsk_Msk  (0x8000UL)                /*!< EOPFMsk (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GINTMSK_ISOOutDropMsk_Pos (14UL)               /*!< ISOOutDropMsk (Bit 14)                                */
#define USB_OTG_CORE_GINTMSK_ISOOutDropMsk_Msk (0x4000UL)           /*!< ISOOutDropMsk (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GINTMSK_EnumDoneMsk_Pos (13UL)                 /*!< EnumDoneMsk (Bit 13)                                  */
#define USB_OTG_CORE_GINTMSK_EnumDoneMsk_Msk (0x2000UL)             /*!< EnumDoneMsk (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GINTMSK_USBRstMsk_Pos (12UL)                   /*!< USBRstMsk (Bit 12)                                    */
#define USB_OTG_CORE_GINTMSK_USBRstMsk_Msk (0x1000UL)               /*!< USBRstMsk (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTMSK_USBSuspMsk_Pos (11UL)                  /*!< USBSuspMsk (Bit 11)                                   */
#define USB_OTG_CORE_GINTMSK_USBSuspMsk_Msk (0x800UL)               /*!< USBSuspMsk (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GINTMSK_ErlySuspMsk_Pos (10UL)                 /*!< ErlySuspMsk (Bit 10)                                  */
#define USB_OTG_CORE_GINTMSK_ErlySuspMsk_Msk (0x400UL)              /*!< ErlySuspMsk (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GINTMSK_I2CIntMsk_Pos (9UL)                    /*!< I2CIntMsk (Bit 9)                                     */
#define USB_OTG_CORE_GINTMSK_I2CIntMsk_Msk (0x200UL)                /*!< I2CIntMsk (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTMSK_ULPICKINTMsk_Pos (8UL)                 /*!< ULPICKINTMsk (Bit 8)                                  */
#define USB_OTG_CORE_GINTMSK_ULPICKINTMsk_Msk (0x100UL)             /*!< ULPICKINTMsk (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GINTMSK_GOUTNakEffMsk_Pos (7UL)                /*!< GOUTNakEffMsk (Bit 7)                                 */
#define USB_OTG_CORE_GINTMSK_GOUTNakEffMsk_Msk (0x80UL)             /*!< GOUTNakEffMsk (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GINTMSK_GINNakEffMsk_Pos (6UL)                 /*!< GINNakEffMsk (Bit 6)                                  */
#define USB_OTG_CORE_GINTMSK_GINNakEffMsk_Msk (0x40UL)              /*!< GINNakEffMsk (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GINTMSK_NPTxFEmpMsk_Pos (5UL)                  /*!< NPTxFEmpMsk (Bit 5)                                   */
#define USB_OTG_CORE_GINTMSK_NPTxFEmpMsk_Msk (0x20UL)               /*!< NPTxFEmpMsk (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GINTMSK_RxFLvlMsk_Pos (4UL)                    /*!< RxFLvlMsk (Bit 4)                                     */
#define USB_OTG_CORE_GINTMSK_RxFLvlMsk_Msk (0x10UL)                 /*!< RxFLvlMsk (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTMSK_SofMsk_Pos   (3UL)                     /*!< SofMsk (Bit 3)                                        */
#define USB_OTG_CORE_GINTMSK_SofMsk_Msk   (0x8UL)                   /*!< SofMsk (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GINTMSK_OTGIntMsk_Pos (2UL)                    /*!< OTGIntMsk (Bit 2)                                     */
#define USB_OTG_CORE_GINTMSK_OTGIntMsk_Msk (0x4UL)                  /*!< OTGIntMsk (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GINTMSK_ModeMisMsk_Pos (1UL)                   /*!< ModeMisMsk (Bit 1)                                    */
#define USB_OTG_CORE_GINTMSK_ModeMisMsk_Msk (0x2UL)                 /*!< ModeMisMsk (Bitfield-Mask: 0x01)                      */
/* ========================================================  GRXSTSR  ======================================================== */
#define USB_OTG_CORE_GRXSTSR_FN_Pos       (21UL)                    /*!< FN (Bit 21)                                           */
#define USB_OTG_CORE_GRXSTSR_FN_Msk       (0x1e00000UL)             /*!< FN (Bitfield-Mask: 0x0f)                              */
#define USB_OTG_CORE_GRXSTSR_PktSts_Pos   (17UL)                    /*!< PktSts (Bit 17)                                       */
#define USB_OTG_CORE_GRXSTSR_PktSts_Msk   (0x1e0000UL)              /*!< PktSts (Bitfield-Mask: 0x0f)                          */
#define USB_OTG_CORE_GRXSTSR_DPID_Pos     (15UL)                    /*!< DPID (Bit 15)                                         */
#define USB_OTG_CORE_GRXSTSR_DPID_Msk     (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_CORE_GRXSTSR_BCnt_Pos     (4UL)                     /*!< BCnt (Bit 4)                                          */
#define USB_OTG_CORE_GRXSTSR_BCnt_Msk     (0x7ff0UL)                /*!< BCnt (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_CORE_GRXSTSR_ChNum_Pos    (0UL)                     /*!< ChNum (Bit 0)                                         */
#define USB_OTG_CORE_GRXSTSR_ChNum_Msk    (0xfUL)                   /*!< ChNum (Bitfield-Mask: 0x0f)                           */
/* ========================================================  GRXSTSP  ======================================================== */
#define USB_OTG_CORE_GRXSTSP_FN_Pos       (21UL)                    /*!< FN (Bit 21)                                           */
#define USB_OTG_CORE_GRXSTSP_FN_Msk       (0x1e00000UL)             /*!< FN (Bitfield-Mask: 0x0f)                              */
#define USB_OTG_CORE_GRXSTSP_PktSts_Pos   (17UL)                    /*!< PktSts (Bit 17)                                       */
#define USB_OTG_CORE_GRXSTSP_PktSts_Msk   (0x1e0000UL)              /*!< PktSts (Bitfield-Mask: 0x0f)                          */
#define USB_OTG_CORE_GRXSTSP_DPID_Pos     (15UL)                    /*!< DPID (Bit 15)                                         */
#define USB_OTG_CORE_GRXSTSP_DPID_Msk     (0x18000UL)               /*!< DPID (Bitfield-Mask: 0x03)                            */
#define USB_OTG_CORE_GRXSTSP_BCnt_Pos     (4UL)                     /*!< BCnt (Bit 4)                                          */
#define USB_OTG_CORE_GRXSTSP_BCnt_Msk     (0x7ff0UL)                /*!< BCnt (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_CORE_GRXSTSP_ChNum_Pos    (0UL)                     /*!< ChNum (Bit 0)                                         */
#define USB_OTG_CORE_GRXSTSP_ChNum_Msk    (0xfUL)                   /*!< ChNum (Bitfield-Mask: 0x0f)                           */
/* ========================================================  GRXFSIZ  ======================================================== */
/* =======================================================  GNPTXFSIZ  ======================================================= */
#define USB_OTG_CORE_GNPTXFSIZ_NPTxFDep_Pos (16UL)                  /*!< NPTxFDep (Bit 16)                                     */
#define USB_OTG_CORE_GNPTXFSIZ_NPTxFDep_Msk (0x7ff0000UL)           /*!< NPTxFDep (Bitfield-Mask: 0x7ff)                       */
#define USB_OTG_CORE_GNPTXFSIZ_NPTxFStAddr_Pos (0UL)                /*!< NPTxFStAddr (Bit 0)                                   */
#define USB_OTG_CORE_GNPTXFSIZ_NPTxFStAddr_Msk (0x7ffUL)            /*!< NPTxFStAddr (Bitfield-Mask: 0x7ff)                    */
/* =======================================================  GNPTXSTS  ======================================================== */
#define USB_OTG_CORE_GNPTXSTS_NPTxQTop_Pos (24UL)                   /*!< NPTxQTop (Bit 24)                                     */
#define USB_OTG_CORE_GNPTXSTS_NPTxQTop_Msk (0x7f000000UL)           /*!< NPTxQTop (Bitfield-Mask: 0x7f)                        */
#define USB_OTG_CORE_GNPTXSTS_NPTxQSpcAvail_Pos (16UL)              /*!< NPTxQSpcAvail (Bit 16)                                */
#define USB_OTG_CORE_GNPTXSTS_NPTxQSpcAvail_Msk (0xff0000UL)        /*!< NPTxQSpcAvail (Bitfield-Mask: 0xff)                   */
#define USB_OTG_CORE_GNPTXSTS_NPTxFSpcAvail_Pos (0UL)               /*!< NPTxFSpcAvail (Bit 0)                                 */
#define USB_OTG_CORE_GNPTXSTS_NPTxFSpcAvail_Msk (0xffffUL)          /*!< NPTxFSpcAvail (Bitfield-Mask: 0xffff)                 */
/* ========================================================  GI2CCTL  ======================================================== */
/* =======================================================  GPVNDCTL  ======================================================== */
#define USB_OTG_CORE_GPVNDCTL_DisUlpiDrvr_Pos (31UL)                /*!< DisUlpiDrvr (Bit 31)                                  */
#define USB_OTG_CORE_GPVNDCTL_DisUlpiDrvr_Msk (0x80000000UL)        /*!< DisUlpiDrvr (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GPVNDCTL_VStsDone_Pos (27UL)                   /*!< VStsDone (Bit 27)                                     */
#define USB_OTG_CORE_GPVNDCTL_VStsDone_Msk (0x8000000UL)            /*!< VStsDone (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GPVNDCTL_VStsBsy_Pos (26UL)                    /*!< VStsBsy (Bit 26)                                      */
#define USB_OTG_CORE_GPVNDCTL_VStsBsy_Msk (0x4000000UL)             /*!< VStsBsy (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GPVNDCTL_NewRegReq_Pos (25UL)                  /*!< NewRegReq (Bit 25)                                    */
#define USB_OTG_CORE_GPVNDCTL_NewRegReq_Msk (0x2000000UL)           /*!< NewRegReq (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GPVNDCTL_RegWr_Pos   (22UL)                    /*!< RegWr (Bit 22)                                        */
#define USB_OTG_CORE_GPVNDCTL_RegWr_Msk   (0x400000UL)              /*!< RegWr (Bitfield-Mask: 0x01)                           */
#define USB_OTG_CORE_GPVNDCTL_RegAddr_Pos (16UL)                    /*!< RegAddr (Bit 16)                                      */
#define USB_OTG_CORE_GPVNDCTL_RegAddr_Msk (0x3f0000UL)              /*!< RegAddr (Bitfield-Mask: 0x3f)                         */
#define USB_OTG_CORE_GPVNDCTL_VCtrl_Pos   (8UL)                     /*!< VCtrl (Bit 8)                                         */
#define USB_OTG_CORE_GPVNDCTL_VCtrl_Msk   (0xff00UL)                /*!< VCtrl (Bitfield-Mask: 0xff)                           */
#define USB_OTG_CORE_GPVNDCTL_RegData_Pos (0UL)                     /*!< RegData (Bit 0)                                       */
#define USB_OTG_CORE_GPVNDCTL_RegData_Msk (0xffUL)                  /*!< RegData (Bitfield-Mask: 0xff)                         */
/* =========================================================  GGPIO  ========================================================= */
/* =========================================================  GUID  ========================================================== */
/* ========================================================  GSNPSID  ======================================================== */
/* ========================================================  GHWCFG1  ======================================================== */
/* ========================================================  GHWCFG2  ======================================================== */
#define USB_OTG_CORE_GHWCFG2_OTG_ENABLE_IC_USB_Pos (31UL)           /*!< OTG_ENABLE_IC_USB (Bit 31)                            */
#define USB_OTG_CORE_GHWCFG2_OTG_ENABLE_IC_USB_Msk (0x80000000UL)   /*!< OTG_ENABLE_IC_USB (Bitfield-Mask: 0x01)               */
#define USB_OTG_CORE_GHWCFG2_TknQDepth_Pos (26UL)                   /*!< TknQDepth (Bit 26)                                    */
#define USB_OTG_CORE_GHWCFG2_TknQDepth_Msk (0x7c000000UL)           /*!< TknQDepth (Bitfield-Mask: 0x1f)                       */
#define USB_OTG_CORE_GHWCFG2_PTxQDepth_Pos (24UL)                   /*!< PTxQDepth (Bit 24)                                    */
#define USB_OTG_CORE_GHWCFG2_PTxQDepth_Msk (0x3000000UL)            /*!< PTxQDepth (Bitfield-Mask: 0x03)                       */
#define USB_OTG_CORE_GHWCFG2_NPTxQDepth_Pos (22UL)                  /*!< NPTxQDepth (Bit 22)                                   */
#define USB_OTG_CORE_GHWCFG2_NPTxQDepth_Msk (0xc00000UL)            /*!< NPTxQDepth (Bitfield-Mask: 0x03)                      */
#define USB_OTG_CORE_GHWCFG2_MultiProcIntrpt_Pos (20UL)             /*!< MultiProcIntrpt (Bit 20)                              */
#define USB_OTG_CORE_GHWCFG2_MultiProcIntrpt_Msk (0x100000UL)       /*!< MultiProcIntrpt (Bitfield-Mask: 0x01)                 */
#define USB_OTG_CORE_GHWCFG2_DynFifoSizing_Pos (19UL)               /*!< DynFifoSizing (Bit 19)                                */
#define USB_OTG_CORE_GHWCFG2_DynFifoSizing_Msk (0x80000UL)          /*!< DynFifoSizing (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GHWCFG2_PerioSupport_Pos (18UL)                /*!< PerioSupport (Bit 18)                                 */
#define USB_OTG_CORE_GHWCFG2_PerioSupport_Msk (0x40000UL)           /*!< PerioSupport (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GHWCFG2_NumHstChnl_Pos (14UL)                  /*!< NumHstChnl (Bit 14)                                   */
#define USB_OTG_CORE_GHWCFG2_NumHstChnl_Msk (0x3c000UL)             /*!< NumHstChnl (Bitfield-Mask: 0x0f)                      */
#define USB_OTG_CORE_GHWCFG2_NumDevEps_Pos (10UL)                   /*!< NumDevEps (Bit 10)                                    */
#define USB_OTG_CORE_GHWCFG2_NumDevEps_Msk (0x3c00UL)               /*!< NumDevEps (Bitfield-Mask: 0x0f)                       */
#define USB_OTG_CORE_GHWCFG2_FSPhyType_Pos (8UL)                    /*!< FSPhyType (Bit 8)                                     */
#define USB_OTG_CORE_GHWCFG2_FSPhyType_Msk (0x300UL)                /*!< FSPhyType (Bitfield-Mask: 0x03)                       */
#define USB_OTG_CORE_GHWCFG2_HSPhyType_Pos (6UL)                    /*!< HSPhyType (Bit 6)                                     */
#define USB_OTG_CORE_GHWCFG2_HSPhyType_Msk (0xc0UL)                 /*!< HSPhyType (Bitfield-Mask: 0x03)                       */
#define USB_OTG_CORE_GHWCFG2_SingPnt_Pos  (5UL)                     /*!< SingPnt (Bit 5)                                       */
#define USB_OTG_CORE_GHWCFG2_SingPnt_Msk  (0x20UL)                  /*!< SingPnt (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GHWCFG2_OtgArch_Pos  (3UL)                     /*!< OtgArch (Bit 3)                                       */
#define USB_OTG_CORE_GHWCFG2_OtgArch_Msk  (0x18UL)                  /*!< OtgArch (Bitfield-Mask: 0x03)                         */
#define USB_OTG_CORE_GHWCFG2_OtgMode_Pos  (0UL)                     /*!< OtgMode (Bit 0)                                       */
#define USB_OTG_CORE_GHWCFG2_OtgMode_Msk  (0x7UL)                   /*!< OtgMode (Bitfield-Mask: 0x07)                         */
/* ========================================================  GHWCFG3  ======================================================== */
#define USB_OTG_CORE_GHWCFG3_DfifoDepth_Pos (16UL)                  /*!< DfifoDepth (Bit 16)                                   */
#define USB_OTG_CORE_GHWCFG3_DfifoDepth_Msk (0xffff0000UL)          /*!< DfifoDepth (Bitfield-Mask: 0xffff)                    */
#define USB_OTG_CORE_GHWCFG3_LPMMode_Pos  (15UL)                    /*!< LPMMode (Bit 15)                                      */
#define USB_OTG_CORE_GHWCFG3_LPMMode_Msk  (0x8000UL)                /*!< LPMMode (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GHWCFG3_BCSupport_Pos (14UL)                   /*!< BCSupport (Bit 14)                                    */
#define USB_OTG_CORE_GHWCFG3_BCSupport_Msk (0x4000UL)               /*!< BCSupport (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GHWCFG3_HSICMode_Pos (13UL)                    /*!< HSICMode (Bit 13)                                     */
#define USB_OTG_CORE_GHWCFG3_HSICMode_Msk (0x2000UL)                /*!< HSICMode (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GHWCFG3_ADPSupport_Pos (12UL)                  /*!< ADPSupport (Bit 12)                                   */
#define USB_OTG_CORE_GHWCFG3_ADPSupport_Msk (0x1000UL)              /*!< ADPSupport (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GHWCFG3_RstType_Pos  (11UL)                    /*!< RstType (Bit 11)                                      */
#define USB_OTG_CORE_GHWCFG3_RstType_Msk  (0x800UL)                 /*!< RstType (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GHWCFG3_OptFeature_Pos (10UL)                  /*!< OptFeature (Bit 10)                                   */
#define USB_OTG_CORE_GHWCFG3_OptFeature_Msk (0x400UL)               /*!< OptFeature (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GHWCFG3_VndctlSupt_Pos (9UL)                   /*!< VndctlSupt (Bit 9)                                    */
#define USB_OTG_CORE_GHWCFG3_VndctlSupt_Msk (0x200UL)               /*!< VndctlSupt (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GHWCFG3_I2CIntSel_Pos (8UL)                    /*!< I2CIntSel (Bit 8)                                     */
#define USB_OTG_CORE_GHWCFG3_I2CIntSel_Msk (0x100UL)                /*!< I2CIntSel (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GHWCFG3_OtgEn_Pos    (7UL)                     /*!< OtgEn (Bit 7)                                         */
#define USB_OTG_CORE_GHWCFG3_OtgEn_Msk    (0x80UL)                  /*!< OtgEn (Bitfield-Mask: 0x01)                           */
#define USB_OTG_CORE_GHWCFG3_PktSizeWidth_Pos (4UL)                 /*!< PktSizeWidth (Bit 4)                                  */
#define USB_OTG_CORE_GHWCFG3_PktSizeWidth_Msk (0x70UL)              /*!< PktSizeWidth (Bitfield-Mask: 0x07)                    */
#define USB_OTG_CORE_GHWCFG3_XferSizeWidth_Pos (0UL)                /*!< XferSizeWidth (Bit 0)                                 */
#define USB_OTG_CORE_GHWCFG3_XferSizeWidth_Msk (0xfUL)              /*!< XferSizeWidth (Bitfield-Mask: 0x0f)                   */
/* ========================================================  GHWCFG4  ======================================================== */
#define USB_OTG_CORE_GHWCFG4_DescDMA_Pos  (31UL)                    /*!< DescDMA (Bit 31)                                      */
#define USB_OTG_CORE_GHWCFG4_DescDMA_Msk  (0x80000000UL)            /*!< DescDMA (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GHWCFG4_DescDMAEnabled_Pos (30UL)              /*!< DescDMAEnabled (Bit 30)                               */
#define USB_OTG_CORE_GHWCFG4_DescDMAEnabled_Msk (0x40000000UL)      /*!< DescDMAEnabled (Bitfield-Mask: 0x01)                  */
#define USB_OTG_CORE_GHWCFG4_INEps_Pos    (26UL)                    /*!< INEps (Bit 26)                                        */
#define USB_OTG_CORE_GHWCFG4_INEps_Msk    (0x3c000000UL)            /*!< INEps (Bitfield-Mask: 0x0f)                           */
#define USB_OTG_CORE_GHWCFG4_DedFifoMode_Pos (25UL)                 /*!< DedFifoMode (Bit 25)                                  */
#define USB_OTG_CORE_GHWCFG4_DedFifoMode_Msk (0x2000000UL)          /*!< DedFifoMode (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GHWCFG4_SessEndFltr_Pos (24UL)                 /*!< SessEndFltr (Bit 24)                                  */
#define USB_OTG_CORE_GHWCFG4_SessEndFltr_Msk (0x1000000UL)          /*!< SessEndFltr (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GHWCFG4_BValidFltr_Pos (23UL)                  /*!< BValidFltr (Bit 23)                                   */
#define USB_OTG_CORE_GHWCFG4_BValidFltr_Msk (0x800000UL)            /*!< BValidFltr (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GHWCFG4_AValidFltr_Pos (22UL)                  /*!< AValidFltr (Bit 22)                                   */
#define USB_OTG_CORE_GHWCFG4_AValidFltr_Msk (0x400000UL)            /*!< AValidFltr (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GHWCFG4_VBusValidFltr_Pos (21UL)               /*!< VBusValidFltr (Bit 21)                                */
#define USB_OTG_CORE_GHWCFG4_VBusValidFltr_Msk (0x200000UL)         /*!< VBusValidFltr (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GHWCFG4_IddgFltr_Pos (20UL)                    /*!< IddgFltr (Bit 20)                                     */
#define USB_OTG_CORE_GHWCFG4_IddgFltr_Msk (0x100000UL)              /*!< IddgFltr (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GHWCFG4_NumCtlEps_Pos (16UL)                   /*!< NumCtlEps (Bit 16)                                    */
#define USB_OTG_CORE_GHWCFG4_NumCtlEps_Msk (0xf0000UL)              /*!< NumCtlEps (Bitfield-Mask: 0x0f)                       */
#define USB_OTG_CORE_GHWCFG4_PhyDataWidth_Pos (14UL)                /*!< PhyDataWidth (Bit 14)                                 */
#define USB_OTG_CORE_GHWCFG4_PhyDataWidth_Msk (0xc000UL)            /*!< PhyDataWidth (Bitfield-Mask: 0x03)                    */
#define USB_OTG_CORE_GHWCFG4_EnhancedLPMSupt_Pos (13UL)             /*!< EnhancedLPMSupt (Bit 13)                              */
#define USB_OTG_CORE_GHWCFG4_EnhancedLPMSupt_Msk (0x2000UL)         /*!< EnhancedLPMSupt (Bitfield-Mask: 0x01)                 */
#define USB_OTG_CORE_GHWCFG4_ACGSupt_Pos  (12UL)                    /*!< ACGSupt (Bit 12)                                      */
#define USB_OTG_CORE_GHWCFG4_ACGSupt_Msk  (0x1000UL)                /*!< ACGSupt (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GHWCFG4_ipgisocSupt_Pos (11UL)                 /*!< ipgisocSupt (Bit 11)                                  */
#define USB_OTG_CORE_GHWCFG4_ipgisocSupt_Msk (0x800UL)              /*!< ipgisocSupt (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GHWCFG4_ServIntFlow_Pos (10UL)                 /*!< ServIntFlow (Bit 10)                                  */
#define USB_OTG_CORE_GHWCFG4_ServIntFlow_Msk (0x400UL)              /*!< ServIntFlow (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GHWCFG4_EnhancedLPMSupt1_Pos (9UL)             /*!< EnhancedLPMSupt1 (Bit 9)                              */
#define USB_OTG_CORE_GHWCFG4_EnhancedLPMSupt1_Msk (0x200UL)         /*!< EnhancedLPMSupt1 (Bitfield-Mask: 0x01)                */
#define USB_OTG_CORE_GHWCFG4_ExtendedHibernation_Pos (7UL)          /*!< ExtendedHibernation (Bit 7)                           */
#define USB_OTG_CORE_GHWCFG4_ExtendedHibernation_Msk (0x80UL)       /*!< ExtendedHibernation (Bitfield-Mask: 0x01)             */
#define USB_OTG_CORE_GHWCFG4_Hibernation_Pos (6UL)                  /*!< Hibernation (Bit 6)                                   */
#define USB_OTG_CORE_GHWCFG4_Hibernation_Msk (0x40UL)               /*!< Hibernation (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GHWCFG4_AhbFreq_Pos  (5UL)                     /*!< AhbFreq (Bit 5)                                       */
#define USB_OTG_CORE_GHWCFG4_AhbFreq_Msk  (0x20UL)                  /*!< AhbFreq (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GHWCFG4_PartialPwrDn_Pos (4UL)                 /*!< PartialPwrDn (Bit 4)                                  */
#define USB_OTG_CORE_GHWCFG4_PartialPwrDn_Msk (0x10UL)              /*!< PartialPwrDn (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GHWCFG4_NumDevPerioEps_Pos (0UL)               /*!< NumDevPerioEps (Bit 0)                                */
#define USB_OTG_CORE_GHWCFG4_NumDevPerioEps_Msk (0xfUL)             /*!< NumDevPerioEps (Bitfield-Mask: 0x0f)                  */
/* ========================================================  GLPMCFG  ======================================================== */
#define USB_OTG_CORE_GLPMCFG_InvSelHsic_Pos (31UL)                  /*!< InvSelHsic (Bit 31)                                   */
#define USB_OTG_CORE_GLPMCFG_InvSelHsic_Msk (0x80000000UL)          /*!< InvSelHsic (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GLPMCFG_HSICCon_Pos  (30UL)                    /*!< HSICCon (Bit 30)                                      */
#define USB_OTG_CORE_GLPMCFG_HSICCon_Msk  (0x40000000UL)            /*!< HSICCon (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GLPMCFG_LPM_RestoreSlpSts_Pos (29UL)           /*!< LPM_RestoreSlpSts (Bit 29)                            */
#define USB_OTG_CORE_GLPMCFG_LPM_RestoreSlpSts_Msk (0x20000000UL)   /*!< LPM_RestoreSlpSts (Bitfield-Mask: 0x01)               */
#define USB_OTG_CORE_GLPMCFG_LPM_EnBESL_Pos (28UL)                  /*!< LPM_EnBESL (Bit 28)                                   */
#define USB_OTG_CORE_GLPMCFG_LPM_EnBESL_Msk (0x10000000UL)          /*!< LPM_EnBESL (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GLPMCFG_LPM_RetryCnt_Sts_Pos (25UL)            /*!< LPM_RetryCnt_Sts (Bit 25)                             */
#define USB_OTG_CORE_GLPMCFG_LPM_RetryCnt_Sts_Msk (0xe000000UL)     /*!< LPM_RetryCnt_Sts (Bitfield-Mask: 0x07)                */
#define USB_OTG_CORE_GLPMCFG_SndLPM_Pos   (24UL)                    /*!< SndLPM (Bit 24)                                       */
#define USB_OTG_CORE_GLPMCFG_SndLPM_Msk   (0x1000000UL)             /*!< SndLPM (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GLPMCFG_LPM_Retry_Cnt_Pos (21UL)               /*!< LPM_Retry_Cnt (Bit 21)                                */
#define USB_OTG_CORE_GLPMCFG_LPM_Retry_Cnt_Msk (0xe00000UL)         /*!< LPM_Retry_Cnt (Bitfield-Mask: 0x07)                   */
#define USB_OTG_CORE_GLPMCFG_LPM_Chnl_Indx_Pos (17UL)               /*!< LPM_Chnl_Indx (Bit 17)                                */
#define USB_OTG_CORE_GLPMCFG_LPM_Chnl_Indx_Msk (0x1e0000UL)         /*!< LPM_Chnl_Indx (Bitfield-Mask: 0x0f)                   */
#define USB_OTG_CORE_GLPMCFG_L1ResumeOK_Pos (16UL)                  /*!< L1ResumeOK (Bit 16)                                   */
#define USB_OTG_CORE_GLPMCFG_L1ResumeOK_Msk (0x10000UL)             /*!< L1ResumeOK (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GLPMCFG_SlpSts_Pos   (15UL)                    /*!< SlpSts (Bit 15)                                       */
#define USB_OTG_CORE_GLPMCFG_SlpSts_Msk   (0x8000UL)                /*!< SlpSts (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GLPMCFG_CoreL1Res_Pos (13UL)                   /*!< CoreL1Res (Bit 13)                                    */
#define USB_OTG_CORE_GLPMCFG_CoreL1Res_Msk (0x6000UL)               /*!< CoreL1Res (Bitfield-Mask: 0x03)                       */
#define USB_OTG_CORE_GLPMCFG_HIRD_Thres_Pos (8UL)                   /*!< HIRD_Thres (Bit 8)                                    */
#define USB_OTG_CORE_GLPMCFG_HIRD_Thres_Msk (0x1f00UL)              /*!< HIRD_Thres (Bitfield-Mask: 0x1f)                      */
#define USB_OTG_CORE_GLPMCFG_EnblSlpM_Pos (7UL)                     /*!< EnblSlpM (Bit 7)                                      */
#define USB_OTG_CORE_GLPMCFG_EnblSlpM_Msk (0x80UL)                  /*!< EnblSlpM (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GLPMCFG_bRemoteWake_Pos (6UL)                  /*!< bRemoteWake (Bit 6)                                   */
#define USB_OTG_CORE_GLPMCFG_bRemoteWake_Msk (0x40UL)               /*!< bRemoteWake (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GLPMCFG_HIRD_Pos     (2UL)                     /*!< HIRD (Bit 2)                                          */
#define USB_OTG_CORE_GLPMCFG_HIRD_Msk     (0x3cUL)                  /*!< HIRD (Bitfield-Mask: 0x0f)                            */
#define USB_OTG_CORE_GLPMCFG_AppL1Res_Pos (1UL)                     /*!< AppL1Res (Bit 1)                                      */
#define USB_OTG_CORE_GLPMCFG_AppL1Res_Msk (0x2UL)                   /*!< AppL1Res (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GLPMCFG_LPMCap_Pos   (0UL)                     /*!< LPMCap (Bit 0)                                        */
#define USB_OTG_CORE_GLPMCFG_LPMCap_Msk   (0x1UL)                   /*!< LPMCap (Bitfield-Mask: 0x01)                          */
/* ========================================================  GPWRDN  ========================================================= */
#define USB_OTG_CORE_GPWRDN_MultValIdBC_Pos (24UL)                  /*!< MultValIdBC (Bit 24)                                  */
#define USB_OTG_CORE_GPWRDN_MultValIdBC_Msk (0x1f000000UL)          /*!< MultValIdBC (Bitfield-Mask: 0x1f)                     */
#define USB_OTG_CORE_GPWRDN_ADPInt_Pos    (23UL)                    /*!< ADPInt (Bit 23)                                       */
#define USB_OTG_CORE_GPWRDN_ADPInt_Msk    (0x800000UL)              /*!< ADPInt (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GPWRDN_BSessVld_Pos  (22UL)                    /*!< BSessVld (Bit 22)                                     */
#define USB_OTG_CORE_GPWRDN_BSessVld_Msk  (0x400000UL)              /*!< BSessVld (Bitfield-Mask: 0x01)                        */
#define USB_OTG_CORE_GPWRDN_IDDIG_Pos     (21UL)                    /*!< IDDIG (Bit 21)                                        */
#define USB_OTG_CORE_GPWRDN_IDDIG_Msk     (0x200000UL)              /*!< IDDIG (Bitfield-Mask: 0x01)                           */
#define USB_OTG_CORE_GPWRDN_LineState_Pos (19UL)                    /*!< LineState (Bit 19)                                    */
#define USB_OTG_CORE_GPWRDN_LineState_Msk (0x180000UL)              /*!< LineState (Bitfield-Mask: 0x03)                       */
#define USB_OTG_CORE_GPWRDN_StsChngIntMsk_Pos (18UL)                /*!< StsChngIntMsk (Bit 18)                                */
#define USB_OTG_CORE_GPWRDN_StsChngIntMsk_Msk (0x40000UL)           /*!< StsChngIntMsk (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GPWRDN_StsChngInt_Pos (17UL)                   /*!< StsChngInt (Bit 17)                                   */
#define USB_OTG_CORE_GPWRDN_StsChngInt_Msk (0x20000UL)              /*!< StsChngInt (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GPWRDN_SRPDetectMsk_Pos (16UL)                 /*!< SRPDetectMsk (Bit 16)                                 */
#define USB_OTG_CORE_GPWRDN_SRPDetectMsk_Msk (0x10000UL)            /*!< SRPDetectMsk (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GPWRDN_SRPDetect_Pos (15UL)                    /*!< SRPDetect (Bit 15)                                    */
#define USB_OTG_CORE_GPWRDN_SRPDetect_Msk (0x8000UL)                /*!< SRPDetect (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GPWRDN_ConnDetMsk_Pos (14UL)                   /*!< ConnDetMsk (Bit 14)                                   */
#define USB_OTG_CORE_GPWRDN_ConnDetMsk_Msk (0x4000UL)               /*!< ConnDetMsk (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GPWRDN_ConnectDet_Pos (13UL)                   /*!< ConnectDet (Bit 13)                                   */
#define USB_OTG_CORE_GPWRDN_ConnectDet_Msk (0x2000UL)               /*!< ConnectDet (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GPWRDN_DisconnectDetectMsk_Pos (12UL)          /*!< DisconnectDetectMsk (Bit 12)                          */
#define USB_OTG_CORE_GPWRDN_DisconnectDetectMsk_Msk (0x1000UL)      /*!< DisconnectDetectMsk (Bitfield-Mask: 0x01)             */
#define USB_OTG_CORE_GPWRDN_DisconnectDetect_Pos (11UL)             /*!< DisconnectDetect (Bit 11)                             */
#define USB_OTG_CORE_GPWRDN_DisconnectDetect_Msk (0x800UL)          /*!< DisconnectDetect (Bitfield-Mask: 0x01)                */
#define USB_OTG_CORE_GPWRDN_ResetDetMsk_Pos (10UL)                  /*!< ResetDetMsk (Bit 10)                                  */
#define USB_OTG_CORE_GPWRDN_ResetDetMsk_Msk (0x400UL)               /*!< ResetDetMsk (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GPWRDN_ResetDetected_Pos (9UL)                 /*!< ResetDetected (Bit 9)                                 */
#define USB_OTG_CORE_GPWRDN_ResetDetected_Msk (0x200UL)             /*!< ResetDetected (Bitfield-Mask: 0x01)                   */
#define USB_OTG_CORE_GPWRDN_LineStageChangeMsk_Pos (8UL)            /*!< LineStageChangeMsk (Bit 8)                            */
#define USB_OTG_CORE_GPWRDN_LineStageChangeMsk_Msk (0x100UL)        /*!< LineStageChangeMsk (Bitfield-Mask: 0x01)              */
#define USB_OTG_CORE_GPWRDN_LnStsChng_Pos (7UL)                     /*!< LnStsChng (Bit 7)                                     */
#define USB_OTG_CORE_GPWRDN_LnStsChng_Msk (0x80UL)                  /*!< LnStsChng (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GPWRDN_DisableVBUS_Pos (6UL)                   /*!< DisableVBUS (Bit 6)                                   */
#define USB_OTG_CORE_GPWRDN_DisableVBUS_Msk (0x40UL)                /*!< DisableVBUS (Bitfield-Mask: 0x01)                     */
#define USB_OTG_CORE_GPWRDN_PwrDnSwtch_Pos (5UL)                    /*!< PwrDnSwtch (Bit 5)                                    */
#define USB_OTG_CORE_GPWRDN_PwrDnSwtch_Msk (0x20UL)                 /*!< PwrDnSwtch (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GPWRDN_PwrDnRst_n_Pos (4UL)                    /*!< PwrDnRst_n (Bit 4)                                    */
#define USB_OTG_CORE_GPWRDN_PwrDnRst_n_Msk (0x10UL)                 /*!< PwrDnRst_n (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GPWRDN_PwrDnClmp_Pos (3UL)                     /*!< PwrDnClmp (Bit 3)                                     */
#define USB_OTG_CORE_GPWRDN_PwrDnClmp_Msk (0x8UL)                   /*!< PwrDnClmp (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GPWRDN_Restore_Pos   (2UL)                     /*!< Restore (Bit 2)                                       */
#define USB_OTG_CORE_GPWRDN_Restore_Msk   (0x4UL)                   /*!< Restore (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GPWRDN_PMUActv_Pos   (1UL)                     /*!< PMUActv (Bit 1)                                       */
#define USB_OTG_CORE_GPWRDN_PMUActv_Msk   (0x2UL)                   /*!< PMUActv (Bitfield-Mask: 0x01)                         */
#define USB_OTG_CORE_GPWRDN_PMUIntSel_Pos (0UL)                     /*!< PMUIntSel (Bit 0)                                     */
#define USB_OTG_CORE_GPWRDN_PMUIntSel_Msk (0x1UL)                   /*!< PMUIntSel (Bitfield-Mask: 0x01)                       */
/* =======================================================  GDFIFOCFG  ======================================================= */
#define USB_OTG_CORE_GDFIFOCFG_EPInfoBaseAddr_Pos (16UL)            /*!< EPInfoBaseAddr (Bit 16)                               */
#define USB_OTG_CORE_GDFIFOCFG_EPInfoBaseAddr_Msk (0xffff0000UL)    /*!< EPInfoBaseAddr (Bitfield-Mask: 0xffff)                */
#define USB_OTG_CORE_GDFIFOCFG_GDFIFOCfg_Pos (0UL)                  /*!< GDFIFOCfg (Bit 0)                                     */
#define USB_OTG_CORE_GDFIFOCFG_GDFIFOCfg_Msk (0xffffUL)             /*!< GDFIFOCfg (Bitfield-Mask: 0xffff)                     */
/* ========================================================  GADPCTL  ======================================================== */
#define USB_OTG_CORE_GADPCTL_AR_Pos       (27UL)                    /*!< AR (Bit 27)                                           */
#define USB_OTG_CORE_GADPCTL_AR_Msk       (0x18000000UL)            /*!< AR (Bitfield-Mask: 0x03)                              */
#define USB_OTG_CORE_GADPCTL_AdpToutMsk_Pos (26UL)                  /*!< AdpToutMsk (Bit 26)                                   */
#define USB_OTG_CORE_GADPCTL_AdpToutMsk_Msk (0x4000000UL)           /*!< AdpToutMsk (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GADPCTL_AdpSnsIntMsk_Pos (25UL)                /*!< AdpSnsIntMsk (Bit 25)                                 */
#define USB_OTG_CORE_GADPCTL_AdpSnsIntMsk_Msk (0x2000000UL)         /*!< AdpSnsIntMsk (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GADPCTL_AdpPrbIntMsk_Pos (24UL)                /*!< AdpPrbIntMsk (Bit 24)                                 */
#define USB_OTG_CORE_GADPCTL_AdpPrbIntMsk_Msk (0x1000000UL)         /*!< AdpPrbIntMsk (Bitfield-Mask: 0x01)                    */
#define USB_OTG_CORE_GADPCTL_AdpToutInt_Pos (23UL)                  /*!< AdpToutInt (Bit 23)                                   */
#define USB_OTG_CORE_GADPCTL_AdpToutInt_Msk (0x800000UL)            /*!< AdpToutInt (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GADPCTL_AdpSnsInt_Pos (22UL)                   /*!< AdpSnsInt (Bit 22)                                    */
#define USB_OTG_CORE_GADPCTL_AdpSnsInt_Msk (0x400000UL)             /*!< AdpSnsInt (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GADPCTL_AdpPrbInt_Pos (21UL)                   /*!< AdpPrbInt (Bit 21)                                    */
#define USB_OTG_CORE_GADPCTL_AdpPrbInt_Msk (0x200000UL)             /*!< AdpPrbInt (Bitfield-Mask: 0x01)                       */
#define USB_OTG_CORE_GADPCTL_ADPEn_Pos    (20UL)                    /*!< ADPEn (Bit 20)                                        */
#define USB_OTG_CORE_GADPCTL_ADPEn_Msk    (0x100000UL)              /*!< ADPEn (Bitfield-Mask: 0x01)                           */
#define USB_OTG_CORE_GADPCTL_ADPRes_Pos   (19UL)                    /*!< ADPRes (Bit 19)                                       */
#define USB_OTG_CORE_GADPCTL_ADPRes_Msk   (0x80000UL)               /*!< ADPRes (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GADPCTL_EnaSns_Pos   (18UL)                    /*!< EnaSns (Bit 18)                                       */
#define USB_OTG_CORE_GADPCTL_EnaSns_Msk   (0x40000UL)               /*!< EnaSns (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GADPCTL_EnaPrb_Pos   (17UL)                    /*!< EnaPrb (Bit 17)                                       */
#define USB_OTG_CORE_GADPCTL_EnaPrb_Msk   (0x20000UL)               /*!< EnaPrb (Bitfield-Mask: 0x01)                          */
#define USB_OTG_CORE_GADPCTL_RTIM_Pos     (6UL)                     /*!< RTIM (Bit 6)                                          */
#define USB_OTG_CORE_GADPCTL_RTIM_Msk     (0x1ffc0UL)               /*!< RTIM (Bitfield-Mask: 0x7ff)                           */
#define USB_OTG_CORE_GADPCTL_PrbPer_Pos   (4UL)                     /*!< PrbPer (Bit 4)                                        */
#define USB_OTG_CORE_GADPCTL_PrbPer_Msk   (0x30UL)                  /*!< PrbPer (Bitfield-Mask: 0x03)                          */
#define USB_OTG_CORE_GADPCTL_PrbDelta_Pos (2UL)                     /*!< PrbDelta (Bit 2)                                      */
#define USB_OTG_CORE_GADPCTL_PrbDelta_Msk (0xcUL)                   /*!< PrbDelta (Bitfield-Mask: 0x03)                        */
#define USB_OTG_CORE_GADPCTL_PrbDschg_Pos (0UL)                     /*!< PrbDschg (Bit 0)                                      */
#define USB_OTG_CORE_GADPCTL_PrbDschg_Msk (0x3UL)                   /*!< PrbDschg (Bitfield-Mask: 0x03)                        */
/* ========================================================  GREFCLK  ======================================================== */
#define USB_OTG_CORE_GREFCLK_REFCLKPER_Pos (15UL)                   /*!< REFCLKPER (Bit 15)                                    */
#define USB_OTG_CORE_GREFCLK_REFCLKPER_Msk (0xffff8000UL)           /*!< REFCLKPER (Bitfield-Mask: 0x1ffff)                    */
#define USB_OTG_CORE_GREFCLK_RefclkMode_Pos (14UL)                  /*!< RefclkMode (Bit 14)                                   */
#define USB_OTG_CORE_GREFCLK_RefclkMode_Msk (0x4000UL)              /*!< RefclkMode (Bitfield-Mask: 0x01)                      */
#define USB_OTG_CORE_GREFCLK_SOF_CNT_WKUP_ALERT_Pos (0UL)           /*!< SOF_CNT_WKUP_ALERT (Bit 0)                            */
#define USB_OTG_CORE_GREFCLK_SOF_CNT_WKUP_ALERT_Msk (0x3ffUL)       /*!< SOF_CNT_WKUP_ALERT (Bitfield-Mask: 0x3ff)             */
/* =======================================================  GINTMSK2  ======================================================== */
#define USB_OTG_CORE_GINTMSK2_WkUpAlertIntMsk_Pos (0UL)             /*!< WkUpAlertIntMsk (Bit 0)                               */
#define USB_OTG_CORE_GINTMSK2_WkUpAlertIntMsk_Msk (0x1UL)           /*!< WkUpAlertIntMsk (Bitfield-Mask: 0x01)                 */
/* =======================================================  GINTSTS2  ======================================================== */
#define USB_OTG_CORE_GINTSTS2_WkUpAlertInt_Pos (0UL)                /*!< WkUpAlertInt (Bit 0)                                  */
#define USB_OTG_CORE_GINTSTS2_WkUpAlertInt_Msk (0x1UL)              /*!< WkUpAlertInt (Bitfield-Mask: 0x01)                    */
/* =======================================================  HPTXFSIZ  ======================================================== */
/* ========================================================  DIEPTXF  ======================================================== */


/* =========================================================================================================================== */
/* ================                                       USB_OTG_HOST                                        ================ */
/* =========================================================================================================================== */

/* =========================================================  HCFG  ========================================================== */
/* =========================================================  HFIR  ========================================================== */
/* =========================================================  HFNUM  ========================================================= */
/* ========================================================  HPTXSTS  ======================================================== */
/* =========================================================  HAINT  ========================================================= */
/* =======================================================  HAINTMSK  ======================================================== */
/* =======================================================  HFLBAddr  ======================================================== */
/* =========================================================  HPRT  ========================================================== */
/* ========================================================  HCCHAR0  ======================================================== */
/* ========================================================  HCSPLT0  ======================================================== */
/* ========================================================  HCINT0  ========================================================= */
/* =======================================================  HCINTMSK0  ======================================================= */
/* ========================================================  HCTSIZ0  ======================================================== */
/* ========================================================  HCCHAR1  ======================================================== */
/* ========================================================  HCSPLT1  ======================================================== */
/* ========================================================  HCINT1  ========================================================= */
/* =======================================================  HCINTMSK1  ======================================================= */
/* ========================================================  HCTSIZ1  ======================================================== */
/* ========================================================  HCCHAR2  ======================================================== */
/* ========================================================  HCSPLT2  ======================================================== */
/* ========================================================  HCINT2  ========================================================= */
/* =======================================================  HCINTMSK2  ======================================================= */
/* ========================================================  HCTSIZ2  ======================================================== */
/* ========================================================  HCCHAR3  ======================================================== */
/* ========================================================  HCSPLT3  ======================================================== */
/* ========================================================  HCINT3  ========================================================= */
/* =======================================================  HCINTMSK3  ======================================================= */
/* ========================================================  HCTSIZ3  ======================================================== */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_DEVICE                                       ================ */
/* =========================================================================================================================== */

/* =========================================================  DCFG  ========================================================== */
/* =========================================================  DCTL  ========================================================== */
/* =========================================================  DSTS  ========================================================== */
/* ========================================================  DIEPMSK  ======================================================== */
/* ========================================================  DOEPMSK  ======================================================== */
/* =========================================================  DAINT  ========================================================= */
/* =======================================================  DAINTMSK  ======================================================== */
/* =======================================================  DVBUSDIS  ======================================================== */
/* ======================================================  DVBUSPULSE  ======================================================= */
/* ========================================================  DTHRCTL  ======================================================== */
/* ======================================================  DIEPEMPMSK  ======================================================= */
/* =======================================================  DEACHINT  ======================================================== */
/* =====================================================  DEACHINTMSK0  ====================================================== */
/* ========================================================  DIEPTXF  ======================================================== */
/* ======================================================  DOEPEACHMSK  ====================================================== */


/* =========================================================================================================================== */
/* ================                                       USB_OTG_IN_EP                                       ================ */
/* =========================================================================================================================== */

/* =======================================================  DIEPCTL0  ======================================================== */
/* =======================================================  DIEPCTL1  ======================================================== */
/* =======================================================  DIEPCTL2  ======================================================== */
/* =======================================================  DIEPCTL3  ======================================================== */
/* =======================================================  DIEPCTL4  ======================================================== */
/* =======================================================  DIEPCTL5  ======================================================== */
/* =======================================================  DIEPCTL6  ======================================================== */
/* =======================================================  DIEPCTL7  ======================================================== */
/* =======================================================  DIEPCTL8  ======================================================== */
/* =======================================================  DIEPCTL9  ======================================================== */
/* =======================================================  DIEPCTL10  ======================================================= */
/* =======================================================  DIEPCTL11  ======================================================= */
/* =======================================================  DIEPCTL12  ======================================================= */
/* =======================================================  DIEPCTL13  ======================================================= */
/* =======================================================  DIEPCTL14  ======================================================= */
/* =======================================================  DIEPCTL15  ======================================================= */
/* =======================================================  DIEPINT0  ======================================================== */
/* =======================================================  DIEPINT1  ======================================================== */
/* =======================================================  DIEPINT2  ======================================================== */
/* =======================================================  DIEPINT3  ======================================================== */
/* =======================================================  DIEPINT4  ======================================================== */
/* =======================================================  DIEPINT5  ======================================================== */
/* =======================================================  DIEPINT6  ======================================================== */
/* =======================================================  DIEPINT7  ======================================================== */
/* =======================================================  DIEPINT8  ======================================================== */
/* =======================================================  DIEPINT9  ======================================================== */
/* =======================================================  DIEPINT10  ======================================================= */
/* =======================================================  DIEPINT11  ======================================================= */
/* =======================================================  DIEPINT12  ======================================================= */
/* =======================================================  DIEPINT13  ======================================================= */
/* =======================================================  DIEPINT14  ======================================================= */
/* =======================================================  DIEPINT15  ======================================================= */
/* =======================================================  DIEPTSIZ0  ======================================================= */
/* =======================================================  DIEPTSIZ1  ======================================================= */
/* =======================================================  DIEPTSIZ2  ======================================================= */
/* =======================================================  DIEPTSIZ3  ======================================================= */
/* =======================================================  DIEPTSIZ4  ======================================================= */
/* =======================================================  DIEPTSIZ5  ======================================================= */
/* =======================================================  DIEPTSIZ6  ======================================================= */
/* =======================================================  DIEPTSIZ7  ======================================================= */
/* =======================================================  DIEPTSIZ8  ======================================================= */
/* =======================================================  DIEPTSIZ9  ======================================================= */
/* ======================================================  DIEPTSIZ10  ======================================================= */
/* ======================================================  DIEPTSIZ11  ======================================================= */
/* ======================================================  DIEPTSIZ12  ======================================================= */
/* ======================================================  DIEPTSIZ13  ======================================================= */
/* ======================================================  DIEPTSIZ14  ======================================================= */
/* ======================================================  DIEPTSIZ15  ======================================================= */
/* =======================================================  DIEPDMA0  ======================================================== */
/* =======================================================  DIEPDMA1  ======================================================== */
/* =======================================================  DIEPDMA2  ======================================================== */
/* =======================================================  DIEPDMA3  ======================================================== */
/* =======================================================  DIEPDMA4  ======================================================== */
/* =======================================================  DIEPDMA5  ======================================================== */
/* =======================================================  DIEPDMA6  ======================================================== */
/* =======================================================  DIEPDMA7  ======================================================== */
/* =======================================================  DIEPDMA8  ======================================================== */
/* =======================================================  DIEPDMA9  ======================================================== */
/* =======================================================  DIEPDMA10  ======================================================= */
/* =======================================================  DIEPDMA11  ======================================================= */
/* =======================================================  DIEPDMA12  ======================================================= */
/* =======================================================  DIEPDMA13  ======================================================= */
/* =======================================================  DIEPDMA14  ======================================================= */
/* =======================================================  DIEPDMA15  ======================================================= */
/* =======================================================  DTXFSTS0  ======================================================== */
/* =======================================================  DTXFSTS1  ======================================================== */
/* =======================================================  DTXFSTS2  ======================================================== */
/* =======================================================  DTXFSTS3  ======================================================== */
/* =======================================================  DTXFSTS4  ======================================================== */
/* =======================================================  DTXFSTS5  ======================================================== */
/* =======================================================  DTXFSTS6  ======================================================== */
/* =======================================================  DTXFSTS7  ======================================================== */
/* =======================================================  DTXFSTS8  ======================================================== */
/* =======================================================  DTXFSTS9  ======================================================== */
/* =======================================================  DTXFSTS10  ======================================================= */
/* =======================================================  DTXFSTS11  ======================================================= */
/* =======================================================  DTXFSTS12  ======================================================= */
/* =======================================================  DTXFSTS13  ======================================================= */
/* =======================================================  DTXFSTS14  ======================================================= */
/* =======================================================  DTXFSTS15  ======================================================= */
/* =======================================================  DIEPDMAB0  ======================================================= */
/* =======================================================  DIEPDMAB1  ======================================================= */
/* =======================================================  DIEPDMAB2  ======================================================= */
/* =======================================================  DIEPDMAB3  ======================================================= */
/* =======================================================  DIEPDMAB4  ======================================================= */
/* =======================================================  DIEPDMAB5  ======================================================= */
/* =======================================================  DIEPDMAB6  ======================================================= */
/* =======================================================  DIEPDMAB7  ======================================================= */
/* =======================================================  DIEPDMAB8  ======================================================= */
/* =======================================================  DIEPDMAB9  ======================================================= */
/* ======================================================  DIEPDMAB10  ======================================================= */
/* ======================================================  DIEPDMAB11  ======================================================= */
/* ======================================================  DIEPDMAB12  ======================================================= */
/* ======================================================  DIEPDMAB13  ======================================================= */
/* ======================================================  DIEPDMAB14  ======================================================= */
/* ======================================================  DIEPDMAB15  ======================================================= */


/* =========================================================================================================================== */
/* ================                                      USB_OTG_OUT_EP                                       ================ */
/* =========================================================================================================================== */

/* =======================================================  DOEPCTL0  ======================================================== */
/* =======================================================  DOEPINT0  ======================================================== */
/* =======================================================  DOEPTSIZ0  ======================================================= */
/* =======================================================  DOEPDMA0  ======================================================== */
/* =======================================================  DOEPDMAB0  ======================================================= */
/* =======================================================  DOEPCTL1  ======================================================== */
/* =======================================================  DOEPCTL2  ======================================================== */
/* =======================================================  DOEPCTL3  ======================================================== */
/* =======================================================  DOEPCTL4  ======================================================== */
/* =======================================================  DOEPCTL5  ======================================================== */
/* =======================================================  DOEPCTL6  ======================================================== */
/* =======================================================  DOEPCTL7  ======================================================== */
/* =======================================================  DOEPCTL8  ======================================================== */
/* =======================================================  DOEPCTL9  ======================================================== */
/* =======================================================  DOEPCTL10  ======================================================= */
/* =======================================================  DOEPCTL11  ======================================================= */
/* =======================================================  DOEPCTL12  ======================================================= */
/* =======================================================  DOEPCTL13  ======================================================= */
/* =======================================================  DOEPCTL14  ======================================================= */
/* =======================================================  DOEPCTL15  ======================================================= */
/* =======================================================  DOEPINT1  ======================================================== */
/* =======================================================  DOEPINT2  ======================================================== */
/* =======================================================  DOEPINT3  ======================================================== */
/* =======================================================  DOEPINT4  ======================================================== */
/* =======================================================  DOEPINT5  ======================================================== */
/* =======================================================  DOEPINT6  ======================================================== */
/* =======================================================  DOEPINT7  ======================================================== */
/* =======================================================  DOEPINT8  ======================================================== */
/* =======================================================  DOEPINT9  ======================================================== */
/* =======================================================  DOEPINT10  ======================================================= */
/* =======================================================  DOEPINT11  ======================================================= */
/* =======================================================  DOEPINT12  ======================================================= */
/* =======================================================  DOEPINT13  ======================================================= */
/* =======================================================  DOEPINT14  ======================================================= */
/* =======================================================  DOEPINT15  ======================================================= */
/* =======================================================  DOEPTSIZ1  ======================================================= */
/* =======================================================  DOEPTSIZ2  ======================================================= */
/* =======================================================  DOEPTSIZ3  ======================================================= */
/* =======================================================  DOEPTSIZ4  ======================================================= */
/* =======================================================  DOEPTSIZ5  ======================================================= */
/* =======================================================  DOEPTSIZ6  ======================================================= */
/* =======================================================  DOEPTSIZ7  ======================================================= */
/* =======================================================  DOEPTSIZ8  ======================================================= */
/* =======================================================  DOEPTSIZ9  ======================================================= */
/* ======================================================  DOEPTSIZ10  ======================================================= */
/* ======================================================  DOEPTSIZ11  ======================================================= */
/* ======================================================  DOEPTSIZ12  ======================================================= */
/* ======================================================  DOEPTSIZ13  ======================================================= */
/* ======================================================  DOEPTSIZ14  ======================================================= */
/* ======================================================  DOEPTSIZ15  ======================================================= */
/* =======================================================  DOEPDMA1  ======================================================== */
/* =======================================================  DOEPDMA2  ======================================================== */
/* =======================================================  DOEPDMA3  ======================================================== */
/* =======================================================  DOEPDMA4  ======================================================== */
/* =======================================================  DOEPDMA5  ======================================================== */
/* =======================================================  DOEPDMA6  ======================================================== */
/* =======================================================  DOEPDMA7  ======================================================== */
/* =======================================================  DOEPDMA8  ======================================================== */
/* =======================================================  DOEPDMA9  ======================================================== */
/* =======================================================  DOEPDMA10  ======================================================= */
/* =======================================================  DOEPDMA11  ======================================================= */
/* =======================================================  DOEPDMA12  ======================================================= */
/* =======================================================  DOEPDMA13  ======================================================= */
/* =======================================================  DOEPDMA14  ======================================================= */
/* =======================================================  DOEPDMA15  ======================================================= */
/* =======================================================  DOEPDMAB1  ======================================================= */
/* =======================================================  DOEPDMAB2  ======================================================= */
/* =======================================================  DOEPDMAB3  ======================================================= */
/* =======================================================  DOEPDMAB4  ======================================================= */
/* =======================================================  DOEPDMAB5  ======================================================= */
/* =======================================================  DOEPDMAB6  ======================================================= */
/* =======================================================  DOEPDMAB7  ======================================================= */
/* =======================================================  DOEPDMAB8  ======================================================= */
/* =======================================================  DOEPDMAB9  ======================================================= */
/* ======================================================  DOEPDMAB10  ======================================================= */
/* ======================================================  DOEPDMAB11  ======================================================= */
/* ======================================================  DOEPDMAB12  ======================================================= */
/* ======================================================  DOEPDMAB13  ======================================================= */
/* ======================================================  DOEPDMAB14  ======================================================= */
/* ======================================================  DOEPDMAB15  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          SYSTEM                                           ================ */
/* =========================================================================================================================== */

/* =====================================================  PERICLKPWRTOP  ===================================================== */
#define SYSTEM_PERICLKPWRTOP_SOFTRST_Pos  (31UL)                    /*!< SOFTRST (Bit 31)                                      */
#define SYSTEM_PERICLKPWRTOP_SOFTRST_Msk  (0x80000000UL)            /*!< SOFTRST (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_SOFTRST_GATING_Pos (30UL)              /*!< SOFTRST_GATING (Bit 30)                               */
#define SYSTEM_PERICLKPWRTOP_SOFTRST_GATING_Msk (0x40000000UL)      /*!< SOFTRST_GATING (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKPWRTOP_SYS_TOP_Pos  (21UL)                    /*!< SYS_TOP (Bit 21)                                      */
#define SYSTEM_PERICLKPWRTOP_SYS_TOP_Msk  (0x200000UL)              /*!< SYS_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_USB_TOP_Pos  (20UL)                    /*!< USB_TOP (Bit 20)                                      */
#define SYSTEM_PERICLKPWRTOP_USB_TOP_Msk  (0x100000UL)              /*!< USB_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_APB_TOP_Pos  (19UL)                    /*!< APB_TOP (Bit 19)                                      */
#define SYSTEM_PERICLKPWRTOP_APB_TOP_Msk  (0x80000UL)               /*!< APB_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_I3C_TOP_Pos  (18UL)                    /*!< I3C_TOP (Bit 18)                                      */
#define SYSTEM_PERICLKPWRTOP_I3C_TOP_Msk  (0x40000UL)               /*!< I3C_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_SPIM_TOP_Pos (17UL)                    /*!< SPIM_TOP (Bit 17)                                     */
#define SYSTEM_PERICLKPWRTOP_SPIM_TOP_Msk (0x20000UL)               /*!< SPIM_TOP (Bitfield-Mask: 0x01)                        */
#define SYSTEM_PERICLKPWRTOP_SPIS_TOP_Pos (16UL)                    /*!< SPIS_TOP (Bit 16)                                     */
#define SYSTEM_PERICLKPWRTOP_SPIS_TOP_Msk (0x10000UL)               /*!< SPIS_TOP (Bitfield-Mask: 0x01)                        */
#define SYSTEM_PERICLKPWRTOP_I2C_TOP_Pos  (15UL)                    /*!< I2C_TOP (Bit 15)                                      */
#define SYSTEM_PERICLKPWRTOP_I2C_TOP_Msk  (0x8000UL)                /*!< I2C_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_STRIP_TOP_Pos (14UL)                   /*!< STRIP_TOP (Bit 14)                                    */
#define SYSTEM_PERICLKPWRTOP_STRIP_TOP_Msk (0x4000UL)               /*!< STRIP_TOP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWRTOP_ADC_TOP_Pos  (13UL)                    /*!< ADC_TOP (Bit 13)                                      */
#define SYSTEM_PERICLKPWRTOP_ADC_TOP_Msk  (0x2000UL)                /*!< ADC_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_UART_TOP_Pos (12UL)                    /*!< UART_TOP (Bit 12)                                     */
#define SYSTEM_PERICLKPWRTOP_UART_TOP_Msk (0x1000UL)                /*!< UART_TOP (Bitfield-Mask: 0x01)                        */
#define SYSTEM_PERICLKPWRTOP_MATRIX_TOP_Pos (11UL)                  /*!< MATRIX_TOP (Bit 11)                                   */
#define SYSTEM_PERICLKPWRTOP_MATRIX_TOP_Msk (0x800UL)               /*!< MATRIX_TOP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWRTOP_CRC_TOP_Pos  (10UL)                    /*!< CRC_TOP (Bit 10)                                      */
#define SYSTEM_PERICLKPWRTOP_CRC_TOP_Msk  (0x400UL)                 /*!< CRC_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_TMR_TOP_Pos  (9UL)                     /*!< TMR_TOP (Bit 9)                                       */
#define SYSTEM_PERICLKPWRTOP_TMR_TOP_Msk  (0x200UL)                 /*!< TMR_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_PWM_TOP_Pos  (8UL)                     /*!< PWM_TOP (Bit 8)                                       */
#define SYSTEM_PERICLKPWRTOP_PWM_TOP_Msk  (0x100UL)                 /*!< PWM_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_WDT_TOP_Pos  (7UL)                     /*!< WDT_TOP (Bit 7)                                       */
#define SYSTEM_PERICLKPWRTOP_WDT_TOP_Msk  (0x80UL)                  /*!< WDT_TOP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWRTOP_RC32KCAL_TOP_Pos (6UL)                 /*!< RC32KCAL_TOP (Bit 6)                                  */
#define SYSTEM_PERICLKPWRTOP_RC32KCAL_TOP_Msk (0x40UL)              /*!< RC32KCAL_TOP (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWRTOP_RC32KREF_TOP_Pos (5UL)                 /*!< RC32KREF_TOP (Bit 5)                                  */
#define SYSTEM_PERICLKPWRTOP_RC32KREF_TOP_Msk (0x20UL)              /*!< RC32KREF_TOP (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWRTOP_TACHO_TOP_Pos (4UL)                    /*!< TACHO_TOP (Bit 4)                                     */
#define SYSTEM_PERICLKPWRTOP_TACHO_TOP_Msk (0x10UL)                 /*!< TACHO_TOP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWRTOP_RC24MCAL_TOP_Pos (3UL)                 /*!< RC24MCAL_TOP (Bit 3)                                  */
#define SYSTEM_PERICLKPWRTOP_RC24MCAL_TOP_Msk (0x8UL)               /*!< RC24MCAL_TOP (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWRTOP_RC24MREF_TOP_Pos (2UL)                 /*!< RC24MREF_TOP (Bit 2)                                  */
#define SYSTEM_PERICLKPWRTOP_RC24MREF_TOP_Msk (0x4UL)               /*!< RC24MREF_TOP (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWRTOP_GPIO_TOP_Pos (1UL)                     /*!< GPIO_TOP (Bit 1)                                      */
#define SYSTEM_PERICLKPWRTOP_GPIO_TOP_Msk (0x2UL)                   /*!< GPIO_TOP (Bitfield-Mask: 0x01)                        */
#define SYSTEM_PERICLKPWRTOP_USB_DPHY_TOP_Pos (0UL)                 /*!< USB_DPHY_TOP (Bit 0)                                  */
#define SYSTEM_PERICLKPWRTOP_USB_DPHY_TOP_Msk (0x1UL)               /*!< USB_DPHY_TOP (Bitfield-Mask: 0x01)                    */
/* ======================================================  PERICLKSEL0  ====================================================== */
#define SYSTEM_PERICLKSEL0_SYS_SRC_Pos    (24UL)                    /*!< SYS_SRC (Bit 24)                                      */
#define SYSTEM_PERICLKSEL0_SYS_SRC_Msk    (0x3000000UL)             /*!< SYS_SRC (Bitfield-Mask: 0x03)                         */
#define SYSTEM_PERICLKSEL0_APB_SRC_Pos    (22UL)                    /*!< APB_SRC (Bit 22)                                      */
#define SYSTEM_PERICLKSEL0_APB_SRC_Msk    (0xc00000UL)              /*!< APB_SRC (Bitfield-Mask: 0x03)                         */
#define SYSTEM_PERICLKSEL0_PWM_SRC_Pos    (20UL)                    /*!< PWM_SRC (Bit 20)                                      */
#define SYSTEM_PERICLKSEL0_PWM_SRC_Msk    (0x300000UL)              /*!< PWM_SRC (Bitfield-Mask: 0x03)                         */
#define SYSTEM_PERICLKSEL0_SPIM_SRC_Pos   (18UL)                    /*!< SPIM_SRC (Bit 18)                                     */
#define SYSTEM_PERICLKSEL0_SPIM_SRC_Msk   (0xc0000UL)               /*!< SPIM_SRC (Bitfield-Mask: 0x03)                        */
#define SYSTEM_PERICLKSEL0_SPIS_SRC_Pos   (16UL)                    /*!< SPIS_SRC (Bit 16)                                     */
#define SYSTEM_PERICLKSEL0_SPIS_SRC_Msk   (0x30000UL)               /*!< SPIS_SRC (Bitfield-Mask: 0x03)                        */
#define SYSTEM_PERICLKSEL0_I2C_SRC_Pos    (14UL)                    /*!< I2C_SRC (Bit 14)                                      */
#define SYSTEM_PERICLKSEL0_I2C_SRC_Msk    (0xc000UL)                /*!< I2C_SRC (Bitfield-Mask: 0x03)                         */
#define SYSTEM_PERICLKSEL0_STRIP_Pos      (12UL)                    /*!< STRIP (Bit 12)                                        */
#define SYSTEM_PERICLKSEL0_STRIP_Msk      (0x3000UL)                /*!< STRIP (Bitfield-Mask: 0x03)                           */
#define SYSTEM_PERICLKSEL0_ADC_SRC_Pos    (10UL)                    /*!< ADC_SRC (Bit 10)                                      */
#define SYSTEM_PERICLKSEL0_ADC_SRC_Msk    (0xc00UL)                 /*!< ADC_SRC (Bitfield-Mask: 0x03)                         */
#define SYSTEM_PERICLKSEL0_UART_SRC_Pos   (8UL)                     /*!< UART_SRC (Bit 8)                                      */
#define SYSTEM_PERICLKSEL0_UART_SRC_Msk   (0x300UL)                 /*!< UART_SRC (Bitfield-Mask: 0x03)                        */
#define SYSTEM_PERICLKSEL0_MATRIX_SRC_Pos (6UL)                     /*!< MATRIX_SRC (Bit 6)                                    */
#define SYSTEM_PERICLKSEL0_MATRIX_SRC_Msk (0xc0UL)                  /*!< MATRIX_SRC (Bitfield-Mask: 0x03)                      */
#define SYSTEM_PERICLKSEL0_CRC_SRC_Pos    (4UL)                     /*!< CRC_SRC (Bit 4)                                       */
#define SYSTEM_PERICLKSEL0_CRC_SRC_Msk    (0x30UL)                  /*!< CRC_SRC (Bitfield-Mask: 0x03)                         */
#define SYSTEM_PERICLKSEL0_TMR_SRC_Pos    (2UL)                     /*!< TMR_SRC (Bit 2)                                       */
#define SYSTEM_PERICLKSEL0_TMR_SRC_Msk    (0xcUL)                   /*!< TMR_SRC (Bitfield-Mask: 0x03)                         */
#define SYSTEM_PERICLKSEL0_TACH_SRC_Pos   (0UL)                     /*!< TACH_SRC (Bit 0)                                      */
#define SYSTEM_PERICLKSEL0_TACH_SRC_Msk   (0x3UL)                   /*!< TACH_SRC (Bitfield-Mask: 0x03)                        */
/* ======================================================  PERICLKPWR0  ====================================================== */
#define SYSTEM_PERICLKPWR0_CPU_IP_Pos     (21UL)                    /*!< CPU_IP (Bit 21)                                       */
#define SYSTEM_PERICLKPWR0_CPU_IP_Msk     (0x200000UL)              /*!< CPU_IP (Bitfield-Mask: 0x01)                          */
#define SYSTEM_PERICLKPWR0_DMA_IP_Pos     (20UL)                    /*!< DMA_IP (Bit 20)                                       */
#define SYSTEM_PERICLKPWR0_DMA_IP_Msk     (0x100000UL)              /*!< DMA_IP (Bitfield-Mask: 0x01)                          */
#define SYSTEM_PERICLKPWR0_INTR_SPIC_IP_Pos (19UL)                  /*!< INTR_SPIC_IP (Bit 19)                                 */
#define SYSTEM_PERICLKPWR0_INTR_SPIC_IP_Msk (0x80000UL)             /*!< INTR_SPIC_IP (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWR0_EXTR_SPIC_IP_Pos (18UL)                  /*!< EXTR_SPIC_IP (Bit 18)                                 */
#define SYSTEM_PERICLKPWR0_EXTR_SPIC_IP_Msk (0x40000UL)             /*!< EXTR_SPIC_IP (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWR0_USB_IP_Pos     (17UL)                    /*!< USB_IP (Bit 17)                                       */
#define SYSTEM_PERICLKPWR0_USB_IP_Msk     (0x20000UL)               /*!< USB_IP (Bitfield-Mask: 0x01)                          */
#define SYSTEM_PERICLKPWR0_I3C_IP_Pos     (16UL)                    /*!< I3C_IP (Bit 16)                                       */
#define SYSTEM_PERICLKPWR0_I3C_IP_Msk     (0x10000UL)               /*!< I3C_IP (Bitfield-Mask: 0x01)                          */
#define SYSTEM_PERICLKPWR0_SPIM_IP_Pos    (15UL)                    /*!< SPIM_IP (Bit 15)                                      */
#define SYSTEM_PERICLKPWR0_SPIM_IP_Msk    (0x8000UL)                /*!< SPIM_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR0_SPIS_IP_Pos    (14UL)                    /*!< SPIS_IP (Bit 14)                                      */
#define SYSTEM_PERICLKPWR0_SPIS_IP_Msk    (0x4000UL)                /*!< SPIS_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR0_SWD_IP_Pos     (13UL)                    /*!< SWD_IP (Bit 13)                                       */
#define SYSTEM_PERICLKPWR0_SWD_IP_Msk     (0x2000UL)                /*!< SWD_IP (Bitfield-Mask: 0x01)                          */
#define SYSTEM_PERICLKPWR0_I2CDBG_IP_Pos  (12UL)                    /*!< I2CDBG_IP (Bit 12)                                    */
#define SYSTEM_PERICLKPWR0_I2CDBG_IP_Msk  (0x1000UL)                /*!< I2CDBG_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_I2C2_IP_Pos    (11UL)                    /*!< I2C2_IP (Bit 11)                                      */
#define SYSTEM_PERICLKPWR0_I2C2_IP_Msk    (0x800UL)                 /*!< I2C2_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR0_I2C1_IP_Pos    (10UL)                    /*!< I2C1_IP (Bit 10)                                      */
#define SYSTEM_PERICLKPWR0_I2C1_IP_Msk    (0x400UL)                 /*!< I2C1_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR0_I2C0_IP_Pos    (9UL)                     /*!< I2C0_IP (Bit 9)                                       */
#define SYSTEM_PERICLKPWR0_I2C0_IP_Msk    (0x200UL)                 /*!< I2C0_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR0_STRIP8_IP_Pos  (8UL)                     /*!< STRIP8_IP (Bit 8)                                     */
#define SYSTEM_PERICLKPWR0_STRIP8_IP_Msk  (0x100UL)                 /*!< STRIP8_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_STRIP7_IP_Pos  (7UL)                     /*!< STRIP7_IP (Bit 7)                                     */
#define SYSTEM_PERICLKPWR0_STRIP7_IP_Msk  (0x80UL)                  /*!< STRIP7_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_STRIP6_IP_Pos  (6UL)                     /*!< STRIP6_IP (Bit 6)                                     */
#define SYSTEM_PERICLKPWR0_STRIP6_IP_Msk  (0x40UL)                  /*!< STRIP6_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_STRIP5_IP_Pos  (5UL)                     /*!< STRIP5_IP (Bit 5)                                     */
#define SYSTEM_PERICLKPWR0_STRIP5_IP_Msk  (0x20UL)                  /*!< STRIP5_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_STRIP4_IP_Pos  (4UL)                     /*!< STRIP4_IP (Bit 4)                                     */
#define SYSTEM_PERICLKPWR0_STRIP4_IP_Msk  (0x10UL)                  /*!< STRIP4_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_STRIP3_IP_Pos  (3UL)                     /*!< STRIP3_IP (Bit 3)                                     */
#define SYSTEM_PERICLKPWR0_STRIP3_IP_Msk  (0x8UL)                   /*!< STRIP3_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_STRIP2_IP_Pos  (2UL)                     /*!< STRIP2_IP (Bit 2)                                     */
#define SYSTEM_PERICLKPWR0_STRIP2_IP_Msk  (0x4UL)                   /*!< STRIP2_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_STRIP1_IP_Pos  (1UL)                     /*!< STRIP1_IP (Bit 1)                                     */
#define SYSTEM_PERICLKPWR0_STRIP1_IP_Msk  (0x2UL)                   /*!< STRIP1_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_STRIP0_IP_Pos  (0UL)                     /*!< STRIP0_IP (Bit 0)                                     */
#define SYSTEM_PERICLKPWR0_STRIP0_IP_Msk  (0x1UL)                   /*!< STRIP0_IP (Bitfield-Mask: 0x01)                       */
/* ======================================================  PERICLKPWR1  ====================================================== */
#define SYSTEM_PERICLKPWR1_EFUSE_IP_Pos   (19UL)                    /*!< EFUSE_IP (Bit 19)                                     */
#define SYSTEM_PERICLKPWR1_EFUSE_IP_Msk   (0x80000UL)               /*!< EFUSE_IP (Bitfield-Mask: 0x01)                        */
#define SYSTEM_PERICLKPWR1_MATRIX_IP_Pos  (18UL)                    /*!< MATRIX_IP (Bit 18)                                    */
#define SYSTEM_PERICLKPWR1_MATRIX_IP_Msk  (0x40000UL)               /*!< MATRIX_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR1_CRC_IP_Pos     (17UL)                    /*!< CRC_IP (Bit 17)                                       */
#define SYSTEM_PERICLKPWR1_CRC_IP_Msk     (0x20000UL)               /*!< CRC_IP (Bitfield-Mask: 0x01)                          */
#define SYSTEM_PERICLKPWR1_ADC_IP_Pos     (16UL)                    /*!< ADC_IP (Bit 16)                                       */
#define SYSTEM_PERICLKPWR1_ADC_IP_Msk     (0x10000UL)               /*!< ADC_IP (Bitfield-Mask: 0x01)                          */
#define SYSTEM_PERICLKPWR1_UART_IP_Pos    (15UL)                    /*!< UART_IP (Bit 15)                                      */
#define SYSTEM_PERICLKPWR1_UART_IP_Msk    (0x8000UL)                /*!< UART_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR1_WDT_IP_Pos     (14UL)                    /*!< WDT_IP (Bit 14)                                       */
#define SYSTEM_PERICLKPWR1_WDT_IP_Msk     (0x4000UL)                /*!< WDT_IP (Bitfield-Mask: 0x01)                          */
#define SYSTEM_PERICLKPWR1_GPIO_IP_Pos    (13UL)                    /*!< GPIO_IP (Bit 13)                                      */
#define SYSTEM_PERICLKPWR1_GPIO_IP_Msk    (0x2000UL)                /*!< GPIO_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR1_USB_DPHY_IP_Pos (12UL)                   /*!< USB_DPHY_IP (Bit 12)                                  */
#define SYSTEM_PERICLKPWR1_USB_DPHY_IP_Msk (0x1000UL)               /*!< USB_DPHY_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR1_TMR3_IP_Pos    (11UL)                    /*!< TMR3_IP (Bit 11)                                      */
#define SYSTEM_PERICLKPWR1_TMR3_IP_Msk    (0x800UL)                 /*!< TMR3_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR1_TMR2_IP_Pos    (10UL)                    /*!< TMR2_IP (Bit 10)                                      */
#define SYSTEM_PERICLKPWR1_TMR2_IP_Msk    (0x400UL)                 /*!< TMR2_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR1_TMR1_IP_Pos    (9UL)                     /*!< TMR1_IP (Bit 9)                                       */
#define SYSTEM_PERICLKPWR1_TMR1_IP_Msk    (0x200UL)                 /*!< TMR1_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR1_TMR0_IP_Pos    (8UL)                     /*!< TMR0_IP (Bit 8)                                       */
#define SYSTEM_PERICLKPWR1_TMR0_IP_Msk    (0x100UL)                 /*!< TMR0_IP (Bitfield-Mask: 0x01)                         */
#define SYSTEM_PERICLKPWR1_TACHO3_IP_Pos  (7UL)                     /*!< TACHO3_IP (Bit 7)                                     */
#define SYSTEM_PERICLKPWR1_TACHO3_IP_Msk  (0x80UL)                  /*!< TACHO3_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR1_TACHO2_IP_Pos  (6UL)                     /*!< TACHO2_IP (Bit 6)                                     */
#define SYSTEM_PERICLKPWR1_TACHO2_IP_Msk  (0x40UL)                  /*!< TACHO2_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR1_TACHO1_IP_Pos  (5UL)                     /*!< TACHO1_IP (Bit 5)                                     */
#define SYSTEM_PERICLKPWR1_TACHO1_IP_Msk  (0x20UL)                  /*!< TACHO1_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR1_TACHO0_IP_Pos  (4UL)                     /*!< TACHO0_IP (Bit 4)                                     */
#define SYSTEM_PERICLKPWR1_TACHO0_IP_Msk  (0x10UL)                  /*!< TACHO0_IP (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR1_RC32CAL_IP_Pos (3UL)                     /*!< RC32CAL_IP (Bit 3)                                    */
#define SYSTEM_PERICLKPWR1_RC32CAL_IP_Msk (0x8UL)                   /*!< RC32CAL_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_RC32REF_IP_Pos (2UL)                     /*!< RC32REF_IP (Bit 2)                                    */
#define SYSTEM_PERICLKPWR1_RC32REF_IP_Msk (0x4UL)                   /*!< RC32REF_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_RC24CAL_IP_Pos (1UL)                     /*!< RC24CAL_IP (Bit 1)                                    */
#define SYSTEM_PERICLKPWR1_RC24CAL_IP_Msk (0x2UL)                   /*!< RC24CAL_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_RC24REF_IP_Pos (0UL)                     /*!< RC24REF_IP (Bit 0)                                    */
#define SYSTEM_PERICLKPWR1_RC24REF_IP_Msk (0x1UL)                   /*!< RC24REF_IP (Bitfield-Mask: 0x01)                      */
/* ======================================================  PERICLKPWR2  ====================================================== */
#define SYSTEM_PERICLKPWR2_LEDPWM31_IP_Pos (31UL)                   /*!< LEDPWM31_IP (Bit 31)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM31_IP_Msk (0x80000000UL)           /*!< LEDPWM31_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM30_IP_Pos (30UL)                   /*!< LEDPWM30_IP (Bit 30)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM30_IP_Msk (0x40000000UL)           /*!< LEDPWM30_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM29_IP_Pos (29UL)                   /*!< LEDPWM29_IP (Bit 29)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM29_IP_Msk (0x20000000UL)           /*!< LEDPWM29_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM28_IP_Pos (28UL)                   /*!< LEDPWM28_IP (Bit 28)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM28_IP_Msk (0x10000000UL)           /*!< LEDPWM28_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM27_IP_Pos (27UL)                   /*!< LEDPWM27_IP (Bit 27)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM27_IP_Msk (0x8000000UL)            /*!< LEDPWM27_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM26_IP_Pos (26UL)                   /*!< LEDPWM26_IP (Bit 26)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM26_IP_Msk (0x4000000UL)            /*!< LEDPWM26_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM25_IP_Pos (25UL)                   /*!< LEDPWM25_IP (Bit 25)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM25_IP_Msk (0x2000000UL)            /*!< LEDPWM25_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM24_IP_Pos (24UL)                   /*!< LEDPWM24_IP (Bit 24)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM24_IP_Msk (0x1000000UL)            /*!< LEDPWM24_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM23_IP_Pos (23UL)                   /*!< LEDPWM23_IP (Bit 23)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM23_IP_Msk (0x800000UL)             /*!< LEDPWM23_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM22_IP_Pos (22UL)                   /*!< LEDPWM22_IP (Bit 22)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM22_IP_Msk (0x400000UL)             /*!< LEDPWM22_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM21_IP_Pos (21UL)                   /*!< LEDPWM21_IP (Bit 21)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM21_IP_Msk (0x200000UL)             /*!< LEDPWM21_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM20_IP_Pos (20UL)                   /*!< LEDPWM20_IP (Bit 20)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM20_IP_Msk (0x100000UL)             /*!< LEDPWM20_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM19_IP_Pos (19UL)                   /*!< LEDPWM19_IP (Bit 19)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM19_IP_Msk (0x80000UL)              /*!< LEDPWM19_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM18_IP_Pos (18UL)                   /*!< LEDPWM18_IP (Bit 18)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM18_IP_Msk (0x40000UL)              /*!< LEDPWM18_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM17_IP_Pos (17UL)                   /*!< LEDPWM17_IP (Bit 17)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM17_IP_Msk (0x20000UL)              /*!< LEDPWM17_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM16_IP_Pos (16UL)                   /*!< LEDPWM16_IP (Bit 16)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM16_IP_Msk (0x10000UL)              /*!< LEDPWM16_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM15_IP_Pos (15UL)                   /*!< LEDPWM15_IP (Bit 15)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM15_IP_Msk (0x8000UL)               /*!< LEDPWM15_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM14_IP_Pos (14UL)                   /*!< LEDPWM14_IP (Bit 14)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM14_IP_Msk (0x4000UL)               /*!< LEDPWM14_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM13_IP_Pos (13UL)                   /*!< LEDPWM13_IP (Bit 13)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM13_IP_Msk (0x2000UL)               /*!< LEDPWM13_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM12_IP_Pos (12UL)                   /*!< LEDPWM12_IP (Bit 12)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM12_IP_Msk (0x1000UL)               /*!< LEDPWM12_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM11_IP_Pos (11UL)                   /*!< LEDPWM11_IP (Bit 11)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM11_IP_Msk (0x800UL)                /*!< LEDPWM11_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM10_IP_Pos (10UL)                   /*!< LEDPWM10_IP (Bit 10)                                  */
#define SYSTEM_PERICLKPWR2_LEDPWM10_IP_Msk (0x400UL)                /*!< LEDPWM10_IP (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR2_LEDPWM9_IP_Pos (9UL)                     /*!< LEDPWM9_IP (Bit 9)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM9_IP_Msk (0x200UL)                 /*!< LEDPWM9_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM8_IP_Pos (8UL)                     /*!< LEDPWM8_IP (Bit 8)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM8_IP_Msk (0x100UL)                 /*!< LEDPWM8_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM7_IP_Pos (7UL)                     /*!< LEDPWM7_IP (Bit 7)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM7_IP_Msk (0x80UL)                  /*!< LEDPWM7_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM6_IP_Pos (6UL)                     /*!< LEDPWM6_IP (Bit 6)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM6_IP_Msk (0x40UL)                  /*!< LEDPWM6_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM5_IP_Pos (5UL)                     /*!< LEDPWM5_IP (Bit 5)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM5_IP_Msk (0x20UL)                  /*!< LEDPWM5_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM4_IP_Pos (4UL)                     /*!< LEDPWM4_IP (Bit 4)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM4_IP_Msk (0x10UL)                  /*!< LEDPWM4_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM3_IP_Pos (3UL)                     /*!< LEDPWM3_IP (Bit 3)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM3_IP_Msk (0x8UL)                   /*!< LEDPWM3_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM2_IP_Pos (2UL)                     /*!< LEDPWM2_IP (Bit 2)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM2_IP_Msk (0x4UL)                   /*!< LEDPWM2_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM1_IP_Pos (1UL)                     /*!< LEDPWM1_IP (Bit 1)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM1_IP_Msk (0x2UL)                   /*!< LEDPWM1_IP (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR2_LEDPWM0_IP_Pos (0UL)                     /*!< LEDPWM0_IP (Bit 0)                                    */
#define SYSTEM_PERICLKPWR2_LEDPWM0_IP_Msk (0x1UL)                   /*!< LEDPWM0_IP (Bitfield-Mask: 0x01)                      */
/* ======================================================  APBCLKPWR0  ======================================================= */
#define SYSTEM_APBCLKPWR0_USB_APB_Pos     (29UL)                    /*!< USB_APB (Bit 29)                                      */
#define SYSTEM_APBCLKPWR0_USB_APB_Msk     (0x20000000UL)            /*!< USB_APB (Bitfield-Mask: 0x01)                         */
#define SYSTEM_APBCLKPWR0_MATRIX_APB_Pos  (28UL)                    /*!< MATRIX_APB (Bit 28)                                   */
#define SYSTEM_APBCLKPWR0_MATRIX_APB_Msk  (0x10000000UL)            /*!< MATRIX_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_CRC_APB_Pos     (27UL)                    /*!< CRC_APB (Bit 27)                                      */
#define SYSTEM_APBCLKPWR0_CRC_APB_Msk     (0x8000000UL)             /*!< CRC_APB (Bitfield-Mask: 0x01)                         */
#define SYSTEM_APBCLKPWR0_SPIM_APB_Pos    (26UL)                    /*!< SPIM_APB (Bit 26)                                     */
#define SYSTEM_APBCLKPWR0_SPIM_APB_Msk    (0x4000000UL)             /*!< SPIM_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_SPIS_APB_Pos    (25UL)                    /*!< SPIS_APB (Bit 25)                                     */
#define SYSTEM_APBCLKPWR0_SPIS_APB_Msk    (0x2000000UL)             /*!< SPIS_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_I2CDBG_APB_Pos  (24UL)                    /*!< I2CDBG_APB (Bit 24)                                   */
#define SYSTEM_APBCLKPWR0_I2CDBG_APB_Msk  (0x1000000UL)             /*!< I2CDBG_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_I2C2_APB_Pos    (23UL)                    /*!< I2C2_APB (Bit 23)                                     */
#define SYSTEM_APBCLKPWR0_I2C2_APB_Msk    (0x800000UL)              /*!< I2C2_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_I2C1_APB_Pos    (22UL)                    /*!< I2C1_APB (Bit 22)                                     */
#define SYSTEM_APBCLKPWR0_I2C1_APB_Msk    (0x400000UL)              /*!< I2C1_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_I2C0_APB_Pos    (21UL)                    /*!< I2C0_APB (Bit 21)                                     */
#define SYSTEM_APBCLKPWR0_I2C0_APB_Msk    (0x200000UL)              /*!< I2C0_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_STRIP8_APB_Pos  (20UL)                    /*!< STRIP8_APB (Bit 20)                                   */
#define SYSTEM_APBCLKPWR0_STRIP8_APB_Msk  (0x100000UL)              /*!< STRIP8_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_STRIP7_APB_Pos  (19UL)                    /*!< STRIP7_APB (Bit 19)                                   */
#define SYSTEM_APBCLKPWR0_STRIP7_APB_Msk  (0x80000UL)               /*!< STRIP7_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_STRIP6_APB_Pos  (18UL)                    /*!< STRIP6_APB (Bit 18)                                   */
#define SYSTEM_APBCLKPWR0_STRIP6_APB_Msk  (0x40000UL)               /*!< STRIP6_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_STRIP5_APB_Pos  (17UL)                    /*!< STRIP5_APB (Bit 17)                                   */
#define SYSTEM_APBCLKPWR0_STRIP5_APB_Msk  (0x20000UL)               /*!< STRIP5_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_STRIP4_APB_Pos  (16UL)                    /*!< STRIP4_APB (Bit 16)                                   */
#define SYSTEM_APBCLKPWR0_STRIP4_APB_Msk  (0x10000UL)               /*!< STRIP4_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_STRIP3_APB_Pos  (15UL)                    /*!< STRIP3_APB (Bit 15)                                   */
#define SYSTEM_APBCLKPWR0_STRIP3_APB_Msk  (0x8000UL)                /*!< STRIP3_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_STRIP2_APB_Pos  (14UL)                    /*!< STRIP2_APB (Bit 14)                                   */
#define SYSTEM_APBCLKPWR0_STRIP2_APB_Msk  (0x4000UL)                /*!< STRIP2_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_STRIP1_APB_Pos  (13UL)                    /*!< STRIP1_APB (Bit 13)                                   */
#define SYSTEM_APBCLKPWR0_STRIP1_APB_Msk  (0x2000UL)                /*!< STRIP1_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_STRIP0_APB_Pos  (12UL)                    /*!< STRIP0_APB (Bit 12)                                   */
#define SYSTEM_APBCLKPWR0_STRIP0_APB_Msk  (0x1000UL)                /*!< STRIP0_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_ADC_APB_Pos     (11UL)                    /*!< ADC_APB (Bit 11)                                      */
#define SYSTEM_APBCLKPWR0_ADC_APB_Msk     (0x800UL)                 /*!< ADC_APB (Bitfield-Mask: 0x01)                         */
#define SYSTEM_APBCLKPWR0_UART_APB_Pos    (10UL)                    /*!< UART_APB (Bit 10)                                     */
#define SYSTEM_APBCLKPWR0_UART_APB_Msk    (0x400UL)                 /*!< UART_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_WDT_APB_Pos     (9UL)                     /*!< WDT_APB (Bit 9)                                       */
#define SYSTEM_APBCLKPWR0_WDT_APB_Msk     (0x200UL)                 /*!< WDT_APB (Bitfield-Mask: 0x01)                         */
#define SYSTEM_APBCLKPWR0_GPIO_APB_Pos    (8UL)                     /*!< GPIO_APB (Bit 8)                                      */
#define SYSTEM_APBCLKPWR0_GPIO_APB_Msk    (0x100UL)                 /*!< GPIO_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_TMR3_APB_Pos    (7UL)                     /*!< TMR3_APB (Bit 7)                                      */
#define SYSTEM_APBCLKPWR0_TMR3_APB_Msk    (0x80UL)                  /*!< TMR3_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_TMR2_APB_Pos    (6UL)                     /*!< TMR2_APB (Bit 6)                                      */
#define SYSTEM_APBCLKPWR0_TMR2_APB_Msk    (0x40UL)                  /*!< TMR2_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_TMR1_APB_Pos    (5UL)                     /*!< TMR1_APB (Bit 5)                                      */
#define SYSTEM_APBCLKPWR0_TMR1_APB_Msk    (0x20UL)                  /*!< TMR1_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_TMR0_APB_Pos    (4UL)                     /*!< TMR0_APB (Bit 4)                                      */
#define SYSTEM_APBCLKPWR0_TMR0_APB_Msk    (0x10UL)                  /*!< TMR0_APB (Bitfield-Mask: 0x01)                        */
#define SYSTEM_APBCLKPWR0_TACHO3_APB_Pos  (3UL)                     /*!< TACHO3_APB (Bit 3)                                    */
#define SYSTEM_APBCLKPWR0_TACHO3_APB_Msk  (0x8UL)                   /*!< TACHO3_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_TACHO2_APB_Pos  (2UL)                     /*!< TACHO2_APB (Bit 2)                                    */
#define SYSTEM_APBCLKPWR0_TACHO2_APB_Msk  (0x4UL)                   /*!< TACHO2_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_TACHO1_APB_Pos  (1UL)                     /*!< TACHO1_APB (Bit 1)                                    */
#define SYSTEM_APBCLKPWR0_TACHO1_APB_Msk  (0x2UL)                   /*!< TACHO1_APB (Bitfield-Mask: 0x01)                      */
#define SYSTEM_APBCLKPWR0_TACHO0_APB_Pos  (0UL)                     /*!< TACHO0_APB (Bit 0)                                    */
#define SYSTEM_APBCLKPWR0_TACHO0_APB_Msk  (0x1UL)                   /*!< TACHO0_APB (Bitfield-Mask: 0x01)                      */
/* ======================================================  APBCLKPWR1  ======================================================= */
#define SYSTEM_APBCLKPWR1_LEDPWM31_APB_Pos (31UL)                   /*!< LEDPWM31_APB (Bit 31)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM31_APB_Msk (0x80000000UL)           /*!< LEDPWM31_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM30_APB_Pos (30UL)                   /*!< LEDPWM30_APB (Bit 30)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM30_APB_Msk (0x40000000UL)           /*!< LEDPWM30_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM29_APB_Pos (29UL)                   /*!< LEDPWM29_APB (Bit 29)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM29_APB_Msk (0x20000000UL)           /*!< LEDPWM29_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM28_APB_Pos (28UL)                   /*!< LEDPWM28_APB (Bit 28)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM28_APB_Msk (0x10000000UL)           /*!< LEDPWM28_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM27_APB_Pos (27UL)                   /*!< LEDPWM27_APB (Bit 27)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM27_APB_Msk (0x8000000UL)            /*!< LEDPWM27_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM26_APB_Pos (26UL)                   /*!< LEDPWM26_APB (Bit 26)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM26_APB_Msk (0x4000000UL)            /*!< LEDPWM26_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM25_APB_Pos (25UL)                   /*!< LEDPWM25_APB (Bit 25)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM25_APB_Msk (0x2000000UL)            /*!< LEDPWM25_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM24_APB_Pos (24UL)                   /*!< LEDPWM24_APB (Bit 24)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM24_APB_Msk (0x1000000UL)            /*!< LEDPWM24_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM23_APB_Pos (23UL)                   /*!< LEDPWM23_APB (Bit 23)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM23_APB_Msk (0x800000UL)             /*!< LEDPWM23_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM22_APB_Pos (22UL)                   /*!< LEDPWM22_APB (Bit 22)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM22_APB_Msk (0x400000UL)             /*!< LEDPWM22_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM21_APB_Pos (21UL)                   /*!< LEDPWM21_APB (Bit 21)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM21_APB_Msk (0x200000UL)             /*!< LEDPWM21_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM20_APB_Pos (20UL)                   /*!< LEDPWM20_APB (Bit 20)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM20_APB_Msk (0x100000UL)             /*!< LEDPWM20_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM19_APB_Pos (19UL)                   /*!< LEDPWM19_APB (Bit 19)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM19_APB_Msk (0x80000UL)              /*!< LEDPWM19_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM18_APB_Pos (18UL)                   /*!< LEDPWM18_APB (Bit 18)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM18_APB_Msk (0x40000UL)              /*!< LEDPWM18_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM17_APB_Pos (17UL)                   /*!< LEDPWM17_APB (Bit 17)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM17_APB_Msk (0x20000UL)              /*!< LEDPWM17_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM16_APB_Pos (16UL)                   /*!< LEDPWM16_APB (Bit 16)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM16_APB_Msk (0x10000UL)              /*!< LEDPWM16_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM15_APB_Pos (15UL)                   /*!< LEDPWM15_APB (Bit 15)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM15_APB_Msk (0x8000UL)               /*!< LEDPWM15_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM14_APB_Pos (14UL)                   /*!< LEDPWM14_APB (Bit 14)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM14_APB_Msk (0x4000UL)               /*!< LEDPWM14_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM13_APB_Pos (13UL)                   /*!< LEDPWM13_APB (Bit 13)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM13_APB_Msk (0x2000UL)               /*!< LEDPWM13_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM12_APB_Pos (12UL)                   /*!< LEDPWM12_APB (Bit 12)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM12_APB_Msk (0x1000UL)               /*!< LEDPWM12_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM11_APB_Pos (11UL)                   /*!< LEDPWM11_APB (Bit 11)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM11_APB_Msk (0x800UL)                /*!< LEDPWM11_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM10_APB_Pos (10UL)                   /*!< LEDPWM10_APB (Bit 10)                                 */
#define SYSTEM_APBCLKPWR1_LEDPWM10_APB_Msk (0x400UL)                /*!< LEDPWM10_APB (Bitfield-Mask: 0x01)                    */
#define SYSTEM_APBCLKPWR1_LEDPWM9_APB_Pos (9UL)                     /*!< LEDPWM9_APB (Bit 9)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM9_APB_Msk (0x200UL)                 /*!< LEDPWM9_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM8_APB_Pos (8UL)                     /*!< LEDPWM8_APB (Bit 8)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM8_APB_Msk (0x100UL)                 /*!< LEDPWM8_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM7_APB_Pos (7UL)                     /*!< LEDPWM7_APB (Bit 7)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM7_APB_Msk (0x80UL)                  /*!< LEDPWM7_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM6_APB_Pos (6UL)                     /*!< LEDPWM6_APB (Bit 6)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM6_APB_Msk (0x40UL)                  /*!< LEDPWM6_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM5_APB_Pos (5UL)                     /*!< LEDPWM5_APB (Bit 5)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM5_APB_Msk (0x20UL)                  /*!< LEDPWM5_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM4_APB_Pos (4UL)                     /*!< LEDPWM4_APB (Bit 4)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM4_APB_Msk (0x10UL)                  /*!< LEDPWM4_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM3_APB_Pos (3UL)                     /*!< LEDPWM3_APB (Bit 3)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM3_APB_Msk (0x8UL)                   /*!< LEDPWM3_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM2_APB_Pos (2UL)                     /*!< LEDPWM2_APB (Bit 2)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM2_APB_Msk (0x4UL)                   /*!< LEDPWM2_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM1_APB_Pos (1UL)                     /*!< LEDPWM1_APB (Bit 1)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM1_APB_Msk (0x2UL)                   /*!< LEDPWM1_APB (Bitfield-Mask: 0x01)                     */
#define SYSTEM_APBCLKPWR1_LEDPWM0_APB_Pos (0UL)                     /*!< LEDPWM0_APB (Bit 0)                                   */
#define SYSTEM_APBCLKPWR1_LEDPWM0_APB_Msk (0x1UL)                   /*!< LEDPWM0_APB (Bitfield-Mask: 0x01)                     */
/* ======================================================  PERICLKSEL1  ====================================================== */
#define SYSTEM_PERICLKSEL1_ADC_APB_SRC_Pos (30UL)                   /*!< ADC_APB_SRC (Bit 30)                                  */
#define SYSTEM_PERICLKSEL1_ADC_APB_SRC_Msk (0x40000000UL)           /*!< ADC_APB_SRC (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKSEL1_ADC_IP_SRC_Pos (28UL)                    /*!< ADC_IP_SRC (Bit 28)                                   */
#define SYSTEM_PERICLKSEL1_ADC_IP_SRC_Msk (0x30000000UL)            /*!< ADC_IP_SRC (Bitfield-Mask: 0x03)                      */
#define SYSTEM_PERICLKSEL1_MATRIX_APB_SRC_Pos (26UL)                /*!< MATRIX_APB_SRC (Bit 26)                               */
#define SYSTEM_PERICLKSEL1_MATRIX_APB_SRC_Msk (0x4000000UL)         /*!< MATRIX_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL1_MATRIX_IP_SRC_Pos (24UL)                 /*!< MATRIX_IP_SRC (Bit 24)                                */
#define SYSTEM_PERICLKSEL1_MATRIX_IP_SRC_Msk (0x3000000UL)          /*!< MATRIX_IP_SRC (Bitfield-Mask: 0x03)                   */
#define SYSTEM_PERICLKSEL1_I2C_DBG_APB_SRC_Pos (22UL)               /*!< I2C_DBG_APB_SRC (Bit 22)                              */
#define SYSTEM_PERICLKSEL1_I2C_DBG_APB_SRC_Msk (0x400000UL)         /*!< I2C_DBG_APB_SRC (Bitfield-Mask: 0x01)                 */
#define SYSTEM_PERICLKSEL1_I2C_DBG_IP_SRC_Pos (20UL)                /*!< I2C_DBG_IP_SRC (Bit 20)                               */
#define SYSTEM_PERICLKSEL1_I2C_DBG_IP_SRC_Msk (0x300000UL)          /*!< I2C_DBG_IP_SRC (Bitfield-Mask: 0x03)                  */
#define SYSTEM_PERICLKSEL1_I2C2_APB_SRC_Pos (18UL)                  /*!< I2C2_APB_SRC (Bit 18)                                 */
#define SYSTEM_PERICLKSEL1_I2C2_APB_SRC_Msk (0x40000UL)             /*!< I2C2_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL1_I2C2_IP_SRC_Pos (16UL)                   /*!< I2C2_IP_SRC (Bit 16)                                  */
#define SYSTEM_PERICLKSEL1_I2C2_IP_SRC_Msk (0x30000UL)              /*!< I2C2_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL1_I2C1_APB_SRC_Pos (14UL)                  /*!< I2C1_APB_SRC (Bit 14)                                 */
#define SYSTEM_PERICLKSEL1_I2C1_APB_SRC_Msk (0x4000UL)              /*!< I2C1_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL1_I2C1_IP_SRC_Pos (12UL)                   /*!< I2C1_IP_SRC (Bit 12)                                  */
#define SYSTEM_PERICLKSEL1_I2C1_IP_SRC_Msk (0x3000UL)               /*!< I2C1_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL1_I2C0_APB_SRC_Pos (10UL)                  /*!< I2C0_APB_SRC (Bit 10)                                 */
#define SYSTEM_PERICLKSEL1_I2C0_APB_SRC_Msk (0x400UL)               /*!< I2C0_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL1_I2C0_IP_SRC_Pos (8UL)                    /*!< I2C0_IP_SRC (Bit 8)                                   */
#define SYSTEM_PERICLKSEL1_I2C0_IP_SRC_Msk (0x300UL)                /*!< I2C0_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL1_SPIM_APB_SRC_Pos (6UL)                   /*!< SPIM_APB_SRC (Bit 6)                                  */
#define SYSTEM_PERICLKSEL1_SPIM_APB_SRC_Msk (0x40UL)                /*!< SPIM_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL1_SPIM_IP_SRC_Pos (4UL)                    /*!< SPIM_IP_SRC (Bit 4)                                   */
#define SYSTEM_PERICLKSEL1_SPIM_IP_SRC_Msk (0x30UL)                 /*!< SPIM_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL1_SPIS_APB_SRC_Pos (2UL)                   /*!< SPIS_APB_SRC (Bit 2)                                  */
#define SYSTEM_PERICLKSEL1_SPIS_APB_SRC_Msk (0x4UL)                 /*!< SPIS_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL1_SPIS_IP_SRC_Pos (0UL)                    /*!< SPIS_IP_SRC (Bit 0)                                   */
#define SYSTEM_PERICLKSEL1_SPIS_IP_SRC_Msk (0x3UL)                  /*!< SPIS_IP_SRC (Bitfield-Mask: 0x03)                     */
/* ======================================================  PERICLKSEL2  ====================================================== */
#define SYSTEM_PERICLKSEL2_TMR1_APB_SRC_Pos (30UL)                  /*!< TMR1_APB_SRC (Bit 30)                                 */
#define SYSTEM_PERICLKSEL2_TMR1_APB_SRC_Msk (0x40000000UL)          /*!< TMR1_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL2_TMR1_IP_SRC_Pos (28UL)                   /*!< TMR1_IP_SRC (Bit 28)                                  */
#define SYSTEM_PERICLKSEL2_TMR1_IP_SRC_Msk (0x30000000UL)           /*!< TMR1_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL2_TMR0_APB_SRC_Pos (26UL)                  /*!< TMR0_APB_SRC (Bit 26)                                 */
#define SYSTEM_PERICLKSEL2_TMR0_APB_SRC_Msk (0x4000000UL)           /*!< TMR0_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL2_TMR0_IP_SRC_Pos (24UL)                   /*!< TMR0_IP_SRC (Bit 24)                                  */
#define SYSTEM_PERICLKSEL2_TMR0_IP_SRC_Msk (0x3000000UL)            /*!< TMR0_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL2_CRC_APB_SRC_Pos (22UL)                   /*!< CRC_APB_SRC (Bit 22)                                  */
#define SYSTEM_PERICLKSEL2_CRC_APB_SRC_Msk (0x400000UL)             /*!< CRC_APB_SRC (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKSEL2_CRC_IP_SRC_Pos (20UL)                    /*!< CRC_IP_SRC (Bit 20)                                   */
#define SYSTEM_PERICLKSEL2_CRC_IP_SRC_Msk (0x300000UL)              /*!< CRC_IP_SRC (Bitfield-Mask: 0x03)                      */
#define SYSTEM_PERICLKSEL2_TACHO3_IP_SRC_Pos (19UL)                 /*!< TACHO3_IP_SRC (Bit 19)                                */
#define SYSTEM_PERICLKSEL2_TACHO3_IP_SRC_Msk (0x80000UL)            /*!< TACHO3_IP_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL2_TACHO2_IP_SRC_Pos (18UL)                 /*!< TACHO2_IP_SRC (Bit 18)                                */
#define SYSTEM_PERICLKSEL2_TACHO2_IP_SRC_Msk (0x40000UL)            /*!< TACHO2_IP_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL2_TACHO1_IP_SRC_Pos (17UL)                 /*!< TACHO1_IP_SRC (Bit 17)                                */
#define SYSTEM_PERICLKSEL2_TACHO1_IP_SRC_Msk (0x20000UL)            /*!< TACHO1_IP_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL2_TACHO0_IP_SRC_Pos (16UL)                 /*!< TACHO0_IP_SRC (Bit 16)                                */
#define SYSTEM_PERICLKSEL2_TACHO0_IP_SRC_Msk (0x10000UL)            /*!< TACHO0_IP_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL2_TACHO3_APB_SRC_Pos (15UL)                /*!< TACHO3_APB_SRC (Bit 15)                               */
#define SYSTEM_PERICLKSEL2_TACHO3_APB_SRC_Msk (0x8000UL)            /*!< TACHO3_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL2_TACHO2_APB_SRC_Pos (14UL)                /*!< TACHO2_APB_SRC (Bit 14)                               */
#define SYSTEM_PERICLKSEL2_TACHO2_APB_SRC_Msk (0x4000UL)            /*!< TACHO2_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL2_TACHO1_APB_SRC_Pos (13UL)                /*!< TACHO1_APB_SRC (Bit 13)                               */
#define SYSTEM_PERICLKSEL2_TACHO1_APB_SRC_Msk (0x2000UL)            /*!< TACHO1_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL2_TACHO0_APB_SRC_Pos (12UL)                /*!< TACHO0_APB_SRC (Bit 12)                               */
#define SYSTEM_PERICLKSEL2_TACHO0_APB_SRC_Msk (0x1000UL)            /*!< TACHO0_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL2_EFUSE_IP_SRC_Pos (11UL)                  /*!< EFUSE_IP_SRC (Bit 11)                                 */
#define SYSTEM_PERICLKSEL2_EFUSE_IP_SRC_Msk (0x800UL)               /*!< EFUSE_IP_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL2_GPIO_APB_SRC_Pos (10UL)                  /*!< GPIO_APB_SRC (Bit 10)                                 */
#define SYSTEM_PERICLKSEL2_GPIO_APB_SRC_Msk (0x400UL)               /*!< GPIO_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL2_WDT_APB_SRC_Pos (9UL)                    /*!< WDT_APB_SRC (Bit 9)                                   */
#define SYSTEM_PERICLKSEL2_WDT_APB_SRC_Msk (0x200UL)                /*!< WDT_APB_SRC (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKSEL2_USB_DPHY_SRC_Pos (8UL)                   /*!< USB_DPHY_SRC (Bit 8)                                  */
#define SYSTEM_PERICLKSEL2_USB_DPHY_SRC_Msk (0x100UL)               /*!< USB_DPHY_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL2_I3C_IP_SRC_Pos (6UL)                     /*!< I3C_IP_SRC (Bit 6)                                    */
#define SYSTEM_PERICLKSEL2_I3C_IP_SRC_Msk (0xc0UL)                  /*!< I3C_IP_SRC (Bitfield-Mask: 0x03)                      */
#define SYSTEM_PERICLKSEL2_SWD_IP_SRC_Pos (4UL)                     /*!< SWD_IP_SRC (Bit 4)                                    */
#define SYSTEM_PERICLKSEL2_SWD_IP_SRC_Msk (0x30UL)                  /*!< SWD_IP_SRC (Bitfield-Mask: 0x03)                      */
#define SYSTEM_PERICLKSEL2_EXTR_SPIC_IP_SRC_Pos (3UL)               /*!< EXTR_SPIC_IP_SRC (Bit 3)                              */
#define SYSTEM_PERICLKSEL2_EXTR_SPIC_IP_SRC_Msk (0x8UL)             /*!< EXTR_SPIC_IP_SRC (Bitfield-Mask: 0x01)                */
#define SYSTEM_PERICLKSEL2_INTR_SPIC_IP_SRC_Pos (2UL)               /*!< INTR_SPIC_IP_SRC (Bit 2)                              */
#define SYSTEM_PERICLKSEL2_INTR_SPIC_IP_SRC_Msk (0x4UL)             /*!< INTR_SPIC_IP_SRC (Bitfield-Mask: 0x01)                */
#define SYSTEM_PERICLKSEL2_DMA_IP_SRC_Pos (1UL)                     /*!< DMA_IP_SRC (Bit 1)                                    */
#define SYSTEM_PERICLKSEL2_DMA_IP_SRC_Msk (0x2UL)                   /*!< DMA_IP_SRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKSEL2_CPU_SRC_Pos    (0UL)                     /*!< CPU_SRC (Bit 0)                                       */
#define SYSTEM_PERICLKSEL2_CPU_SRC_Msk    (0x1UL)                   /*!< CPU_SRC (Bitfield-Mask: 0x01)                         */
/* ======================================================  PERICLKSEL3  ====================================================== */
#define SYSTEM_PERICLKSEL3_PWM31_APB_SRC_Pos (31UL)                 /*!< PWM31_APB_SRC (Bit 31)                                */
#define SYSTEM_PERICLKSEL3_PWM31_APB_SRC_Msk (0x80000000UL)         /*!< PWM31_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM30_APB_SRC_Pos (30UL)                 /*!< PWM30_APB_SRC (Bit 30)                                */
#define SYSTEM_PERICLKSEL3_PWM30_APB_SRC_Msk (0x40000000UL)         /*!< PWM30_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM29_APB_SRC_Pos (29UL)                 /*!< PWM29_APB_SRC (Bit 29)                                */
#define SYSTEM_PERICLKSEL3_PWM29_APB_SRC_Msk (0x20000000UL)         /*!< PWM29_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM28_APB_SRC_Pos (28UL)                 /*!< PWM28_APB_SRC (Bit 28)                                */
#define SYSTEM_PERICLKSEL3_PWM28_APB_SRC_Msk (0x10000000UL)         /*!< PWM28_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM27_APB_SRC_Pos (27UL)                 /*!< PWM27_APB_SRC (Bit 27)                                */
#define SYSTEM_PERICLKSEL3_PWM27_APB_SRC_Msk (0x8000000UL)          /*!< PWM27_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM26_APB_SRC_Pos (26UL)                 /*!< PWM26_APB_SRC (Bit 26)                                */
#define SYSTEM_PERICLKSEL3_PWM26_APB_SRC_Msk (0x4000000UL)          /*!< PWM26_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM25_APB_SRC_Pos (25UL)                 /*!< PWM25_APB_SRC (Bit 25)                                */
#define SYSTEM_PERICLKSEL3_PWM25_APB_SRC_Msk (0x2000000UL)          /*!< PWM25_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM24_APB_SRC_Pos (24UL)                 /*!< PWM24_APB_SRC (Bit 24)                                */
#define SYSTEM_PERICLKSEL3_PWM24_APB_SRC_Msk (0x1000000UL)          /*!< PWM24_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM23_APB_SRC_Pos (23UL)                 /*!< PWM23_APB_SRC (Bit 23)                                */
#define SYSTEM_PERICLKSEL3_PWM23_APB_SRC_Msk (0x800000UL)           /*!< PWM23_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM22_APB_SRC_Pos (22UL)                 /*!< PWM22_APB_SRC (Bit 22)                                */
#define SYSTEM_PERICLKSEL3_PWM22_APB_SRC_Msk (0x400000UL)           /*!< PWM22_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM21_APB_SRC_Pos (21UL)                 /*!< PWM21_APB_SRC (Bit 21)                                */
#define SYSTEM_PERICLKSEL3_PWM21_APB_SRC_Msk (0x200000UL)           /*!< PWM21_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM20_APB_SRC_Pos (20UL)                 /*!< PWM20_APB_SRC (Bit 20)                                */
#define SYSTEM_PERICLKSEL3_PWM20_APB_SRC_Msk (0x100000UL)           /*!< PWM20_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM19_APB_SRC_Pos (19UL)                 /*!< PWM19_APB_SRC (Bit 19)                                */
#define SYSTEM_PERICLKSEL3_PWM19_APB_SRC_Msk (0x80000UL)            /*!< PWM19_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM18_APB_SRC_Pos (18UL)                 /*!< PWM18_APB_SRC (Bit 18)                                */
#define SYSTEM_PERICLKSEL3_PWM18_APB_SRC_Msk (0x40000UL)            /*!< PWM18_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM17_APB_SRC_Pos (17UL)                 /*!< PWM17_APB_SRC (Bit 17)                                */
#define SYSTEM_PERICLKSEL3_PWM17_APB_SRC_Msk (0x20000UL)            /*!< PWM17_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM16_APB_SRC_Pos (16UL)                 /*!< PWM16_APB_SRC (Bit 16)                                */
#define SYSTEM_PERICLKSEL3_PWM16_APB_SRC_Msk (0x10000UL)            /*!< PWM16_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM15_APB_SRC_Pos (15UL)                 /*!< PWM15_APB_SRC (Bit 15)                                */
#define SYSTEM_PERICLKSEL3_PWM15_APB_SRC_Msk (0x8000UL)             /*!< PWM15_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM14_APB_SRC_Pos (14UL)                 /*!< PWM14_APB_SRC (Bit 14)                                */
#define SYSTEM_PERICLKSEL3_PWM14_APB_SRC_Msk (0x4000UL)             /*!< PWM14_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM13_APB_SRC_Pos (13UL)                 /*!< PWM13_APB_SRC (Bit 13)                                */
#define SYSTEM_PERICLKSEL3_PWM13_APB_SRC_Msk (0x2000UL)             /*!< PWM13_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM12_APB_SRC_Pos (12UL)                 /*!< PWM12_APB_SRC (Bit 12)                                */
#define SYSTEM_PERICLKSEL3_PWM12_APB_SRC_Msk (0x1000UL)             /*!< PWM12_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM11_APB_SRC_Pos (11UL)                 /*!< PWM11_APB_SRC (Bit 11)                                */
#define SYSTEM_PERICLKSEL3_PWM11_APB_SRC_Msk (0x800UL)              /*!< PWM11_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM10_APB_SRC_Pos (10UL)                 /*!< PWM10_APB_SRC (Bit 10)                                */
#define SYSTEM_PERICLKSEL3_PWM10_APB_SRC_Msk (0x400UL)              /*!< PWM10_APB_SRC (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKSEL3_PWM9_APB_SRC_Pos (9UL)                   /*!< PWM9_APB_SRC (Bit 9)                                  */
#define SYSTEM_PERICLKSEL3_PWM9_APB_SRC_Msk (0x200UL)               /*!< PWM9_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM8_APB_SRC_Pos (8UL)                   /*!< PWM8_APB_SRC (Bit 8)                                  */
#define SYSTEM_PERICLKSEL3_PWM8_APB_SRC_Msk (0x100UL)               /*!< PWM8_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM7_APB_SRC_Pos (7UL)                   /*!< PWM7_APB_SRC (Bit 7)                                  */
#define SYSTEM_PERICLKSEL3_PWM7_APB_SRC_Msk (0x80UL)                /*!< PWM7_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM6_APB_SRC_Pos (6UL)                   /*!< PWM6_APB_SRC (Bit 6)                                  */
#define SYSTEM_PERICLKSEL3_PWM6_APB_SRC_Msk (0x40UL)                /*!< PWM6_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM5_APB_SRC_Pos (5UL)                   /*!< PWM5_APB_SRC (Bit 5)                                  */
#define SYSTEM_PERICLKSEL3_PWM5_APB_SRC_Msk (0x20UL)                /*!< PWM5_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM4_APB_SRC_Pos (4UL)                   /*!< PWM4_APB_SRC (Bit 4)                                  */
#define SYSTEM_PERICLKSEL3_PWM4_APB_SRC_Msk (0x10UL)                /*!< PWM4_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM3_APB_SRC_Pos (3UL)                   /*!< PWM3_APB_SRC (Bit 3)                                  */
#define SYSTEM_PERICLKSEL3_PWM3_APB_SRC_Msk (0x8UL)                 /*!< PWM3_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM2_APB_SRC_Pos (2UL)                   /*!< PWM2_APB_SRC (Bit 2)                                  */
#define SYSTEM_PERICLKSEL3_PWM2_APB_SRC_Msk (0x4UL)                 /*!< PWM2_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM1_APB_SRC_Pos (1UL)                   /*!< PWM1_APB_SRC (Bit 1)                                  */
#define SYSTEM_PERICLKSEL3_PWM1_APB_SRC_Msk (0x2UL)                 /*!< PWM1_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL3_PWM0_APB_SRC_Pos (0UL)                   /*!< PWM0_APB_SRC (Bit 0)                                  */
#define SYSTEM_PERICLKSEL3_PWM0_APB_SRC_Msk (0x1UL)                 /*!< PWM0_APB_SRC (Bitfield-Mask: 0x01)                    */
/* ======================================================  PERICLKSEL4  ====================================================== */
#define SYSTEM_PERICLKSEL4_USB_APB_SRC_Pos (28UL)                   /*!< USB_APB_SRC (Bit 28)                                  */
#define SYSTEM_PERICLKSEL4_USB_APB_SRC_Msk (0x10000000UL)           /*!< USB_APB_SRC (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKSEL4_TMR3_APB_SRC_Pos (26UL)                  /*!< TMR3_APB_SRC (Bit 26)                                 */
#define SYSTEM_PERICLKSEL4_TMR3_APB_SRC_Msk (0x4000000UL)           /*!< TMR3_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL4_TMR3_IP_SRC_Pos (24UL)                   /*!< TMR3_IP_SRC (Bit 24)                                  */
#define SYSTEM_PERICLKSEL4_TMR3_IP_SRC_Msk (0x3000000UL)            /*!< TMR3_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL4_TMR2_APB_SRC_Pos (22UL)                  /*!< TMR2_APB_SRC (Bit 22)                                 */
#define SYSTEM_PERICLKSEL4_TMR2_APB_SRC_Msk (0x400000UL)            /*!< TMR2_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL4_TMR2_IP_SRC_Pos (20UL)                   /*!< TMR2_IP_SRC (Bit 20)                                  */
#define SYSTEM_PERICLKSEL4_TMR2_IP_SRC_Msk (0x300000UL)             /*!< TMR2_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL4_UART_APB_SRC_Pos (18UL)                  /*!< UART_APB_SRC (Bit 18)                                 */
#define SYSTEM_PERICLKSEL4_UART_APB_SRC_Msk (0x40000UL)             /*!< UART_APB_SRC (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKSEL4_UART_IP_SRC_Pos (16UL)                   /*!< UART_IP_SRC (Bit 16)                                  */
#define SYSTEM_PERICLKSEL4_UART_IP_SRC_Msk (0x30000UL)              /*!< UART_IP_SRC (Bitfield-Mask: 0x03)                     */
#define SYSTEM_PERICLKSEL4_STRIP8_APB_SRC_Pos (14UL)                /*!< STRIP8_APB_SRC (Bit 14)                               */
#define SYSTEM_PERICLKSEL4_STRIP8_APB_SRC_Msk (0x4000UL)            /*!< STRIP8_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL4_STRIP8_IP_SRC_Pos (12UL)                 /*!< STRIP8_IP_SRC (Bit 12)                                */
#define SYSTEM_PERICLKSEL4_STRIP8_IP_SRC_Msk (0x3000UL)             /*!< STRIP8_IP_SRC (Bitfield-Mask: 0x03)                   */
#define SYSTEM_PERICLKSEL4_STRIP7_APB_SRC_Pos (10UL)                /*!< STRIP7_APB_SRC (Bit 10)                               */
#define SYSTEM_PERICLKSEL4_STRIP7_APB_SRC_Msk (0x400UL)             /*!< STRIP7_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL4_STRIP7_IP_SRC_Pos (8UL)                  /*!< STRIP7_IP_SRC (Bit 8)                                 */
#define SYSTEM_PERICLKSEL4_STRIP7_IP_SRC_Msk (0x300UL)              /*!< STRIP7_IP_SRC (Bitfield-Mask: 0x03)                   */
#define SYSTEM_PERICLKSEL4_STRIP6_APB_SRC_Pos (6UL)                 /*!< STRIP6_APB_SRC (Bit 6)                                */
#define SYSTEM_PERICLKSEL4_STRIP6_APB_SRC_Msk (0x40UL)              /*!< STRIP6_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL4_STRIP6_IP_SRC_Pos (4UL)                  /*!< STRIP6_IP_SRC (Bit 4)                                 */
#define SYSTEM_PERICLKSEL4_STRIP6_IP_SRC_Msk (0x30UL)               /*!< STRIP6_IP_SRC (Bitfield-Mask: 0x03)                   */
#define SYSTEM_PERICLKSEL4_STRIP5_APB_SRC_Pos (2UL)                 /*!< STRIP5_APB_SRC (Bit 2)                                */
#define SYSTEM_PERICLKSEL4_STRIP5_APB_SRC_Msk (0x4UL)               /*!< STRIP5_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL4_STRIP5_IP_SRC_Pos (0UL)                  /*!< STRIP5_IP_SRC (Bit 0)                                 */
#define SYSTEM_PERICLKSEL4_STRIP5_IP_SRC_Msk (0x3UL)                /*!< STRIP5_IP_SRC (Bitfield-Mask: 0x03)                   */
/* ======================================================  PERICLKSEL5  ====================================================== */
#define SYSTEM_PERICLKSEL5_STRIP4_APB_SRC_Pos (18UL)                /*!< STRIP4_APB_SRC (Bit 18)                               */
#define SYSTEM_PERICLKSEL5_STRIP4_APB_SRC_Msk (0x40000UL)           /*!< STRIP4_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL5_STRIP4_IP_SRC_Pos (16UL)                 /*!< STRIP4_IP_SRC (Bit 16)                                */
#define SYSTEM_PERICLKSEL5_STRIP4_IP_SRC_Msk (0x30000UL)            /*!< STRIP4_IP_SRC (Bitfield-Mask: 0x03)                   */
#define SYSTEM_PERICLKSEL5_STRIP3_APB_SRC_Pos (14UL)                /*!< STRIP3_APB_SRC (Bit 14)                               */
#define SYSTEM_PERICLKSEL5_STRIP3_APB_SRC_Msk (0x4000UL)            /*!< STRIP3_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL5_STRIP3_IP_SRC_Pos (12UL)                 /*!< STRIP3_IP_SRC (Bit 12)                                */
#define SYSTEM_PERICLKSEL5_STRIP3_IP_SRC_Msk (0x3000UL)             /*!< STRIP3_IP_SRC (Bitfield-Mask: 0x03)                   */
#define SYSTEM_PERICLKSEL5_STRIP2_APB_SRC_Pos (10UL)                /*!< STRIP2_APB_SRC (Bit 10)                               */
#define SYSTEM_PERICLKSEL5_STRIP2_APB_SRC_Msk (0x400UL)             /*!< STRIP2_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL5_STRIP2_IP_SRC_Pos (8UL)                  /*!< STRIP2_IP_SRC (Bit 8)                                 */
#define SYSTEM_PERICLKSEL5_STRIP2_IP_SRC_Msk (0x300UL)              /*!< STRIP2_IP_SRC (Bitfield-Mask: 0x03)                   */
#define SYSTEM_PERICLKSEL5_STRIP1_APB_SRC_Pos (6UL)                 /*!< STRIP1_APB_SRC (Bit 6)                                */
#define SYSTEM_PERICLKSEL5_STRIP1_APB_SRC_Msk (0x40UL)              /*!< STRIP1_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL5_STRIP1_IP_SRC_Pos (4UL)                  /*!< STRIP1_IP_SRC (Bit 4)                                 */
#define SYSTEM_PERICLKSEL5_STRIP1_IP_SRC_Msk (0x30UL)               /*!< STRIP1_IP_SRC (Bitfield-Mask: 0x03)                   */
#define SYSTEM_PERICLKSEL5_STRIP0_APB_SRC_Pos (2UL)                 /*!< STRIP0_APB_SRC (Bit 2)                                */
#define SYSTEM_PERICLKSEL5_STRIP0_APB_SRC_Msk (0x4UL)               /*!< STRIP0_APB_SRC (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKSEL5_STRIP0_IP_SRC_Pos (0UL)                  /*!< STRIP0_IP_SRC (Bit 0)                                 */
#define SYSTEM_PERICLKSEL5_STRIP0_IP_SRC_Msk (0x3UL)                /*!< STRIP0_IP_SRC (Bitfield-Mask: 0x03)                   */
/* =======================================================  PERIRST0  ======================================================== */
/* =======================================================  PERIRST1  ======================================================== */
/* =======================================================  PERIRST2  ======================================================== */
/* =======================================================  PERIRST3  ======================================================== */
/* =======================================================  PERIRST4  ======================================================== */
/* =======================================================  PERIRST5  ======================================================== */
/* =======================================================  PERIRST6  ======================================================== */
/* =======================================================  PERIRST7  ======================================================== */
/* =======================================================  PERIRST8  ======================================================== */
/* =====================================================  CPUINITADDR0  ====================================================== */
/* =====================================================  CPUINITADDR1  ====================================================== */
/* =======================================================  SLEEPCTRL  ======================================================= */
/* ======================================================  ADCCLKCTRL  ======================================================= */
/* ========================================================  USBCTRL  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           RCCAL                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CTRLR0  ========================================================= */
/* ======================================================  RC25RESULT  ======================================================= */
/* ======================================================  RC32RESULT  ======================================================= */
/* ========================================================  RCDIFF  ========================================================= */
/* =======================================================  RC25CTRL  ======================================================== */
/* =======================================================  RC32CTRL  ======================================================== */


/* =========================================================================================================================== */
/* ================                                          DW_SPI                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CTRLR0  ========================================================= */
#define DW_SPI_CTRLR0_DFS_Pos             (0UL)                     /*!< DFS (Bit 0)                                           */
#define DW_SPI_CTRLR0_DFS_Msk             (0xfUL)                   /*!< DFS (Bitfield-Mask: 0x0f)                             */
#define DW_SPI_CTRLR0_SCPH_Pos            (6UL)                     /*!< SCPH (Bit 6)                                          */
#define DW_SPI_CTRLR0_SCPH_Msk            (0x40UL)                  /*!< SCPH (Bitfield-Mask: 0x01)                            */
#define DW_SPI_CTRLR0_SCP_Pos             (7UL)                     /*!< SCP (Bit 7)                                           */
#define DW_SPI_CTRLR0_SCP_Msk             (0x80UL)                  /*!< SCP (Bitfield-Mask: 0x01)                             */
#define DW_SPI_CTRLR0_TM_Pos              (8UL)                     /*!< TM (Bit 8)                                            */
#define DW_SPI_CTRLR0_TM_Msk              (0x300UL)                 /*!< TM (Bitfield-Mask: 0x03)                              */
#define DW_SPI_CTRLR0_SLV_OE_Pos          (10UL)                    /*!< SLV_OE (Bit 10)                                       */
#define DW_SPI_CTRLR0_SLV_OE_Msk          (0x400UL)                 /*!< SLV_OE (Bitfield-Mask: 0x01)                          */
#define DW_SPI_CTRLR0_SRL_Pos             (11UL)                    /*!< SRL (Bit 11)                                          */
#define DW_SPI_CTRLR0_SRL_Msk             (0x800UL)                 /*!< SRL (Bitfield-Mask: 0x01)                             */
#define DW_SPI_CTRLR0_CFS_Pos             (12UL)                    /*!< CFS (Bit 12)                                          */
#define DW_SPI_CTRLR0_CFS_Msk             (0xf000UL)                /*!< CFS (Bitfield-Mask: 0x0f)                             */
#define DW_SPI_CTRLR0_DFS_32_Pos          (16UL)                    /*!< DFS_32 (Bit 16)                                       */
#define DW_SPI_CTRLR0_DFS_32_Msk          (0x1f0000UL)              /*!< DFS_32 (Bitfield-Mask: 0x1f)                          */
#define DW_SPI_CTRLR0_SPI_FRF_Pos         (21UL)                    /*!< SPI_FRF (Bit 21)                                      */
#define DW_SPI_CTRLR0_SPI_FRF_Msk         (0x600000UL)              /*!< SPI_FRF (Bitfield-Mask: 0x03)                         */
/* ========================================================  CTRLR1  ========================================================= */
#define DW_SPI_CTRLR1_NDF_Pos             (0UL)                     /*!< NDF (Bit 0)                                           */
#define DW_SPI_CTRLR1_NDF_Msk             (0xffffUL)                /*!< NDF (Bitfield-Mask: 0xffff)                           */
/* ========================================================  SSIENR  ========================================================= */
#define DW_SPI_SSIENR_SSI_EN_Pos          (0UL)                     /*!< SSI_EN (Bit 0)                                        */
#define DW_SPI_SSIENR_SSI_EN_Msk          (0x1UL)                   /*!< SSI_EN (Bitfield-Mask: 0x01)                          */
/* =========================================================  MWCR  ========================================================== */
#define DW_SPI_MWCR_MHS_Pos               (2UL)                     /*!< MHS (Bit 2)                                           */
#define DW_SPI_MWCR_MHS_Msk               (0x4UL)                   /*!< MHS (Bitfield-Mask: 0x01)                             */
#define DW_SPI_MWCR_MDD_Pos               (1UL)                     /*!< MDD (Bit 1)                                           */
#define DW_SPI_MWCR_MDD_Msk               (0x2UL)                   /*!< MDD (Bitfield-Mask: 0x01)                             */
#define DW_SPI_MWCR_MWMOD_Pos             (0UL)                     /*!< MWMOD (Bit 0)                                         */
#define DW_SPI_MWCR_MWMOD_Msk             (0x1UL)                   /*!< MWMOD (Bitfield-Mask: 0x01)                           */
/* ==========================================================  SER  ========================================================== */
/* =========================================================  BAUDR  ========================================================= */
#define DW_SPI_BAUDR_SCKDV_Pos            (0UL)                     /*!< SCKDV (Bit 0)                                         */
#define DW_SPI_BAUDR_SCKDV_Msk            (0xffffUL)                /*!< SCKDV (Bitfield-Mask: 0xffff)                         */
/* ========================================================  TXFTLR  ========================================================= */
/* ========================================================  RXFTLR  ========================================================= */
/* =========================================================  TXFLR  ========================================================= */
/* =========================================================  RXFLR  ========================================================= */
/* ==========================================================  SR  =========================================================== */
#define DW_SPI_SR_DCOL_Pos                (6UL)                     /*!< DCOL (Bit 6)                                          */
#define DW_SPI_SR_DCOL_Msk                (0x40UL)                  /*!< DCOL (Bitfield-Mask: 0x01)                            */
#define DW_SPI_SR_TXE_Pos                 (5UL)                     /*!< TXE (Bit 5)                                           */
#define DW_SPI_SR_TXE_Msk                 (0x20UL)                  /*!< TXE (Bitfield-Mask: 0x01)                             */
#define DW_SPI_SR_RFF_Pos                 (4UL)                     /*!< RFF (Bit 4)                                           */
#define DW_SPI_SR_RFF_Msk                 (0x10UL)                  /*!< RFF (Bitfield-Mask: 0x01)                             */
#define DW_SPI_SR_RFNE_Pos                (3UL)                     /*!< RFNE (Bit 3)                                          */
#define DW_SPI_SR_RFNE_Msk                (0x8UL)                   /*!< RFNE (Bitfield-Mask: 0x01)                            */
#define DW_SPI_SR_TFE_Pos                 (2UL)                     /*!< TFE (Bit 2)                                           */
#define DW_SPI_SR_TFE_Msk                 (0x4UL)                   /*!< TFE (Bitfield-Mask: 0x01)                             */
#define DW_SPI_SR_TFNF_Pos                (1UL)                     /*!< TFNF (Bit 1)                                          */
#define DW_SPI_SR_TFNF_Msk                (0x2UL)                   /*!< TFNF (Bitfield-Mask: 0x01)                            */
#define DW_SPI_SR_BUSY_Pos                (0UL)                     /*!< BUSY (Bit 0)                                          */
#define DW_SPI_SR_BUSY_Msk                (0x1UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
/* ==========================================================  IMR  ========================================================== */
#define DW_SPI_IMR_MSTIM_Pos              (5UL)                     /*!< MSTIM (Bit 5)                                         */
#define DW_SPI_IMR_MSTIM_Msk              (0x20UL)                  /*!< MSTIM (Bitfield-Mask: 0x01)                           */
#define DW_SPI_IMR_RXFIM_Pos              (4UL)                     /*!< RXFIM (Bit 4)                                         */
#define DW_SPI_IMR_RXFIM_Msk              (0x10UL)                  /*!< RXFIM (Bitfield-Mask: 0x01)                           */
#define DW_SPI_IMR_RXOIM_Pos              (3UL)                     /*!< RXOIM (Bit 3)                                         */
#define DW_SPI_IMR_RXOIM_Msk              (0x8UL)                   /*!< RXOIM (Bitfield-Mask: 0x01)                           */
#define DW_SPI_IMR_RXUIM_Pos              (2UL)                     /*!< RXUIM (Bit 2)                                         */
#define DW_SPI_IMR_RXUIM_Msk              (0x4UL)                   /*!< RXUIM (Bitfield-Mask: 0x01)                           */
#define DW_SPI_IMR_TXOIM_Pos              (1UL)                     /*!< TXOIM (Bit 1)                                         */
#define DW_SPI_IMR_TXOIM_Msk              (0x2UL)                   /*!< TXOIM (Bitfield-Mask: 0x01)                           */
#define DW_SPI_IMR_TXEIM_Pos              (0UL)                     /*!< TXEIM (Bit 0)                                         */
#define DW_SPI_IMR_TXEIM_Msk              (0x1UL)                   /*!< TXEIM (Bitfield-Mask: 0x01)                           */
/* ==========================================================  ISR  ========================================================== */
#define DW_SPI_ISR_MSTIS_Pos              (5UL)                     /*!< MSTIS (Bit 5)                                         */
#define DW_SPI_ISR_MSTIS_Msk              (0x20UL)                  /*!< MSTIS (Bitfield-Mask: 0x01)                           */
#define DW_SPI_ISR_RXFIS_Pos              (4UL)                     /*!< RXFIS (Bit 4)                                         */
#define DW_SPI_ISR_RXFIS_Msk              (0x10UL)                  /*!< RXFIS (Bitfield-Mask: 0x01)                           */
#define DW_SPI_ISR_RXOIS_Pos              (3UL)                     /*!< RXOIS (Bit 3)                                         */
#define DW_SPI_ISR_RXOIS_Msk              (0x8UL)                   /*!< RXOIS (Bitfield-Mask: 0x01)                           */
#define DW_SPI_ISR_RXUIS_Pos              (2UL)                     /*!< RXUIS (Bit 2)                                         */
#define DW_SPI_ISR_RXUIS_Msk              (0x4UL)                   /*!< RXUIS (Bitfield-Mask: 0x01)                           */
#define DW_SPI_ISR_TXOIS_Pos              (1UL)                     /*!< TXOIS (Bit 1)                                         */
#define DW_SPI_ISR_TXOIS_Msk              (0x2UL)                   /*!< TXOIS (Bitfield-Mask: 0x01)                           */
#define DW_SPI_ISR_TXEIS_Pos              (0UL)                     /*!< TXEIS (Bit 0)                                         */
#define DW_SPI_ISR_TXEIS_Msk              (0x1UL)                   /*!< TXEIS (Bitfield-Mask: 0x01)                           */
/* =========================================================  RISR  ========================================================== */
#define DW_SPI_RISR_MSTIR_Pos             (5UL)                     /*!< MSTIR (Bit 5)                                         */
#define DW_SPI_RISR_MSTIR_Msk             (0x20UL)                  /*!< MSTIR (Bitfield-Mask: 0x01)                           */
#define DW_SPI_RISR_RXFIR_Pos             (4UL)                     /*!< RXFIR (Bit 4)                                         */
#define DW_SPI_RISR_RXFIR_Msk             (0x10UL)                  /*!< RXFIR (Bitfield-Mask: 0x01)                           */
#define DW_SPI_RISR_RXOIR_Pos             (3UL)                     /*!< RXOIR (Bit 3)                                         */
#define DW_SPI_RISR_RXOIR_Msk             (0x8UL)                   /*!< RXOIR (Bitfield-Mask: 0x01)                           */
#define DW_SPI_RISR_RXUIR_Pos             (2UL)                     /*!< RXUIR (Bit 2)                                         */
#define DW_SPI_RISR_RXUIR_Msk             (0x4UL)                   /*!< RXUIR (Bitfield-Mask: 0x01)                           */
#define DW_SPI_RISR_TXOIR_Pos             (1UL)                     /*!< TXOIR (Bit 1)                                         */
#define DW_SPI_RISR_TXOIR_Msk             (0x2UL)                   /*!< TXOIR (Bitfield-Mask: 0x01)                           */
#define DW_SPI_RISR_TXEIR_Pos             (0UL)                     /*!< TXEIR (Bit 0)                                         */
#define DW_SPI_RISR_TXEIR_Msk             (0x1UL)                   /*!< TXEIR (Bitfield-Mask: 0x01)                           */
/* ========================================================  TXOICR  ========================================================= */
/* ========================================================  RXOICR  ========================================================= */
/* ========================================================  RXUICR  ========================================================= */
/* ========================================================  MSTICR  ========================================================= */
/* ==========================================================  ICR  ========================================================== */
/* =========================================================  DMACR  ========================================================= */
#define DW_SPI_DMACR_TDMAE_Pos            (1UL)                     /*!< TDMAE (Bit 1)                                         */
#define DW_SPI_DMACR_TDMAE_Msk            (0x2UL)                   /*!< TDMAE (Bitfield-Mask: 0x01)                           */
#define DW_SPI_DMACR_RDMAE_Pos            (0UL)                     /*!< RDMAE (Bit 0)                                         */
#define DW_SPI_DMACR_RDMAE_Msk            (0x1UL)                   /*!< RDMAE (Bitfield-Mask: 0x01)                           */
/* ========================================================  DMATDLR  ======================================================== */
/* ========================================================  DMARDLR  ======================================================== */
/* ==========================================================  IDR  ========================================================== */
/* ====================================================  SSI_VERSION_ID  ===================================================== */
/* ==========================================================  DR  =========================================================== */
/* =====================================================  RX_SAMPLE_DLY  ===================================================== */
/* ======================================================  SPI_CTRLR0  ======================================================= */
#define DW_SPI_SPI_CTRLR0_SPI_RXDS_EN_Pos (18UL)                    /*!< SPI_RXDS_EN (Bit 18)                                  */
#define DW_SPI_SPI_CTRLR0_SPI_RXDS_EN_Msk (0x40000UL)               /*!< SPI_RXDS_EN (Bitfield-Mask: 0x01)                     */
#define DW_SPI_SPI_CTRLR0_INST_DDR_EN_Pos (17UL)                    /*!< INST_DDR_EN (Bit 17)                                  */
#define DW_SPI_SPI_CTRLR0_INST_DDR_EN_Msk (0x20000UL)               /*!< INST_DDR_EN (Bitfield-Mask: 0x01)                     */
#define DW_SPI_SPI_CTRLR0_SPI_DDR_EN_Pos  (16UL)                    /*!< SPI_DDR_EN (Bit 16)                                   */
#define DW_SPI_SPI_CTRLR0_SPI_DDR_EN_Msk  (0x10000UL)               /*!< SPI_DDR_EN (Bitfield-Mask: 0x01)                      */
#define DW_SPI_SPI_CTRLR0_WAIT_CYCLES_Pos (11UL)                    /*!< WAIT_CYCLES (Bit 11)                                  */
#define DW_SPI_SPI_CTRLR0_WAIT_CYCLES_Msk (0xf800UL)                /*!< WAIT_CYCLES (Bitfield-Mask: 0x1f)                     */
#define DW_SPI_SPI_CTRLR0_INST_L_Pos      (8UL)                     /*!< INST_L (Bit 8)                                        */
#define DW_SPI_SPI_CTRLR0_INST_L_Msk      (0x300UL)                 /*!< INST_L (Bitfield-Mask: 0x03)                          */
#define DW_SPI_SPI_CTRLR0_ADDR_L_Pos      (2UL)                     /*!< ADDR_L (Bit 2)                                        */
#define DW_SPI_SPI_CTRLR0_ADDR_L_Msk      (0x3cUL)                  /*!< ADDR_L (Bitfield-Mask: 0x0f)                          */
#define DW_SPI_SPI_CTRLR0_TRANS_TYPE_Pos  (0UL)                     /*!< TRANS_TYPE (Bit 0)                                    */
#define DW_SPI_SPI_CTRLR0_TRANS_TYPE_Msk  (0x3UL)                   /*!< TRANS_TYPE (Bitfield-Mask: 0x03)                      */
/* ====================================================  TXD_DRIVE_EDGE  ===================================================== */


/* =========================================================================================================================== */
/* ================                                          DW_UART                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
/* ==========================================================  THR  ========================================================== */
/* ==========================================================  DLL  ========================================================== */
/* ==========================================================  DLH  ========================================================== */
/* ==========================================================  IER  ========================================================== */
#define DW_UART_IER_ERBFI_Pos             (0UL)                     /*!< ERBFI (Bit 0)                                         */
#define DW_UART_IER_ERBFI_Msk             (0x1UL)                   /*!< ERBFI (Bitfield-Mask: 0x01)                           */
#define DW_UART_IER_ETBEI_Pos             (1UL)                     /*!< ETBEI (Bit 1)                                         */
#define DW_UART_IER_ETBEI_Msk             (0x2UL)                   /*!< ETBEI (Bitfield-Mask: 0x01)                           */
#define DW_UART_IER_ELSI_Pos              (2UL)                     /*!< ELSI (Bit 2)                                          */
#define DW_UART_IER_ELSI_Msk              (0x4UL)                   /*!< ELSI (Bitfield-Mask: 0x01)                            */
#define DW_UART_IER_EDSSI_Pos             (3UL)                     /*!< EDSSI (Bit 3)                                         */
#define DW_UART_IER_EDSSI_Msk             (0x8UL)                   /*!< EDSSI (Bitfield-Mask: 0x01)                           */
#define DW_UART_IER_PTIME_Pos             (7UL)                     /*!< PTIME (Bit 7)                                         */
#define DW_UART_IER_PTIME_Msk             (0x80UL)                  /*!< PTIME (Bitfield-Mask: 0x01)                           */
/* ==========================================================  IIR  ========================================================== */
#define DW_UART_IIR_IID_Pos               (0UL)                     /*!< IID (Bit 0)                                           */
#define DW_UART_IIR_IID_Msk               (0xfUL)                   /*!< IID (Bitfield-Mask: 0x0f)                             */
#define DW_UART_IIR_FIFOSE_Pos            (6UL)                     /*!< FIFOSE (Bit 6)                                        */
#define DW_UART_IIR_FIFOSE_Msk            (0xc0UL)                  /*!< FIFOSE (Bitfield-Mask: 0x03)                          */
/* ==========================================================  FCR  ========================================================== */
#define DW_UART_FCR_FIFOE_Pos             (0UL)                     /*!< FIFOE (Bit 0)                                         */
#define DW_UART_FCR_FIFOE_Msk             (0x1UL)                   /*!< FIFOE (Bitfield-Mask: 0x01)                           */
#define DW_UART_FCR_RFIFOR_Pos            (1UL)                     /*!< RFIFOR (Bit 1)                                        */
#define DW_UART_FCR_RFIFOR_Msk            (0x2UL)                   /*!< RFIFOR (Bitfield-Mask: 0x01)                          */
#define DW_UART_FCR_XFIFOR_Pos            (2UL)                     /*!< XFIFOR (Bit 2)                                        */
#define DW_UART_FCR_XFIFOR_Msk            (0x4UL)                   /*!< XFIFOR (Bitfield-Mask: 0x01)                          */
#define DW_UART_FCR_DMAM_Pos              (3UL)                     /*!< DMAM (Bit 3)                                          */
#define DW_UART_FCR_DMAM_Msk              (0x8UL)                   /*!< DMAM (Bitfield-Mask: 0x01)                            */
#define DW_UART_FCR_TET_Pos               (4UL)                     /*!< TET (Bit 4)                                           */
#define DW_UART_FCR_TET_Msk               (0x30UL)                  /*!< TET (Bitfield-Mask: 0x03)                             */
#define DW_UART_FCR_RCVR_Pos              (6UL)                     /*!< RCVR (Bit 6)                                          */
#define DW_UART_FCR_RCVR_Msk              (0xc0UL)                  /*!< RCVR (Bitfield-Mask: 0x03)                            */
/* ==========================================================  LCR  ========================================================== */
#define DW_UART_LCR_DLS_Pos               (0UL)                     /*!< DLS (Bit 0)                                           */
#define DW_UART_LCR_DLS_Msk               (0x3UL)                   /*!< DLS (Bitfield-Mask: 0x03)                             */
#define DW_UART_LCR_STOP_Pos              (2UL)                     /*!< STOP (Bit 2)                                          */
#define DW_UART_LCR_STOP_Msk              (0x4UL)                   /*!< STOP (Bitfield-Mask: 0x01)                            */
#define DW_UART_LCR_PEN_Pos               (3UL)                     /*!< PEN (Bit 3)                                           */
#define DW_UART_LCR_PEN_Msk               (0x8UL)                   /*!< PEN (Bitfield-Mask: 0x01)                             */
#define DW_UART_LCR_EPS_Pos               (4UL)                     /*!< EPS (Bit 4)                                           */
#define DW_UART_LCR_EPS_Msk               (0x10UL)                  /*!< EPS (Bitfield-Mask: 0x01)                             */
#define DW_UART_LCR_STP_Pos               (5UL)                     /*!< STP (Bit 5)                                           */
#define DW_UART_LCR_STP_Msk               (0x20UL)                  /*!< STP (Bitfield-Mask: 0x01)                             */
#define DW_UART_LCR_BC_Pos                (6UL)                     /*!< BC (Bit 6)                                            */
#define DW_UART_LCR_BC_Msk                (0x40UL)                  /*!< BC (Bitfield-Mask: 0x01)                              */
#define DW_UART_LCR_DLAB_Pos              (7UL)                     /*!< DLAB (Bit 7)                                          */
#define DW_UART_LCR_DLAB_Msk              (0x80UL)                  /*!< DLAB (Bitfield-Mask: 0x01)                            */
/* ==========================================================  LSR  ========================================================== */
#define DW_UART_LSR_DR_Pos                (0UL)                     /*!< DR (Bit 0)                                            */
#define DW_UART_LSR_DR_Msk                (0x1UL)                   /*!< DR (Bitfield-Mask: 0x01)                              */
#define DW_UART_LSR_OE_Pos                (1UL)                     /*!< OE (Bit 1)                                            */
#define DW_UART_LSR_OE_Msk                (0x2UL)                   /*!< OE (Bitfield-Mask: 0x01)                              */
#define DW_UART_LSR_PE_Pos                (2UL)                     /*!< PE (Bit 2)                                            */
#define DW_UART_LSR_PE_Msk                (0x4UL)                   /*!< PE (Bitfield-Mask: 0x01)                              */
#define DW_UART_LSR_FE_Pos                (3UL)                     /*!< FE (Bit 3)                                            */
#define DW_UART_LSR_FE_Msk                (0x8UL)                   /*!< FE (Bitfield-Mask: 0x01)                              */
#define DW_UART_LSR_BI_Pos                (4UL)                     /*!< BI (Bit 4)                                            */
#define DW_UART_LSR_BI_Msk                (0x10UL)                  /*!< BI (Bitfield-Mask: 0x01)                              */
#define DW_UART_LSR_THRE_Pos              (5UL)                     /*!< THRE (Bit 5)                                          */
#define DW_UART_LSR_THRE_Msk              (0x20UL)                  /*!< THRE (Bitfield-Mask: 0x01)                            */
#define DW_UART_LSR_TEMT_Pos              (6UL)                     /*!< TEMT (Bit 6)                                          */
#define DW_UART_LSR_TEMT_Msk              (0x40UL)                  /*!< TEMT (Bitfield-Mask: 0x01)                            */
#define DW_UART_LSR_RFE_Pos               (7UL)                     /*!< RFE (Bit 7)                                           */
#define DW_UART_LSR_RFE_Msk               (0x80UL)                  /*!< RFE (Bitfield-Mask: 0x01)                             */
/* ==========================================================  USR  ========================================================== */
#define DW_UART_USR_BUSY_Pos              (0UL)                     /*!< BUSY (Bit 0)                                          */
#define DW_UART_USR_BUSY_Msk              (0x1UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define DW_UART_USR_TFNF_Pos              (1UL)                     /*!< TFNF (Bit 1)                                          */
#define DW_UART_USR_TFNF_Msk              (0x2UL)                   /*!< TFNF (Bitfield-Mask: 0x01)                            */
#define DW_UART_USR_TFE_Pos               (2UL)                     /*!< TFE (Bit 2)                                           */
#define DW_UART_USR_TFE_Msk               (0x4UL)                   /*!< TFE (Bitfield-Mask: 0x01)                             */
#define DW_UART_USR_RFNE_Pos              (3UL)                     /*!< RFNE (Bit 3)                                          */
#define DW_UART_USR_RFNE_Msk              (0x8UL)                   /*!< RFNE (Bitfield-Mask: 0x01)                            */
#define DW_UART_USR_RFF_Pos               (4UL)                     /*!< RFF (Bit 4)                                           */
#define DW_UART_USR_RFF_Msk               (0x10UL)                  /*!< RFF (Bitfield-Mask: 0x01)                             */
/* ==========================================================  TFL  ========================================================== */
/* ==========================================================  RFL  ========================================================== */
/* ==========================================================  SRR  ========================================================== */
#define DW_UART_SRR_UR_Pos                (0UL)                     /*!< UR (Bit 0)                                            */
#define DW_UART_SRR_UR_Msk                (0x1UL)                   /*!< UR (Bitfield-Mask: 0x01)                              */
#define DW_UART_SRR_RFR_Pos               (1UL)                     /*!< RFR (Bit 1)                                           */
#define DW_UART_SRR_RFR_Msk               (0x2UL)                   /*!< RFR (Bitfield-Mask: 0x01)                             */
#define DW_UART_SRR_XFR_Pos               (2UL)                     /*!< XFR (Bit 2)                                           */
#define DW_UART_SRR_XFR_Msk               (0x4UL)                   /*!< XFR (Bitfield-Mask: 0x01)                             */


/* =========================================================================================================================== */
/* ================                                           TACHO                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define TACHO_CTRL_EN_Pos                 (0UL)                     /*!< EN (Bit 0)                                            */
#define TACHO_CTRL_EN_Msk                 (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define TACHO_CTRL_FILTEREN_Pos           (1UL)                     /*!< FILTEREN (Bit 1)                                      */
#define TACHO_CTRL_FILTEREN_Msk           (0x2UL)                   /*!< FILTEREN (Bitfield-Mask: 0x01)                        */
#define TACHO_CTRL_SELEDGE_Pos            (2UL)                     /*!< SELEDGE (Bit 2)                                       */
#define TACHO_CTRL_SELEDGE_Msk            (0xcUL)                   /*!< SELEDGE (Bitfield-Mask: 0x03)                         */
#define TACHO_CTRL_READMODE_Pos           (4UL)                     /*!< READMODE (Bit 4)                                      */
#define TACHO_CTRL_READMODE_Msk           (0x10UL)                  /*!< READMODE (Bitfield-Mask: 0x01)                        */
#define TACHO_CTRL_CNT_Pos                (16UL)                    /*!< CNT (Bit 16)                                          */
#define TACHO_CTRL_CNT_Msk                (0xffff0000UL)            /*!< CNT (Bitfield-Mask: 0xffff)                           */
/* ==========================================================  STS  ========================================================== */
#define TACHO_STS_LIMIT_Pos               (0UL)                     /*!< LIMIT (Bit 0)                                         */
#define TACHO_STS_LIMIT_Msk               (0x1UL)                   /*!< LIMIT (Bitfield-Mask: 0x01)                           */
#define TACHO_STS_PIN_Pos                 (1UL)                     /*!< PIN (Bit 1)                                           */
#define TACHO_STS_PIN_Msk                 (0x2UL)                   /*!< PIN (Bitfield-Mask: 0x01)                             */
#define TACHO_STS_CHG_Pos                 (2UL)                     /*!< CHG (Bit 2)                                           */
#define TACHO_STS_CHG_Msk                 (0x4UL)                   /*!< CHG (Bitfield-Mask: 0x01)                             */
#define TACHO_STS_CNTRDY_Pos              (3UL)                     /*!< CNTRDY (Bit 3)                                        */
#define TACHO_STS_CNTRDY_Msk              (0x8UL)                   /*!< CNTRDY (Bitfield-Mask: 0x01)                          */
#define TACHO_STS_FAIL_Pos                (4UL)                     /*!< FAIL (Bit 4)                                          */
#define TACHO_STS_FAIL_Msk                (0x10UL)                  /*!< FAIL (Bitfield-Mask: 0x01)                            */
/* ========================================================  LIMITH  ========================================================= */
#define TACHO_LIMITH_VAL_Pos              (0UL)                     /*!< VAL (Bit 0)                                           */
#define TACHO_LIMITH_VAL_Msk              (0xffffUL)                /*!< VAL (Bitfield-Mask: 0xffff)                           */
/* ========================================================  LIMITL  ========================================================= */
#define TACHO_LIMITL_VAL_Pos              (0UL)                     /*!< VAL (Bit 0)                                           */
#define TACHO_LIMITL_VAL_Msk              (0xffffUL)                /*!< VAL (Bitfield-Mask: 0xffff)                           */
/* =========================================================  INTEN  ========================================================= */
#define TACHO_INTEN_LIMITEN_Pos           (0UL)                     /*!< LIMITEN (Bit 0)                                       */
#define TACHO_INTEN_LIMITEN_Msk           (0x1UL)                   /*!< LIMITEN (Bitfield-Mask: 0x01)                         */
#define TACHO_INTEN_CNTRDYEN_Pos          (1UL)                     /*!< CNTRDYEN (Bit 1)                                      */
#define TACHO_INTEN_CNTRDYEN_Msk          (0x2UL)                   /*!< CNTRDYEN (Bitfield-Mask: 0x01)                        */
#define TACHO_INTEN_CHGEN_Pos             (2UL)                     /*!< CHGEN (Bit 2)                                         */
#define TACHO_INTEN_CHGEN_Msk             (0x4UL)                   /*!< CHGEN (Bitfield-Mask: 0x01)                           */
#define TACHO_INTEN_FAILEN_Pos            (3UL)                     /*!< FAILEN (Bit 3)                                        */
#define TACHO_INTEN_FAILEN_Msk            (0x8UL)                   /*!< FAILEN (Bitfield-Mask: 0x01)                          */
/* =======================================================  THRESHOLD  ======================================================= */
/* ========================================================  TIMEOUT  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define WDT_CTRL_EN_Pos                   (0UL)                     /*!< EN (Bit 0)                                            */
#define WDT_CTRL_EN_Msk                   (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define WDT_CTRL_RSTEN_Pos                (1UL)                     /*!< RSTEN (Bit 1)                                         */
#define WDT_CTRL_RSTEN_Msk                (0x2UL)                   /*!< RSTEN (Bitfield-Mask: 0x01)                           */
#define WDT_CTRL_RELOAD_Pos               (2UL)                     /*!< RELOAD (Bit 2)                                        */
#define WDT_CTRL_RELOAD_Msk               (0x4UL)                   /*!< RELOAD (Bitfield-Mask: 0x01)                          */
#define WDT_CTRL_CLRRSTFLAG_Pos           (3UL)                     /*!< CLRRSTFLAG (Bit 3)                                    */
#define WDT_CTRL_CLRRSTFLAG_Msk           (0x8UL)                   /*!< CLRRSTFLAG (Bitfield-Mask: 0x01)                      */
/* ==========================================================  STS  ========================================================== */
#define WDT_STS_RSTFLAG_Pos               (0UL)                     /*!< RSTFLAG (Bit 0)                                       */
#define WDT_STS_RSTFLAG_Msk               (0x1UL)                   /*!< RSTFLAG (Bitfield-Mask: 0x01)                         */
/* ==========================================================  CNT  ========================================================== */
/* ==========================================================  DIV  ========================================================== */
/* =========================================================  INTEN  ========================================================= */
#define WDT_INTEN_WDTINTEN_Pos            (0UL)                     /*!< WDTINTEN (Bit 0)                                      */
#define WDT_INTEN_WDTINTEN_Msk            (0x1UL)                   /*!< WDTINTEN (Bitfield-Mask: 0x01)                        */


/* =========================================================================================================================== */
/* ================                                          DW_I2C                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CON  ========================================================== */
#define DW_I2C_CON_MATSER_Pos             (0UL)                     /*!< MATSER (Bit 0)                                        */
#define DW_I2C_CON_MATSER_Msk             (0x1UL)                   /*!< MATSER (Bitfield-Mask: 0x01)                          */
#define DW_I2C_CON_SPEED_Pos              (1UL)                     /*!< SPEED (Bit 1)                                         */
#define DW_I2C_CON_SPEED_Msk              (0x6UL)                   /*!< SPEED (Bitfield-Mask: 0x03)                           */
#define DW_I2C_CON_SLV10BIT_Pos           (3UL)                     /*!< SLV10BIT (Bit 3)                                      */
#define DW_I2C_CON_SLV10BIT_Msk           (0x8UL)                   /*!< SLV10BIT (Bitfield-Mask: 0x01)                        */
#define DW_I2C_CON_MST10BIT_Pos           (4UL)                     /*!< MST10BIT (Bit 4)                                      */
#define DW_I2C_CON_MST10BIT_Msk           (0x10UL)                  /*!< MST10BIT (Bitfield-Mask: 0x01)                        */
#define DW_I2C_CON_RESTREN_Pos            (5UL)                     /*!< RESTREN (Bit 5)                                       */
#define DW_I2C_CON_RESTREN_Msk            (0x20UL)                  /*!< RESTREN (Bitfield-Mask: 0x01)                         */
#define DW_I2C_CON_SLVDISABLE_Pos         (6UL)                     /*!< SLVDISABLE (Bit 6)                                    */
#define DW_I2C_CON_SLVDISABLE_Msk         (0x40UL)                  /*!< SLVDISABLE (Bitfield-Mask: 0x01)                      */
#define DW_I2C_CON_STPDET_Pos             (7UL)                     /*!< STPDET (Bit 7)                                        */
#define DW_I2C_CON_STPDET_Msk             (0x80UL)                  /*!< STPDET (Bitfield-Mask: 0x01)                          */
#define DW_I2C_CON_TXEMPTYCTRL_Pos        (8UL)                     /*!< TXEMPTYCTRL (Bit 8)                                   */
#define DW_I2C_CON_TXEMPTYCTRL_Msk        (0x100UL)                 /*!< TXEMPTYCTRL (Bitfield-Mask: 0x01)                     */
#define DW_I2C_CON_RXFULLHLDC_Pos         (9UL)                     /*!< RXFULLHLDC (Bit 9)                                    */
#define DW_I2C_CON_RXFULLHLDC_Msk         (0x200UL)                 /*!< RXFULLHLDC (Bitfield-Mask: 0x01)                      */
#define DW_I2C_CON_STPMSTACTIVE_Pos       (10UL)                    /*!< STPMSTACTIVE (Bit 10)                                 */
#define DW_I2C_CON_STPMSTACTIVE_Msk       (0x400UL)                 /*!< STPMSTACTIVE (Bitfield-Mask: 0x01)                    */
#define DW_I2C_CON_BUSCLREN_Pos           (11UL)                    /*!< BUSCLREN (Bit 11)                                     */
#define DW_I2C_CON_BUSCLREN_Msk           (0x800UL)                 /*!< BUSCLREN (Bitfield-Mask: 0x01)                        */
/* ==========================================================  TAR  ========================================================== */
#define DW_I2C_TAR_TAR_Pos                (0UL)                     /*!< TAR (Bit 0)                                           */
#define DW_I2C_TAR_TAR_Msk                (0x3ffUL)                 /*!< TAR (Bitfield-Mask: 0x3ff)                            */
#define DW_I2C_TAR_GCORSTR_Pos            (10UL)                    /*!< GCORSTR (Bit 10)                                      */
#define DW_I2C_TAR_GCORSTR_Msk            (0x400UL)                 /*!< GCORSTR (Bitfield-Mask: 0x01)                         */
#define DW_I2C_TAR_SPECIAL_Pos            (11UL)                    /*!< SPECIAL (Bit 11)                                      */
#define DW_I2C_TAR_SPECIAL_Msk            (0x800UL)                 /*!< SPECIAL (Bitfield-Mask: 0x01)                         */
/* ==========================================================  SAR  ========================================================== */
#define DW_I2C_SAR_SAR_Pos                (0UL)                     /*!< SAR (Bit 0)                                           */
#define DW_I2C_SAR_SAR_Msk                (0x3ffUL)                 /*!< SAR (Bitfield-Mask: 0x3ff)                            */
/* ========================================================  DATACMD  ======================================================== */
#define DW_I2C_DATACMD_DATA_Pos           (0UL)                     /*!< DATA (Bit 0)                                          */
#define DW_I2C_DATACMD_DATA_Msk           (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
#define DW_I2C_DATACMD_CMD_Pos            (8UL)                     /*!< CMD (Bit 8)                                           */
#define DW_I2C_DATACMD_CMD_Msk            (0x100UL)                 /*!< CMD (Bitfield-Mask: 0x01)                             */
#define DW_I2C_DATACMD_STOP_Pos           (9UL)                     /*!< STOP (Bit 9)                                          */
#define DW_I2C_DATACMD_STOP_Msk           (0x200UL)                 /*!< STOP (Bitfield-Mask: 0x01)                            */
#define DW_I2C_DATACMD_RESTART_Pos        (10UL)                    /*!< RESTART (Bit 10)                                      */
#define DW_I2C_DATACMD_RESTART_Msk        (0x400UL)                 /*!< RESTART (Bitfield-Mask: 0x01)                         */
#define DW_I2C_DATACMD_FIRSTDATA_Pos      (11UL)                    /*!< FIRSTDATA (Bit 11)                                    */
#define DW_I2C_DATACMD_FIRSTDATA_Msk      (0x800UL)                 /*!< FIRSTDATA (Bitfield-Mask: 0x01)                       */
/* ========================================================  SCLHCNT  ======================================================== */
#define DW_I2C_SCLHCNT_HCNT_Pos           (0UL)                     /*!< HCNT (Bit 0)                                          */
#define DW_I2C_SCLHCNT_HCNT_Msk           (0xffffUL)                /*!< HCNT (Bitfield-Mask: 0xffff)                          */
/* ========================================================  SCLLCNT  ======================================================== */
#define DW_I2C_SCLLCNT_LCNT_Pos           (0UL)                     /*!< LCNT (Bit 0)                                          */
#define DW_I2C_SCLLCNT_LCNT_Msk           (0xffffUL)                /*!< LCNT (Bitfield-Mask: 0xffff)                          */
/* =======================================================  FSSCLHCNT  ======================================================= */
#define DW_I2C_FSSCLHCNT_HCNT_Pos         (0UL)                     /*!< HCNT (Bit 0)                                          */
#define DW_I2C_FSSCLHCNT_HCNT_Msk         (0xffffUL)                /*!< HCNT (Bitfield-Mask: 0xffff)                          */
/* =======================================================  FSSCLLCNT  ======================================================= */
#define DW_I2C_FSSCLLCNT_LCNT_Pos         (0UL)                     /*!< LCNT (Bit 0)                                          */
#define DW_I2C_FSSCLLCNT_LCNT_Msk         (0xffffUL)                /*!< LCNT (Bitfield-Mask: 0xffff)                          */
/* ========================================================  INTSTAT  ======================================================== */
#define DW_I2C_INTSTAT_RXUNDER_Pos        (0UL)                     /*!< RXUNDER (Bit 0)                                       */
#define DW_I2C_INTSTAT_RXUNDER_Msk        (0x1UL)                   /*!< RXUNDER (Bitfield-Mask: 0x01)                         */
#define DW_I2C_INTSTAT_RXOVER_Pos         (1UL)                     /*!< RXOVER (Bit 1)                                        */
#define DW_I2C_INTSTAT_RXOVER_Msk         (0x2UL)                   /*!< RXOVER (Bitfield-Mask: 0x01)                          */
#define DW_I2C_INTSTAT_RXFULL_Pos         (2UL)                     /*!< RXFULL (Bit 2)                                        */
#define DW_I2C_INTSTAT_RXFULL_Msk         (0x4UL)                   /*!< RXFULL (Bitfield-Mask: 0x01)                          */
#define DW_I2C_INTSTAT_TXOVER_Pos         (3UL)                     /*!< TXOVER (Bit 3)                                        */
#define DW_I2C_INTSTAT_TXOVER_Msk         (0x8UL)                   /*!< TXOVER (Bitfield-Mask: 0x01)                          */
#define DW_I2C_INTSTAT_TXEMPTY_Pos        (4UL)                     /*!< TXEMPTY (Bit 4)                                       */
#define DW_I2C_INTSTAT_TXEMPTY_Msk        (0x10UL)                  /*!< TXEMPTY (Bitfield-Mask: 0x01)                         */
#define DW_I2C_INTSTAT_RDREQ_Pos          (5UL)                     /*!< RDREQ (Bit 5)                                         */
#define DW_I2C_INTSTAT_RDREQ_Msk          (0x20UL)                  /*!< RDREQ (Bitfield-Mask: 0x01)                           */
#define DW_I2C_INTSTAT_TXABRT_Pos         (6UL)                     /*!< TXABRT (Bit 6)                                        */
#define DW_I2C_INTSTAT_TXABRT_Msk         (0x40UL)                  /*!< TXABRT (Bitfield-Mask: 0x01)                          */
#define DW_I2C_INTSTAT_RXDONE_Pos         (7UL)                     /*!< RXDONE (Bit 7)                                        */
#define DW_I2C_INTSTAT_RXDONE_Msk         (0x80UL)                  /*!< RXDONE (Bitfield-Mask: 0x01)                          */
#define DW_I2C_INTSTAT_ACTIVITY_Pos       (8UL)                     /*!< ACTIVITY (Bit 8)                                      */
#define DW_I2C_INTSTAT_ACTIVITY_Msk       (0x100UL)                 /*!< ACTIVITY (Bitfield-Mask: 0x01)                        */
#define DW_I2C_INTSTAT_STOPDET_Pos        (9UL)                     /*!< STOPDET (Bit 9)                                       */
#define DW_I2C_INTSTAT_STOPDET_Msk        (0x200UL)                 /*!< STOPDET (Bitfield-Mask: 0x01)                         */
#define DW_I2C_INTSTAT_STARTDET_Pos       (10UL)                    /*!< STARTDET (Bit 10)                                     */
#define DW_I2C_INTSTAT_STARTDET_Msk       (0x400UL)                 /*!< STARTDET (Bitfield-Mask: 0x01)                        */
#define DW_I2C_INTSTAT_GENCALL_Pos        (11UL)                    /*!< GENCALL (Bit 11)                                      */
#define DW_I2C_INTSTAT_GENCALL_Msk        (0x800UL)                 /*!< GENCALL (Bitfield-Mask: 0x01)                         */
#define DW_I2C_INTSTAT_RESTARTDET_Pos     (12UL)                    /*!< RESTARTDET (Bit 12)                                   */
#define DW_I2C_INTSTAT_RESTARTDET_Msk     (0x1000UL)                /*!< RESTARTDET (Bitfield-Mask: 0x01)                      */
#define DW_I2C_INTSTAT_MSTONHOLD_Pos      (13UL)                    /*!< MSTONHOLD (Bit 13)                                    */
#define DW_I2C_INTSTAT_MSTONHOLD_Msk      (0x2000UL)                /*!< MSTONHOLD (Bitfield-Mask: 0x01)                       */
#define DW_I2C_INTSTAT_SCLSTUCKLOW_Pos    (14UL)                    /*!< SCLSTUCKLOW (Bit 14)                                  */
#define DW_I2C_INTSTAT_SCLSTUCKLOW_Msk    (0x4000UL)                /*!< SCLSTUCKLOW (Bitfield-Mask: 0x01)                     */
#define DW_I2C_INTSTAT_WRREQ_Pos          (15UL)                    /*!< WRREQ (Bit 15)                                        */
#define DW_I2C_INTSTAT_WRREQ_Msk          (0x8000UL)                /*!< WRREQ (Bitfield-Mask: 0x01)                           */
/* ========================================================  INTMASK  ======================================================== */
#define DW_I2C_INTMASK_RXUNDERMSK_Pos     (0UL)                     /*!< RXUNDERMSK (Bit 0)                                    */
#define DW_I2C_INTMASK_RXUNDERMSK_Msk     (0x1UL)                   /*!< RXUNDERMSK (Bitfield-Mask: 0x01)                      */
#define DW_I2C_INTMASK_RXOVERMSK_Pos      (1UL)                     /*!< RXOVERMSK (Bit 1)                                     */
#define DW_I2C_INTMASK_RXOVERMSK_Msk      (0x2UL)                   /*!< RXOVERMSK (Bitfield-Mask: 0x01)                       */
#define DW_I2C_INTMASK_RXFULLMSK_Pos      (2UL)                     /*!< RXFULLMSK (Bit 2)                                     */
#define DW_I2C_INTMASK_RXFULLMSK_Msk      (0x4UL)                   /*!< RXFULLMSK (Bitfield-Mask: 0x01)                       */
#define DW_I2C_INTMASK_TXOVERMSK_Pos      (3UL)                     /*!< TXOVERMSK (Bit 3)                                     */
#define DW_I2C_INTMASK_TXOVERMSK_Msk      (0x8UL)                   /*!< TXOVERMSK (Bitfield-Mask: 0x01)                       */
#define DW_I2C_INTMASK_TXEMPTYMSK_Pos     (4UL)                     /*!< TXEMPTYMSK (Bit 4)                                    */
#define DW_I2C_INTMASK_TXEMPTYMSK_Msk     (0x10UL)                  /*!< TXEMPTYMSK (Bitfield-Mask: 0x01)                      */
#define DW_I2C_INTMASK_RDREQMSK_Pos       (5UL)                     /*!< RDREQMSK (Bit 5)                                      */
#define DW_I2C_INTMASK_RDREQMSK_Msk       (0x20UL)                  /*!< RDREQMSK (Bitfield-Mask: 0x01)                        */
#define DW_I2C_INTMASK_TXABRTMSK_Pos      (6UL)                     /*!< TXABRTMSK (Bit 6)                                     */
#define DW_I2C_INTMASK_TXABRTMSK_Msk      (0x40UL)                  /*!< TXABRTMSK (Bitfield-Mask: 0x01)                       */
#define DW_I2C_INTMASK_RXDONEMSK_Pos      (7UL)                     /*!< RXDONEMSK (Bit 7)                                     */
#define DW_I2C_INTMASK_RXDONEMSK_Msk      (0x80UL)                  /*!< RXDONEMSK (Bitfield-Mask: 0x01)                       */
#define DW_I2C_INTMASK_ACTIVITYMSK_Pos    (8UL)                     /*!< ACTIVITYMSK (Bit 8)                                   */
#define DW_I2C_INTMASK_ACTIVITYMSK_Msk    (0x100UL)                 /*!< ACTIVITYMSK (Bitfield-Mask: 0x01)                     */
#define DW_I2C_INTMASK_STOPDETMSK_Pos     (9UL)                     /*!< STOPDETMSK (Bit 9)                                    */
#define DW_I2C_INTMASK_STOPDETMSK_Msk     (0x200UL)                 /*!< STOPDETMSK (Bitfield-Mask: 0x01)                      */
#define DW_I2C_INTMASK_STARTDETMSK_Pos    (10UL)                    /*!< STARTDETMSK (Bit 10)                                  */
#define DW_I2C_INTMASK_STARTDETMSK_Msk    (0x400UL)                 /*!< STARTDETMSK (Bitfield-Mask: 0x01)                     */
#define DW_I2C_INTMASK_GENCALLMSK_Pos     (11UL)                    /*!< GENCALLMSK (Bit 11)                                   */
#define DW_I2C_INTMASK_GENCALLMSK_Msk     (0x800UL)                 /*!< GENCALLMSK (Bitfield-Mask: 0x01)                      */
#define DW_I2C_INTMASK_RESTARTDETMSK_Pos  (12UL)                    /*!< RESTARTDETMSK (Bit 12)                                */
#define DW_I2C_INTMASK_RESTARTDETMSK_Msk  (0x1000UL)                /*!< RESTARTDETMSK (Bitfield-Mask: 0x01)                   */
#define DW_I2C_INTMASK_MSTONHOLDMSK_Pos   (13UL)                    /*!< MSTONHOLDMSK (Bit 13)                                 */
#define DW_I2C_INTMASK_MSTONHOLDMSK_Msk   (0x2000UL)                /*!< MSTONHOLDMSK (Bitfield-Mask: 0x01)                    */
#define DW_I2C_INTMASK_SCLSTUCKLOWMSK_Pos (14UL)                    /*!< SCLSTUCKLOWMSK (Bit 14)                               */
#define DW_I2C_INTMASK_SCLSTUCKLOWMSK_Msk (0x4000UL)                /*!< SCLSTUCKLOWMSK (Bitfield-Mask: 0x01)                  */
#define DW_I2C_INTMASK_WRREQMSK_Pos       (15UL)                    /*!< WRREQMSK (Bit 15)                                     */
#define DW_I2C_INTMASK_WRREQMSK_Msk       (0x8000UL)                /*!< WRREQMSK (Bitfield-Mask: 0x01)                        */
/* ======================================================  RAWINTSTAT  ======================================================= */
#define DW_I2C_RAWINTSTAT_RXUNDERRAW_Pos  (0UL)                     /*!< RXUNDERRAW (Bit 0)                                    */
#define DW_I2C_RAWINTSTAT_RXUNDERRAW_Msk  (0x1UL)                   /*!< RXUNDERRAW (Bitfield-Mask: 0x01)                      */
#define DW_I2C_RAWINTSTAT_RXOVERRAW_Pos   (1UL)                     /*!< RXOVERRAW (Bit 1)                                     */
#define DW_I2C_RAWINTSTAT_RXOVERRAW_Msk   (0x2UL)                   /*!< RXOVERRAW (Bitfield-Mask: 0x01)                       */
#define DW_I2C_RAWINTSTAT_RXFULLRAW_Pos   (2UL)                     /*!< RXFULLRAW (Bit 2)                                     */
#define DW_I2C_RAWINTSTAT_RXFULLRAW_Msk   (0x4UL)                   /*!< RXFULLRAW (Bitfield-Mask: 0x01)                       */
#define DW_I2C_RAWINTSTAT_TXOVERRAW_Pos   (3UL)                     /*!< TXOVERRAW (Bit 3)                                     */
#define DW_I2C_RAWINTSTAT_TXOVERRAW_Msk   (0x8UL)                   /*!< TXOVERRAW (Bitfield-Mask: 0x01)                       */
#define DW_I2C_RAWINTSTAT_TXEMPTYRAW_Pos  (4UL)                     /*!< TXEMPTYRAW (Bit 4)                                    */
#define DW_I2C_RAWINTSTAT_TXEMPTYRAW_Msk  (0x10UL)                  /*!< TXEMPTYRAW (Bitfield-Mask: 0x01)                      */
#define DW_I2C_RAWINTSTAT_RDREQRAW_Pos    (5UL)                     /*!< RDREQRAW (Bit 5)                                      */
#define DW_I2C_RAWINTSTAT_RDREQRAW_Msk    (0x20UL)                  /*!< RDREQRAW (Bitfield-Mask: 0x01)                        */
#define DW_I2C_RAWINTSTAT_TXABRTRAW_Pos   (6UL)                     /*!< TXABRTRAW (Bit 6)                                     */
#define DW_I2C_RAWINTSTAT_TXABRTRAW_Msk   (0x40UL)                  /*!< TXABRTRAW (Bitfield-Mask: 0x01)                       */
#define DW_I2C_RAWINTSTAT_RXDONERAW_Pos   (7UL)                     /*!< RXDONERAW (Bit 7)                                     */
#define DW_I2C_RAWINTSTAT_RXDONERAW_Msk   (0x80UL)                  /*!< RXDONERAW (Bitfield-Mask: 0x01)                       */
#define DW_I2C_RAWINTSTAT_ACTIVITYRAW_Pos (8UL)                     /*!< ACTIVITYRAW (Bit 8)                                   */
#define DW_I2C_RAWINTSTAT_ACTIVITYRAW_Msk (0x100UL)                 /*!< ACTIVITYRAW (Bitfield-Mask: 0x01)                     */
#define DW_I2C_RAWINTSTAT_STOPDETRAW_Pos  (9UL)                     /*!< STOPDETRAW (Bit 9)                                    */
#define DW_I2C_RAWINTSTAT_STOPDETRAW_Msk  (0x200UL)                 /*!< STOPDETRAW (Bitfield-Mask: 0x01)                      */
#define DW_I2C_RAWINTSTAT_STARTDETRAW_Pos (10UL)                    /*!< STARTDETRAW (Bit 10)                                  */
#define DW_I2C_RAWINTSTAT_STARTDETRAW_Msk (0x400UL)                 /*!< STARTDETRAW (Bitfield-Mask: 0x01)                     */
#define DW_I2C_RAWINTSTAT_GENCALLRAW_Pos  (11UL)                    /*!< GENCALLRAW (Bit 11)                                   */
#define DW_I2C_RAWINTSTAT_GENCALLRAW_Msk  (0x800UL)                 /*!< GENCALLRAW (Bitfield-Mask: 0x01)                      */
#define DW_I2C_RAWINTSTAT_RESTARTDETRAW_Pos (12UL)                  /*!< RESTARTDETRAW (Bit 12)                                */
#define DW_I2C_RAWINTSTAT_RESTARTDETRAW_Msk (0x1000UL)              /*!< RESTARTDETRAW (Bitfield-Mask: 0x01)                   */
#define DW_I2C_RAWINTSTAT_MSTONHOLDRAW_Pos (13UL)                   /*!< MSTONHOLDRAW (Bit 13)                                 */
#define DW_I2C_RAWINTSTAT_MSTONHOLDRAW_Msk (0x2000UL)               /*!< MSTONHOLDRAW (Bitfield-Mask: 0x01)                    */
#define DW_I2C_RAWINTSTAT_SCLSTUCKLOWRAW_Pos (14UL)                 /*!< SCLSTUCKLOWRAW (Bit 14)                               */
#define DW_I2C_RAWINTSTAT_SCLSTUCKLOWRAW_Msk (0x4000UL)             /*!< SCLSTUCKLOWRAW (Bitfield-Mask: 0x01)                  */
#define DW_I2C_RAWINTSTAT_WRREQRAW_Pos    (15UL)                    /*!< WRREQRAW (Bit 15)                                     */
#define DW_I2C_RAWINTSTAT_WRREQRAW_Msk    (0x8000UL)                /*!< WRREQRAW (Bitfield-Mask: 0x01)                        */
/* =========================================================  RXTL  ========================================================== */
#define DW_I2C_RXTL_THRES_Pos             (0UL)                     /*!< THRES (Bit 0)                                         */
#define DW_I2C_RXTL_THRES_Msk             (0xffUL)                  /*!< THRES (Bitfield-Mask: 0xff)                           */
/* =========================================================  TXTL  ========================================================== */
#define DW_I2C_TXTL_THRES_Pos             (0UL)                     /*!< THRES (Bit 0)                                         */
#define DW_I2C_TXTL_THRES_Msk             (0xffUL)                  /*!< THRES (Bitfield-Mask: 0xff)                           */
/* ========================================================  CLRINT  ========================================================= */
/* ======================================================  CLRRXUNDER  ======================================================= */
/* =======================================================  CLRRXOVER  ======================================================= */
/* =======================================================  CLRTXOVER  ======================================================= */
/* =======================================================  CLRRDREQ  ======================================================== */
/* =======================================================  CLRTXABRT  ======================================================= */
/* =======================================================  CLRRXDONE  ======================================================= */
/* ======================================================  CLRACTIVITY  ====================================================== */
/* ======================================================  CLRSTOPDET  ======================================================= */
/* ======================================================  CLRSTARTDET  ====================================================== */
/* ======================================================  CLRGENCALL  ======================================================= */
/* ========================================================  ENABLE  ========================================================= */
#define DW_I2C_ENABLE_EN_Pos              (0UL)                     /*!< EN (Bit 0)                                            */
#define DW_I2C_ENABLE_EN_Msk              (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define DW_I2C_ENABLE_ABORT_Pos           (1UL)                     /*!< ABORT (Bit 1)                                         */
#define DW_I2C_ENABLE_ABORT_Msk           (0x2UL)                   /*!< ABORT (Bitfield-Mask: 0x01)                           */
#define DW_I2C_ENABLE_TXCMDBLOCK_Pos      (2UL)                     /*!< TXCMDBLOCK (Bit 2)                                    */
#define DW_I2C_ENABLE_TXCMDBLOCK_Msk      (0x4UL)                   /*!< TXCMDBLOCK (Bitfield-Mask: 0x01)                      */
#define DW_I2C_ENABLE_SDARECOVEN_Pos      (3UL)                     /*!< SDARECOVEN (Bit 3)                                    */
#define DW_I2C_ENABLE_SDARECOVEN_Msk      (0x8UL)                   /*!< SDARECOVEN (Bitfield-Mask: 0x01)                      */
/* ========================================================  STATUS  ========================================================= */
#define DW_I2C_STATUS_ACTIVITY_Pos        (0UL)                     /*!< ACTIVITY (Bit 0)                                      */
#define DW_I2C_STATUS_ACTIVITY_Msk        (0x1UL)                   /*!< ACTIVITY (Bitfield-Mask: 0x01)                        */
#define DW_I2C_STATUS_TFNF_Pos            (1UL)                     /*!< TFNF (Bit 1)                                          */
#define DW_I2C_STATUS_TFNF_Msk            (0x2UL)                   /*!< TFNF (Bitfield-Mask: 0x01)                            */
#define DW_I2C_STATUS_TFE_Pos             (2UL)                     /*!< TFE (Bit 2)                                           */
#define DW_I2C_STATUS_TFE_Msk             (0x4UL)                   /*!< TFE (Bitfield-Mask: 0x01)                             */
#define DW_I2C_STATUS_RFNE_Pos            (3UL)                     /*!< RFNE (Bit 3)                                          */
#define DW_I2C_STATUS_RFNE_Msk            (0x8UL)                   /*!< RFNE (Bitfield-Mask: 0x01)                            */
#define DW_I2C_STATUS_RFF_Pos             (4UL)                     /*!< RFF (Bit 4)                                           */
#define DW_I2C_STATUS_RFF_Msk             (0x10UL)                  /*!< RFF (Bitfield-Mask: 0x01)                             */
#define DW_I2C_STATUS_MSTACTIVITY_Pos     (5UL)                     /*!< MSTACTIVITY (Bit 5)                                   */
#define DW_I2C_STATUS_MSTACTIVITY_Msk     (0x20UL)                  /*!< MSTACTIVITY (Bitfield-Mask: 0x01)                     */
#define DW_I2C_STATUS_SLVACTIVITY_Pos     (6UL)                     /*!< SLVACTIVITY (Bit 6)                                   */
#define DW_I2C_STATUS_SLVACTIVITY_Msk     (0x40UL)                  /*!< SLVACTIVITY (Bitfield-Mask: 0x01)                     */
#define DW_I2C_STATUS_MSTHOLDTXEMPTY_Pos  (7UL)                     /*!< MSTHOLDTXEMPTY (Bit 7)                                */
#define DW_I2C_STATUS_MSTHOLDTXEMPTY_Msk  (0x80UL)                  /*!< MSTHOLDTXEMPTY (Bitfield-Mask: 0x01)                  */
#define DW_I2C_STATUS_MSTHOLDRXFULL_Pos   (8UL)                     /*!< MSTHOLDRXFULL (Bit 8)                                 */
#define DW_I2C_STATUS_MSTHOLDRXFULL_Msk   (0x100UL)                 /*!< MSTHOLDRXFULL (Bitfield-Mask: 0x01)                   */
#define DW_I2C_STATUS_SLVHOLDTXEMPTY_Pos  (9UL)                     /*!< SLVHOLDTXEMPTY (Bit 9)                                */
#define DW_I2C_STATUS_SLVHOLDTXEMPTY_Msk  (0x200UL)                 /*!< SLVHOLDTXEMPTY (Bitfield-Mask: 0x01)                  */
#define DW_I2C_STATUS_SLVHOLDRXFULL_Pos   (10UL)                    /*!< SLVHOLDRXFULL (Bit 10)                                */
#define DW_I2C_STATUS_SLVHOLDRXFULL_Msk   (0x400UL)                 /*!< SLVHOLDRXFULL (Bitfield-Mask: 0x01)                   */
#define DW_I2C_STATUS_SDANOTRECOV_Pos     (11UL)                    /*!< SDANOTRECOV (Bit 11)                                  */
#define DW_I2C_STATUS_SDANOTRECOV_Msk     (0x800UL)                 /*!< SDANOTRECOV (Bitfield-Mask: 0x01)                     */
/* =========================================================  TXFLR  ========================================================= */
/* =========================================================  RXFLR  ========================================================= */
/* ========================================================  SDAHOLD  ======================================================== */
#define DW_I2C_SDAHOLD_SDATXHOLD_Pos      (0UL)                     /*!< SDATXHOLD (Bit 0)                                     */
#define DW_I2C_SDAHOLD_SDATXHOLD_Msk      (0xffffUL)                /*!< SDATXHOLD (Bitfield-Mask: 0xffff)                     */
#define DW_I2C_SDAHOLD_SDARXHOLD_Pos      (16UL)                    /*!< SDARXHOLD (Bit 16)                                    */
#define DW_I2C_SDAHOLD_SDARXHOLD_Msk      (0xff0000UL)              /*!< SDARXHOLD (Bitfield-Mask: 0xff)                       */
/* =======================================================  TXABRTSRC  ======================================================= */
#define DW_I2C_TXABRTSRC_ADDR7BNAK_Pos    (0UL)                     /*!< ADDR7BNAK (Bit 0)                                     */
#define DW_I2C_TXABRTSRC_ADDR7BNAK_Msk    (0x1UL)                   /*!< ADDR7BNAK (Bitfield-Mask: 0x01)                       */
#define DW_I2C_TXABRTSRC_ADDR10BNAK1_Pos  (1UL)                     /*!< ADDR10BNAK1 (Bit 1)                                   */
#define DW_I2C_TXABRTSRC_ADDR10BNAK1_Msk  (0x2UL)                   /*!< ADDR10BNAK1 (Bitfield-Mask: 0x01)                     */
#define DW_I2C_TXABRTSRC_ADDR10BNACK2_Pos (2UL)                     /*!< ADDR10BNACK2 (Bit 2)                                  */
#define DW_I2C_TXABRTSRC_ADDR10BNACK2_Msk (0x4UL)                   /*!< ADDR10BNACK2 (Bitfield-Mask: 0x01)                    */
#define DW_I2C_TXABRTSRC_TXDATANAK_Pos    (3UL)                     /*!< TXDATANAK (Bit 3)                                     */
#define DW_I2C_TXABRTSRC_TXDATANAK_Msk    (0x8UL)                   /*!< TXDATANAK (Bitfield-Mask: 0x01)                       */
#define DW_I2C_TXABRTSRC_GCALLNAK_Pos     (4UL)                     /*!< GCALLNAK (Bit 4)                                      */
#define DW_I2C_TXABRTSRC_GCALLNAK_Msk     (0x10UL)                  /*!< GCALLNAK (Bitfield-Mask: 0x01)                        */
#define DW_I2C_TXABRTSRC_GCALLREAD_Pos    (5UL)                     /*!< GCALLREAD (Bit 5)                                     */
#define DW_I2C_TXABRTSRC_GCALLREAD_Msk    (0x20UL)                  /*!< GCALLREAD (Bitfield-Mask: 0x01)                       */
#define DW_I2C_TXABRTSRC_HSACKDET_Pos     (6UL)                     /*!< HSACKDET (Bit 6)                                      */
#define DW_I2C_TXABRTSRC_HSACKDET_Msk     (0x40UL)                  /*!< HSACKDET (Bitfield-Mask: 0x01)                        */
#define DW_I2C_TXABRTSRC_SBYTEACKET_Pos   (7UL)                     /*!< SBYTEACKET (Bit 7)                                    */
#define DW_I2C_TXABRTSRC_SBYTEACKET_Msk   (0x80UL)                  /*!< SBYTEACKET (Bitfield-Mask: 0x01)                      */
#define DW_I2C_TXABRTSRC_HSNORSTRT_Pos    (8UL)                     /*!< HSNORSTRT (Bit 8)                                     */
#define DW_I2C_TXABRTSRC_HSNORSTRT_Msk    (0x100UL)                 /*!< HSNORSTRT (Bitfield-Mask: 0x01)                       */
#define DW_I2C_TXABRTSRC_SBYTENORSTRT_Pos (9UL)                     /*!< SBYTENORSTRT (Bit 9)                                  */
#define DW_I2C_TXABRTSRC_SBYTENORSTRT_Msk (0x200UL)                 /*!< SBYTENORSTRT (Bitfield-Mask: 0x01)                    */
#define DW_I2C_TXABRTSRC_ADDR10BRDNORSTRT_Pos (10UL)                /*!< ADDR10BRDNORSTRT (Bit 10)                             */
#define DW_I2C_TXABRTSRC_ADDR10BRDNORSTRT_Msk (0x400UL)             /*!< ADDR10BRDNORSTRT (Bitfield-Mask: 0x01)                */
#define DW_I2C_TXABRTSRC_MASTERIDS_Pos    (11UL)                    /*!< MASTERIDS (Bit 11)                                    */
#define DW_I2C_TXABRTSRC_MASTERIDS_Msk    (0x800UL)                 /*!< MASTERIDS (Bitfield-Mask: 0x01)                       */
#define DW_I2C_TXABRTSRC_ARBLOST_Pos      (12UL)                    /*!< ARBLOST (Bit 12)                                      */
#define DW_I2C_TXABRTSRC_ARBLOST_Msk      (0x1000UL)                /*!< ARBLOST (Bitfield-Mask: 0x01)                         */
#define DW_I2C_TXABRTSRC_SLVFLUSHTXFIFO_Pos (13UL)                  /*!< SLVFLUSHTXFIFO (Bit 13)                               */
#define DW_I2C_TXABRTSRC_SLVFLUSHTXFIFO_Msk (0x2000UL)              /*!< SLVFLUSHTXFIFO (Bitfield-Mask: 0x01)                  */
#define DW_I2C_TXABRTSRC_SLVARBLOST_Pos   (14UL)                    /*!< SLVARBLOST (Bit 14)                                   */
#define DW_I2C_TXABRTSRC_SLVARBLOST_Msk   (0x4000UL)                /*!< SLVARBLOST (Bitfield-Mask: 0x01)                      */
#define DW_I2C_TXABRTSRC_SLVRDINTX_Pos    (15UL)                    /*!< SLVRDINTX (Bit 15)                                    */
#define DW_I2C_TXABRTSRC_SLVRDINTX_Msk    (0x8000UL)                /*!< SLVRDINTX (Bitfield-Mask: 0x01)                       */
#define DW_I2C_TXABRTSRC_USRABRT_Pos      (16UL)                    /*!< USRABRT (Bit 16)                                      */
#define DW_I2C_TXABRTSRC_USRABRT_Msk      (0x10000UL)               /*!< USRABRT (Bitfield-Mask: 0x01)                         */
#define DW_I2C_TXABRTSRC_SDASTUCKLOW_Pos  (17UL)                    /*!< SDASTUCKLOW (Bit 17)                                  */
#define DW_I2C_TXABRTSRC_SDASTUCKLOW_Msk  (0x20000UL)               /*!< SDASTUCKLOW (Bitfield-Mask: 0x01)                     */
#define DW_I2C_TXABRTSRC_DEVNAK_Pos       (18UL)                    /*!< DEVNAK (Bit 18)                                       */
#define DW_I2C_TXABRTSRC_DEVNAK_Msk       (0x40000UL)               /*!< DEVNAK (Bitfield-Mask: 0x01)                          */
#define DW_I2C_TXABRTSRC_DEVSLVADDRNAK_Pos (19UL)                   /*!< DEVSLVADDRNAK (Bit 19)                                */
#define DW_I2C_TXABRTSRC_DEVSLVADDRNAK_Msk (0x80000UL)              /*!< DEVSLVADDRNAK (Bitfield-Mask: 0x01)                   */
#define DW_I2C_TXABRTSRC_DEVWRITE_Pos     (20UL)                    /*!< DEVWRITE (Bit 20)                                     */
#define DW_I2C_TXABRTSRC_DEVWRITE_Msk     (0x100000UL)              /*!< DEVWRITE (Bitfield-Mask: 0x01)                        */
#define DW_I2C_TXABRTSRC_TXFLUSHCNT_Pos   (23UL)                    /*!< TXFLUSHCNT (Bit 23)                                   */
#define DW_I2C_TXABRTSRC_TXFLUSHCNT_Msk   (0xff800000UL)            /*!< TXFLUSHCNT (Bitfield-Mask: 0x1ff)                     */
/* ====================================================  SLVDATANACKONLY  ==================================================== */
#define DW_I2C_SLVDATANACKONLY_NAK_Pos    (0UL)                     /*!< NAK (Bit 0)                                           */
#define DW_I2C_SLVDATANACKONLY_NAK_Msk    (0x1UL)                   /*!< NAK (Bitfield-Mask: 0x01)                             */
/* =======================================================  SDASETUP  ======================================================== */
#define DW_I2C_SDASETUP_SETUP_Pos         (0UL)                     /*!< SETUP (Bit 0)                                         */
#define DW_I2C_SDASETUP_SETUP_Msk         (0xffUL)                  /*!< SETUP (Bitfield-Mask: 0xff)                           */
/* ======================================================  ACKGENCALL  ======================================================= */
#define DW_I2C_ACKGENCALL_ACK_Pos         (0UL)                     /*!< ACK (Bit 0)                                           */
#define DW_I2C_ACKGENCALL_ACK_Msk         (0x1UL)                   /*!< ACK (Bitfield-Mask: 0x01)                             */
/* =========================================================  ENSTS  ========================================================= */
#define DW_I2C_ENSTS_ENABLE_Pos           (0UL)                     /*!< ENABLE (Bit 0)                                        */
#define DW_I2C_ENSTS_ENABLE_Msk           (0x1UL)                   /*!< ENABLE (Bitfield-Mask: 0x01)                          */
#define DW_I2C_ENSTS_SLVDISBUSY_Pos       (1UL)                     /*!< SLVDISBUSY (Bit 1)                                    */
#define DW_I2C_ENSTS_SLVDISBUSY_Msk       (0x2UL)                   /*!< SLVDISBUSY (Bitfield-Mask: 0x01)                      */
#define DW_I2C_ENSTS_SLVRXDATALOST_Pos    (2UL)                     /*!< SLVRXDATALOST (Bit 2)                                 */
#define DW_I2C_ENSTS_SLVRXDATALOST_Msk    (0x4UL)                   /*!< SLVRXDATALOST (Bitfield-Mask: 0x01)                   */
/* ========================================================  SPKLEN  ========================================================= */
#define DW_I2C_SPKLEN_LEN_Pos             (0UL)                     /*!< LEN (Bit 0)                                           */
#define DW_I2C_SPKLEN_LEN_Msk             (0xffUL)                  /*!< LEN (Bitfield-Mask: 0xff)                             */
/* =====================================================  CLRRESTARTDET  ===================================================== */
/* =======================================================  SCLLOWTO  ======================================================== */
/* =======================================================  SDALOWTO  ======================================================== */
/* ====================================================  CLRSCLSTUCKDET  ===================================================== */


/* =========================================================================================================================== */
/* ================                                           STRIP                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define STRIP_CONTROL_REPCY_Pos           (16UL)                    /*!< REPCY (Bit 16)                                        */
#define STRIP_CONTROL_REPCY_Msk           (0xff0000UL)              /*!< REPCY (Bitfield-Mask: 0xff)                           */
#define STRIP_CONTROL_FINISHSTS_Pos       (8UL)                     /*!< FINISHSTS (Bit 8)                                     */
#define STRIP_CONTROL_FINISHSTS_Msk       (0x100UL)                 /*!< FINISHSTS (Bitfield-Mask: 0x01)                       */
#define STRIP_CONTROL_FINISHINTSTS_Pos    (7UL)                     /*!< FINISHINTSTS (Bit 7)                                  */
#define STRIP_CONTROL_FINISHINTSTS_Msk    (0x80UL)                  /*!< FINISHINTSTS (Bitfield-Mask: 0x01)                    */
#define STRIP_CONTROL_FINISHINTEN_Pos     (6UL)                     /*!< FINISHINTEN (Bit 6)                                   */
#define STRIP_CONTROL_FINISHINTEN_Msk     (0x40UL)                  /*!< FINISHINTEN (Bitfield-Mask: 0x01)                     */
#define STRIP_CONTROL_MDSEL_Pos           (4UL)                     /*!< MDSEL (Bit 4)                                         */
#define STRIP_CONTROL_MDSEL_Msk           (0x30UL)                  /*!< MDSEL (Bitfield-Mask: 0x03)                           */
#define STRIP_CONTROL_PENDEN_Pos          (3UL)                     /*!< PENDEN (Bit 3)                                        */
#define STRIP_CONTROL_PENDEN_Msk          (0x8UL)                   /*!< PENDEN (Bitfield-Mask: 0x01)                          */
#define STRIP_CONTROL_STOP_Pos            (2UL)                     /*!< STOP (Bit 2)                                          */
#define STRIP_CONTROL_STOP_Msk            (0x4UL)                   /*!< STOP (Bitfield-Mask: 0x01)                            */
#define STRIP_CONTROL_START_Pos           (1UL)                     /*!< START (Bit 1)                                         */
#define STRIP_CONTROL_START_Msk           (0x2UL)                   /*!< START (Bitfield-Mask: 0x01)                           */
#define STRIP_CONTROL_EN_Pos              (0UL)                     /*!< EN (Bit 0)                                            */
#define STRIP_CONTROL_EN_Msk              (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* =========================================================  CODE0  ========================================================= */
#define STRIP_CODE0_ZCHW_Pos              (8UL)                     /*!< ZCHW (Bit 8)                                          */
#define STRIP_CODE0_ZCHW_Msk              (0x3f00UL)                /*!< ZCHW (Bitfield-Mask: 0x3f)                            */
#define STRIP_CODE0_ZCLW_Pos              (0UL)                     /*!< ZCLW (Bit 0)                                          */
#define STRIP_CODE0_ZCLW_Msk              (0x3fUL)                  /*!< ZCLW (Bitfield-Mask: 0x3f)                            */
/* =========================================================  CODE1  ========================================================= */
#define STRIP_CODE1_OCHW_Pos              (8UL)                     /*!< OCHW (Bit 8)                                          */
#define STRIP_CODE1_OCHW_Msk              (0x3f00UL)                /*!< OCHW (Bitfield-Mask: 0x3f)                            */
#define STRIP_CODE1_OCLW_Pos              (0UL)                     /*!< OCLW (Bit 0)                                          */
#define STRIP_CODE1_OCLW_Msk              (0x3fUL)                  /*!< OCLW (Bitfield-Mask: 0x3f)                            */
/* =========================================================  RSTW  ========================================================== */
#define STRIP_RSTW_RSTW_Pos               (0UL)                     /*!< RSTW (Bit 0)                                          */
#define STRIP_RSTW_RSTW_Msk               (0xffffffffUL)            /*!< RSTW (Bitfield-Mask: 0xffffffff)                      */
/* =========================================================  PENDW  ========================================================= */
#define STRIP_PENDW_PENDW_Pos             (0UL)                     /*!< PENDW (Bit 0)                                         */
#define STRIP_PENDW_PENDW_Msk             (0x3fUL)                  /*!< PENDW (Bitfield-Mask: 0x3f)                           */
/* =========================================================  DSRC  ========================================================== */
#define STRIP_DSRC_TRANSADD_Pos           (0UL)                     /*!< TRANSADD (Bit 0)                                      */
#define STRIP_DSRC_TRANSADD_Msk           (0xffffffffUL)            /*!< TRANSADD (Bitfield-Mask: 0xffffffff)                  */
/* =======================================================  TRANSLEN  ======================================================== */
#define STRIP_TRANSLEN_TRANSLEN_Pos       (0UL)                     /*!< TRANSLEN (Bit 0)                                      */
#define STRIP_TRANSLEN_TRANSLEN_Msk       (0x3fffUL)                /*!< TRANSLEN (Bitfield-Mask: 0x3fff)                      */
/* ========================================================  ADVCMD  ========================================================= */
#define STRIP_ADVCMD_ADVEN_Pos            (0UL)                     /*!< ADVEN (Bit 0)                                         */
#define STRIP_ADVCMD_ADVEN_Msk            (0x1UL)                   /*!< ADVEN (Bitfield-Mask: 0x01)                           */
#define STRIP_ADVCMD_ADVCMD_Pos           (1UL)                     /*!< ADVCMD (Bit 1)                                        */
#define STRIP_ADVCMD_ADVCMD_Msk           (0xeUL)                   /*!< ADVCMD (Bitfield-Mask: 0x07)                          */
/* =======================================================  TH50CTRL0  ======================================================= */
#define STRIP_TH50CTRL0_TH50L1T_Pos       (16UL)                    /*!< TH50L1T (Bit 16)                                      */
#define STRIP_TH50CTRL0_TH50L1T_Msk       (0xfff0000UL)             /*!< TH50L1T (Bitfield-Mask: 0xfff)                        */
#define STRIP_TH50CTRL0_TH50H1T_Pos       (0UL)                     /*!< TH50H1T (Bit 0)                                       */
#define STRIP_TH50CTRL0_TH50H1T_Msk       (0xfffUL)                 /*!< TH50H1T (Bitfield-Mask: 0xfff)                        */
/* =======================================================  TH50CTRL1  ======================================================= */
#define STRIP_TH50CTRL1_TH50L2T_Pos       (16UL)                    /*!< TH50L2T (Bit 16)                                      */
#define STRIP_TH50CTRL1_TH50L2T_Msk       (0xfff0000UL)             /*!< TH50L2T (Bitfield-Mask: 0xfff)                        */
#define STRIP_TH50CTRL1_TH50H2T_Pos       (0UL)                     /*!< TH50H2T (Bit 0)                                       */
#define STRIP_TH50CTRL1_TH50H2T_Msk       (0xfffUL)                 /*!< TH50H2T (Bitfield-Mask: 0xfff)                        */
/* ========================================================  TH50RX  ========================================================= */
#define STRIP_TH50RX_RX_TH50_Pos          (8UL)                     /*!< RX_TH50 (Bit 8)                                       */
#define STRIP_TH50RX_RX_TH50_Msk          (0xff00UL)                /*!< RX_TH50 (Bitfield-Mask: 0xff)                         */
#define STRIP_TH50RX_RX_TH50_PRE_Pos      (0UL)                     /*!< RX_TH50_PRE (Bit 0)                                   */
#define STRIP_TH50RX_RX_TH50_PRE_Msk      (0xffUL)                  /*!< RX_TH50_PRE (Bitfield-Mask: 0xff)                     */
/* ========================================================  TH50TO  ========================================================= */
#define STRIP_TH50TO_TH50TO_Pos           (0UL)                     /*!< TH50TO (Bit 0)                                        */
#define STRIP_TH50TO_TH50TO_Msk           (0xfffUL)                 /*!< TH50TO (Bitfield-Mask: 0xfff)                         */
/* ======================================================  AVDPRLCTRL0  ====================================================== */
#define STRIP_AVDPRLCTRL0_ADVID_Pos       (28UL)                    /*!< ADVID (Bit 28)                                        */
#define STRIP_AVDPRLCTRL0_ADVID_Msk       (0xf0000000UL)            /*!< ADVID (Bitfield-Mask: 0x0f)                           */
#define STRIP_AVDPRLCTRL0_ADVWKHT_Pos     (20UL)                    /*!< ADVWKHT (Bit 20)                                      */
#define STRIP_AVDPRLCTRL0_ADVWKHT_Msk     (0xff00000UL)             /*!< ADVWKHT (Bitfield-Mask: 0xff)                         */
#define STRIP_AVDPRLCTRL0_ADVWKLT_Pos     (12UL)                    /*!< ADVWKLT (Bit 12)                                      */
#define STRIP_AVDPRLCTRL0_ADVWKLT_Msk     (0xff000UL)               /*!< ADVWKLT (Bitfield-Mask: 0xff)                         */
#define STRIP_AVDPRLCTRL0_TH20HT_Pos      (0UL)                     /*!< TH20HT (Bit 0)                                        */
#define STRIP_AVDPRLCTRL0_TH20HT_Msk      (0xfffUL)                 /*!< TH20HT (Bitfield-Mask: 0xfff)                         */
/* ======================================================  AVDPRLCTRL1  ====================================================== */
#define STRIP_AVDPRLCTRL1_PRLLT_Pos       (16UL)                    /*!< PRLLT (Bit 16)                                        */
#define STRIP_AVDPRLCTRL1_PRLLT_Msk       (0xfff0000UL)             /*!< PRLLT (Bitfield-Mask: 0xfff)                          */
#define STRIP_AVDPRLCTRL1_PRLHT_Pos       (0UL)                     /*!< PRLHT (Bit 0)                                         */
#define STRIP_AVDPRLCTRL1_PRLHT_Msk       (0xfffUL)                 /*!< PRLHT (Bitfield-Mask: 0xfff)                          */
/* =======================================================  AVDPRLTO  ======================================================== */
#define STRIP_AVDPRLTO_PRLTO_Pos          (0UL)                     /*!< PRLTO (Bit 0)                                         */
#define STRIP_AVDPRLTO_PRLTO_Msk          (0xfffUL)                 /*!< PRLTO (Bitfield-Mask: 0xfff)                          */
/* =======================================================  RECVADDR  ======================================================== */
#define STRIP_RECVADDR_RECVADDR_Pos       (0UL)                     /*!< RECVADDR (Bit 0)                                      */
#define STRIP_RECVADDR_RECVADDR_Msk       (0xffffffffUL)            /*!< RECVADDR (Bitfield-Mask: 0xffffffff)                  */
/* ========================================================  RECVCNT  ======================================================== */
#define STRIP_RECVCNT_RECVCNT_Pos         (0UL)                     /*!< RECVCNT (Bit 0)                                       */
#define STRIP_RECVCNT_RECVCNT_Msk         (0xffUL)                  /*!< RECVCNT (Bitfield-Mask: 0xff)                         */
/* ========================================================  ADVSTS  ========================================================= */
#define STRIP_ADVSTS_ID_ACK_Pos           (1UL)                     /*!< ID_ACK (Bit 1)                                        */
#define STRIP_ADVSTS_ID_ACK_Msk           (0x2UL)                   /*!< ID_ACK (Bitfield-Mask: 0x01)                          */
#define STRIP_ADVSTS_ADVTO_Pos            (0UL)                     /*!< ADVTO (Bit 0)                                         */
#define STRIP_ADVSTS_ADVTO_Msk            (0x1UL)                   /*!< ADVTO (Bitfield-Mask: 0x01)                           */
/* ========================================================  ADVINT  ========================================================= */
#define STRIP_ADVINT_ADVTOINT_EN_Pos      (0UL)                     /*!< ADVTOINT_EN (Bit 0)                                   */
#define STRIP_ADVINT_ADVTOINT_EN_Msk      (0x1UL)                   /*!< ADVTOINT_EN (Bitfield-Mask: 0x01)                     */


/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  GCR  ========================================================== */
#define GPIO_GCR_DIR_Pos                  (0UL)                     /*!< DIR (Bit 0)                                           */
#define GPIO_GCR_DIR_Msk                  (0x1UL)                   /*!< DIR (Bitfield-Mask: 0x01)                             */
#define GPIO_GCR_INDETEN_Pos              (1UL)                     /*!< INDETEN (Bit 1)                                       */
#define GPIO_GCR_INDETEN_Msk              (0x2UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define GPIO_GCR_INVOLMD_Pos              (2UL)                     /*!< INVOLMD (Bit 2)                                       */
#define GPIO_GCR_INVOLMD_Msk              (0x4UL)                   /*!< INVOLMD (Bitfield-Mask: 0x01)                         */
#define GPIO_GCR_PINSTS_Pos               (3UL)                     /*!< PINSTS (Bit 3)                                        */
#define GPIO_GCR_PINSTS_Msk               (0x8UL)                   /*!< PINSTS (Bitfield-Mask: 0x01)                          */
#define GPIO_GCR_MFCTRL_Pos               (8UL)                     /*!< MFCTRL (Bit 8)                                        */
#define GPIO_GCR_MFCTRL_Msk               (0x700UL)                 /*!< MFCTRL (Bitfield-Mask: 0x07)                          */
#define GPIO_GCR_OUTDRV_Pos               (11UL)                    /*!< OUTDRV (Bit 11)                                       */
#define GPIO_GCR_OUTDRV_Msk               (0x800UL)                 /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define GPIO_GCR_SLEWRATE_Pos             (12UL)                    /*!< SLEWRATE (Bit 12)                                     */
#define GPIO_GCR_SLEWRATE_Msk             (0x1000UL)                /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define GPIO_GCR_PULLDWEN_Pos             (13UL)                    /*!< PULLDWEN (Bit 13)                                     */
#define GPIO_GCR_PULLDWEN_Msk             (0x2000UL)                /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define GPIO_GCR_PULLUPEN_Pos             (14UL)                    /*!< PULLUPEN (Bit 14)                                     */
#define GPIO_GCR_PULLUPEN_Msk             (0x4000UL)                /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define GPIO_GCR_SCHEN_Pos                (15UL)                    /*!< SCHEN (Bit 15)                                        */
#define GPIO_GCR_SCHEN_Msk                (0x8000UL)                /*!< SCHEN (Bitfield-Mask: 0x01)                           */
#define GPIO_GCR_OUTMD_Pos                (16UL)                    /*!< OUTMD (Bit 16)                                        */
#define GPIO_GCR_OUTMD_Msk                (0x10000UL)               /*!< OUTMD (Bitfield-Mask: 0x01)                           */
#define GPIO_GCR_OUTCTRL_Pos              (17UL)                    /*!< OUTCTRL (Bit 17)                                      */
#define GPIO_GCR_OUTCTRL_Msk              (0x20000UL)               /*!< OUTCTRL (Bitfield-Mask: 0x01)                         */
#define GPIO_GCR_INTCTRL_Pos              (24UL)                    /*!< INTCTRL (Bit 24)                                      */
#define GPIO_GCR_INTCTRL_Msk              (0x7000000UL)             /*!< INTCTRL (Bitfield-Mask: 0x07)                         */
#define GPIO_GCR_INTEN_Pos                (28UL)                    /*!< INTEN (Bit 28)                                        */
#define GPIO_GCR_INTEN_Msk                (0x10000000UL)            /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define GPIO_GCR_INTSTS_Pos               (31UL)                    /*!< INTSTS (Bit 31)                                       */
#define GPIO_GCR_INTSTS_Msk               (0x80000000UL)            /*!< INTSTS (Bitfield-Mask: 0x01)                          */


/* =========================================================================================================================== */
/* ================                                          PWMLED                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MODE  ========================================================== */
#define PWMLED_MODE_SEL_Pos               (0UL)                     /*!< SEL (Bit 0)                                           */
#define PWMLED_MODE_SEL_Msk               (0x3UL)                   /*!< SEL (Bitfield-Mask: 0x03)                             */
/* ==========================================================  DL  =========================================================== */
#define PWMLED_DL_MINV_Pos                (0UL)                     /*!< MINV (Bit 0)                                          */
#define PWMLED_DL_MINV_Msk                (0xffUL)                  /*!< MINV (Bitfield-Mask: 0xff)                            */
#define PWMLED_DL_MAXV_Pos                (8UL)                     /*!< MAXV (Bit 8)                                          */
#define PWMLED_DL_MAXV_Msk                (0xff00UL)                /*!< MAXV (Bitfield-Mask: 0xff)                            */
/* ==========================================================  WT  =========================================================== */
#define PWMLED_WT_LKV_Pos                 (0UL)                     /*!< LKV (Bit 0)                                           */
#define PWMLED_WT_LKV_Msk                 (0xfffUL)                 /*!< LKV (Bitfield-Mask: 0xfff)                            */
#define PWMLED_WT_HKV_Pos                 (16UL)                    /*!< HKV (Bit 16)                                          */
#define PWMLED_WT_HKV_Msk                 (0xfff0000UL)             /*!< HKV (Bitfield-Mask: 0xfff)                            */
/* ==========================================================  SD  =========================================================== */
#define PWMLED_SD_STEP0DV_Pos             (0UL)                     /*!< STEP0DV (Bit 0)                                       */
#define PWMLED_SD_STEP0DV_Msk             (0xfUL)                   /*!< STEP0DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP1DV_Pos             (4UL)                     /*!< STEP1DV (Bit 4)                                       */
#define PWMLED_SD_STEP1DV_Msk             (0xf0UL)                  /*!< STEP1DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP2DV_Pos             (8UL)                     /*!< STEP2DV (Bit 8)                                       */
#define PWMLED_SD_STEP2DV_Msk             (0xf00UL)                 /*!< STEP2DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP3DV_Pos             (12UL)                    /*!< STEP3DV (Bit 12)                                      */
#define PWMLED_SD_STEP3DV_Msk             (0xf000UL)                /*!< STEP3DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP4DV_Pos             (16UL)                    /*!< STEP4DV (Bit 16)                                      */
#define PWMLED_SD_STEP4DV_Msk             (0xf0000UL)               /*!< STEP4DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP5DV_Pos             (20UL)                    /*!< STEP5DV (Bit 20)                                      */
#define PWMLED_SD_STEP5DV_Msk             (0xf00000UL)              /*!< STEP5DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP6DV_Pos             (24UL)                    /*!< STEP6DV (Bit 24)                                      */
#define PWMLED_SD_STEP6DV_Msk             (0xf000000UL)             /*!< STEP6DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP7DV_Pos             (28UL)                    /*!< STEP7DV (Bit 28)                                      */
#define PWMLED_SD_STEP7DV_Msk             (0xf0000000UL)            /*!< STEP7DV (Bitfield-Mask: 0x0f)                         */
/* ==========================================================  ST  =========================================================== */
#define PWMLED_ST_STEP0TV_Pos             (0UL)                     /*!< STEP0TV (Bit 0)                                       */
#define PWMLED_ST_STEP0TV_Msk             (0xfUL)                   /*!< STEP0TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP1TV_Pos             (4UL)                     /*!< STEP1TV (Bit 4)                                       */
#define PWMLED_ST_STEP1TV_Msk             (0xf0UL)                  /*!< STEP1TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP2TV_Pos             (8UL)                     /*!< STEP2TV (Bit 8)                                       */
#define PWMLED_ST_STEP2TV_Msk             (0xf00UL)                 /*!< STEP2TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP3TV_Pos             (12UL)                    /*!< STEP3TV (Bit 12)                                      */
#define PWMLED_ST_STEP3TV_Msk             (0xf000UL)                /*!< STEP3TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP4TV_Pos             (16UL)                    /*!< STEP4TV (Bit 16)                                      */
#define PWMLED_ST_STEP4TV_Msk             (0xf0000UL)               /*!< STEP4TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP5TV_Pos             (20UL)                    /*!< STEP5TV (Bit 20)                                      */
#define PWMLED_ST_STEP5TV_Msk             (0xf00000UL)              /*!< STEP5TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP6TV_Pos             (24UL)                    /*!< STEP6TV (Bit 24)                                      */
#define PWMLED_ST_STEP6TV_Msk             (0xf000000UL)             /*!< STEP6TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP7TV_Pos             (28UL)                    /*!< STEP7TV (Bit 28)                                      */
#define PWMLED_ST_STEP7TV_Msk             (0xf0000000UL)            /*!< STEP7TV (Bitfield-Mask: 0x0f)                         */
/* =========================================================  CTRL  ========================================================== */
#define PWMLED_CTRL_CYCLE_Pos             (16UL)                    /*!< CYCLE (Bit 16)                                        */
#define PWMLED_CTRL_CYCLE_Msk             (0xff0000UL)              /*!< CYCLE (Bitfield-Mask: 0xff)                           */
#define PWMLED_CTRL_OUTPUT_Pos            (28UL)                    /*!< OUTPUT (Bit 28)                                       */
#define PWMLED_CTRL_OUTPUT_Msk            (0x10000000UL)            /*!< OUTPUT (Bitfield-Mask: 0x01)                          */
#define PWMLED_CTRL_INVT_Pos              (29UL)                    /*!< INVT (Bit 29)                                         */
#define PWMLED_CTRL_INVT_Msk              (0x20000000UL)            /*!< INVT (Bitfield-Mask: 0x01)                            */
#define PWMLED_CTRL_RST_Pos               (30UL)                    /*!< RST (Bit 30)                                          */
#define PWMLED_CTRL_RST_Msk               (0x40000000UL)            /*!< RST (Bitfield-Mask: 0x01)                             */
#define PWMLED_CTRL_EN_Pos                (31UL)                    /*!< EN (Bit 31)                                           */
#define PWMLED_CTRL_EN_Msk                (0x80000000UL)            /*!< EN (Bitfield-Mask: 0x01)                              */


/* =========================================================================================================================== */
/* ================                                            TMR                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  LDCNT  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  CTRL  ========================================================== */
#define TMR_CTRL_EN_Pos                   (0UL)                     /*!< EN (Bit 0)                                            */
#define TMR_CTRL_EN_Msk                   (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define TMR_CTRL_MDSEL_Pos                (1UL)                     /*!< MDSEL (Bit 1)                                         */
#define TMR_CTRL_MDSEL_Msk                (0x2UL)                   /*!< MDSEL (Bitfield-Mask: 0x01)                           */
#define TMR_CTRL_INTEN_Pos                (2UL)                     /*!< INTEN (Bit 2)                                         */
#define TMR_CTRL_INTEN_Msk                (0x4UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define TMR_CTRL_STOP_Pos                 (3UL)                     /*!< STOP (Bit 3)                                          */
#define TMR_CTRL_STOP_Msk                 (0x8UL)                   /*!< STOP (Bitfield-Mask: 0x01)                            */
/* ========================================================  INTSTS  ========================================================= */
#define TMR_INTSTS_STS_Pos                (0UL)                     /*!< STS (Bit 0)                                           */
#define TMR_INTSTS_STS_Msk                (0x1UL)                   /*!< STS (Bitfield-Mask: 0x01)                             */


/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define CRC_CTRL_INIT_Pos                 (1UL)                     /*!< INIT (Bit 1)                                          */
#define CRC_CTRL_INIT_Msk                 (0x2UL)                   /*!< INIT (Bitfield-Mask: 0x01)                            */
#define CRC_CTRL_EN_Pos                   (0UL)                     /*!< EN (Bit 0)                                            */
#define CRC_CTRL_EN_Msk                   (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* =========================================================  INPUT  ========================================================= */
#define CRC_INPUT_INPUT_Pos               (0UL)                     /*!< INPUT (Bit 0)                                         */
#define CRC_INPUT_INPUT_Msk               (0xffffffffUL)            /*!< INPUT (Bitfield-Mask: 0xffffffff)                     */
/* ========================================================  RESULT  ========================================================= */
/* ========================================================  CHKSUM  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          DOTMTX                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  DATASRC  ======================================================== */
#define DOTMTX_DATASRC_DSRC_Pos           (0UL)                     /*!< DSRC (Bit 0)                                          */
#define DOTMTX_DATASRC_DSRC_Msk           (0xffffffffUL)            /*!< DSRC (Bitfield-Mask: 0xffffffff)                      */
/* =========================================================  CTRL  ========================================================== */
#define DOTMTX_CTRL_INTTYPE_Pos           (2UL)                     /*!< INTTYPE (Bit 2)                                       */
#define DOTMTX_CTRL_INTTYPE_Msk           (0x4UL)                   /*!< INTTYPE (Bitfield-Mask: 0x01)                         */
#define DOTMTX_CTRL_INTEN_Pos             (1UL)                     /*!< INTEN (Bit 1)                                         */
#define DOTMTX_CTRL_INTEN_Msk             (0x2UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DOTMTX_CTRL_START_Pos             (0UL)                     /*!< START (Bit 0)                                         */
#define DOTMTX_CTRL_START_Msk             (0x1UL)                   /*!< START (Bitfield-Mask: 0x01)                           */
/* ========================================================  COLCTRL  ======================================================== */
#define DOTMTX_COLCTRL_ROUND_Pos          (20UL)                    /*!< ROUND (Bit 20)                                        */
#define DOTMTX_COLCTRL_ROUND_Msk          (0xff00000UL)             /*!< ROUND (Bitfield-Mask: 0xff)                           */
#define DOTMTX_COLCTRL_REFCH_Pos          (16UL)                    /*!< REFCH (Bit 16)                                        */
#define DOTMTX_COLCTRL_REFCH_Msk          (0xf0000UL)               /*!< REFCH (Bitfield-Mask: 0x0f)                           */
#define DOTMTX_COLCTRL_CHEN_Pos           (0UL)                     /*!< CHEN (Bit 0)                                          */
#define DOTMTX_COLCTRL_CHEN_Msk           (0xffffUL)                /*!< CHEN (Bitfield-Mask: 0xffff)                          */
/* ========================================================  ROWCTRL  ======================================================== */
#define DOTMTX_ROWCTRL_PSWPOL_Pos         (22UL)                    /*!< PSWPOL (Bit 22)                                       */
#define DOTMTX_ROWCTRL_PSWPOL_Msk         (0xffc00000UL)            /*!< PSWPOL (Bitfield-Mask: 0x3ff)                         */
#define DOTMTX_ROWCTRL_PSWODEN_Pos        (12UL)                    /*!< PSWODEN (Bit 12)                                      */
#define DOTMTX_ROWCTRL_PSWODEN_Msk        (0x3ff000UL)              /*!< PSWODEN (Bitfield-Mask: 0x3ff)                        */
#define DOTMTX_ROWCTRL_SWDELAY_Pos        (4UL)                     /*!< SWDELAY (Bit 4)                                       */
#define DOTMTX_ROWCTRL_SWDELAY_Msk        (0xff0UL)                 /*!< SWDELAY (Bitfield-Mask: 0xff)                         */
#define DOTMTX_ROWCTRL_PSWNUM_Pos         (0UL)                     /*!< PSWNUM (Bit 0)                                        */
#define DOTMTX_ROWCTRL_PSWNUM_Msk         (0xfUL)                   /*!< PSWNUM (Bitfield-Mask: 0x0f)                          */
/* ========================================================  ROWORD0  ======================================================== */
#define DOTMTX_ROWORD0_PSWORD7_Pos        (28UL)                    /*!< PSWORD7 (Bit 28)                                      */
#define DOTMTX_ROWORD0_PSWORD7_Msk        (0xf0000000UL)            /*!< PSWORD7 (Bitfield-Mask: 0x0f)                         */
#define DOTMTX_ROWORD0_PSWORD6_Pos        (24UL)                    /*!< PSWORD6 (Bit 24)                                      */
#define DOTMTX_ROWORD0_PSWORD6_Msk        (0xf000000UL)             /*!< PSWORD6 (Bitfield-Mask: 0x0f)                         */
#define DOTMTX_ROWORD0_PSWORD5_Pos        (20UL)                    /*!< PSWORD5 (Bit 20)                                      */
#define DOTMTX_ROWORD0_PSWORD5_Msk        (0xf00000UL)              /*!< PSWORD5 (Bitfield-Mask: 0x0f)                         */
#define DOTMTX_ROWORD0_PSWORD4_Pos        (16UL)                    /*!< PSWORD4 (Bit 16)                                      */
#define DOTMTX_ROWORD0_PSWORD4_Msk        (0xf0000UL)               /*!< PSWORD4 (Bitfield-Mask: 0x0f)                         */
#define DOTMTX_ROWORD0_PSWORD3_Pos        (12UL)                    /*!< PSWORD3 (Bit 12)                                      */
#define DOTMTX_ROWORD0_PSWORD3_Msk        (0xf000UL)                /*!< PSWORD3 (Bitfield-Mask: 0x0f)                         */
#define DOTMTX_ROWORD0_PSWORD2_Pos        (8UL)                     /*!< PSWORD2 (Bit 8)                                       */
#define DOTMTX_ROWORD0_PSWORD2_Msk        (0xf00UL)                 /*!< PSWORD2 (Bitfield-Mask: 0x0f)                         */
#define DOTMTX_ROWORD0_PSWORD1_Pos        (4UL)                     /*!< PSWORD1 (Bit 4)                                       */
#define DOTMTX_ROWORD0_PSWORD1_Msk        (0xf0UL)                  /*!< PSWORD1 (Bitfield-Mask: 0x0f)                         */
#define DOTMTX_ROWORD0_PSWORD0_Pos        (0UL)                     /*!< PSWORD0 (Bit 0)                                       */
#define DOTMTX_ROWORD0_PSWORD0_Msk        (0xfUL)                   /*!< PSWORD0 (Bitfield-Mask: 0x0f)                         */
/* ========================================================  ROWORD1  ======================================================== */
#define DOTMTX_ROWORD1_PSWORD9_Pos        (4UL)                     /*!< PSWORD9 (Bit 4)                                       */
#define DOTMTX_ROWORD1_PSWORD9_Msk        (0xf0UL)                  /*!< PSWORD9 (Bitfield-Mask: 0x0f)                         */
#define DOTMTX_ROWORD1_PSWORD8_Pos        (0UL)                     /*!< PSWORD8 (Bit 0)                                       */
#define DOTMTX_ROWORD1_PSWORD8_Msk        (0xfUL)                   /*!< PSWORD8 (Bitfield-Mask: 0x0f)                         */
/* ==========================================================  STS  ========================================================== */
#define DOTMTX_STS_INTWRRDY_Pos           (14UL)                    /*!< INTWRRDY (Bit 14)                                     */
#define DOTMTX_STS_INTWRRDY_Msk           (0x4000UL)                /*!< INTWRRDY (Bitfield-Mask: 0x01)                        */
#define DOTMTX_STS_INTRDRDY_Pos           (13UL)                    /*!< INTRDRDY (Bit 13)                                     */
#define DOTMTX_STS_INTRDRDY_Msk           (0x2000UL)                /*!< INTRDRDY (Bitfield-Mask: 0x01)                        */
#define DOTMTX_STS_INTSTS_Pos             (12UL)                    /*!< INTSTS (Bit 12)                                       */
#define DOTMTX_STS_INTSTS_Msk             (0x1000UL)                /*!< INTSTS (Bitfield-Mask: 0x01)                          */
#define DOTMTX_STS_CURROW_Pos             (8UL)                     /*!< CURROW (Bit 8)                                        */
#define DOTMTX_STS_CURROW_Msk             (0xf00UL)                 /*!< CURROW (Bitfield-Mask: 0x0f)                          */
#define DOTMTX_STS_CURROUND_Pos           (0UL)                     /*!< CURROUND (Bit 0)                                      */
#define DOTMTX_STS_CURROUND_Msk           (0xffUL)                  /*!< CURROUND (Bitfield-Mask: 0xff)                        */
/* ========================================================  PWMADDR  ======================================================== */

/** @} */ /* End of group PosMask_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* RTS5921_H */


/** @} */ /* End of group RTS5921 */

/** @} */ /* End of group Realtek Semiconductor Corp. */
