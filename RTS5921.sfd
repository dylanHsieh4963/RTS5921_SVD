/*
 * The license belong to Realtek Semiconductor Corp. All the rights reserved.
 *
 * @file     RTS5921.sfd
 * @brief    CMSIS-SVD SFD File
 * @version  0.01
 * @date     02. July 2025
 * @note     Generated by SVDConv V3.3.42 on Wednesday, 02.07.2025 10:28:32
 *           from File 'RTS5921.svd',
 *           last modified on Wednesday, 02.07.2025 02:28:31
 */




// -------------------------  Register Item Address: ITR_SPIC_CTRLR0  -----------------------------
// SVD Line: 69

unsigned int ITR_SPIC_CTRLR0 __AT (0x40000000);



// ------------------------  Field Item: ITR_SPIC_CTRLR0_PRM_2ND_PHASE  ---------------------------
// SVD Line: 79

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_PRM_2ND_PHASE
//    <name> PRM_2ND_PHASE </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40000000) \nIndicate if Flash is in PRM (hi-performance read mode) of 2nd phase\n0 : DISABLE = PRM 2nd phase is disabled\n1 : ENABLE = PRM 2nd phase is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.31..31> PRM_2ND_PHASE
//        <0=> 0: DISABLE = PRM 2nd phase is disabled
//        <1=> 1: ENABLE = PRM 2nd phase is enabled
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_CTRLR0_DDR_EN  -------------------------------
// SVD Line: 99

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_DDR_EN
//    <name> DDR_EN </name>
//    <rw> 
//    <i> [Bits 30..28] RW (@ 0x40000000) \nIndicates DDR mode in CMD_CH/DATA_CH/ADDR_CH\n0 : DISABLE = DDR mode disabled\n1 : ENABLE_CMD_CH = DDR mode enabled for CMD_CH\n2 : ENABLE_DATA_CH = DDR mode enabled for DATA_CH\n3 : Reserved - do not use\n4 : ENABLE_ADDR_CH = DDR mode enabled for ADDR_CH\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.30..28> DDR_EN
//        <0=> 0: DISABLE = DDR mode disabled
//        <1=> 1: ENABLE_CMD_CH = DDR mode enabled for CMD_CH
//        <2=> 2: ENABLE_DATA_CH = DDR mode enabled for DATA_CH
//        <3=> 3: 
//        <4=> 4: ENABLE_ADDR_CH = DDR mode enabled for ADDR_CH
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: ITR_SPIC_CTRLR0_CK_MTIMES  -----------------------------
// SVD Line: 129

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_CK_MTIMES
//    <name> CK_MTIMES </name>
//    <rw> 
//    <i> [Bits 27..23] RW (@ 0x40000000) Indicates the number of check times for FLASH busy state </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_CTRLR0 >> 23) & 0x1F), ((ITR_SPIC_CTRLR0 = (ITR_SPIC_CTRLR0 & ~(0x1FUL << 23 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 23 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_CTRLR0_FAST_RD  ------------------------------
// SVD Line: 137

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_FAST_RD
//    <name> FAST_RD </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40000000) Indicate whether to use fast read command in user mode </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.22..22> FAST_RD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_CTRLR0_CMD_CH  -------------------------------
// SVD Line: 145

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_CMD_CH
//    <name> CMD_CH </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x40000000) \nIndicate channel number of command phase\n0 : SINGLE = Single channel\n1 : DUAL = Dual channel\n2 : QUAD = Quad channel\n3 : OCTAL = Octal channel </i>
//    <combo> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.21..20> CMD_CH
//        <0=> 0: SINGLE = Single channel
//        <1=> 1: DUAL = Dual channel
//        <2=> 2: QUAD = Quad channel
//        <3=> 3: OCTAL = Octal channel
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_CTRLR0_DATA_CH  ------------------------------
// SVD Line: 175

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_DATA_CH
//    <name> DATA_CH </name>
//    <rw> 
//    <i> [Bits 19..18] RW (@ 0x40000000) \nIndicate channel number of data phase\n0 : SINGLE = Single channel\n1 : DUAL = Dual channel\n2 : QUAD = Quad channel\n3 : OCTAL = Octal channel </i>
//    <combo> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.19..18> DATA_CH
//        <0=> 0: SINGLE = Single channel
//        <1=> 1: DUAL = Dual channel
//        <2=> 2: QUAD = Quad channel
//        <3=> 3: OCTAL = Octal channel
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_CTRLR0_ADDR_CH  ------------------------------
// SVD Line: 205

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_ADDR_CH
//    <name> ADDR_CH </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x40000000) \nIndicate channel number of address phase\n0 : SINGLE = Single channel\n1 : DUAL = Dual channel\n2 : QUAD = Quad channel\n3 : OCTAL = Octal channel </i>
//    <combo> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.17..16> ADDR_CH
//        <0=> 0: SINGLE = Single channel
//        <1=> 1: DUAL = Dual channel
//        <2=> 2: QUAD = Quad channel
//        <3=> 3: OCTAL = Octal channel
//    </combo>
//  </item>
//  


// --------------------------  Field Item: ITR_SPIC_CTRLR0_GCLK_DIS  ------------------------------
// SVD Line: 235

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_GCLK_DIS
//    <name> GCLK_DIS </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40000000) Set to disable gated clock of icg cell </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.10..10> GCLK_DIS
//    </check>
//  </item>
//  


// ----------------------------  Field Item: ITR_SPIC_CTRLR0_TMOD  --------------------------------
// SVD Line: 243

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_TMOD
//    <name> TMOD </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x40000000) \nIndicate transfer mode\n0 : TRANSMIT = Transmit mode\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : RECEIVE = Receive mode </i>
//    <combo> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.9..8> TMOD
//        <0=> 0: TRANSMIT = Transmit mode
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: RECEIVE = Receive mode
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: ITR_SPIC_CTRLR0_SCPOL  -------------------------------
// SVD Line: 263

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_SCPOL
//    <name> SCPOL </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40000000) Indicate serial clock polarity </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.7..7> SCPOL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: ITR_SPIC_CTRLR0_SCPH  --------------------------------
// SVD Line: 271

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_SCPH
//    <name> SCPH </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40000000) Indicate serial clock phase </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.6..6> SCPH
//    </check>
//  </item>
//  


// --------------------------  Field Item: ITR_SPIC_CTRLR0_SIPOL_EN  ------------------------------
// SVD Line: 279

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_SIPOL_EN
//    <name> SIPOL_EN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40000000) \nSet to enable SIPOL functionality\n0 : DISABLE = SIPOL disabled\n1 : ENABLE = SIPOL enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.5..5> SIPOL_EN
//        <0=> 0: DISABLE = SIPOL disabled
//        <1=> 1: ENABLE = SIPOL enabled
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: ITR_SPIC_CTRLR0_SIPOL  -------------------------------
// SVD Line: 299

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_SIPOL
//    <name> SIPOL </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x40000000) \nConfigure SPI input lines\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : DEFAULT = All relevant bits are high </i>
//    <combo> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR0 ) </loc>
//      <o.4..0> SIPOL
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: DEFAULT = All relevant bits are high
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_CTRLR0  --------------------------------
// SVD Line: 69

//  <rtree> SFDITEM_REG__ITR_SPIC_CTRLR0
//    <name> CTRLR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000000) Control Register 0 </i>
//    <loc> ( (unsigned int)((ITR_SPIC_CTRLR0 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_CTRLR0 = (ITR_SPIC_CTRLR0 & ~(0xFFFF07FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF07FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_PRM_2ND_PHASE </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_DDR_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_CK_MTIMES </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_FAST_RD </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_CMD_CH </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_DATA_CH </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_ADDR_CH </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_GCLK_DIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_TMOD </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_SCPOL </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_SCPH </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_SIPOL_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR0_SIPOL </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ITR_SPIC_RX_NDF  -----------------------------
// SVD Line: 316

unsigned int ITR_SPIC_RX_NDF __AT (0x40000004);



// -----------------------------  Field Item: ITR_SPIC_RX_NDF_NDF  --------------------------------
// SVD Line: 325

//  <item> SFDITEM_FIELD__ITR_SPIC_RX_NDF_NDF
//    <name> NDF </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40000004) Indicate a number of data frames. If Data-Split-Read function enables, NDF can be set larger than FIFO size, with a maximum size of 65535 bytes. </i>
//    <edit> 
//      <loc> ( (unsigned short)((ITR_SPIC_RX_NDF >> 0) & 0xFFFF), ((ITR_SPIC_RX_NDF = (ITR_SPIC_RX_NDF & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_RX_NDF  --------------------------------
// SVD Line: 316

//  <rtree> SFDITEM_REG__ITR_SPIC_RX_NDF
//    <name> RX_NDF </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000004) Control Register 1 </i>
//    <loc> ( (unsigned int)((ITR_SPIC_RX_NDF >> 0) & 0xFFFFFFFF), ((ITR_SPIC_RX_NDF = (ITR_SPIC_RX_NDF & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_RX_NDF_NDF </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ITR_SPIC_SSIENR  -----------------------------
// SVD Line: 338

unsigned int ITR_SPIC_SSIENR __AT (0x40000008);



// -----------------------  Field Item: ITR_SPIC_SSIENR_PGM_RST_TEST_EN  --------------------------
// SVD Line: 347

//  <item> SFDITEM_FIELD__ITR_SPIC_SSIENR_PGM_RST_TEST_EN
//    <name> PGM_RST_TEST_EN </name>
//    <w> 
//    <i> [Bit 4] WO (@ 0x40000008) Generates a warm reset pulse; for PGM RST testing only </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SSIENR ) </loc>
//      <o.4..4> PGM_RST_TEST_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: ITR_SPIC_SSIENR_ATCK_CMD  ------------------------------
// SVD Line: 355

//  <item> SFDITEM_FIELD__ITR_SPIC_SSIENR_ATCK_CMD
//    <name> ATCK_CMD </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000008) Sets to enable the check of flash busy status or timeout before accepting new commands in User Mode.  Disable this if CTRLR0.SEQ_CMD is set. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SSIENR ) </loc>
//      <o.1..1> ATCK_CMD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_SSIENR_SPIC_EN  ------------------------------
// SVD Line: 366

//  <item> SFDITEM_FIELD__ITR_SPIC_SSIENR_SPIC_EN
//    <name> SPIC_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000008) Set to enable SPIC </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SSIENR ) </loc>
//      <o.0..0> SPIC_EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_SSIENR  --------------------------------
// SVD Line: 338

//  <rtree> SFDITEM_REG__ITR_SPIC_SSIENR
//    <name> SSIENR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000008) SPIC Enable Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_SSIENR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_SSIENR = (ITR_SPIC_SSIENR & ~(0x13UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x13) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_SSIENR_PGM_RST_TEST_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SSIENR_ATCK_CMD </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SSIENR_SPIC_EN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ITR_SPIC_MWCR  ------------------------------
// SVD Line: 376

unsigned int ITR_SPIC_MWCR __AT (0x4000000C);



// ------------------------------  Register Item: ITR_SPIC_MWCR  ----------------------------------
// SVD Line: 376

//  <item> SFDITEM_REG__ITR_SPIC_MWCR
//    <name> MWCR </name>
//    <i> [Bits 31..0] RW (@ 0x4000000C) N/A </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_MWCR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_MWCR = (ITR_SPIC_MWCR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: ITR_SPIC_SER  ------------------------------
// SVD Line: 386

unsigned int ITR_SPIC_SER __AT (0x40000010);



// -------------------------------  Register Item: ITR_SPIC_SER  ----------------------------------
// SVD Line: 386

//  <item> SFDITEM_REG__ITR_SPIC_SER
//    <name> SER </name>
//    <i> [Bits 31..0] RW (@ 0x40000010) Slave Enable Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_SER >> 0) & 0xFFFFFFFF), ((ITR_SPIC_SER = (ITR_SPIC_SER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ITR_SPIC_BAUDR  -----------------------------
// SVD Line: 396

unsigned int ITR_SPIC_BAUDR __AT (0x40000014);



// ----------------------------  Field Item: ITR_SPIC_BAUDR_SCKDV  --------------------------------
// SVD Line: 405

//  <item> SFDITEM_FIELD__ITR_SPIC_BAUDR_SCKDV
//    <name> SCKDV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40000014) Define spi_sclk divider value. The frequency of spi_sclk is derived from:  Frequency of spi_sclk = Frequency of bus_clk / (2*SCKDV). </i>
//    <edit> 
//      <loc> ( (unsigned short)((ITR_SPIC_BAUDR >> 0) & 0xFFF), ((ITR_SPIC_BAUDR = (ITR_SPIC_BAUDR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_BAUDR  ---------------------------------
// SVD Line: 396

//  <rtree> SFDITEM_REG__ITR_SPIC_BAUDR
//    <name> BAUDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000014) Baud Rate Select </i>
//    <loc> ( (unsigned int)((ITR_SPIC_BAUDR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_BAUDR = (ITR_SPIC_BAUDR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_BAUDR_SCKDV </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ITR_SPIC_TXFTLR  -----------------------------
// SVD Line: 418

unsigned int ITR_SPIC_TXFTLR __AT (0x40000018);



// -----------------------------  Field Item: ITR_SPIC_TXFTLR_TFT  --------------------------------
// SVD Line: 427

//  <item> SFDITEM_FIELD__ITR_SPIC_TXFTLR_TFT
//    <name> TFT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x40000018) Transmit FIFO threshold. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_TXFTLR >> 0) & 0x1F), ((ITR_SPIC_TXFTLR = (ITR_SPIC_TXFTLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_TXFTLR  --------------------------------
// SVD Line: 418

//  <rtree> SFDITEM_REG__ITR_SPIC_TXFTLR
//    <name> TXFTLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000018) Transmit FIFO Threshold level </i>
//    <loc> ( (unsigned int)((ITR_SPIC_TXFTLR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_TXFTLR = (ITR_SPIC_TXFTLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_TXFTLR_TFT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ITR_SPIC_RXFTLR  -----------------------------
// SVD Line: 437

unsigned int ITR_SPIC_RXFTLR __AT (0x4000001C);



// -----------------------------  Field Item: ITR_SPIC_RXFTLR_RFT  --------------------------------
// SVD Line: 446

//  <item> SFDITEM_FIELD__ITR_SPIC_RXFTLR_RFT
//    <name> RFT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x4000001C) Receive FIFO threshold. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_RXFTLR >> 0) & 0x1F), ((ITR_SPIC_RXFTLR = (ITR_SPIC_RXFTLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_RXFTLR  --------------------------------
// SVD Line: 437

//  <rtree> SFDITEM_REG__ITR_SPIC_RXFTLR
//    <name> RXFTLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000001C) Receive FIFO Threshold level </i>
//    <loc> ( (unsigned int)((ITR_SPIC_RXFTLR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_RXFTLR = (ITR_SPIC_RXFTLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_RXFTLR_RFT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ITR_SPIC_TXFLR  -----------------------------
// SVD Line: 456

unsigned int ITR_SPIC_TXFLR __AT (0x40000020);



// ----------------------------  Field Item: ITR_SPIC_TXFLR_TXFLR  --------------------------------
// SVD Line: 465

//  <item> SFDITEM_FIELD__ITR_SPIC_TXFLR_TXFLR
//    <name> TXFLR </name>
//    <r> 
//    <i> [Bits 5..0] RO (@ 0x40000020) Indicates the FIFO level of valid data during transmission. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_TXFLR >> 0) & 0x3F) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_TXFLR  ---------------------------------
// SVD Line: 456

//  <rtree> SFDITEM_REG__ITR_SPIC_TXFLR
//    <name> TXFLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000020) Transmit FIFO level Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_TXFLR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_TXFLR_TXFLR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ITR_SPIC_RXFLR  -----------------------------
// SVD Line: 475

unsigned int ITR_SPIC_RXFLR __AT (0x40000024);



// ----------------------------  Field Item: ITR_SPIC_RXFLR_RXFLR  --------------------------------
// SVD Line: 484

//  <item> SFDITEM_FIELD__ITR_SPIC_RXFLR_RXFLR
//    <name> RXFLR </name>
//    <r> 
//    <i> [Bits 5..0] RO (@ 0x40000024) Indicates the FIFO level of valid data during reception. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_RXFLR >> 0) & 0x3F) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_RXFLR  ---------------------------------
// SVD Line: 475

//  <rtree> SFDITEM_REG__ITR_SPIC_RXFLR
//    <name> RXFLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000024) Receive FIFO level Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_RXFLR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_RXFLR_RXFLR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: ITR_SPIC_SR  -------------------------------
// SVD Line: 494

unsigned int ITR_SPIC_SR __AT (0x40000028);



// ----------------------------  Field Item: ITR_SPIC_SR_BOOT_FIN  --------------------------------
// SVD Line: 504

//  <item> SFDITEM_FIELD__ITR_SPIC_SR_BOOT_FIN
//    <name> BOOT_FIN </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40000028) Boot Finish status indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SR ) </loc>
//      <o.7..7> BOOT_FIN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ITR_SPIC_SR_DCOL  ----------------------------------
// SVD Line: 512

//  <item> SFDITEM_FIELD__ITR_SPIC_SR_DCOL
//    <name> DCOL </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40000028) Data collision or transmitting status. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SR ) </loc>
//      <o.6..6> DCOL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: ITR_SPIC_SR_TXE  ----------------------------------
// SVD Line: 520

//  <item> SFDITEM_FIELD__ITR_SPIC_SR_TXE
//    <name> TXE </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40000028) Transmission error indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SR ) </loc>
//      <o.5..5> TXE
//    </check>
//  </item>
//  


// -------------------------------  Field Item: ITR_SPIC_SR_RFF  ----------------------------------
// SVD Line: 528

//  <item> SFDITEM_FIELD__ITR_SPIC_SR_RFF
//    <name> RFF </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40000028) Receive FIFO full status. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SR ) </loc>
//      <o.4..4> RFF
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ITR_SPIC_SR_RFNE  ----------------------------------
// SVD Line: 536

//  <item> SFDITEM_FIELD__ITR_SPIC_SR_RFNE
//    <name> RFNE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40000028) Receive FIFO not empty status. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SR ) </loc>
//      <o.3..3> RFNE
//    </check>
//  </item>
//  


// -------------------------------  Field Item: ITR_SPIC_SR_TFE  ----------------------------------
// SVD Line: 544

//  <item> SFDITEM_FIELD__ITR_SPIC_SR_TFE
//    <name> TFE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40000028) Transmit FIFO empty status. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SR ) </loc>
//      <o.2..2> TFE
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ITR_SPIC_SR_TFNF  ----------------------------------
// SVD Line: 552

//  <item> SFDITEM_FIELD__ITR_SPIC_SR_TFNF
//    <name> TFNF </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40000028) Transmit FIFO not full status. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SR ) </loc>
//      <o.1..1> TFNF
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ITR_SPIC_SR_BUSY  ----------------------------------
// SVD Line: 560

//  <item> SFDITEM_FIELD__ITR_SPIC_SR_BUSY
//    <name> BUSY </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40000028) SPIC busy flag. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_SR ) </loc>
//      <o.0..0> BUSY
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: ITR_SPIC_SR  ----------------------------------
// SVD Line: 494

//  <rtree> SFDITEM_REG__ITR_SPIC_SR
//    <name> SR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40000028) Status Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_SR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_SR_BOOT_FIN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SR_DCOL </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SR_TXE </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SR_RFF </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SR_RFNE </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SR_TFE </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SR_TFNF </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_SR_BUSY </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: ITR_SPIC_IMR  ------------------------------
// SVD Line: 570

unsigned int ITR_SPIC_IMR __AT (0x4000002C);



// -----------------------------  Field Item: ITR_SPIC_IMR_ACSIM  ---------------------------------
// SVD Line: 580

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_ACSIM
//    <name> ACSIM </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000002C) Auto-check Flash Status raw interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.11..11> ACSIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_RXSIM  ---------------------------------
// SVD Line: 588

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_RXSIM
//    <name> RXSIM </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000002C) Transmit split interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.10..10> RXSIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_TXSIM  ---------------------------------
// SVD Line: 596

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_TXSIM
//    <name> TXSIM </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000002C) Transmit split interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.9..9> TXSIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_ACEIM  ---------------------------------
// SVD Line: 604

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_ACEIM
//    <name> ACEIM </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4000002C) Auto-check timeout error interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.8..8> ACEIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_BYEIM  ---------------------------------
// SVD Line: 612

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_BYEIM
//    <name> BYEIM </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4000002C) Byte-Enable error interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.7..7> BYEIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_WBEIM  ---------------------------------
// SVD Line: 620

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_WBEIM
//    <name> WBEIM </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4000002C) Write burst error interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.6..6> WBEIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_FSEIM  ---------------------------------
// SVD Line: 628

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_FSEIM
//    <name> FSEIM </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4000002C) FIFO size error interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.5..5> FSEIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_RXFIM  ---------------------------------
// SVD Line: 636

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_RXFIM
//    <name> RXFIM </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4000002C) Receive FIFO full interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.4..4> RXFIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_RXOIM  ---------------------------------
// SVD Line: 644

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_RXOIM
//    <name> RXOIM </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4000002C) Receive FIFO overflow interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.3..3> RXOIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_RXUIM  ---------------------------------
// SVD Line: 652

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_RXUIM
//    <name> RXUIM </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4000002C) Receive FIFO underflow interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.2..2> RXUIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_TXOIM  ---------------------------------
// SVD Line: 660

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_TXOIM
//    <name> TXOIM </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000002C) Transmit FIFO overflow interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.1..1> TXOIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_IMR_TXEIM  ---------------------------------
// SVD Line: 668

//  <item> SFDITEM_FIELD__ITR_SPIC_IMR_TXEIM
//    <name> TXEIM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000002C) Transmit FIFO empty interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_IMR ) </loc>
//      <o.0..0> TXEIM
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: ITR_SPIC_IMR  ----------------------------------
// SVD Line: 570

//  <rtree> SFDITEM_REG__ITR_SPIC_IMR
//    <name> IMR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000002C) Interrupt Mask Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_IMR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_IMR = (ITR_SPIC_IMR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_ACSIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_RXSIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_TXSIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_ACEIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_BYEIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_WBEIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_FSEIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_RXFIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_RXOIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_RXUIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_TXOIM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_IMR_TXEIM </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: ITR_SPIC_ISR  ------------------------------
// SVD Line: 678

unsigned int ITR_SPIC_ISR __AT (0x40000030);



// -----------------------------  Field Item: ITR_SPIC_ISR_ACSIS  ---------------------------------
// SVD Line: 688

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_ACSIS
//    <name> ACSIS </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40000030) Auto-check Flash Status after masking. 1: spi_aceir_r is active after masking. 0: spi_aceir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.11..11> ACSIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_RXSIS  ---------------------------------
// SVD Line: 696

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_RXSIS
//    <name> RXSIS </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40000030) Receive split interrupt status after masking. 1: spi_rxsir_r is active after masking. 0: spi_rxsir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.10..10> RXSIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_TXSIS  ---------------------------------
// SVD Line: 704

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_TXSIS
//    <name> TXSIS </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40000030) Transmit split interrupt status after masking. 1: spi_txsir_r is active after masking. 0: spi_txsir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.9..9> TXSIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_ACEIS  ---------------------------------
// SVD Line: 712

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_ACEIS
//    <name> ACEIS </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40000030) Auto-check timeout error status after masking. 1: spi_aceir_r is active after masking. 0: spi_aceir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.8..8> ACEIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_BYEIS  ---------------------------------
// SVD Line: 720

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_BYEIS
//    <name> BYEIS </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40000030) Byte-Enable error interrupts status after masking. 1: spi_byeir_r is active after masking. 0: spi_byeir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.7..7> BYEIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_WBEIS  ---------------------------------
// SVD Line: 728

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_WBEIS
//    <name> WBEIS </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40000030) Write burst error interrupt status after masking. 1: spi_wbeir_r is active after masking. 0: spi_wbeir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.6..6> WBEIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_FSEIS  ---------------------------------
// SVD Line: 736

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_FSEIS
//    <name> FSEIS </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40000030) FIFO size error interrupts status after masking. 1: spi_fesir_r is active after masking. 0: spi_fesir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.5..5> FSEIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_RXFIS  ---------------------------------
// SVD Line: 744

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_RXFIS
//    <name> RXFIS </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40000030) Receive FIFO full interrupt status after masking. 1: spi_rxfir is active after masking. 0: spi_rxfir is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.4..4> RXFIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_RXOIS  ---------------------------------
// SVD Line: 752

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_RXOIS
//    <name> RXOIS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40000030) Receive FIFO overflow interrupt status after masking. 1: spi_rxoir_r is active after masking. 0: spi_rxoir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.3..3> RXOIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_RXUIS  ---------------------------------
// SVD Line: 760

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_RXUIS
//    <name> RXUIS </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40000030) Receive FIFO underflow interrupt status after masking. 1: spi_rxuir_r is active after masking. 0: spi_rxuir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.2..2> RXUIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_TXOIS  ---------------------------------
// SVD Line: 768

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_TXOIS
//    <name> TXOIS </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40000030) Transmit FIFO overflow interrupt status after masking. 1: spi_txoir_r is active after masking. 0: spi_txoir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.1..1> TXOIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_ISR_TXEIS  ---------------------------------
// SVD Line: 776

//  <item> SFDITEM_FIELD__ITR_SPIC_ISR_TXEIS
//    <name> TXEIS </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40000030) Transmit FIFO empty interrupt status after masking. 1: spi_txeir is active after masking. 0: spi_txeir is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_ISR ) </loc>
//      <o.0..0> TXEIS
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: ITR_SPIC_ISR  ----------------------------------
// SVD Line: 678

//  <rtree> SFDITEM_REG__ITR_SPIC_ISR
//    <name> ISR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40000030) Interrupt Status Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_ISR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_ACSIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_RXSIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_TXSIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_ACEIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_BYEIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_WBEIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_FSEIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_RXFIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_RXOIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_RXUIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_TXOIS </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_ISR_TXEIS </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ITR_SPIC_RISR  ------------------------------
// SVD Line: 787

unsigned int ITR_SPIC_RISR __AT (0x40000034);



// -----------------------------  Field Item: ITR_SPIC_RISR_ACSIR  --------------------------------
// SVD Line: 797

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_ACSIR
//    <name> ACSIR </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40000034) Auto-check Flash Status raw interrupt status prior to masking. 1: spi_acsir_r is active prior to masking. 0: spi_acsir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.11..11> ACSIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_RXSIR  --------------------------------
// SVD Line: 805

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_RXSIR
//    <name> RXSIR </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40000034) Receive split interrupt status prior to masking. 1: spi_rxsir_r is active prior to masking. 0: spi_rxsir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.10..10> RXSIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_TXSIR  --------------------------------
// SVD Line: 813

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_TXSIR
//    <name> TXSIR </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40000034) Transmit split interrupt status prior to masking. 1: spi_txsir_r is active prior to masking. 0: spi_txsir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.9..9> TXSIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_ACEIR  --------------------------------
// SVD Line: 821

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_ACEIR
//    <name> ACEIR </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40000034) Auto-check timeout error raw interrupt status prior to masking. 1: spi_aceir_r is active prior to masking. 0: spi_aceir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.8..8> ACEIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_BYEIR  --------------------------------
// SVD Line: 829

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_BYEIR
//    <name> BYEIR </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40000034) The Byte-Enable error interrupt raw status prior to masking. 1: spi_byeir_r is active prior to masking. 0: spi_byeir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.7..7> BYEIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_WBEIR  --------------------------------
// SVD Line: 837

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_WBEIR
//    <name> WBEIR </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40000034) Write burst error raw interrupt status prior to masking. 1: spi_wbeir_r is active prior to masking. 0: spi_wbeir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.6..6> WBEIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_FSEIR  --------------------------------
// SVD Line: 845

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_FSEIR
//    <name> FSEIR </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40000034) FIFO size error raw interrupt status prior to masking. 1: spi_fseir_r is active prior to masking. 0: spi_fseir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.5..5> FSEIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_RXFIR  --------------------------------
// SVD Line: 853

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_RXFIR
//    <name> RXFIR </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40000034) Receive FIFO full raw interrupt status prior to masking. 1: spi_rxfir is active prior to masking. 0: spi_rxfir is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.4..4> RXFIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_RXOIR  --------------------------------
// SVD Line: 861

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_RXOIR
//    <name> RXOIR </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40000034) Receive FIFO overflow raw interrupt status prior to masking. 1: spi_rxoir_r is active prior to masking. 0: spi_rxoir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.3..3> RXOIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_RXUIR  --------------------------------
// SVD Line: 869

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_RXUIR
//    <name> RXUIR </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40000034) Receive FIFO underflow raw interrupt status prior to masking. 1: spi_rxuir_r is active prior to masking. 0: spi_rxuir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.2..2> RXUIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_TXOIR  --------------------------------
// SVD Line: 877

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_TXOIR
//    <name> TXOIR </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40000034) Transmit FIFO overflow raw interrupt status prior to masking. 1: spi_txoir_r is active prior to masking. 0: spi_txoir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.1..1> TXOIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ITR_SPIC_RISR_TXEIR  --------------------------------
// SVD Line: 885

//  <item> SFDITEM_FIELD__ITR_SPIC_RISR_TXEIR
//    <name> TXEIR </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40000034) Transmit FIFO empty raw interrupt status prior to masking. 1: spi_txeir is active prior to masking. 0: spi_txeir is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_RISR ) </loc>
//      <o.0..0> TXEIR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: ITR_SPIC_RISR  ---------------------------------
// SVD Line: 787

//  <rtree> SFDITEM_REG__ITR_SPIC_RISR
//    <name> RISR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40000034) Raw Interrupt Status Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_RISR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_ACSIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_RXSIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_TXSIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_ACEIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_BYEIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_WBEIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_FSEIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_RXFIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_RXOIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_RXUIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_TXOIR </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_RISR_TXEIR </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ITR_SPIC_TXOICR  -----------------------------
// SVD Line: 895

unsigned int ITR_SPIC_TXOICR __AT (0x40000038);



// -----------------------------  Register Item: ITR_SPIC_TXOICR  ---------------------------------
// SVD Line: 895

//  <item> SFDITEM_REG__ITR_SPIC_TXOICR
//    <name> TXOICR </name>
//    <i> [Bits 31..0] WO (@ 0x40000038) Transmit FIFO Overflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_TXOICR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_TXOICR = (ITR_SPIC_TXOICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_RXOICR  -----------------------------
// SVD Line: 905

unsigned int ITR_SPIC_RXOICR __AT (0x4000003C);



// -----------------------------  Register Item: ITR_SPIC_RXOICR  ---------------------------------
// SVD Line: 905

//  <item> SFDITEM_REG__ITR_SPIC_RXOICR
//    <name> RXOICR </name>
//    <i> [Bits 31..0] RO (@ 0x4000003C) Receive FIFO Overflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_RXOICR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_RXOICR = (ITR_SPIC_RXOICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_RXUICR  -----------------------------
// SVD Line: 915

unsigned int ITR_SPIC_RXUICR __AT (0x40000040);



// -----------------------------  Register Item: ITR_SPIC_RXUICR  ---------------------------------
// SVD Line: 915

//  <item> SFDITEM_REG__ITR_SPIC_RXUICR
//    <name> RXUICR </name>
//    <i> [Bits 31..0] RO (@ 0x40000040) Receive FIFO Underflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_RXUICR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_RXUICR = (ITR_SPIC_RXUICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_MSTICR  -----------------------------
// SVD Line: 925

unsigned int ITR_SPIC_MSTICR __AT (0x40000044);



// -----------------------------  Register Item: ITR_SPIC_MSTICR  ---------------------------------
// SVD Line: 925

//  <item> SFDITEM_REG__ITR_SPIC_MSTICR
//    <name> MSTICR </name>
//    <i> [Bits 31..0] WO (@ 0x40000044) Master error Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_MSTICR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_MSTICR = (ITR_SPIC_MSTICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: ITR_SPIC_ICR  ------------------------------
// SVD Line: 935

unsigned int ITR_SPIC_ICR __AT (0x40000048);



// -------------------------------  Register Item: ITR_SPIC_ICR  ----------------------------------
// SVD Line: 935

//  <item> SFDITEM_REG__ITR_SPIC_ICR
//    <name> ICR </name>
//    <i> [Bits 31..0] WO (@ 0x40000048) Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_ICR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_ICR = (ITR_SPIC_ICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ITR_SPIC_DMACR  -----------------------------
// SVD Line: 945

unsigned int ITR_SPIC_DMACR __AT (0x4000004C);



// --------------------------  Field Item: ITR_SPIC_DMACR_TX_DMAC_EN  -----------------------------
// SVD Line: 954

//  <item> SFDITEM_FIELD__ITR_SPIC_DMACR_TX_DMAC_EN
//    <name> TX_DMAC_EN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000004C) Transmit DMA Enable. Enables/disables the transmit FIFO DMA channel. 0 = Transmit DMA disabled, 1 = Transmit DMA enabled. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_DMACR ) </loc>
//      <o.1..1> TX_DMAC_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: ITR_SPIC_DMACR_RX_DMAC_EN  -----------------------------
// SVD Line: 962

//  <item> SFDITEM_FIELD__ITR_SPIC_DMACR_RX_DMAC_EN
//    <name> RX_DMAC_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000004C) Receive DMA Enable. Enables/disables the receive FIFO DMA channel. 0 = Receive DMA disabled, 1 = Receive DMA enabled. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_DMACR ) </loc>
//      <o.0..0> RX_DMAC_EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_DMACR  ---------------------------------
// SVD Line: 945

//  <rtree> SFDITEM_REG__ITR_SPIC_DMACR
//    <name> DMACR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000004C) DMA Control Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_DMACR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DMACR = (ITR_SPIC_DMACR & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_DMACR_TX_DMAC_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_DMACR_RX_DMAC_EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ITR_SPIC_DMATDLR  ----------------------------
// SVD Line: 972

unsigned int ITR_SPIC_DMATDLR __AT (0x40000050);



// -----------------------------  Register Item: ITR_SPIC_DMATDLR  --------------------------------
// SVD Line: 972

//  <item> SFDITEM_REG__ITR_SPIC_DMATDLR
//    <name> DMATDLR </name>
//    <i> [Bits 31..0] RW (@ 0x40000050) DMA Transmit Data Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DMATDLR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DMATDLR = (ITR_SPIC_DMATDLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_DMARDLR  ----------------------------
// SVD Line: 982

unsigned int ITR_SPIC_DMARDLR __AT (0x40000054);



// -----------------------------  Register Item: ITR_SPIC_DMARDLR  --------------------------------
// SVD Line: 982

//  <item> SFDITEM_REG__ITR_SPIC_DMARDLR
//    <name> DMARDLR </name>
//    <i> [Bits 31..0] RW (@ 0x40000054) DMA Receive Data Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DMARDLR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DMARDLR = (ITR_SPIC_DMARDLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: ITR_SPIC_IDR  ------------------------------
// SVD Line: 992

unsigned int ITR_SPIC_IDR __AT (0x40000058);



// -------------------------------  Register Item: ITR_SPIC_IDR  ----------------------------------
// SVD Line: 992

//  <item> SFDITEM_REG__ITR_SPIC_IDR
//    <name> IDR </name>
//    <i> [Bits 31..0] RO (@ 0x40000058) Identification Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_IDR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_IDR = (ITR_SPIC_IDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: ITR_SPIC_SPIC_VERSION  --------------------------
// SVD Line: 1002

unsigned int ITR_SPIC_SPIC_VERSION __AT (0x4000005C);



// --------------------------  Register Item: ITR_SPIC_SPIC_VERSION  ------------------------------
// SVD Line: 1002

//  <item> SFDITEM_REG__ITR_SPIC_SPIC_VERSION
//    <name> SPIC_VERSION </name>
//    <i> [Bits 31..0] RO (@ 0x4000005C) SPIC version ID Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_SPIC_VERSION >> 0) & 0xFFFFFFFF), ((ITR_SPIC_SPIC_VERSION = (ITR_SPIC_SPIC_VERSION & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: ITR_SPIC_DR  -------------------------------
// SVD Line: 1012

unsigned int ITR_SPIC_DR __AT (0x40000060);



// -------------------------------  Register Item: ITR_SPIC_DR  -----------------------------------
// SVD Line: 1012

//  <item> SFDITEM_REG__ITR_SPIC_DR
//    <name> DR </name>
//    <i> [Bits 31..0] RW (@ 0x40000060) Data Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DR = (ITR_SPIC_DR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ITR_SPIC_DM_DR  -----------------------------
// SVD Line: 1022

unsigned int ITR_SPIC_DM_DR __AT (0x400000A0);



// ------------------------------  Register Item: ITR_SPIC_DM_DR  ---------------------------------
// SVD Line: 1022

//  <item> SFDITEM_REG__ITR_SPIC_DM_DR
//    <name> DM_DR </name>
//    <i> [Bits 31..0] RW (@ 0x400000A0) Data Mask Data Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DM_DR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DM_DR = (ITR_SPIC_DM_DR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Register Item Address: ITR_SPIC_READ_FAST_SINGLE  ------------------------
// SVD Line: 1032

unsigned int ITR_SPIC_READ_FAST_SINGLE __AT (0x400000E0);



// ------------------------  Register Item: ITR_SPIC_READ_FAST_SINGLE  ----------------------------
// SVD Line: 1032

//  <item> SFDITEM_REG__ITR_SPIC_READ_FAST_SINGLE
//    <name> READ_FAST_SINGLE </name>
//    <i> [Bits 31..0] RW (@ 0x400000E0) Fast Read Data Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_READ_FAST_SINGLE >> 0) & 0xFFFFFFFF), ((ITR_SPIC_READ_FAST_SINGLE = (ITR_SPIC_READ_FAST_SINGLE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: ITR_SPIC_READ_DUAL_DATA  -------------------------
// SVD Line: 1042

unsigned int ITR_SPIC_READ_DUAL_DATA __AT (0x400000E4);



// -------------------------  Register Item: ITR_SPIC_READ_DUAL_DATA  -----------------------------
// SVD Line: 1042

//  <item> SFDITEM_REG__ITR_SPIC_READ_DUAL_DATA
//    <name> READ_DUAL_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400000E4) Dual Output Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_READ_DUAL_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_READ_DUAL_DATA = (ITR_SPIC_READ_DUAL_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------  Register Item Address: ITR_SPIC_READ_DUAL_ADDR_DATA  ----------------------
// SVD Line: 1052

unsigned int ITR_SPIC_READ_DUAL_ADDR_DATA __AT (0x400000E8);



// -----------------------  Register Item: ITR_SPIC_READ_DUAL_ADDR_DATA  --------------------------
// SVD Line: 1052

//  <item> SFDITEM_REG__ITR_SPIC_READ_DUAL_ADDR_DATA
//    <name> READ_DUAL_ADDR_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400000E8) Dual I/O Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_READ_DUAL_ADDR_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_READ_DUAL_ADDR_DATA = (ITR_SPIC_READ_DUAL_ADDR_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: ITR_SPIC_READ_QUAD_DATA  -------------------------
// SVD Line: 1062

unsigned int ITR_SPIC_READ_QUAD_DATA __AT (0x400000EC);



// -------------------------  Register Item: ITR_SPIC_READ_QUAD_DATA  -----------------------------
// SVD Line: 1062

//  <item> SFDITEM_REG__ITR_SPIC_READ_QUAD_DATA
//    <name> READ_QUAD_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400000EC) Quad Output Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_READ_QUAD_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_READ_QUAD_DATA = (ITR_SPIC_READ_QUAD_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------  Register Item Address: ITR_SPIC_READ_QUAD_ADDR_DATA  ----------------------
// SVD Line: 1073

unsigned int ITR_SPIC_READ_QUAD_ADDR_DATA __AT (0x400000F0);



// ------------------  Field Item: ITR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_CMD  ---------------------
// SVD Line: 1082

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_CMD
//    <name> EXIT_PRM_CMD </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x400000F0) Exit High Performance Read Mode command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_READ_QUAD_ADDR_DATA >> 24) & 0xFF), ((ITR_SPIC_READ_QUAD_ADDR_DATA = (ITR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ITR_SPIC_READ_QUAD_ADDR_DATA_PRM_VAL  ------------------------
// SVD Line: 1090

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_QUAD_ADDR_DATA_PRM_VAL
//    <name> PRM_VAL </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x400000F0) High Performance Read Mode Value. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_READ_QUAD_ADDR_DATA >> 16) & 0xFF), ((ITR_SPIC_READ_QUAD_ADDR_DATA = (ITR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------  Field Item: ITR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_DUM_LEN  -------------------
// SVD Line: 1098

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_DUM_LEN
//    <name> EXIT_PRM_DUM_LEN </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x400000F0) Extend the Exit PRM command if it is more than 1 byte. It uses bus_clk as reference. For example, in QPI mode (4-4-4), for FFFFFFFFh data cycle (4-byte data in 8 SPI cycles), EXIT_PRM_CMD sends 1 byte (2 SPI cycles), and EXIT_PRM_DUM_LEN extends 6 SPI cycles. (SPI cycles: 6 * (2 * baud_rate)). </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_READ_QUAD_ADDR_DATA >> 8) & 0xFF), ((ITR_SPIC_READ_QUAD_ADDR_DATA = (ITR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------  Field Item: ITR_SPIC_READ_QUAD_ADDR_DATA_RD_QUAD_IO_CMD  --------------------
// SVD Line: 1108

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_QUAD_ADDR_DATA_RD_QUAD_IO_CMD
//    <name> RD_QUAD_IO_CMD </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x400000F0) SPI Flash command value for quad address and data read command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_READ_QUAD_ADDR_DATA >> 0) & 0xFF), ((ITR_SPIC_READ_QUAD_ADDR_DATA = (ITR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register RTree: ITR_SPIC_READ_QUAD_ADDR_DATA  --------------------------
// SVD Line: 1073

//  <rtree> SFDITEM_REG__ITR_SPIC_READ_QUAD_ADDR_DATA
//    <name> READ_QUAD_ADDR_DATA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400000F0) Quad I/O Read Command of SPI Flash </i>
//    <loc> ( (unsigned int)((ITR_SPIC_READ_QUAD_ADDR_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_READ_QUAD_ADDR_DATA = (ITR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_CMD </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_QUAD_ADDR_DATA_PRM_VAL </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_DUM_LEN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_QUAD_ADDR_DATA_RD_QUAD_IO_CMD </item>
//  </rtree>
//  


// ----------------------  Register Item Address: ITR_SPIC_WRITE_SINGLE  --------------------------
// SVD Line: 1118

unsigned int ITR_SPIC_WRITE_SINGLE __AT (0x400000F4);



// --------------------------  Register Item: ITR_SPIC_WRITE_SINGLE  ------------------------------
// SVD Line: 1118

//  <item> SFDITEM_REG__ITR_SPIC_WRITE_SINGLE
//    <name> WRITE_SINGLE </name>
//    <i> [Bits 31..0] RW (@ 0x400000F4) Page Program Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_WRITE_SINGLE >> 0) & 0xFFFFFFFF), ((ITR_SPIC_WRITE_SINGLE = (ITR_SPIC_WRITE_SINGLE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: ITR_SPIC_WRITE_DUAL_DATA  ------------------------
// SVD Line: 1128

unsigned int ITR_SPIC_WRITE_DUAL_DATA __AT (0x400000F8);



// -------------------------  Register Item: ITR_SPIC_WRITE_DUAL_DATA  ----------------------------
// SVD Line: 1128

//  <item> SFDITEM_REG__ITR_SPIC_WRITE_DUAL_DATA
//    <name> WRITE_DUAL_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400000F8) Dual Data Input Program Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_WRITE_DUAL_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_WRITE_DUAL_DATA = (ITR_SPIC_WRITE_DUAL_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Register Item Address: ITR_SPIC_WRITE_DUAL_ADDR_DATA  ----------------------
// SVD Line: 1138

unsigned int ITR_SPIC_WRITE_DUAL_ADDR_DATA __AT (0x400000FC);



// ----------------------  Register Item: ITR_SPIC_WRITE_DUAL_ADDR_DATA  --------------------------
// SVD Line: 1138

//  <item> SFDITEM_REG__ITR_SPIC_WRITE_DUAL_ADDR_DATA
//    <name> WRITE_DUAL_ADDR_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400000FC) Dual Address and Data Output Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_WRITE_DUAL_ADDR_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_WRITE_DUAL_ADDR_DATA = (ITR_SPIC_WRITE_DUAL_ADDR_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: ITR_SPIC_WRITE_QUAD_DATA  ------------------------
// SVD Line: 1148

unsigned int ITR_SPIC_WRITE_QUAD_DATA __AT (0x40000100);



// -------------------------  Register Item: ITR_SPIC_WRITE_QUAD_DATA  ----------------------------
// SVD Line: 1148

//  <item> SFDITEM_REG__ITR_SPIC_WRITE_QUAD_DATA
//    <name> WRITE_QUAD_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x40000100) Quad Data Input Program Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_WRITE_QUAD_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_WRITE_QUAD_DATA = (ITR_SPIC_WRITE_QUAD_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Register Item Address: ITR_SPIC_WRITE_QUAD_ADDR_DATA  ----------------------
// SVD Line: 1159

unsigned int ITR_SPIC_WRITE_QUAD_ADDR_DATA __AT (0x40000104);



// ----------------------  Register Item: ITR_SPIC_WRITE_QUAD_ADDR_DATA  --------------------------
// SVD Line: 1159

//  <item> SFDITEM_REG__ITR_SPIC_WRITE_QUAD_ADDR_DATA
//    <name> WRITE_QUAD_ADDR_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x40000104) Quad Address and Data Output Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_WRITE_QUAD_ADDR_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_WRITE_QUAD_ADDR_DATA = (ITR_SPIC_WRITE_QUAD_ADDR_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: ITR_SPIC_WRITE_ENABLE  --------------------------
// SVD Line: 1169

unsigned int ITR_SPIC_WRITE_ENABLE __AT (0x40000108);



// ------------------  Field Item: ITR_SPIC_WRITE_ENABLE_WR_EN_CMD_2nd_BYTE  ----------------------
// SVD Line: 1179

//  <item> SFDITEM_FIELD__ITR_SPIC_WRITE_ENABLE_WR_EN_CMD_2nd_BYTE
//    <name> WR_EN_CMD_2nd_BYTE </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40000108) SPI Flash command value of the 2nd byte of write enable. Available only if DDR_EN configuration is defined. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_WRITE_ENABLE >> 8) & 0xFF), ((ITR_SPIC_WRITE_ENABLE = (ITR_SPIC_WRITE_ENABLE & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: ITR_SPIC_WRITE_ENABLE_WR_EN_CMD_1st_BYTE  ----------------------
// SVD Line: 1187

//  <item> SFDITEM_FIELD__ITR_SPIC_WRITE_ENABLE_WR_EN_CMD_1st_BYTE
//    <name> WR_EN_CMD_1st_BYTE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40000108) SPI Flash command value of the 1st byte of write enable. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_WRITE_ENABLE >> 0) & 0xFF), ((ITR_SPIC_WRITE_ENABLE = (ITR_SPIC_WRITE_ENABLE & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: ITR_SPIC_WRITE_ENABLE  -----------------------------
// SVD Line: 1169

//  <rtree> SFDITEM_REG__ITR_SPIC_WRITE_ENABLE
//    <name> WRITE_ENABLE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000108) Write Enable Command of SPI Flash </i>
//    <loc> ( (unsigned int)((ITR_SPIC_WRITE_ENABLE >> 0) & 0xFFFFFFFF), ((ITR_SPIC_WRITE_ENABLE = (ITR_SPIC_WRITE_ENABLE & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_WRITE_ENABLE_WR_EN_CMD_2nd_BYTE </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_WRITE_ENABLE_WR_EN_CMD_1st_BYTE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: ITR_SPIC_READ_STATUS  --------------------------
// SVD Line: 1197

unsigned int ITR_SPIC_READ_STATUS __AT (0x4000010C);



// ------------------------  Field Item: ITR_SPIC_READ_STATUS_ADDR_EN  ----------------------------
// SVD Line: 1207

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_ADDR_EN
//    <name> ADDR_EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4000010C) Indicates SPI Flash read status with an address. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_READ_STATUS ) </loc>
//      <o.31..31> ADDR_EN
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_READ_STATUS_ADDR_LEN  ---------------------------
// SVD Line: 1215

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_ADDR_LEN
//    <name> ADDR_LEN </name>
//    <rw> 
//    <i> [Bits 30..29] RW (@ 0x4000010C) Indicates SPI Flash read status with address and address length.Available only if DDR_EN is defined. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_READ_STATUS >> 29) & 0x3), ((ITR_SPIC_READ_STATUS = (ITR_SPIC_READ_STATUS & ~(0x3UL << 29 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 29 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_READ_STATUS_ADDR_SEL  ---------------------------
// SVD Line: 1224

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_ADDR_SEL
//    <name> ADDR_SEL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000010C) Indicates SPI Flash read status with address and address value. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_READ_STATUS ) </loc>
//      <o.28..28> ADDR_SEL
//    </check>
//  </item>
//  


// ----------------------  Field Item: ITR_SPIC_READ_STATUS_INTERVAL_EN  --------------------------
// SVD Line: 1232

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_INTERVAL_EN
//    <name> INTERVAL_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000010C) Indicates SPI Flash read status with a 2-byte status but checking only odd or even byte. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_READ_STATUS ) </loc>
//      <o.27..27> INTERVAL_EN
//    </check>
//  </item>
//  


// ----------------------  Field Item: ITR_SPIC_READ_STATUS_CMD_2ND_BYTE  -------------------------
// SVD Line: 1240

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_CMD_2ND_BYTE
//    <name> CMD_2ND_BYTE </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x4000010C) SPI Flash command value of the 2nd byte of read status.Available only if DDR_EN is defined. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_READ_STATUS >> 8) & 0xFF), ((ITR_SPIC_READ_STATUS = (ITR_SPIC_READ_STATUS & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Field Item: ITR_SPIC_READ_STATUS_CMD_1ST_BYTE  -------------------------
// SVD Line: 1248

//  <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_CMD_1ST_BYTE
//    <name> CMD_1ST_BYTE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000010C) SPI Flash command value of the 1st byte of read status. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_READ_STATUS >> 0) & 0xFF), ((ITR_SPIC_READ_STATUS = (ITR_SPIC_READ_STATUS & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: ITR_SPIC_READ_STATUS  ------------------------------
// SVD Line: 1197

//  <rtree> SFDITEM_REG__ITR_SPIC_READ_STATUS
//    <name> READ_STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000010C) Read Status Command of SPI Flash </i>
//    <loc> ( (unsigned int)((ITR_SPIC_READ_STATUS >> 0) & 0xFFFFFFFF), ((ITR_SPIC_READ_STATUS = (ITR_SPIC_READ_STATUS & ~(0xF800FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF800FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_ADDR_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_ADDR_LEN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_ADDR_SEL </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_INTERVAL_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_CMD_2ND_BYTE </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_READ_STATUS_CMD_1ST_BYTE </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ITR_SPIC_CTRLR2  -----------------------------
// SVD Line: 1258

unsigned int ITR_SPIC_CTRLR2 __AT (0x40000110);



// -----------------------  Field Item: ITR_SPIC_CTRLR2_CS_ACTIVE_HOLD  ---------------------------
// SVD Line: 1268

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_CS_ACTIVE_HOLD
//    <name> CS_ACTIVE_HOLD </name>
//    <rw> 
//    <i> [Bits 13..12] RW (@ 0x40000110) For Flash chip select active hold time after SCLK rising edge. Refer to tSLCH/CHSH, tCSS/tCSH.  Note: Wait up to 4 spic_clk cycles before CS becomes inactive. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_CTRLR2 >> 12) & 0x3), ((ITR_SPIC_CTRLR2 = (ITR_SPIC_CTRLR2 & ~(0x3UL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_CTRLR2_RX_FIFO_ENTRY  ---------------------------
// SVD Line: 1279

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_RX_FIFO_ENTRY
//    <name> RX_FIFO_ENTRY </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40000110) Indicates the valid entry of RX FIFO if using SPIC_HAS_DMA (NO_MERGE_FIFO). </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_CTRLR2 >> 8) & 0xF), ((ITR_SPIC_CTRLR2 = (ITR_SPIC_CTRLR2 & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: ITR_SPIC_CTRLR2_FIFO_ENTRY  -----------------------------
// SVD Line: 1289

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_FIFO_ENTRY
//    <name> FIFO_ENTRY </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40000110) Indicates the valid entry of TX_FIFO if using SPIC_HAS_DMA (NO_MERGE_FIFO). </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_CTRLR2 >> 4) & 0xF), ((ITR_SPIC_CTRLR2 = (ITR_SPIC_CTRLR2 & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_CTRLR2_SEQ_EN  -------------------------------
// SVD Line: 1299

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_SEQ_EN
//    <name> SEQ_EN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40000110) Enables Data-Split Program/Read (FIFO size-independent Program and Read). </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR2 ) </loc>
//      <o.3..3> SEQ_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: ITR_SPIC_CTRLR2_WPN_DNUM  ------------------------------
// SVD Line: 1309

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_WPN_DNUM
//    <name> WPN_DNUM </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40000110) Indicates whether WPn input pin of SPI Flash is connected to spi_sdata[2] or [3]. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR2 ) </loc>
//      <o.2..2> WPN_DNUM
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_CTRLR2_WPN_SET  ------------------------------
// SVD Line: 1319

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_WPN_SET
//    <name> WPN_SET </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000110) Implements the write protect function. If set to 1, WPn is protected; otherwise, it is not. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR2 ) </loc>
//      <o.1..1> WPN_SET
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ITR_SPIC_CTRLR2_SO_DNUM  ------------------------------
// SVD Line: 1329

//  <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_SO_DNUM
//    <name> SO_DNUM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000110) Indicates whether SO input pin of SPI Flash is connected to spi_sout[0] or [1]. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_CTRLR2 ) </loc>
//      <o.0..0> SO_DNUM
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: ITR_SPIC_CTRLR2  --------------------------------
// SVD Line: 1258

//  <rtree> SFDITEM_REG__ITR_SPIC_CTRLR2
//    <name> CTRLR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000110) Control Register 2 </i>
//    <loc> ( (unsigned int)((ITR_SPIC_CTRLR2 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_CTRLR2 = (ITR_SPIC_CTRLR2 & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_CS_ACTIVE_HOLD </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_RX_FIFO_ENTRY </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_FIFO_ENTRY </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_SEQ_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_WPN_DNUM </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_WPN_SET </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_CTRLR2_SO_DNUM </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ITR_SPIC_FBAUDR  -----------------------------
// SVD Line: 1341

unsigned int ITR_SPIC_FBAUDR __AT (0x40000114);



// -----------------------------  Register Item: ITR_SPIC_FBAUDR  ---------------------------------
// SVD Line: 1341

//  <item> SFDITEM_REG__ITR_SPIC_FBAUDR
//    <name> FBAUDR </name>
//    <i> [Bits 31..0] RW (@ 0x40000114) Fast Baud Rate Select </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_FBAUDR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_FBAUDR = (ITR_SPIC_FBAUDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_USER_LENGTH  --------------------------
// SVD Line: 1351

unsigned int ITR_SPIC_USER_LENGTH __AT (0x40000118);



// ---------------------------  Register Item: ITR_SPIC_USER_LENGTH  ------------------------------
// SVD Line: 1351

//  <item> SFDITEM_REG__ITR_SPIC_USER_LENGTH
//    <name> USER_LENGTH </name>
//    <i> [Bits 31..0] RW (@ 0x40000118) User Length Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_USER_LENGTH >> 0) & 0xFFFFFFFF), ((ITR_SPIC_USER_LENGTH = (ITR_SPIC_USER_LENGTH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_AUTO_LENGTH  --------------------------
// SVD Line: 1361

unsigned int ITR_SPIC_AUTO_LENGTH __AT (0x4000011C);



// --------------------  Field Item: ITR_SPIC_AUTO_LENGTH_CS_H_WR_DUM_LEN  ------------------------
// SVD Line: 1370

//  <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_CS_H_WR_DUM_LEN
//    <name> CS_H_WR_DUM_LEN </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4000011C) Dummy cycle between sending write command to SPI Flash. Uses dummy cycles to avoid timing violation of CS high time. Controls CS high Write time in either fine grain or coarse grain.  Fine grain: CS high Write time = CS_H_WR_DUM_LEN * bus_clk period  Coarse grain: CS high Write time = (CS_H_WR_DUM_LEN * bus_clk period) * 4, if CS_H_RD_DUM_LEN == 0 </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_AUTO_LENGTH >> 28) & 0xF), ((ITR_SPIC_AUTO_LENGTH = (ITR_SPIC_AUTO_LENGTH & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ITR_SPIC_AUTO_LENGTH_CS_H_RD_DUM_LEN  ------------------------
// SVD Line: 1382

//  <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_CS_H_RD_DUM_LEN
//    <name> CS_H_RD_DUM_LEN </name>
//    <rw> 
//    <i> [Bits 27..26] RW (@ 0x4000011C) Dummy cycle between sending read command to SPI Flash. Similar handling to write command for avoiding CS high time violations.  Fine grain: CS high Read time = CS_H_RD_DUM_LEN * bus_clk period  Coarse grain: CS high Read time = (CS_H_WR_DUM_LEN * bus_clk period) * 4, if CS_H_RD_DUM_LEN == 0 </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_AUTO_LENGTH >> 26) & 0x3), ((ITR_SPIC_AUTO_LENGTH = (ITR_SPIC_AUTO_LENGTH & ~(0x3UL << 26 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 26 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------  Field Item: ITR_SPIC_AUTO_LENGTH_RDSR_DUMMY_LENGTH  -----------------------
// SVD Line: 1394

//  <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_RDSR_DUMMY_LENGTH
//    <name> RDSR_DUMMY_LENGTH </name>
//    <rw> 
//    <i> [Bits 25..18] RW (@ 0x4000011C) Indicates delay cycles for receiving data after Read Status Register (RDSR) command in auto write or user mode with auto check, referenced by bus_clk. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_AUTO_LENGTH >> 18) & 0xFF), ((ITR_SPIC_AUTO_LENGTH = (ITR_SPIC_AUTO_LENGTH & ~(0xFFUL << 18 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 18 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ITR_SPIC_AUTO_LENGTH_AUTO_ADDR_LENGTH  -----------------------
// SVD Line: 1404

//  <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_AUTO_ADDR_LENGTH
//    <name> AUTO_ADDR_LENGTH </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x4000011C) Indicates the number of bytes address in read/write command in auto mode. Can be set to 1, 2, or 3 bytes. A setting of 0 transmits a 4-byte address.  Ensure PRM_EN in auto mode aligns with AUTO_ADDR_LENGTH. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_AUTO_LENGTH >> 16) & 0x3), ((ITR_SPIC_AUTO_LENGTH = (ITR_SPIC_AUTO_LENGTH & ~(0x3UL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ITR_SPIC_AUTO_LENGTH_IN_PHYSICAL_CYC  ------------------------
// SVD Line: 1415

//  <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_IN_PHYSICAL_CYC
//    <name> IN_PHYSICAL_CYC </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4000011C) Indicates how many SPIC CLK (bus_clk) cycles are from the pad to the internal SPIC. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ITR_SPIC_AUTO_LENGTH >> 12) & 0xF), ((ITR_SPIC_AUTO_LENGTH = (ITR_SPIC_AUTO_LENGTH & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ITR_SPIC_AUTO_LENGTH_RD_DUMMY_LENGTH  ------------------------
// SVD Line: 1425

//  <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_RD_DUMMY_LENGTH
//    <name> RD_DUMMY_LENGTH </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x4000011C) Indicates delay cycles for receiving data, referenced by bus_clk. Does not include cycles from pad to internal SPIC. </i>
//    <edit> 
//      <loc> ( (unsigned short)((ITR_SPIC_AUTO_LENGTH >> 0) & 0xFFF), ((ITR_SPIC_AUTO_LENGTH = (ITR_SPIC_AUTO_LENGTH & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: ITR_SPIC_AUTO_LENGTH  ------------------------------
// SVD Line: 1361

//  <rtree> SFDITEM_REG__ITR_SPIC_AUTO_LENGTH
//    <name> AUTO_LENGTH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000011C) Auto Address Length Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_AUTO_LENGTH >> 0) & 0xFFFFFFFF), ((ITR_SPIC_AUTO_LENGTH = (ITR_SPIC_AUTO_LENGTH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_CS_H_WR_DUM_LEN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_CS_H_RD_DUM_LEN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_RDSR_DUMMY_LENGTH </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_AUTO_ADDR_LENGTH </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_IN_PHYSICAL_CYC </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_AUTO_LENGTH_RD_DUMMY_LENGTH </item>
//  </rtree>
//  


// ------------------------  Register Item Address: ITR_SPIC_VALID_CMD  ---------------------------
// SVD Line: 1438

unsigned int ITR_SPIC_VALID_CMD __AT (0x40000120);



// -----------------------  Field Item: ITR_SPIC_VALID_CMD_SEQ_TRANS_EN  --------------------------
// SVD Line: 1447

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_SEQ_TRANS_EN
//    <name> SEQ_TRANS_EN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40000120) Enables read sequential transaction read function.  If two bus read transactions are sequential, SPIC accesses the second transaction without resending Read CMD/ADDR/DUMMY. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.14..14> SEQ_TRANS_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: ITR_SPIC_VALID_CMD_DUM_EN  -----------------------------
// SVD Line: 1458

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_DUM_EN
//    <name> DUM_EN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40000120) Enables the use of a dummy byte (DUM_BYTE_VAL) following the address in auto read. If PRM_EN is set, it uses PRM_Value instead. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.13..13> DUM_EN
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_CTRLR0_CH  ----------------------------
// SVD Line: 1468

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_CTRLR0_CH
//    <name> CTRLR0_CH </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40000120) Configures SPIC to use CTRLR0 CMD_CH/DATA_CH/ADDR_CH and DDR_EN fields in Auto mode. Otherwise, SPIC decodes based on chosen VALID_CMD. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.12..12> CTRLR0_CH
//    </check>
//  </item>
//  


// --------------------------  Field Item: ITR_SPIC_VALID_CMD_PRM_EN  -----------------------------
// SVD Line: 1478

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_PRM_EN
//    <name> PRM_EN </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40000120) Enables SPIC performance read mode in Auto Mode. Uses specific setup and exit flows to handle PRM. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.11..11> PRM_EN
//    </check>
//  </item>
//  


// -----------------------  Field Item: ITR_SPIC_VALID_CMD_WR_BLOCKING  ---------------------------
// SVD Line: 1488

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_BLOCKING
//    <name> WR_BLOCKING </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40000120) When set, ensures operations are blocking, and next operation cannot proceed until FIFO is emptied. Otherwise, it is non-blocking. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.9..9> WR_BLOCKING
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_WR_QUAD_II  ---------------------------
// SVD Line: 1498

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_QUAD_II
//    <name> WR_QUAD_II </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40000120) Indicates that quad address/data write (1-4-4) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.8..8> WR_QUAD_II
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_WR_QUAD_I  ----------------------------
// SVD Line: 1508

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_QUAD_I
//    <name> WR_QUAD_I </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40000120) Indicates that quad data write (1-1-4) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.7..7> WR_QUAD_I
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_WR_DUAL_II  ---------------------------
// SVD Line: 1518

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_DUAL_II
//    <name> WR_DUAL_II </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40000120) Indicates that dual address/data write (1-2-2) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.6..6> WR_DUAL_II
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_WR_DUAL_I  ----------------------------
// SVD Line: 1528

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_DUAL_I
//    <name> WR_DUAL_I </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40000120) Indicates that dual data write (1-1-2) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.5..5> WR_DUAL_I
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_RD_QUAD_IO  ---------------------------
// SVD Line: 1538

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_RD_QUAD_IO
//    <name> RD_QUAD_IO </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40000120) Indicates that quad address/data read (1-4-4) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.4..4> RD_QUAD_IO
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_RD_QUAD_O  ----------------------------
// SVD Line: 1548

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_RD_QUAD_O
//    <name> RD_QUAD_O </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40000120) Indicates that quad data read (1-1-4) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.3..3> RD_QUAD_O
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_RD_DUAL_IO  ---------------------------
// SVD Line: 1558

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_RD_DUAL_IO
//    <name> RD_DUAL_IO </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40000120) Indicates that dual address/data read (1-2-2) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.2..2> RD_DUAL_IO
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_RD_DUAL_I  ----------------------------
// SVD Line: 1568

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_RD_DUAL_I
//    <name> RD_DUAL_I </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40000120) Indicates that dual data read (1-1-2) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.1..1> RD_DUAL_I
//    </check>
//  </item>
//  


// ------------------------  Field Item: ITR_SPIC_VALID_CMD_FRD_SINGLE  ---------------------------
// SVD Line: 1578

//  <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_FRD_SINGLE
//    <name> FRD_SINGLE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40000120) Indicates that fast read command (1-1-1) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_VALID_CMD ) </loc>
//      <o.0..0> FRD_SINGLE
//    </check>
//  </item>
//  


// ---------------------------  Register RTree: ITR_SPIC_VALID_CMD  -------------------------------
// SVD Line: 1438

//  <rtree> SFDITEM_REG__ITR_SPIC_VALID_CMD
//    <name> VALID_CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40000120) Valid Command Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_VALID_CMD >> 0) & 0xFFFFFFFF), ((ITR_SPIC_VALID_CMD = (ITR_SPIC_VALID_CMD & ~(0x7BFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7BFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_SEQ_TRANS_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_DUM_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_CTRLR0_CH </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_PRM_EN </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_BLOCKING </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_QUAD_II </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_QUAD_I </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_DUAL_II </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_WR_DUAL_I </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_RD_QUAD_IO </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_RD_QUAD_O </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_RD_DUAL_IO </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_RD_DUAL_I </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_VALID_CMD_FRD_SINGLE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: ITR_SPIC_FLASH_SIZE  ---------------------------
// SVD Line: 1590

unsigned int ITR_SPIC_FLASH_SIZE __AT (0x40000124);



// ---------------------------  Register Item: ITR_SPIC_FLASH_SIZE  -------------------------------
// SVD Line: 1590

//  <item> SFDITEM_REG__ITR_SPIC_FLASH_SIZE
//    <name> FLASH_SIZE </name>
//    <i> [Bits 31..0] RW (@ 0x40000124) Flash Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_FLASH_SIZE >> 0) & 0xFFFFFFFF), ((ITR_SPIC_FLASH_SIZE = (ITR_SPIC_FLASH_SIZE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_FLUSH_FIFO  ---------------------------
// SVD Line: 1600

unsigned int ITR_SPIC_FLUSH_FIFO __AT (0x40000128);



// -------------------  Field Item: ITR_SPIC_FLUSH_FIFO_FLUSH_PGM_RST_FIFO  -----------------------
// SVD Line: 1610

//  <item> SFDITEM_FIELD__ITR_SPIC_FLUSH_FIFO_FLUSH_PGM_RST_FIFO
//    <name> FLUSH_PGM_RST_FIFO </name>
//    <w> 
//    <i> [Bit 1] WO (@ 0x40000128) Clear all data in the PGM_RST FIFO upon writing to this field. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_FLUSH_FIFO ) </loc>
//      <o.1..1> FLUSH_PGM_RST_FIFO
//    </check>
//  </item>
//  


// -----------------------  Field Item: ITR_SPIC_FLUSH_FIFO_FLUSH_FIFO  ---------------------------
// SVD Line: 1620

//  <item> SFDITEM_FIELD__ITR_SPIC_FLUSH_FIFO_FLUSH_FIFO
//    <name> FLUSH_FIFO </name>
//    <w> 
//    <i> [Bit 0] WO (@ 0x40000128) Clear all data in the FIFO upon writing to this field. </i>
//    <check> 
//      <loc> ( (unsigned int) ITR_SPIC_FLUSH_FIFO ) </loc>
//      <o.0..0> FLUSH_FIFO
//    </check>
//  </item>
//  


// ---------------------------  Register RTree: ITR_SPIC_FLUSH_FIFO  ------------------------------
// SVD Line: 1600

//  <rtree> SFDITEM_REG__ITR_SPIC_FLUSH_FIFO
//    <name> FLUSH_FIFO </name>
//    <w> 
//    <i> [Bits 31..0] WO (@ 0x40000128) Flush FIFO Register </i>
//    <loc> ( (unsigned int)((ITR_SPIC_FLUSH_FIFO >> 0) & 0xFFFFFFFF), ((ITR_SPIC_FLUSH_FIFO = (ITR_SPIC_FLUSH_FIFO & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ITR_SPIC_FLUSH_FIFO_FLUSH_PGM_RST_FIFO </item>
//    <item> SFDITEM_FIELD__ITR_SPIC_FLUSH_FIFO_FLUSH_FIFO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: ITR_SPIC_DUM_BYTE  ----------------------------
// SVD Line: 1632

unsigned int ITR_SPIC_DUM_BYTE __AT (0x4000012C);



// ----------------------------  Register Item: ITR_SPIC_DUM_BYTE  --------------------------------
// SVD Line: 1632

//  <item> SFDITEM_REG__ITR_SPIC_DUM_BYTE
//    <name> DUM_BYTE </name>
//    <i> [Bits 31..0] RW (@ 0x4000012C) Dummy Byte Value </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DUM_BYTE >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DUM_BYTE = (ITR_SPIC_DUM_BYTE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_TX_NDF  -----------------------------
// SVD Line: 1642

unsigned int ITR_SPIC_TX_NDF __AT (0x40000130);



// -----------------------------  Register Item: ITR_SPIC_TX_NDF  ---------------------------------
// SVD Line: 1642

//  <item> SFDITEM_REG__ITR_SPIC_TX_NDF
//    <name> TX_NDF </name>
//    <i> [Bits 31..0] RW (@ 0x40000130) TX NDF </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_TX_NDF >> 0) & 0xFFFFFFFF), ((ITR_SPIC_TX_NDF = (ITR_SPIC_TX_NDF & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_DEVICE_INFO  --------------------------
// SVD Line: 1652

unsigned int ITR_SPIC_DEVICE_INFO __AT (0x40000134);



// ---------------------------  Register Item: ITR_SPIC_DEVICE_INFO  ------------------------------
// SVD Line: 1652

//  <item> SFDITEM_REG__ITR_SPIC_DEVICE_INFO
//    <name> DEVICE_INFO </name>
//    <i> [Bits 31..0] RO (@ 0x40000134) Device Info </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DEVICE_INFO >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DEVICE_INFO = (ITR_SPIC_DEVICE_INFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ITR_SPIC_TPR0  ------------------------------
// SVD Line: 1662

unsigned int ITR_SPIC_TPR0 __AT (0x40000138);



// ------------------------------  Register Item: ITR_SPIC_TPR0  ----------------------------------
// SVD Line: 1662

//  <item> SFDITEM_REG__ITR_SPIC_TPR0
//    <name> TPR0 </name>
//    <i> [Bits 31..0] RW (@ 0x40000138) Timing Parameters </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_TPR0 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_TPR0 = (ITR_SPIC_TPR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: ITR_SPIC_AUTO_LENGTH2  --------------------------
// SVD Line: 1672

unsigned int ITR_SPIC_AUTO_LENGTH2 __AT (0x4000013C);



// --------------------------  Register Item: ITR_SPIC_AUTO_LENGTH2  ------------------------------
// SVD Line: 1672

//  <item> SFDITEM_REG__ITR_SPIC_AUTO_LENGTH2
//    <name> AUTO_LENGTH2 </name>
//    <i> [Bits 31..0] RW (@ 0x4000013C) Auto Address Length Register 2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_AUTO_LENGTH2 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_AUTO_LENGTH2 = (ITR_SPIC_AUTO_LENGTH2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ITR_SPIC_TPR1  ------------------------------
// SVD Line: 1682

unsigned int ITR_SPIC_TPR1 __AT (0x40000140);



// ------------------------------  Register Item: ITR_SPIC_TPR1  ----------------------------------
// SVD Line: 1682

//  <item> SFDITEM_REG__ITR_SPIC_TPR1
//    <name> TPR1 </name>
//    <i> [Bits 31..0] RW (@ 0x40000140) Timing Parameters Register 1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_TPR1 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_TPR1 = (ITR_SPIC_TPR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_SLOT_STARVE  --------------------------
// SVD Line: 1692

unsigned int ITR_SPIC_SLOT_STARVE __AT (0x40000144);



// ---------------------------  Register Item: ITR_SPIC_SLOT_STARVE  ------------------------------
// SVD Line: 1692

//  <item> SFDITEM_REG__ITR_SPIC_SLOT_STARVE
//    <name> SLOT_STARVE </name>
//    <i> [Bits 31..0] RW (@ 0x40000144) Slot starvation control register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_SLOT_STARVE >> 0) & 0xFFFFFFFF), ((ITR_SPIC_SLOT_STARVE = (ITR_SPIC_SLOT_STARVE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_PDEX_CTRL0  ---------------------------
// SVD Line: 1702

unsigned int ITR_SPIC_PDEX_CTRL0 __AT (0x40000148);



// ---------------------------  Register Item: ITR_SPIC_PDEX_CTRL0  -------------------------------
// SVD Line: 1702

//  <item> SFDITEM_REG__ITR_SPIC_PDEX_CTRL0
//    <name> PDEX_CTRL0 </name>
//    <i> [Bits 31..0] RW (@ 0x40000148) PDEX Ctrl Register 0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_PDEX_CTRL0 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_PDEX_CTRL0 = (ITR_SPIC_PDEX_CTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_PDEX_CTRL1  ---------------------------
// SVD Line: 1712

unsigned int ITR_SPIC_PDEX_CTRL1 __AT (0x4000014C);



// ---------------------------  Register Item: ITR_SPIC_PDEX_CTRL1  -------------------------------
// SVD Line: 1712

//  <item> SFDITEM_REG__ITR_SPIC_PDEX_CTRL1
//    <name> PDEX_CTRL1 </name>
//    <i> [Bits 31..0] RW (@ 0x4000014C) PDEX Ctrl Register 1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_PDEX_CTRL1 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_PDEX_CTRL1 = (ITR_SPIC_PDEX_CTRL1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_PDEX_CTRL2  ---------------------------
// SVD Line: 1722

unsigned int ITR_SPIC_PDEX_CTRL2 __AT (0x40000150);



// ---------------------------  Register Item: ITR_SPIC_PDEX_CTRL2  -------------------------------
// SVD Line: 1722

//  <item> SFDITEM_REG__ITR_SPIC_PDEX_CTRL2
//    <name> PDEX_CTRL2 </name>
//    <i> [Bits 31..0] RW (@ 0x40000150) PDEX Ctrl Register 2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_PDEX_CTRL2 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_PDEX_CTRL2 = (ITR_SPIC_PDEX_CTRL2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ITR_SPIC_TPR2  ------------------------------
// SVD Line: 1732

unsigned int ITR_SPIC_TPR2 __AT (0x40000154);



// ------------------------------  Register Item: ITR_SPIC_TPR2  ----------------------------------
// SVD Line: 1732

//  <item> SFDITEM_REG__ITR_SPIC_TPR2
//    <name> TPR2 </name>
//    <i> [Bits 31..0] RW (@ 0x40000154) Timing parameters Register 2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_TPR2 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_TPR2 = (ITR_SPIC_TPR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_ICG_EN  -----------------------------
// SVD Line: 1742

unsigned int ITR_SPIC_ICG_EN __AT (0x40000158);



// -----------------------------  Register Item: ITR_SPIC_ICG_EN  ---------------------------------
// SVD Line: 1742

//  <item> SFDITEM_REG__ITR_SPIC_ICG_EN
//    <name> ICG_EN </name>
//    <i> [Bits 31..0] RW (@ 0x40000158) Clock gating enable control register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_ICG_EN >> 0) & 0xFFFFFFFF), ((ITR_SPIC_ICG_EN = (ITR_SPIC_ICG_EN & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_WBUF_ID  ----------------------------
// SVD Line: 1752

unsigned int ITR_SPIC_WBUF_ID __AT (0x4000015C);



// -----------------------------  Register Item: ITR_SPIC_WBUF_ID  --------------------------------
// SVD Line: 1752

//  <item> SFDITEM_REG__ITR_SPIC_WBUF_ID
//    <name> WBUF_ID </name>
//    <i> [Bits 31..0] RW (@ 0x4000015C) WBUF ID control register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_WBUF_ID >> 0) & 0xFFFFFFFF), ((ITR_SPIC_WBUF_ID = (ITR_SPIC_WBUF_ID & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ITR_SPIC_DCX_CTRL  ----------------------------
// SVD Line: 1762

unsigned int ITR_SPIC_DCX_CTRL __AT (0x40000160);



// ----------------------------  Register Item: ITR_SPIC_DCX_CTRL  --------------------------------
// SVD Line: 1762

//  <item> SFDITEM_REG__ITR_SPIC_DCX_CTRL
//    <name> DCX_CTRL </name>
//    <i> [Bits 31..0] RW (@ 0x40000160) LCDC DCX control register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DCX_CTRL >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DCX_CTRL = (ITR_SPIC_DCX_CTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_DCX_CMD  ----------------------------
// SVD Line: 1772

unsigned int ITR_SPIC_DCX_CMD __AT (0x40000164);



// -----------------------------  Register Item: ITR_SPIC_DCX_CMD  --------------------------------
// SVD Line: 1772

//  <item> SFDITEM_REG__ITR_SPIC_DCX_CMD
//    <name> DCX_CMD </name>
//    <i> [Bits 31..0] RW (@ 0x40000164) LCDC cmd phase DCX control bit value register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DCX_CMD >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DCX_CMD = (ITR_SPIC_DCX_CMD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ITR_SPIC_DCX_ADDR  ----------------------------
// SVD Line: 1782

unsigned int ITR_SPIC_DCX_ADDR __AT (0x40000168);



// ----------------------------  Register Item: ITR_SPIC_DCX_ADDR  --------------------------------
// SVD Line: 1782

//  <item> SFDITEM_REG__ITR_SPIC_DCX_ADDR
//    <name> DCX_ADDR </name>
//    <i> [Bits 31..0] RW (@ 0x40000168) LCDC addr phase DCX control bit value register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DCX_ADDR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DCX_ADDR = (ITR_SPIC_DCX_ADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ITR_SPIC_DCX_DATA  ----------------------------
// SVD Line: 1792

unsigned int ITR_SPIC_DCX_DATA __AT (0x4000016C);



// ----------------------------  Register Item: ITR_SPIC_DCX_DATA  --------------------------------
// SVD Line: 1792

//  <item> SFDITEM_REG__ITR_SPIC_DCX_DATA
//    <name> DCX_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x4000016C) LCDC data phase DCX control bit value register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_DCX_DATA >> 0) & 0xFFFFFFFF), ((ITR_SPIC_DCX_DATA = (ITR_SPIC_DCX_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_PAGE_CTRL0  ---------------------------
// SVD Line: 1802

unsigned int ITR_SPIC_PAGE_CTRL0 __AT (0x40000170);



// ---------------------------  Register Item: ITR_SPIC_PAGE_CTRL0  -------------------------------
// SVD Line: 1802

//  <item> SFDITEM_REG__ITR_SPIC_PAGE_CTRL0
//    <name> PAGE_CTRL0 </name>
//    <i> [Bits 31..0] RW (@ 0x40000170) NAND page ctrl Register 0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_PAGE_CTRL0 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_PAGE_CTRL0 = (ITR_SPIC_PAGE_CTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_PAGE_CTRL1  ---------------------------
// SVD Line: 1812

unsigned int ITR_SPIC_PAGE_CTRL1 __AT (0x40000174);



// ---------------------------  Register Item: ITR_SPIC_PAGE_CTRL1  -------------------------------
// SVD Line: 1812

//  <item> SFDITEM_REG__ITR_SPIC_PAGE_CTRL1
//    <name> PAGE_CTRL1 </name>
//    <i> [Bits 31..0] RW (@ 0x40000174) NAND page ctrl Register 1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_PAGE_CTRL1 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_PAGE_CTRL1 = (ITR_SPIC_PAGE_CTRL1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ITR_SPIC_ST_DR  -----------------------------
// SVD Line: 1822

unsigned int ITR_SPIC_ST_DR __AT (0x40000180);



// ------------------------------  Register Item: ITR_SPIC_ST_DR  ---------------------------------
// SVD Line: 1822

//  <item> SFDITEM_REG__ITR_SPIC_ST_DR
//    <name> ST_DR </name>
//    <i> [Bits 31..0] RW (@ 0x40000180) Status Data Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_ST_DR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_ST_DR = (ITR_SPIC_ST_DR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ITR_SPIC_STFLR  -----------------------------
// SVD Line: 1832

unsigned int ITR_SPIC_STFLR __AT (0x400001C0);



// ------------------------------  Register Item: ITR_SPIC_STFLR  ---------------------------------
// SVD Line: 1832

//  <item> SFDITEM_REG__ITR_SPIC_STFLR
//    <name> STFLR </name>
//    <i> [Bits 31..0] RW (@ 0x400001C0) Status FIFO level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_STFLR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_STFLR = (ITR_SPIC_STFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ITR_SPIC_PAGE_READ  ---------------------------
// SVD Line: 1842

unsigned int ITR_SPIC_PAGE_READ __AT (0x400001D0);



// ----------------------------  Register Item: ITR_SPIC_PAGE_READ  -------------------------------
// SVD Line: 1842

//  <item> SFDITEM_REG__ITR_SPIC_PAGE_READ
//    <name> PAGE_READ </name>
//    <i> [Bits 31..0] RW (@ 0x400001D0) Page Read Command of NAND Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_PAGE_READ >> 0) & 0xFFFFFFFF), ((ITR_SPIC_PAGE_READ = (ITR_SPIC_PAGE_READ & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_SEC_BASE_0  ---------------------------
// SVD Line: 1852

unsigned int ITR_SPIC_SEC_BASE_0 __AT (0x40000200);



// ---------------------------  Register Item: ITR_SPIC_SEC_BASE_0  -------------------------------
// SVD Line: 1852

//  <item> SFDITEM_REG__ITR_SPIC_SEC_BASE_0
//    <name> SEC_BASE_0 </name>
//    <i> [Bits 31..0] RW (@ 0x40000200) SEC region 0 base address register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_SEC_BASE_0 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_SEC_BASE_0 = (ITR_SPIC_SEC_BASE_0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ITR_SPIC_SEC_END_0  ---------------------------
// SVD Line: 1862

unsigned int ITR_SPIC_SEC_END_0 __AT (0x40000204);



// ----------------------------  Register Item: ITR_SPIC_SEC_END_0  -------------------------------
// SVD Line: 1862

//  <item> SFDITEM_REG__ITR_SPIC_SEC_END_0
//    <name> SEC_END_0 </name>
//    <i> [Bits 31..0] RW (@ 0x40000204) SEC region 0 end address register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_SEC_END_0 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_SEC_END_0 = (ITR_SPIC_SEC_END_0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ITR_SPIC_SEC_NONCE_0  --------------------------
// SVD Line: 1872

unsigned int ITR_SPIC_SEC_NONCE_0 __AT (0x40000208);



// ---------------------------  Register Item: ITR_SPIC_SEC_NONCE_0  ------------------------------
// SVD Line: 1872

//  <item> SFDITEM_REG__ITR_SPIC_SEC_NONCE_0
//    <name> SEC_NONCE_0 </name>
//    <i> [Bits 31..0] RW (@ 0x40000208) SEC region 0 nonce register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_SEC_NONCE_0 >> 0) & 0xFFFFFFFF), ((ITR_SPIC_SEC_NONCE_0 = (ITR_SPIC_SEC_NONCE_0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ITR_SPIC_SEC_IDR  ----------------------------
// SVD Line: 1882

unsigned int ITR_SPIC_SEC_IDR __AT (0x400003FC);



// -----------------------------  Register Item: ITR_SPIC_SEC_IDR  --------------------------------
// SVD Line: 1882

//  <item> SFDITEM_REG__ITR_SPIC_SEC_IDR
//    <name> SEC_IDR </name>
//    <i> [Bits 31..0] RO (@ 0x400003FC) SEC ID register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ITR_SPIC_SEC_IDR >> 0) & 0xFFFFFFFF), ((ITR_SPIC_SEC_IDR = (ITR_SPIC_SEC_IDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Peripheral View: ITR_SPIC  -----------------------------------
// SVD Line: 41

//  <view> ITR_SPIC
//    <name> ITR_SPIC </name>
//    <item> SFDITEM_REG__ITR_SPIC_CTRLR0 </item>
//    <item> SFDITEM_REG__ITR_SPIC_RX_NDF </item>
//    <item> SFDITEM_REG__ITR_SPIC_SSIENR </item>
//    <item> SFDITEM_REG__ITR_SPIC_MWCR </item>
//    <item> SFDITEM_REG__ITR_SPIC_SER </item>
//    <item> SFDITEM_REG__ITR_SPIC_BAUDR </item>
//    <item> SFDITEM_REG__ITR_SPIC_TXFTLR </item>
//    <item> SFDITEM_REG__ITR_SPIC_RXFTLR </item>
//    <item> SFDITEM_REG__ITR_SPIC_TXFLR </item>
//    <item> SFDITEM_REG__ITR_SPIC_RXFLR </item>
//    <item> SFDITEM_REG__ITR_SPIC_SR </item>
//    <item> SFDITEM_REG__ITR_SPIC_IMR </item>
//    <item> SFDITEM_REG__ITR_SPIC_ISR </item>
//    <item> SFDITEM_REG__ITR_SPIC_RISR </item>
//    <item> SFDITEM_REG__ITR_SPIC_TXOICR </item>
//    <item> SFDITEM_REG__ITR_SPIC_RXOICR </item>
//    <item> SFDITEM_REG__ITR_SPIC_RXUICR </item>
//    <item> SFDITEM_REG__ITR_SPIC_MSTICR </item>
//    <item> SFDITEM_REG__ITR_SPIC_ICR </item>
//    <item> SFDITEM_REG__ITR_SPIC_DMACR </item>
//    <item> SFDITEM_REG__ITR_SPIC_DMATDLR </item>
//    <item> SFDITEM_REG__ITR_SPIC_DMARDLR </item>
//    <item> SFDITEM_REG__ITR_SPIC_IDR </item>
//    <item> SFDITEM_REG__ITR_SPIC_SPIC_VERSION </item>
//    <item> SFDITEM_REG__ITR_SPIC_DR </item>
//    <item> SFDITEM_REG__ITR_SPIC_DM_DR </item>
//    <item> SFDITEM_REG__ITR_SPIC_READ_FAST_SINGLE </item>
//    <item> SFDITEM_REG__ITR_SPIC_READ_DUAL_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_READ_DUAL_ADDR_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_READ_QUAD_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_READ_QUAD_ADDR_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_WRITE_SINGLE </item>
//    <item> SFDITEM_REG__ITR_SPIC_WRITE_DUAL_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_WRITE_DUAL_ADDR_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_WRITE_QUAD_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_WRITE_QUAD_ADDR_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_WRITE_ENABLE </item>
//    <item> SFDITEM_REG__ITR_SPIC_READ_STATUS </item>
//    <item> SFDITEM_REG__ITR_SPIC_CTRLR2 </item>
//    <item> SFDITEM_REG__ITR_SPIC_FBAUDR </item>
//    <item> SFDITEM_REG__ITR_SPIC_USER_LENGTH </item>
//    <item> SFDITEM_REG__ITR_SPIC_AUTO_LENGTH </item>
//    <item> SFDITEM_REG__ITR_SPIC_VALID_CMD </item>
//    <item> SFDITEM_REG__ITR_SPIC_FLASH_SIZE </item>
//    <item> SFDITEM_REG__ITR_SPIC_FLUSH_FIFO </item>
//    <item> SFDITEM_REG__ITR_SPIC_DUM_BYTE </item>
//    <item> SFDITEM_REG__ITR_SPIC_TX_NDF </item>
//    <item> SFDITEM_REG__ITR_SPIC_DEVICE_INFO </item>
//    <item> SFDITEM_REG__ITR_SPIC_TPR0 </item>
//    <item> SFDITEM_REG__ITR_SPIC_AUTO_LENGTH2 </item>
//    <item> SFDITEM_REG__ITR_SPIC_TPR1 </item>
//    <item> SFDITEM_REG__ITR_SPIC_SLOT_STARVE </item>
//    <item> SFDITEM_REG__ITR_SPIC_PDEX_CTRL0 </item>
//    <item> SFDITEM_REG__ITR_SPIC_PDEX_CTRL1 </item>
//    <item> SFDITEM_REG__ITR_SPIC_PDEX_CTRL2 </item>
//    <item> SFDITEM_REG__ITR_SPIC_TPR2 </item>
//    <item> SFDITEM_REG__ITR_SPIC_ICG_EN </item>
//    <item> SFDITEM_REG__ITR_SPIC_WBUF_ID </item>
//    <item> SFDITEM_REG__ITR_SPIC_DCX_CTRL </item>
//    <item> SFDITEM_REG__ITR_SPIC_DCX_CMD </item>
//    <item> SFDITEM_REG__ITR_SPIC_DCX_ADDR </item>
//    <item> SFDITEM_REG__ITR_SPIC_DCX_DATA </item>
//    <item> SFDITEM_REG__ITR_SPIC_PAGE_CTRL0 </item>
//    <item> SFDITEM_REG__ITR_SPIC_PAGE_CTRL1 </item>
//    <item> SFDITEM_REG__ITR_SPIC_ST_DR </item>
//    <item> SFDITEM_REG__ITR_SPIC_STFLR </item>
//    <item> SFDITEM_REG__ITR_SPIC_PAGE_READ </item>
//    <item> SFDITEM_REG__ITR_SPIC_SEC_BASE_0 </item>
//    <item> SFDITEM_REG__ITR_SPIC_SEC_END_0 </item>
//    <item> SFDITEM_REG__ITR_SPIC_SEC_NONCE_0 </item>
//    <item> SFDITEM_REG__ITR_SPIC_SEC_IDR </item>
//  </view>
//  


// -------------------------  Register Item Address: ETR_SPIC_CTRLR0  -----------------------------
// SVD Line: 69

unsigned int ETR_SPIC_CTRLR0 __AT (0x40001000);



// ------------------------  Field Item: ETR_SPIC_CTRLR0_PRM_2ND_PHASE  ---------------------------
// SVD Line: 79

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_PRM_2ND_PHASE
//    <name> PRM_2ND_PHASE </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40001000) \nIndicate if Flash is in PRM (hi-performance read mode) of 2nd phase\n0 : DISABLE = PRM 2nd phase is disabled\n1 : ENABLE = PRM 2nd phase is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.31..31> PRM_2ND_PHASE
//        <0=> 0: DISABLE = PRM 2nd phase is disabled
//        <1=> 1: ENABLE = PRM 2nd phase is enabled
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_CTRLR0_DDR_EN  -------------------------------
// SVD Line: 99

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_DDR_EN
//    <name> DDR_EN </name>
//    <rw> 
//    <i> [Bits 30..28] RW (@ 0x40001000) \nIndicates DDR mode in CMD_CH/DATA_CH/ADDR_CH\n0 : DISABLE = DDR mode disabled\n1 : ENABLE_CMD_CH = DDR mode enabled for CMD_CH\n2 : ENABLE_DATA_CH = DDR mode enabled for DATA_CH\n3 : Reserved - do not use\n4 : ENABLE_ADDR_CH = DDR mode enabled for ADDR_CH\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.30..28> DDR_EN
//        <0=> 0: DISABLE = DDR mode disabled
//        <1=> 1: ENABLE_CMD_CH = DDR mode enabled for CMD_CH
//        <2=> 2: ENABLE_DATA_CH = DDR mode enabled for DATA_CH
//        <3=> 3: 
//        <4=> 4: ENABLE_ADDR_CH = DDR mode enabled for ADDR_CH
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: ETR_SPIC_CTRLR0_CK_MTIMES  -----------------------------
// SVD Line: 129

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_CK_MTIMES
//    <name> CK_MTIMES </name>
//    <rw> 
//    <i> [Bits 27..23] RW (@ 0x40001000) Indicates the number of check times for FLASH busy state </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_CTRLR0 >> 23) & 0x1F), ((ETR_SPIC_CTRLR0 = (ETR_SPIC_CTRLR0 & ~(0x1FUL << 23 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 23 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_CTRLR0_FAST_RD  ------------------------------
// SVD Line: 137

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_FAST_RD
//    <name> FAST_RD </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40001000) Indicate whether to use fast read command in user mode </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.22..22> FAST_RD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_CTRLR0_CMD_CH  -------------------------------
// SVD Line: 145

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_CMD_CH
//    <name> CMD_CH </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x40001000) \nIndicate channel number of command phase\n0 : SINGLE = Single channel\n1 : DUAL = Dual channel\n2 : QUAD = Quad channel\n3 : OCTAL = Octal channel </i>
//    <combo> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.21..20> CMD_CH
//        <0=> 0: SINGLE = Single channel
//        <1=> 1: DUAL = Dual channel
//        <2=> 2: QUAD = Quad channel
//        <3=> 3: OCTAL = Octal channel
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_CTRLR0_DATA_CH  ------------------------------
// SVD Line: 175

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_DATA_CH
//    <name> DATA_CH </name>
//    <rw> 
//    <i> [Bits 19..18] RW (@ 0x40001000) \nIndicate channel number of data phase\n0 : SINGLE = Single channel\n1 : DUAL = Dual channel\n2 : QUAD = Quad channel\n3 : OCTAL = Octal channel </i>
//    <combo> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.19..18> DATA_CH
//        <0=> 0: SINGLE = Single channel
//        <1=> 1: DUAL = Dual channel
//        <2=> 2: QUAD = Quad channel
//        <3=> 3: OCTAL = Octal channel
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_CTRLR0_ADDR_CH  ------------------------------
// SVD Line: 205

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_ADDR_CH
//    <name> ADDR_CH </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x40001000) \nIndicate channel number of address phase\n0 : SINGLE = Single channel\n1 : DUAL = Dual channel\n2 : QUAD = Quad channel\n3 : OCTAL = Octal channel </i>
//    <combo> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.17..16> ADDR_CH
//        <0=> 0: SINGLE = Single channel
//        <1=> 1: DUAL = Dual channel
//        <2=> 2: QUAD = Quad channel
//        <3=> 3: OCTAL = Octal channel
//    </combo>
//  </item>
//  


// --------------------------  Field Item: ETR_SPIC_CTRLR0_GCLK_DIS  ------------------------------
// SVD Line: 235

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_GCLK_DIS
//    <name> GCLK_DIS </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40001000) Set to disable gated clock of icg cell </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.10..10> GCLK_DIS
//    </check>
//  </item>
//  


// ----------------------------  Field Item: ETR_SPIC_CTRLR0_TMOD  --------------------------------
// SVD Line: 243

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_TMOD
//    <name> TMOD </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x40001000) \nIndicate transfer mode\n0 : TRANSMIT = Transmit mode\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : RECEIVE = Receive mode </i>
//    <combo> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.9..8> TMOD
//        <0=> 0: TRANSMIT = Transmit mode
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: RECEIVE = Receive mode
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: ETR_SPIC_CTRLR0_SCPOL  -------------------------------
// SVD Line: 263

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_SCPOL
//    <name> SCPOL </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40001000) Indicate serial clock polarity </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.7..7> SCPOL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: ETR_SPIC_CTRLR0_SCPH  --------------------------------
// SVD Line: 271

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_SCPH
//    <name> SCPH </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40001000) Indicate serial clock phase </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.6..6> SCPH
//    </check>
//  </item>
//  


// --------------------------  Field Item: ETR_SPIC_CTRLR0_SIPOL_EN  ------------------------------
// SVD Line: 279

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_SIPOL_EN
//    <name> SIPOL_EN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40001000) \nSet to enable SIPOL functionality\n0 : DISABLE = SIPOL disabled\n1 : ENABLE = SIPOL enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.5..5> SIPOL_EN
//        <0=> 0: DISABLE = SIPOL disabled
//        <1=> 1: ENABLE = SIPOL enabled
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: ETR_SPIC_CTRLR0_SIPOL  -------------------------------
// SVD Line: 299

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_SIPOL
//    <name> SIPOL </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x40001000) \nConfigure SPI input lines\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : DEFAULT = All relevant bits are high </i>
//    <combo> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR0 ) </loc>
//      <o.4..0> SIPOL
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: DEFAULT = All relevant bits are high
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_CTRLR0  --------------------------------
// SVD Line: 69

//  <rtree> SFDITEM_REG__ETR_SPIC_CTRLR0
//    <name> CTRLR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001000) Control Register 0 </i>
//    <loc> ( (unsigned int)((ETR_SPIC_CTRLR0 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_CTRLR0 = (ETR_SPIC_CTRLR0 & ~(0xFFFF07FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF07FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_PRM_2ND_PHASE </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_DDR_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_CK_MTIMES </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_FAST_RD </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_CMD_CH </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_DATA_CH </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_ADDR_CH </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_GCLK_DIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_TMOD </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_SCPOL </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_SCPH </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_SIPOL_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR0_SIPOL </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ETR_SPIC_RX_NDF  -----------------------------
// SVD Line: 316

unsigned int ETR_SPIC_RX_NDF __AT (0x40001004);



// -----------------------------  Field Item: ETR_SPIC_RX_NDF_NDF  --------------------------------
// SVD Line: 325

//  <item> SFDITEM_FIELD__ETR_SPIC_RX_NDF_NDF
//    <name> NDF </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40001004) Indicate a number of data frames. If Data-Split-Read function enables, NDF can be set larger than FIFO size, with a maximum size of 65535 bytes. </i>
//    <edit> 
//      <loc> ( (unsigned short)((ETR_SPIC_RX_NDF >> 0) & 0xFFFF), ((ETR_SPIC_RX_NDF = (ETR_SPIC_RX_NDF & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_RX_NDF  --------------------------------
// SVD Line: 316

//  <rtree> SFDITEM_REG__ETR_SPIC_RX_NDF
//    <name> RX_NDF </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001004) Control Register 1 </i>
//    <loc> ( (unsigned int)((ETR_SPIC_RX_NDF >> 0) & 0xFFFFFFFF), ((ETR_SPIC_RX_NDF = (ETR_SPIC_RX_NDF & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_RX_NDF_NDF </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ETR_SPIC_SSIENR  -----------------------------
// SVD Line: 338

unsigned int ETR_SPIC_SSIENR __AT (0x40001008);



// -----------------------  Field Item: ETR_SPIC_SSIENR_PGM_RST_TEST_EN  --------------------------
// SVD Line: 347

//  <item> SFDITEM_FIELD__ETR_SPIC_SSIENR_PGM_RST_TEST_EN
//    <name> PGM_RST_TEST_EN </name>
//    <w> 
//    <i> [Bit 4] WO (@ 0x40001008) Generates a warm reset pulse; for PGM RST testing only </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SSIENR ) </loc>
//      <o.4..4> PGM_RST_TEST_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: ETR_SPIC_SSIENR_ATCK_CMD  ------------------------------
// SVD Line: 355

//  <item> SFDITEM_FIELD__ETR_SPIC_SSIENR_ATCK_CMD
//    <name> ATCK_CMD </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40001008) Sets to enable the check of flash busy status or timeout before accepting new commands in User Mode.  Disable this if CTRLR0.SEQ_CMD is set. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SSIENR ) </loc>
//      <o.1..1> ATCK_CMD
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_SSIENR_SPIC_EN  ------------------------------
// SVD Line: 366

//  <item> SFDITEM_FIELD__ETR_SPIC_SSIENR_SPIC_EN
//    <name> SPIC_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40001008) Set to enable SPIC </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SSIENR ) </loc>
//      <o.0..0> SPIC_EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_SSIENR  --------------------------------
// SVD Line: 338

//  <rtree> SFDITEM_REG__ETR_SPIC_SSIENR
//    <name> SSIENR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001008) SPIC Enable Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_SSIENR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_SSIENR = (ETR_SPIC_SSIENR & ~(0x13UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x13) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_SSIENR_PGM_RST_TEST_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SSIENR_ATCK_CMD </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SSIENR_SPIC_EN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ETR_SPIC_MWCR  ------------------------------
// SVD Line: 376

unsigned int ETR_SPIC_MWCR __AT (0x4000100C);



// ------------------------------  Register Item: ETR_SPIC_MWCR  ----------------------------------
// SVD Line: 376

//  <item> SFDITEM_REG__ETR_SPIC_MWCR
//    <name> MWCR </name>
//    <i> [Bits 31..0] RW (@ 0x4000100C) N/A </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_MWCR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_MWCR = (ETR_SPIC_MWCR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: ETR_SPIC_SER  ------------------------------
// SVD Line: 386

unsigned int ETR_SPIC_SER __AT (0x40001010);



// -------------------------------  Register Item: ETR_SPIC_SER  ----------------------------------
// SVD Line: 386

//  <item> SFDITEM_REG__ETR_SPIC_SER
//    <name> SER </name>
//    <i> [Bits 31..0] RW (@ 0x40001010) Slave Enable Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_SER >> 0) & 0xFFFFFFFF), ((ETR_SPIC_SER = (ETR_SPIC_SER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ETR_SPIC_BAUDR  -----------------------------
// SVD Line: 396

unsigned int ETR_SPIC_BAUDR __AT (0x40001014);



// ----------------------------  Field Item: ETR_SPIC_BAUDR_SCKDV  --------------------------------
// SVD Line: 405

//  <item> SFDITEM_FIELD__ETR_SPIC_BAUDR_SCKDV
//    <name> SCKDV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40001014) Define spi_sclk divider value. The frequency of spi_sclk is derived from:  Frequency of spi_sclk = Frequency of bus_clk / (2*SCKDV). </i>
//    <edit> 
//      <loc> ( (unsigned short)((ETR_SPIC_BAUDR >> 0) & 0xFFF), ((ETR_SPIC_BAUDR = (ETR_SPIC_BAUDR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_BAUDR  ---------------------------------
// SVD Line: 396

//  <rtree> SFDITEM_REG__ETR_SPIC_BAUDR
//    <name> BAUDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001014) Baud Rate Select </i>
//    <loc> ( (unsigned int)((ETR_SPIC_BAUDR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_BAUDR = (ETR_SPIC_BAUDR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_BAUDR_SCKDV </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ETR_SPIC_TXFTLR  -----------------------------
// SVD Line: 418

unsigned int ETR_SPIC_TXFTLR __AT (0x40001018);



// -----------------------------  Field Item: ETR_SPIC_TXFTLR_TFT  --------------------------------
// SVD Line: 427

//  <item> SFDITEM_FIELD__ETR_SPIC_TXFTLR_TFT
//    <name> TFT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x40001018) Transmit FIFO threshold. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_TXFTLR >> 0) & 0x1F), ((ETR_SPIC_TXFTLR = (ETR_SPIC_TXFTLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_TXFTLR  --------------------------------
// SVD Line: 418

//  <rtree> SFDITEM_REG__ETR_SPIC_TXFTLR
//    <name> TXFTLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001018) Transmit FIFO Threshold level </i>
//    <loc> ( (unsigned int)((ETR_SPIC_TXFTLR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_TXFTLR = (ETR_SPIC_TXFTLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_TXFTLR_TFT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ETR_SPIC_RXFTLR  -----------------------------
// SVD Line: 437

unsigned int ETR_SPIC_RXFTLR __AT (0x4000101C);



// -----------------------------  Field Item: ETR_SPIC_RXFTLR_RFT  --------------------------------
// SVD Line: 446

//  <item> SFDITEM_FIELD__ETR_SPIC_RXFTLR_RFT
//    <name> RFT </name>
//    <rw> 
//    <i> [Bits 4..0] RW (@ 0x4000101C) Receive FIFO threshold. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_RXFTLR >> 0) & 0x1F), ((ETR_SPIC_RXFTLR = (ETR_SPIC_RXFTLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_RXFTLR  --------------------------------
// SVD Line: 437

//  <rtree> SFDITEM_REG__ETR_SPIC_RXFTLR
//    <name> RXFTLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000101C) Receive FIFO Threshold level </i>
//    <loc> ( (unsigned int)((ETR_SPIC_RXFTLR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_RXFTLR = (ETR_SPIC_RXFTLR & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_RXFTLR_RFT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ETR_SPIC_TXFLR  -----------------------------
// SVD Line: 456

unsigned int ETR_SPIC_TXFLR __AT (0x40001020);



// ----------------------------  Field Item: ETR_SPIC_TXFLR_TXFLR  --------------------------------
// SVD Line: 465

//  <item> SFDITEM_FIELD__ETR_SPIC_TXFLR_TXFLR
//    <name> TXFLR </name>
//    <r> 
//    <i> [Bits 5..0] RO (@ 0x40001020) Indicates the FIFO level of valid data during transmission. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_TXFLR >> 0) & 0x3F) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_TXFLR  ---------------------------------
// SVD Line: 456

//  <rtree> SFDITEM_REG__ETR_SPIC_TXFLR
//    <name> TXFLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001020) Transmit FIFO level Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_TXFLR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_TXFLR_TXFLR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ETR_SPIC_RXFLR  -----------------------------
// SVD Line: 475

unsigned int ETR_SPIC_RXFLR __AT (0x40001024);



// ----------------------------  Field Item: ETR_SPIC_RXFLR_RXFLR  --------------------------------
// SVD Line: 484

//  <item> SFDITEM_FIELD__ETR_SPIC_RXFLR_RXFLR
//    <name> RXFLR </name>
//    <r> 
//    <i> [Bits 5..0] RO (@ 0x40001024) Indicates the FIFO level of valid data during reception. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_RXFLR >> 0) & 0x3F) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_RXFLR  ---------------------------------
// SVD Line: 475

//  <rtree> SFDITEM_REG__ETR_SPIC_RXFLR
//    <name> RXFLR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001024) Receive FIFO level Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_RXFLR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_RXFLR_RXFLR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: ETR_SPIC_SR  -------------------------------
// SVD Line: 494

unsigned int ETR_SPIC_SR __AT (0x40001028);



// ----------------------------  Field Item: ETR_SPIC_SR_BOOT_FIN  --------------------------------
// SVD Line: 504

//  <item> SFDITEM_FIELD__ETR_SPIC_SR_BOOT_FIN
//    <name> BOOT_FIN </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40001028) Boot Finish status indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SR ) </loc>
//      <o.7..7> BOOT_FIN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ETR_SPIC_SR_DCOL  ----------------------------------
// SVD Line: 512

//  <item> SFDITEM_FIELD__ETR_SPIC_SR_DCOL
//    <name> DCOL </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40001028) Data collision or transmitting status. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SR ) </loc>
//      <o.6..6> DCOL
//    </check>
//  </item>
//  


// -------------------------------  Field Item: ETR_SPIC_SR_TXE  ----------------------------------
// SVD Line: 520

//  <item> SFDITEM_FIELD__ETR_SPIC_SR_TXE
//    <name> TXE </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40001028) Transmission error indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SR ) </loc>
//      <o.5..5> TXE
//    </check>
//  </item>
//  


// -------------------------------  Field Item: ETR_SPIC_SR_RFF  ----------------------------------
// SVD Line: 528

//  <item> SFDITEM_FIELD__ETR_SPIC_SR_RFF
//    <name> RFF </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40001028) Receive FIFO full status. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SR ) </loc>
//      <o.4..4> RFF
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ETR_SPIC_SR_RFNE  ----------------------------------
// SVD Line: 536

//  <item> SFDITEM_FIELD__ETR_SPIC_SR_RFNE
//    <name> RFNE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40001028) Receive FIFO not empty status. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SR ) </loc>
//      <o.3..3> RFNE
//    </check>
//  </item>
//  


// -------------------------------  Field Item: ETR_SPIC_SR_TFE  ----------------------------------
// SVD Line: 544

//  <item> SFDITEM_FIELD__ETR_SPIC_SR_TFE
//    <name> TFE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40001028) Transmit FIFO empty status. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SR ) </loc>
//      <o.2..2> TFE
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ETR_SPIC_SR_TFNF  ----------------------------------
// SVD Line: 552

//  <item> SFDITEM_FIELD__ETR_SPIC_SR_TFNF
//    <name> TFNF </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40001028) Transmit FIFO not full status. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SR ) </loc>
//      <o.1..1> TFNF
//    </check>
//  </item>
//  


// ------------------------------  Field Item: ETR_SPIC_SR_BUSY  ----------------------------------
// SVD Line: 560

//  <item> SFDITEM_FIELD__ETR_SPIC_SR_BUSY
//    <name> BUSY </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40001028) SPIC busy flag. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_SR ) </loc>
//      <o.0..0> BUSY
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: ETR_SPIC_SR  ----------------------------------
// SVD Line: 494

//  <rtree> SFDITEM_REG__ETR_SPIC_SR
//    <name> SR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40001028) Status Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_SR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_SR_BOOT_FIN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SR_DCOL </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SR_TXE </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SR_RFF </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SR_RFNE </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SR_TFE </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SR_TFNF </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_SR_BUSY </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: ETR_SPIC_IMR  ------------------------------
// SVD Line: 570

unsigned int ETR_SPIC_IMR __AT (0x4000102C);



// -----------------------------  Field Item: ETR_SPIC_IMR_ACSIM  ---------------------------------
// SVD Line: 580

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_ACSIM
//    <name> ACSIM </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4000102C) Auto-check Flash Status raw interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.11..11> ACSIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_RXSIM  ---------------------------------
// SVD Line: 588

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_RXSIM
//    <name> RXSIM </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4000102C) Transmit split interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.10..10> RXSIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_TXSIM  ---------------------------------
// SVD Line: 596

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_TXSIM
//    <name> TXSIM </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4000102C) Transmit split interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.9..9> TXSIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_ACEIM  ---------------------------------
// SVD Line: 604

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_ACEIM
//    <name> ACEIM </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4000102C) Auto-check timeout error interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.8..8> ACEIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_BYEIM  ---------------------------------
// SVD Line: 612

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_BYEIM
//    <name> BYEIM </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4000102C) Byte-Enable error interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.7..7> BYEIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_WBEIM  ---------------------------------
// SVD Line: 620

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_WBEIM
//    <name> WBEIM </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4000102C) Write burst error interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.6..6> WBEIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_FSEIM  ---------------------------------
// SVD Line: 628

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_FSEIM
//    <name> FSEIM </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4000102C) FIFO size error interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.5..5> FSEIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_RXFIM  ---------------------------------
// SVD Line: 636

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_RXFIM
//    <name> RXFIM </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4000102C) Receive FIFO full interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.4..4> RXFIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_RXOIM  ---------------------------------
// SVD Line: 644

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_RXOIM
//    <name> RXOIM </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4000102C) Receive FIFO overflow interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.3..3> RXOIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_RXUIM  ---------------------------------
// SVD Line: 652

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_RXUIM
//    <name> RXUIM </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4000102C) Receive FIFO underflow interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.2..2> RXUIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_TXOIM  ---------------------------------
// SVD Line: 660

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_TXOIM
//    <name> TXOIM </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000102C) Transmit FIFO overflow interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.1..1> TXOIM
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_IMR_TXEIM  ---------------------------------
// SVD Line: 668

//  <item> SFDITEM_FIELD__ETR_SPIC_IMR_TXEIM
//    <name> TXEIM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000102C) Transmit FIFO empty interrupt mask. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_IMR ) </loc>
//      <o.0..0> TXEIM
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: ETR_SPIC_IMR  ----------------------------------
// SVD Line: 570

//  <rtree> SFDITEM_REG__ETR_SPIC_IMR
//    <name> IMR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000102C) Interrupt Mask Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_IMR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_IMR = (ETR_SPIC_IMR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_ACSIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_RXSIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_TXSIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_ACEIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_BYEIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_WBEIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_FSEIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_RXFIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_RXOIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_RXUIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_TXOIM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_IMR_TXEIM </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: ETR_SPIC_ISR  ------------------------------
// SVD Line: 678

unsigned int ETR_SPIC_ISR __AT (0x40001030);



// -----------------------------  Field Item: ETR_SPIC_ISR_ACSIS  ---------------------------------
// SVD Line: 688

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_ACSIS
//    <name> ACSIS </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40001030) Auto-check Flash Status after masking. 1: spi_aceir_r is active after masking. 0: spi_aceir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.11..11> ACSIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_RXSIS  ---------------------------------
// SVD Line: 696

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_RXSIS
//    <name> RXSIS </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40001030) Receive split interrupt status after masking. 1: spi_rxsir_r is active after masking. 0: spi_rxsir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.10..10> RXSIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_TXSIS  ---------------------------------
// SVD Line: 704

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_TXSIS
//    <name> TXSIS </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40001030) Transmit split interrupt status after masking. 1: spi_txsir_r is active after masking. 0: spi_txsir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.9..9> TXSIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_ACEIS  ---------------------------------
// SVD Line: 712

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_ACEIS
//    <name> ACEIS </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40001030) Auto-check timeout error status after masking. 1: spi_aceir_r is active after masking. 0: spi_aceir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.8..8> ACEIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_BYEIS  ---------------------------------
// SVD Line: 720

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_BYEIS
//    <name> BYEIS </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40001030) Byte-Enable error interrupts status after masking. 1: spi_byeir_r is active after masking. 0: spi_byeir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.7..7> BYEIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_WBEIS  ---------------------------------
// SVD Line: 728

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_WBEIS
//    <name> WBEIS </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40001030) Write burst error interrupt status after masking. 1: spi_wbeir_r is active after masking. 0: spi_wbeir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.6..6> WBEIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_FSEIS  ---------------------------------
// SVD Line: 736

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_FSEIS
//    <name> FSEIS </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40001030) FIFO size error interrupts status after masking. 1: spi_fesir_r is active after masking. 0: spi_fesir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.5..5> FSEIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_RXFIS  ---------------------------------
// SVD Line: 744

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_RXFIS
//    <name> RXFIS </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40001030) Receive FIFO full interrupt status after masking. 1: spi_rxfir is active after masking. 0: spi_rxfir is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.4..4> RXFIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_RXOIS  ---------------------------------
// SVD Line: 752

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_RXOIS
//    <name> RXOIS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40001030) Receive FIFO overflow interrupt status after masking. 1: spi_rxoir_r is active after masking. 0: spi_rxoir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.3..3> RXOIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_RXUIS  ---------------------------------
// SVD Line: 760

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_RXUIS
//    <name> RXUIS </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40001030) Receive FIFO underflow interrupt status after masking. 1: spi_rxuir_r is active after masking. 0: spi_rxuir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.2..2> RXUIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_TXOIS  ---------------------------------
// SVD Line: 768

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_TXOIS
//    <name> TXOIS </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40001030) Transmit FIFO overflow interrupt status after masking. 1: spi_txoir_r is active after masking. 0: spi_txoir_r is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.1..1> TXOIS
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_ISR_TXEIS  ---------------------------------
// SVD Line: 776

//  <item> SFDITEM_FIELD__ETR_SPIC_ISR_TXEIS
//    <name> TXEIS </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40001030) Transmit FIFO empty interrupt status after masking. 1: spi_txeir is active after masking. 0: spi_txeir is not active after masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_ISR ) </loc>
//      <o.0..0> TXEIS
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: ETR_SPIC_ISR  ----------------------------------
// SVD Line: 678

//  <rtree> SFDITEM_REG__ETR_SPIC_ISR
//    <name> ISR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40001030) Interrupt Status Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_ISR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_ACSIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_RXSIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_TXSIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_ACEIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_BYEIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_WBEIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_FSEIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_RXFIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_RXOIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_RXUIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_TXOIS </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_ISR_TXEIS </item>
//  </rtree>
//  


// --------------------------  Register Item Address: ETR_SPIC_RISR  ------------------------------
// SVD Line: 787

unsigned int ETR_SPIC_RISR __AT (0x40001034);



// -----------------------------  Field Item: ETR_SPIC_RISR_ACSIR  --------------------------------
// SVD Line: 797

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_ACSIR
//    <name> ACSIR </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40001034) Auto-check Flash Status raw interrupt status prior to masking. 1: spi_acsir_r is active prior to masking. 0: spi_acsir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.11..11> ACSIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_RXSIR  --------------------------------
// SVD Line: 805

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_RXSIR
//    <name> RXSIR </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40001034) Receive split interrupt status prior to masking. 1: spi_rxsir_r is active prior to masking. 0: spi_rxsir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.10..10> RXSIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_TXSIR  --------------------------------
// SVD Line: 813

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_TXSIR
//    <name> TXSIR </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40001034) Transmit split interrupt status prior to masking. 1: spi_txsir_r is active prior to masking. 0: spi_txsir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.9..9> TXSIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_ACEIR  --------------------------------
// SVD Line: 821

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_ACEIR
//    <name> ACEIR </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40001034) Auto-check timeout error raw interrupt status prior to masking. 1: spi_aceir_r is active prior to masking. 0: spi_aceir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.8..8> ACEIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_BYEIR  --------------------------------
// SVD Line: 829

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_BYEIR
//    <name> BYEIR </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40001034) The Byte-Enable error interrupt raw status prior to masking. 1: spi_byeir_r is active prior to masking. 0: spi_byeir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.7..7> BYEIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_WBEIR  --------------------------------
// SVD Line: 837

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_WBEIR
//    <name> WBEIR </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40001034) Write burst error raw interrupt status prior to masking. 1: spi_wbeir_r is active prior to masking. 0: spi_wbeir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.6..6> WBEIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_FSEIR  --------------------------------
// SVD Line: 845

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_FSEIR
//    <name> FSEIR </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40001034) FIFO size error raw interrupt status prior to masking. 1: spi_fseir_r is active prior to masking. 0: spi_fseir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.5..5> FSEIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_RXFIR  --------------------------------
// SVD Line: 853

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_RXFIR
//    <name> RXFIR </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40001034) Receive FIFO full raw interrupt status prior to masking. 1: spi_rxfir is active prior to masking. 0: spi_rxfir is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.4..4> RXFIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_RXOIR  --------------------------------
// SVD Line: 861

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_RXOIR
//    <name> RXOIR </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40001034) Receive FIFO overflow raw interrupt status prior to masking. 1: spi_rxoir_r is active prior to masking. 0: spi_rxoir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.3..3> RXOIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_RXUIR  --------------------------------
// SVD Line: 869

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_RXUIR
//    <name> RXUIR </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40001034) Receive FIFO underflow raw interrupt status prior to masking. 1: spi_rxuir_r is active prior to masking. 0: spi_rxuir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.2..2> RXUIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_TXOIR  --------------------------------
// SVD Line: 877

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_TXOIR
//    <name> TXOIR </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40001034) Transmit FIFO overflow raw interrupt status prior to masking. 1: spi_txoir_r is active prior to masking. 0: spi_txoir_r is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.1..1> TXOIR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: ETR_SPIC_RISR_TXEIR  --------------------------------
// SVD Line: 885

//  <item> SFDITEM_FIELD__ETR_SPIC_RISR_TXEIR
//    <name> TXEIR </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40001034) Transmit FIFO empty raw interrupt status prior to masking. 1: spi_txeir is active prior to masking. 0: spi_txeir is not active prior to masking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_RISR ) </loc>
//      <o.0..0> TXEIR
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: ETR_SPIC_RISR  ---------------------------------
// SVD Line: 787

//  <rtree> SFDITEM_REG__ETR_SPIC_RISR
//    <name> RISR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40001034) Raw Interrupt Status Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_RISR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_ACSIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_RXSIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_TXSIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_ACEIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_BYEIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_WBEIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_FSEIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_RXFIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_RXOIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_RXUIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_TXOIR </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_RISR_TXEIR </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ETR_SPIC_TXOICR  -----------------------------
// SVD Line: 895

unsigned int ETR_SPIC_TXOICR __AT (0x40001038);



// -----------------------------  Register Item: ETR_SPIC_TXOICR  ---------------------------------
// SVD Line: 895

//  <item> SFDITEM_REG__ETR_SPIC_TXOICR
//    <name> TXOICR </name>
//    <i> [Bits 31..0] WO (@ 0x40001038) Transmit FIFO Overflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_TXOICR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_TXOICR = (ETR_SPIC_TXOICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_RXOICR  -----------------------------
// SVD Line: 905

unsigned int ETR_SPIC_RXOICR __AT (0x4000103C);



// -----------------------------  Register Item: ETR_SPIC_RXOICR  ---------------------------------
// SVD Line: 905

//  <item> SFDITEM_REG__ETR_SPIC_RXOICR
//    <name> RXOICR </name>
//    <i> [Bits 31..0] RO (@ 0x4000103C) Receive FIFO Overflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_RXOICR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_RXOICR = (ETR_SPIC_RXOICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_RXUICR  -----------------------------
// SVD Line: 915

unsigned int ETR_SPIC_RXUICR __AT (0x40001040);



// -----------------------------  Register Item: ETR_SPIC_RXUICR  ---------------------------------
// SVD Line: 915

//  <item> SFDITEM_REG__ETR_SPIC_RXUICR
//    <name> RXUICR </name>
//    <i> [Bits 31..0] RO (@ 0x40001040) Receive FIFO Underflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_RXUICR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_RXUICR = (ETR_SPIC_RXUICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_MSTICR  -----------------------------
// SVD Line: 925

unsigned int ETR_SPIC_MSTICR __AT (0x40001044);



// -----------------------------  Register Item: ETR_SPIC_MSTICR  ---------------------------------
// SVD Line: 925

//  <item> SFDITEM_REG__ETR_SPIC_MSTICR
//    <name> MSTICR </name>
//    <i> [Bits 31..0] WO (@ 0x40001044) Master error Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_MSTICR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_MSTICR = (ETR_SPIC_MSTICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: ETR_SPIC_ICR  ------------------------------
// SVD Line: 935

unsigned int ETR_SPIC_ICR __AT (0x40001048);



// -------------------------------  Register Item: ETR_SPIC_ICR  ----------------------------------
// SVD Line: 935

//  <item> SFDITEM_REG__ETR_SPIC_ICR
//    <name> ICR </name>
//    <i> [Bits 31..0] WO (@ 0x40001048) Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_ICR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_ICR = (ETR_SPIC_ICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ETR_SPIC_DMACR  -----------------------------
// SVD Line: 945

unsigned int ETR_SPIC_DMACR __AT (0x4000104C);



// --------------------------  Field Item: ETR_SPIC_DMACR_TX_DMAC_EN  -----------------------------
// SVD Line: 954

//  <item> SFDITEM_FIELD__ETR_SPIC_DMACR_TX_DMAC_EN
//    <name> TX_DMAC_EN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4000104C) Transmit DMA Enable. Enables/disables the transmit FIFO DMA channel. 0 = Transmit DMA disabled, 1 = Transmit DMA enabled. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_DMACR ) </loc>
//      <o.1..1> TX_DMAC_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: ETR_SPIC_DMACR_RX_DMAC_EN  -----------------------------
// SVD Line: 962

//  <item> SFDITEM_FIELD__ETR_SPIC_DMACR_RX_DMAC_EN
//    <name> RX_DMAC_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000104C) Receive DMA Enable. Enables/disables the receive FIFO DMA channel. 0 = Receive DMA disabled, 1 = Receive DMA enabled. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_DMACR ) </loc>
//      <o.0..0> RX_DMAC_EN
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_DMACR  ---------------------------------
// SVD Line: 945

//  <rtree> SFDITEM_REG__ETR_SPIC_DMACR
//    <name> DMACR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000104C) DMA Control Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_DMACR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DMACR = (ETR_SPIC_DMACR & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_DMACR_TX_DMAC_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_DMACR_RX_DMAC_EN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ETR_SPIC_DMATDLR  ----------------------------
// SVD Line: 972

unsigned int ETR_SPIC_DMATDLR __AT (0x40001050);



// -----------------------------  Register Item: ETR_SPIC_DMATDLR  --------------------------------
// SVD Line: 972

//  <item> SFDITEM_REG__ETR_SPIC_DMATDLR
//    <name> DMATDLR </name>
//    <i> [Bits 31..0] RW (@ 0x40001050) DMA Transmit Data Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DMATDLR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DMATDLR = (ETR_SPIC_DMATDLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_DMARDLR  ----------------------------
// SVD Line: 982

unsigned int ETR_SPIC_DMARDLR __AT (0x40001054);



// -----------------------------  Register Item: ETR_SPIC_DMARDLR  --------------------------------
// SVD Line: 982

//  <item> SFDITEM_REG__ETR_SPIC_DMARDLR
//    <name> DMARDLR </name>
//    <i> [Bits 31..0] RW (@ 0x40001054) DMA Receive Data Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DMARDLR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DMARDLR = (ETR_SPIC_DMARDLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: ETR_SPIC_IDR  ------------------------------
// SVD Line: 992

unsigned int ETR_SPIC_IDR __AT (0x40001058);



// -------------------------------  Register Item: ETR_SPIC_IDR  ----------------------------------
// SVD Line: 992

//  <item> SFDITEM_REG__ETR_SPIC_IDR
//    <name> IDR </name>
//    <i> [Bits 31..0] RO (@ 0x40001058) Identification Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_IDR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_IDR = (ETR_SPIC_IDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: ETR_SPIC_SPIC_VERSION  --------------------------
// SVD Line: 1002

unsigned int ETR_SPIC_SPIC_VERSION __AT (0x4000105C);



// --------------------------  Register Item: ETR_SPIC_SPIC_VERSION  ------------------------------
// SVD Line: 1002

//  <item> SFDITEM_REG__ETR_SPIC_SPIC_VERSION
//    <name> SPIC_VERSION </name>
//    <i> [Bits 31..0] RO (@ 0x4000105C) SPIC version ID Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_SPIC_VERSION >> 0) & 0xFFFFFFFF), ((ETR_SPIC_SPIC_VERSION = (ETR_SPIC_SPIC_VERSION & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: ETR_SPIC_DR  -------------------------------
// SVD Line: 1012

unsigned int ETR_SPIC_DR __AT (0x40001060);



// -------------------------------  Register Item: ETR_SPIC_DR  -----------------------------------
// SVD Line: 1012

//  <item> SFDITEM_REG__ETR_SPIC_DR
//    <name> DR </name>
//    <i> [Bits 31..0] RW (@ 0x40001060) Data Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DR = (ETR_SPIC_DR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ETR_SPIC_DM_DR  -----------------------------
// SVD Line: 1022

unsigned int ETR_SPIC_DM_DR __AT (0x400010A0);



// ------------------------------  Register Item: ETR_SPIC_DM_DR  ---------------------------------
// SVD Line: 1022

//  <item> SFDITEM_REG__ETR_SPIC_DM_DR
//    <name> DM_DR </name>
//    <i> [Bits 31..0] RW (@ 0x400010A0) Data Mask Data Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DM_DR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DM_DR = (ETR_SPIC_DM_DR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Register Item Address: ETR_SPIC_READ_FAST_SINGLE  ------------------------
// SVD Line: 1032

unsigned int ETR_SPIC_READ_FAST_SINGLE __AT (0x400010E0);



// ------------------------  Register Item: ETR_SPIC_READ_FAST_SINGLE  ----------------------------
// SVD Line: 1032

//  <item> SFDITEM_REG__ETR_SPIC_READ_FAST_SINGLE
//    <name> READ_FAST_SINGLE </name>
//    <i> [Bits 31..0] RW (@ 0x400010E0) Fast Read Data Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_READ_FAST_SINGLE >> 0) & 0xFFFFFFFF), ((ETR_SPIC_READ_FAST_SINGLE = (ETR_SPIC_READ_FAST_SINGLE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: ETR_SPIC_READ_DUAL_DATA  -------------------------
// SVD Line: 1042

unsigned int ETR_SPIC_READ_DUAL_DATA __AT (0x400010E4);



// -------------------------  Register Item: ETR_SPIC_READ_DUAL_DATA  -----------------------------
// SVD Line: 1042

//  <item> SFDITEM_REG__ETR_SPIC_READ_DUAL_DATA
//    <name> READ_DUAL_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400010E4) Dual Output Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_READ_DUAL_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_READ_DUAL_DATA = (ETR_SPIC_READ_DUAL_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------  Register Item Address: ETR_SPIC_READ_DUAL_ADDR_DATA  ----------------------
// SVD Line: 1052

unsigned int ETR_SPIC_READ_DUAL_ADDR_DATA __AT (0x400010E8);



// -----------------------  Register Item: ETR_SPIC_READ_DUAL_ADDR_DATA  --------------------------
// SVD Line: 1052

//  <item> SFDITEM_REG__ETR_SPIC_READ_DUAL_ADDR_DATA
//    <name> READ_DUAL_ADDR_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400010E8) Dual I/O Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_READ_DUAL_ADDR_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_READ_DUAL_ADDR_DATA = (ETR_SPIC_READ_DUAL_ADDR_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: ETR_SPIC_READ_QUAD_DATA  -------------------------
// SVD Line: 1062

unsigned int ETR_SPIC_READ_QUAD_DATA __AT (0x400010EC);



// -------------------------  Register Item: ETR_SPIC_READ_QUAD_DATA  -----------------------------
// SVD Line: 1062

//  <item> SFDITEM_REG__ETR_SPIC_READ_QUAD_DATA
//    <name> READ_QUAD_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400010EC) Quad Output Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_READ_QUAD_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_READ_QUAD_DATA = (ETR_SPIC_READ_QUAD_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------  Register Item Address: ETR_SPIC_READ_QUAD_ADDR_DATA  ----------------------
// SVD Line: 1073

unsigned int ETR_SPIC_READ_QUAD_ADDR_DATA __AT (0x400010F0);



// ------------------  Field Item: ETR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_CMD  ---------------------
// SVD Line: 1082

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_CMD
//    <name> EXIT_PRM_CMD </name>
//    <rw> 
//    <i> [Bits 31..24] RW (@ 0x400010F0) Exit High Performance Read Mode command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_READ_QUAD_ADDR_DATA >> 24) & 0xFF), ((ETR_SPIC_READ_QUAD_ADDR_DATA = (ETR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ETR_SPIC_READ_QUAD_ADDR_DATA_PRM_VAL  ------------------------
// SVD Line: 1090

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_QUAD_ADDR_DATA_PRM_VAL
//    <name> PRM_VAL </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x400010F0) High Performance Read Mode Value. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_READ_QUAD_ADDR_DATA >> 16) & 0xFF), ((ETR_SPIC_READ_QUAD_ADDR_DATA = (ETR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------  Field Item: ETR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_DUM_LEN  -------------------
// SVD Line: 1098

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_DUM_LEN
//    <name> EXIT_PRM_DUM_LEN </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x400010F0) Extend the Exit PRM command if it is more than 1 byte. It uses bus_clk as reference. For example, in QPI mode (4-4-4), for FFFFFFFFh data cycle (4-byte data in 8 SPI cycles), EXIT_PRM_CMD sends 1 byte (2 SPI cycles), and EXIT_PRM_DUM_LEN extends 6 SPI cycles. (SPI cycles: 6 * (2 * baud_rate)). </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_READ_QUAD_ADDR_DATA >> 8) & 0xFF), ((ETR_SPIC_READ_QUAD_ADDR_DATA = (ETR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------  Field Item: ETR_SPIC_READ_QUAD_ADDR_DATA_RD_QUAD_IO_CMD  --------------------
// SVD Line: 1108

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_QUAD_ADDR_DATA_RD_QUAD_IO_CMD
//    <name> RD_QUAD_IO_CMD </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x400010F0) SPI Flash command value for quad address and data read command. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_READ_QUAD_ADDR_DATA >> 0) & 0xFF), ((ETR_SPIC_READ_QUAD_ADDR_DATA = (ETR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register RTree: ETR_SPIC_READ_QUAD_ADDR_DATA  --------------------------
// SVD Line: 1073

//  <rtree> SFDITEM_REG__ETR_SPIC_READ_QUAD_ADDR_DATA
//    <name> READ_QUAD_ADDR_DATA </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400010F0) Quad I/O Read Command of SPI Flash </i>
//    <loc> ( (unsigned int)((ETR_SPIC_READ_QUAD_ADDR_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_READ_QUAD_ADDR_DATA = (ETR_SPIC_READ_QUAD_ADDR_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_CMD </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_QUAD_ADDR_DATA_PRM_VAL </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_QUAD_ADDR_DATA_EXIT_PRM_DUM_LEN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_QUAD_ADDR_DATA_RD_QUAD_IO_CMD </item>
//  </rtree>
//  


// ----------------------  Register Item Address: ETR_SPIC_WRITE_SINGLE  --------------------------
// SVD Line: 1118

unsigned int ETR_SPIC_WRITE_SINGLE __AT (0x400010F4);



// --------------------------  Register Item: ETR_SPIC_WRITE_SINGLE  ------------------------------
// SVD Line: 1118

//  <item> SFDITEM_REG__ETR_SPIC_WRITE_SINGLE
//    <name> WRITE_SINGLE </name>
//    <i> [Bits 31..0] RW (@ 0x400010F4) Page Program Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_WRITE_SINGLE >> 0) & 0xFFFFFFFF), ((ETR_SPIC_WRITE_SINGLE = (ETR_SPIC_WRITE_SINGLE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: ETR_SPIC_WRITE_DUAL_DATA  ------------------------
// SVD Line: 1128

unsigned int ETR_SPIC_WRITE_DUAL_DATA __AT (0x400010F8);



// -------------------------  Register Item: ETR_SPIC_WRITE_DUAL_DATA  ----------------------------
// SVD Line: 1128

//  <item> SFDITEM_REG__ETR_SPIC_WRITE_DUAL_DATA
//    <name> WRITE_DUAL_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400010F8) Dual Data Input Program Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_WRITE_DUAL_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_WRITE_DUAL_DATA = (ETR_SPIC_WRITE_DUAL_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Register Item Address: ETR_SPIC_WRITE_DUAL_ADDR_DATA  ----------------------
// SVD Line: 1138

unsigned int ETR_SPIC_WRITE_DUAL_ADDR_DATA __AT (0x400010FC);



// ----------------------  Register Item: ETR_SPIC_WRITE_DUAL_ADDR_DATA  --------------------------
// SVD Line: 1138

//  <item> SFDITEM_REG__ETR_SPIC_WRITE_DUAL_ADDR_DATA
//    <name> WRITE_DUAL_ADDR_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x400010FC) Dual Address and Data Output Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_WRITE_DUAL_ADDR_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_WRITE_DUAL_ADDR_DATA = (ETR_SPIC_WRITE_DUAL_ADDR_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: ETR_SPIC_WRITE_QUAD_DATA  ------------------------
// SVD Line: 1148

unsigned int ETR_SPIC_WRITE_QUAD_DATA __AT (0x40001100);



// -------------------------  Register Item: ETR_SPIC_WRITE_QUAD_DATA  ----------------------------
// SVD Line: 1148

//  <item> SFDITEM_REG__ETR_SPIC_WRITE_QUAD_DATA
//    <name> WRITE_QUAD_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x40001100) Quad Data Input Program Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_WRITE_QUAD_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_WRITE_QUAD_DATA = (ETR_SPIC_WRITE_QUAD_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Register Item Address: ETR_SPIC_WRITE_QUAD_ADDR_DATA  ----------------------
// SVD Line: 1159

unsigned int ETR_SPIC_WRITE_QUAD_ADDR_DATA __AT (0x40001104);



// ----------------------  Register Item: ETR_SPIC_WRITE_QUAD_ADDR_DATA  --------------------------
// SVD Line: 1159

//  <item> SFDITEM_REG__ETR_SPIC_WRITE_QUAD_ADDR_DATA
//    <name> WRITE_QUAD_ADDR_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x40001104) Quad Address and Data Output Read Command of SPI Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_WRITE_QUAD_ADDR_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_WRITE_QUAD_ADDR_DATA = (ETR_SPIC_WRITE_QUAD_ADDR_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: ETR_SPIC_WRITE_ENABLE  --------------------------
// SVD Line: 1169

unsigned int ETR_SPIC_WRITE_ENABLE __AT (0x40001108);



// ------------------  Field Item: ETR_SPIC_WRITE_ENABLE_WR_EN_CMD_2nd_BYTE  ----------------------
// SVD Line: 1179

//  <item> SFDITEM_FIELD__ETR_SPIC_WRITE_ENABLE_WR_EN_CMD_2nd_BYTE
//    <name> WR_EN_CMD_2nd_BYTE </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40001108) SPI Flash command value of the 2nd byte of write enable. Available only if DDR_EN configuration is defined. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_WRITE_ENABLE >> 8) & 0xFF), ((ETR_SPIC_WRITE_ENABLE = (ETR_SPIC_WRITE_ENABLE & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: ETR_SPIC_WRITE_ENABLE_WR_EN_CMD_1st_BYTE  ----------------------
// SVD Line: 1187

//  <item> SFDITEM_FIELD__ETR_SPIC_WRITE_ENABLE_WR_EN_CMD_1st_BYTE
//    <name> WR_EN_CMD_1st_BYTE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40001108) SPI Flash command value of the 1st byte of write enable. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_WRITE_ENABLE >> 0) & 0xFF), ((ETR_SPIC_WRITE_ENABLE = (ETR_SPIC_WRITE_ENABLE & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: ETR_SPIC_WRITE_ENABLE  -----------------------------
// SVD Line: 1169

//  <rtree> SFDITEM_REG__ETR_SPIC_WRITE_ENABLE
//    <name> WRITE_ENABLE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001108) Write Enable Command of SPI Flash </i>
//    <loc> ( (unsigned int)((ETR_SPIC_WRITE_ENABLE >> 0) & 0xFFFFFFFF), ((ETR_SPIC_WRITE_ENABLE = (ETR_SPIC_WRITE_ENABLE & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_WRITE_ENABLE_WR_EN_CMD_2nd_BYTE </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_WRITE_ENABLE_WR_EN_CMD_1st_BYTE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: ETR_SPIC_READ_STATUS  --------------------------
// SVD Line: 1197

unsigned int ETR_SPIC_READ_STATUS __AT (0x4000110C);



// ------------------------  Field Item: ETR_SPIC_READ_STATUS_ADDR_EN  ----------------------------
// SVD Line: 1207

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_ADDR_EN
//    <name> ADDR_EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4000110C) Indicates SPI Flash read status with an address. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_READ_STATUS ) </loc>
//      <o.31..31> ADDR_EN
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_READ_STATUS_ADDR_LEN  ---------------------------
// SVD Line: 1215

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_ADDR_LEN
//    <name> ADDR_LEN </name>
//    <rw> 
//    <i> [Bits 30..29] RW (@ 0x4000110C) Indicates SPI Flash read status with address and address length.Available only if DDR_EN is defined. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_READ_STATUS >> 29) & 0x3), ((ETR_SPIC_READ_STATUS = (ETR_SPIC_READ_STATUS & ~(0x3UL << 29 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 29 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_READ_STATUS_ADDR_SEL  ---------------------------
// SVD Line: 1224

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_ADDR_SEL
//    <name> ADDR_SEL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4000110C) Indicates SPI Flash read status with address and address value. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_READ_STATUS ) </loc>
//      <o.28..28> ADDR_SEL
//    </check>
//  </item>
//  


// ----------------------  Field Item: ETR_SPIC_READ_STATUS_INTERVAL_EN  --------------------------
// SVD Line: 1232

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_INTERVAL_EN
//    <name> INTERVAL_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4000110C) Indicates SPI Flash read status with a 2-byte status but checking only odd or even byte. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_READ_STATUS ) </loc>
//      <o.27..27> INTERVAL_EN
//    </check>
//  </item>
//  


// ----------------------  Field Item: ETR_SPIC_READ_STATUS_CMD_2ND_BYTE  -------------------------
// SVD Line: 1240

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_CMD_2ND_BYTE
//    <name> CMD_2ND_BYTE </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x4000110C) SPI Flash command value of the 2nd byte of read status.Available only if DDR_EN is defined. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_READ_STATUS >> 8) & 0xFF), ((ETR_SPIC_READ_STATUS = (ETR_SPIC_READ_STATUS & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Field Item: ETR_SPIC_READ_STATUS_CMD_1ST_BYTE  -------------------------
// SVD Line: 1248

//  <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_CMD_1ST_BYTE
//    <name> CMD_1ST_BYTE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4000110C) SPI Flash command value of the 1st byte of read status. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_READ_STATUS >> 0) & 0xFF), ((ETR_SPIC_READ_STATUS = (ETR_SPIC_READ_STATUS & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: ETR_SPIC_READ_STATUS  ------------------------------
// SVD Line: 1197

//  <rtree> SFDITEM_REG__ETR_SPIC_READ_STATUS
//    <name> READ_STATUS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000110C) Read Status Command of SPI Flash </i>
//    <loc> ( (unsigned int)((ETR_SPIC_READ_STATUS >> 0) & 0xFFFFFFFF), ((ETR_SPIC_READ_STATUS = (ETR_SPIC_READ_STATUS & ~(0xF800FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF800FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_ADDR_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_ADDR_LEN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_ADDR_SEL </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_INTERVAL_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_CMD_2ND_BYTE </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_READ_STATUS_CMD_1ST_BYTE </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ETR_SPIC_CTRLR2  -----------------------------
// SVD Line: 1258

unsigned int ETR_SPIC_CTRLR2 __AT (0x40001110);



// -----------------------  Field Item: ETR_SPIC_CTRLR2_CS_ACTIVE_HOLD  ---------------------------
// SVD Line: 1268

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_CS_ACTIVE_HOLD
//    <name> CS_ACTIVE_HOLD </name>
//    <rw> 
//    <i> [Bits 13..12] RW (@ 0x40001110) For Flash chip select active hold time after SCLK rising edge. Refer to tSLCH/CHSH, tCSS/tCSH.  Note: Wait up to 4 spic_clk cycles before CS becomes inactive. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_CTRLR2 >> 12) & 0x3), ((ETR_SPIC_CTRLR2 = (ETR_SPIC_CTRLR2 & ~(0x3UL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_CTRLR2_RX_FIFO_ENTRY  ---------------------------
// SVD Line: 1279

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_RX_FIFO_ENTRY
//    <name> RX_FIFO_ENTRY </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40001110) Indicates the valid entry of RX FIFO if using SPIC_HAS_DMA (NO_MERGE_FIFO). </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_CTRLR2 >> 8) & 0xF), ((ETR_SPIC_CTRLR2 = (ETR_SPIC_CTRLR2 & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: ETR_SPIC_CTRLR2_FIFO_ENTRY  -----------------------------
// SVD Line: 1289

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_FIFO_ENTRY
//    <name> FIFO_ENTRY </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40001110) Indicates the valid entry of TX_FIFO if using SPIC_HAS_DMA (NO_MERGE_FIFO). </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_CTRLR2 >> 4) & 0xF), ((ETR_SPIC_CTRLR2 = (ETR_SPIC_CTRLR2 & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_CTRLR2_SEQ_EN  -------------------------------
// SVD Line: 1299

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_SEQ_EN
//    <name> SEQ_EN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40001110) Enables Data-Split Program/Read (FIFO size-independent Program and Read). </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR2 ) </loc>
//      <o.3..3> SEQ_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: ETR_SPIC_CTRLR2_WPN_DNUM  ------------------------------
// SVD Line: 1309

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_WPN_DNUM
//    <name> WPN_DNUM </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40001110) Indicates whether WPn input pin of SPI Flash is connected to spi_sdata[2] or [3]. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR2 ) </loc>
//      <o.2..2> WPN_DNUM
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_CTRLR2_WPN_SET  ------------------------------
// SVD Line: 1319

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_WPN_SET
//    <name> WPN_SET </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40001110) Implements the write protect function. If set to 1, WPn is protected; otherwise, it is not. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR2 ) </loc>
//      <o.1..1> WPN_SET
//    </check>
//  </item>
//  


// ---------------------------  Field Item: ETR_SPIC_CTRLR2_SO_DNUM  ------------------------------
// SVD Line: 1329

//  <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_SO_DNUM
//    <name> SO_DNUM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40001110) Indicates whether SO input pin of SPI Flash is connected to spi_sout[0] or [1]. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_CTRLR2 ) </loc>
//      <o.0..0> SO_DNUM
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: ETR_SPIC_CTRLR2  --------------------------------
// SVD Line: 1258

//  <rtree> SFDITEM_REG__ETR_SPIC_CTRLR2
//    <name> CTRLR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001110) Control Register 2 </i>
//    <loc> ( (unsigned int)((ETR_SPIC_CTRLR2 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_CTRLR2 = (ETR_SPIC_CTRLR2 & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_CS_ACTIVE_HOLD </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_RX_FIFO_ENTRY </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_FIFO_ENTRY </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_SEQ_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_WPN_DNUM </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_WPN_SET </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_CTRLR2_SO_DNUM </item>
//  </rtree>
//  


// -------------------------  Register Item Address: ETR_SPIC_FBAUDR  -----------------------------
// SVD Line: 1341

unsigned int ETR_SPIC_FBAUDR __AT (0x40001114);



// -----------------------------  Register Item: ETR_SPIC_FBAUDR  ---------------------------------
// SVD Line: 1341

//  <item> SFDITEM_REG__ETR_SPIC_FBAUDR
//    <name> FBAUDR </name>
//    <i> [Bits 31..0] RW (@ 0x40001114) Fast Baud Rate Select </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_FBAUDR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_FBAUDR = (ETR_SPIC_FBAUDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_USER_LENGTH  --------------------------
// SVD Line: 1351

unsigned int ETR_SPIC_USER_LENGTH __AT (0x40001118);



// ---------------------------  Register Item: ETR_SPIC_USER_LENGTH  ------------------------------
// SVD Line: 1351

//  <item> SFDITEM_REG__ETR_SPIC_USER_LENGTH
//    <name> USER_LENGTH </name>
//    <i> [Bits 31..0] RW (@ 0x40001118) User Length Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_USER_LENGTH >> 0) & 0xFFFFFFFF), ((ETR_SPIC_USER_LENGTH = (ETR_SPIC_USER_LENGTH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_AUTO_LENGTH  --------------------------
// SVD Line: 1361

unsigned int ETR_SPIC_AUTO_LENGTH __AT (0x4000111C);



// --------------------  Field Item: ETR_SPIC_AUTO_LENGTH_CS_H_WR_DUM_LEN  ------------------------
// SVD Line: 1370

//  <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_CS_H_WR_DUM_LEN
//    <name> CS_H_WR_DUM_LEN </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4000111C) Dummy cycle between sending write command to SPI Flash. Uses dummy cycles to avoid timing violation of CS high time. Controls CS high Write time in either fine grain or coarse grain.  Fine grain: CS high Write time = CS_H_WR_DUM_LEN * bus_clk period  Coarse grain: CS high Write time = (CS_H_WR_DUM_LEN * bus_clk period) * 4, if CS_H_RD_DUM_LEN == 0 </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_AUTO_LENGTH >> 28) & 0xF), ((ETR_SPIC_AUTO_LENGTH = (ETR_SPIC_AUTO_LENGTH & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ETR_SPIC_AUTO_LENGTH_CS_H_RD_DUM_LEN  ------------------------
// SVD Line: 1382

//  <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_CS_H_RD_DUM_LEN
//    <name> CS_H_RD_DUM_LEN </name>
//    <rw> 
//    <i> [Bits 27..26] RW (@ 0x4000111C) Dummy cycle between sending read command to SPI Flash. Similar handling to write command for avoiding CS high time violations.  Fine grain: CS high Read time = CS_H_RD_DUM_LEN * bus_clk period  Coarse grain: CS high Read time = (CS_H_WR_DUM_LEN * bus_clk period) * 4, if CS_H_RD_DUM_LEN == 0 </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_AUTO_LENGTH >> 26) & 0x3), ((ETR_SPIC_AUTO_LENGTH = (ETR_SPIC_AUTO_LENGTH & ~(0x3UL << 26 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 26 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------  Field Item: ETR_SPIC_AUTO_LENGTH_RDSR_DUMMY_LENGTH  -----------------------
// SVD Line: 1394

//  <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_RDSR_DUMMY_LENGTH
//    <name> RDSR_DUMMY_LENGTH </name>
//    <rw> 
//    <i> [Bits 25..18] RW (@ 0x4000111C) Indicates delay cycles for receiving data after Read Status Register (RDSR) command in auto write or user mode with auto check, referenced by bus_clk. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_AUTO_LENGTH >> 18) & 0xFF), ((ETR_SPIC_AUTO_LENGTH = (ETR_SPIC_AUTO_LENGTH & ~(0xFFUL << 18 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 18 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ETR_SPIC_AUTO_LENGTH_AUTO_ADDR_LENGTH  -----------------------
// SVD Line: 1404

//  <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_AUTO_ADDR_LENGTH
//    <name> AUTO_ADDR_LENGTH </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x4000111C) Indicates the number of bytes address in read/write command in auto mode. Can be set to 1, 2, or 3 bytes. A setting of 0 transmits a 4-byte address.  Ensure PRM_EN in auto mode aligns with AUTO_ADDR_LENGTH. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_AUTO_LENGTH >> 16) & 0x3), ((ETR_SPIC_AUTO_LENGTH = (ETR_SPIC_AUTO_LENGTH & ~(0x3UL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ETR_SPIC_AUTO_LENGTH_IN_PHYSICAL_CYC  ------------------------
// SVD Line: 1415

//  <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_IN_PHYSICAL_CYC
//    <name> IN_PHYSICAL_CYC </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4000111C) Indicates how many SPIC CLK (bus_clk) cycles are from the pad to the internal SPIC. </i>
//    <edit> 
//      <loc> ( (unsigned char)((ETR_SPIC_AUTO_LENGTH >> 12) & 0xF), ((ETR_SPIC_AUTO_LENGTH = (ETR_SPIC_AUTO_LENGTH & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: ETR_SPIC_AUTO_LENGTH_RD_DUMMY_LENGTH  ------------------------
// SVD Line: 1425

//  <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_RD_DUMMY_LENGTH
//    <name> RD_DUMMY_LENGTH </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x4000111C) Indicates delay cycles for receiving data, referenced by bus_clk. Does not include cycles from pad to internal SPIC. </i>
//    <edit> 
//      <loc> ( (unsigned short)((ETR_SPIC_AUTO_LENGTH >> 0) & 0xFFF), ((ETR_SPIC_AUTO_LENGTH = (ETR_SPIC_AUTO_LENGTH & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register RTree: ETR_SPIC_AUTO_LENGTH  ------------------------------
// SVD Line: 1361

//  <rtree> SFDITEM_REG__ETR_SPIC_AUTO_LENGTH
//    <name> AUTO_LENGTH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000111C) Auto Address Length Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_AUTO_LENGTH >> 0) & 0xFFFFFFFF), ((ETR_SPIC_AUTO_LENGTH = (ETR_SPIC_AUTO_LENGTH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_CS_H_WR_DUM_LEN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_CS_H_RD_DUM_LEN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_RDSR_DUMMY_LENGTH </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_AUTO_ADDR_LENGTH </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_IN_PHYSICAL_CYC </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_AUTO_LENGTH_RD_DUMMY_LENGTH </item>
//  </rtree>
//  


// ------------------------  Register Item Address: ETR_SPIC_VALID_CMD  ---------------------------
// SVD Line: 1438

unsigned int ETR_SPIC_VALID_CMD __AT (0x40001120);



// -----------------------  Field Item: ETR_SPIC_VALID_CMD_SEQ_TRANS_EN  --------------------------
// SVD Line: 1447

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_SEQ_TRANS_EN
//    <name> SEQ_TRANS_EN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40001120) Enables read sequential transaction read function.  If two bus read transactions are sequential, SPIC accesses the second transaction without resending Read CMD/ADDR/DUMMY. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.14..14> SEQ_TRANS_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: ETR_SPIC_VALID_CMD_DUM_EN  -----------------------------
// SVD Line: 1458

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_DUM_EN
//    <name> DUM_EN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40001120) Enables the use of a dummy byte (DUM_BYTE_VAL) following the address in auto read. If PRM_EN is set, it uses PRM_Value instead. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.13..13> DUM_EN
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_CTRLR0_CH  ----------------------------
// SVD Line: 1468

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_CTRLR0_CH
//    <name> CTRLR0_CH </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40001120) Configures SPIC to use CTRLR0 CMD_CH/DATA_CH/ADDR_CH and DDR_EN fields in Auto mode. Otherwise, SPIC decodes based on chosen VALID_CMD. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.12..12> CTRLR0_CH
//    </check>
//  </item>
//  


// --------------------------  Field Item: ETR_SPIC_VALID_CMD_PRM_EN  -----------------------------
// SVD Line: 1478

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_PRM_EN
//    <name> PRM_EN </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40001120) Enables SPIC performance read mode in Auto Mode. Uses specific setup and exit flows to handle PRM. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.11..11> PRM_EN
//    </check>
//  </item>
//  


// -----------------------  Field Item: ETR_SPIC_VALID_CMD_WR_BLOCKING  ---------------------------
// SVD Line: 1488

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_BLOCKING
//    <name> WR_BLOCKING </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40001120) When set, ensures operations are blocking, and next operation cannot proceed until FIFO is emptied. Otherwise, it is non-blocking. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.9..9> WR_BLOCKING
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_WR_QUAD_II  ---------------------------
// SVD Line: 1498

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_QUAD_II
//    <name> WR_QUAD_II </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40001120) Indicates that quad address/data write (1-4-4) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.8..8> WR_QUAD_II
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_WR_QUAD_I  ----------------------------
// SVD Line: 1508

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_QUAD_I
//    <name> WR_QUAD_I </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40001120) Indicates that quad data write (1-1-4) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.7..7> WR_QUAD_I
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_WR_DUAL_II  ---------------------------
// SVD Line: 1518

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_DUAL_II
//    <name> WR_DUAL_II </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40001120) Indicates that dual address/data write (1-2-2) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.6..6> WR_DUAL_II
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_WR_DUAL_I  ----------------------------
// SVD Line: 1528

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_DUAL_I
//    <name> WR_DUAL_I </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40001120) Indicates that dual data write (1-1-2) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.5..5> WR_DUAL_I
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_RD_QUAD_IO  ---------------------------
// SVD Line: 1538

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_RD_QUAD_IO
//    <name> RD_QUAD_IO </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40001120) Indicates that quad address/data read (1-4-4) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.4..4> RD_QUAD_IO
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_RD_QUAD_O  ----------------------------
// SVD Line: 1548

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_RD_QUAD_O
//    <name> RD_QUAD_O </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40001120) Indicates that quad data read (1-1-4) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.3..3> RD_QUAD_O
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_RD_DUAL_IO  ---------------------------
// SVD Line: 1558

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_RD_DUAL_IO
//    <name> RD_DUAL_IO </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40001120) Indicates that dual address/data read (1-2-2) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.2..2> RD_DUAL_IO
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_RD_DUAL_I  ----------------------------
// SVD Line: 1568

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_RD_DUAL_I
//    <name> RD_DUAL_I </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40001120) Indicates that dual data read (1-1-2) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.1..1> RD_DUAL_I
//    </check>
//  </item>
//  


// ------------------------  Field Item: ETR_SPIC_VALID_CMD_FRD_SINGLE  ---------------------------
// SVD Line: 1578

//  <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_FRD_SINGLE
//    <name> FRD_SINGLE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40001120) Indicates that fast read command (1-1-1) is a valid command to execute. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_VALID_CMD ) </loc>
//      <o.0..0> FRD_SINGLE
//    </check>
//  </item>
//  


// ---------------------------  Register RTree: ETR_SPIC_VALID_CMD  -------------------------------
// SVD Line: 1438

//  <rtree> SFDITEM_REG__ETR_SPIC_VALID_CMD
//    <name> VALID_CMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40001120) Valid Command Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_VALID_CMD >> 0) & 0xFFFFFFFF), ((ETR_SPIC_VALID_CMD = (ETR_SPIC_VALID_CMD & ~(0x7BFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7BFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_SEQ_TRANS_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_DUM_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_CTRLR0_CH </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_PRM_EN </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_BLOCKING </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_QUAD_II </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_QUAD_I </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_DUAL_II </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_WR_DUAL_I </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_RD_QUAD_IO </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_RD_QUAD_O </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_RD_DUAL_IO </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_RD_DUAL_I </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_VALID_CMD_FRD_SINGLE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: ETR_SPIC_FLASH_SIZE  ---------------------------
// SVD Line: 1590

unsigned int ETR_SPIC_FLASH_SIZE __AT (0x40001124);



// ---------------------------  Register Item: ETR_SPIC_FLASH_SIZE  -------------------------------
// SVD Line: 1590

//  <item> SFDITEM_REG__ETR_SPIC_FLASH_SIZE
//    <name> FLASH_SIZE </name>
//    <i> [Bits 31..0] RW (@ 0x40001124) Flash Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_FLASH_SIZE >> 0) & 0xFFFFFFFF), ((ETR_SPIC_FLASH_SIZE = (ETR_SPIC_FLASH_SIZE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_FLUSH_FIFO  ---------------------------
// SVD Line: 1600

unsigned int ETR_SPIC_FLUSH_FIFO __AT (0x40001128);



// -------------------  Field Item: ETR_SPIC_FLUSH_FIFO_FLUSH_PGM_RST_FIFO  -----------------------
// SVD Line: 1610

//  <item> SFDITEM_FIELD__ETR_SPIC_FLUSH_FIFO_FLUSH_PGM_RST_FIFO
//    <name> FLUSH_PGM_RST_FIFO </name>
//    <w> 
//    <i> [Bit 1] WO (@ 0x40001128) Clear all data in the PGM_RST FIFO upon writing to this field. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_FLUSH_FIFO ) </loc>
//      <o.1..1> FLUSH_PGM_RST_FIFO
//    </check>
//  </item>
//  


// -----------------------  Field Item: ETR_SPIC_FLUSH_FIFO_FLUSH_FIFO  ---------------------------
// SVD Line: 1620

//  <item> SFDITEM_FIELD__ETR_SPIC_FLUSH_FIFO_FLUSH_FIFO
//    <name> FLUSH_FIFO </name>
//    <w> 
//    <i> [Bit 0] WO (@ 0x40001128) Clear all data in the FIFO upon writing to this field. </i>
//    <check> 
//      <loc> ( (unsigned int) ETR_SPIC_FLUSH_FIFO ) </loc>
//      <o.0..0> FLUSH_FIFO
//    </check>
//  </item>
//  


// ---------------------------  Register RTree: ETR_SPIC_FLUSH_FIFO  ------------------------------
// SVD Line: 1600

//  <rtree> SFDITEM_REG__ETR_SPIC_FLUSH_FIFO
//    <name> FLUSH_FIFO </name>
//    <w> 
//    <i> [Bits 31..0] WO (@ 0x40001128) Flush FIFO Register </i>
//    <loc> ( (unsigned int)((ETR_SPIC_FLUSH_FIFO >> 0) & 0xFFFFFFFF), ((ETR_SPIC_FLUSH_FIFO = (ETR_SPIC_FLUSH_FIFO & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__ETR_SPIC_FLUSH_FIFO_FLUSH_PGM_RST_FIFO </item>
//    <item> SFDITEM_FIELD__ETR_SPIC_FLUSH_FIFO_FLUSH_FIFO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: ETR_SPIC_DUM_BYTE  ----------------------------
// SVD Line: 1632

unsigned int ETR_SPIC_DUM_BYTE __AT (0x4000112C);



// ----------------------------  Register Item: ETR_SPIC_DUM_BYTE  --------------------------------
// SVD Line: 1632

//  <item> SFDITEM_REG__ETR_SPIC_DUM_BYTE
//    <name> DUM_BYTE </name>
//    <i> [Bits 31..0] RW (@ 0x4000112C) Dummy Byte Value </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DUM_BYTE >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DUM_BYTE = (ETR_SPIC_DUM_BYTE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_TX_NDF  -----------------------------
// SVD Line: 1642

unsigned int ETR_SPIC_TX_NDF __AT (0x40001130);



// -----------------------------  Register Item: ETR_SPIC_TX_NDF  ---------------------------------
// SVD Line: 1642

//  <item> SFDITEM_REG__ETR_SPIC_TX_NDF
//    <name> TX_NDF </name>
//    <i> [Bits 31..0] RW (@ 0x40001130) TX NDF </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_TX_NDF >> 0) & 0xFFFFFFFF), ((ETR_SPIC_TX_NDF = (ETR_SPIC_TX_NDF & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_DEVICE_INFO  --------------------------
// SVD Line: 1652

unsigned int ETR_SPIC_DEVICE_INFO __AT (0x40001134);



// ---------------------------  Register Item: ETR_SPIC_DEVICE_INFO  ------------------------------
// SVD Line: 1652

//  <item> SFDITEM_REG__ETR_SPIC_DEVICE_INFO
//    <name> DEVICE_INFO </name>
//    <i> [Bits 31..0] RO (@ 0x40001134) Device Info </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DEVICE_INFO >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DEVICE_INFO = (ETR_SPIC_DEVICE_INFO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ETR_SPIC_TPR0  ------------------------------
// SVD Line: 1662

unsigned int ETR_SPIC_TPR0 __AT (0x40001138);



// ------------------------------  Register Item: ETR_SPIC_TPR0  ----------------------------------
// SVD Line: 1662

//  <item> SFDITEM_REG__ETR_SPIC_TPR0
//    <name> TPR0 </name>
//    <i> [Bits 31..0] RW (@ 0x40001138) Timing Parameters </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_TPR0 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_TPR0 = (ETR_SPIC_TPR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: ETR_SPIC_AUTO_LENGTH2  --------------------------
// SVD Line: 1672

unsigned int ETR_SPIC_AUTO_LENGTH2 __AT (0x4000113C);



// --------------------------  Register Item: ETR_SPIC_AUTO_LENGTH2  ------------------------------
// SVD Line: 1672

//  <item> SFDITEM_REG__ETR_SPIC_AUTO_LENGTH2
//    <name> AUTO_LENGTH2 </name>
//    <i> [Bits 31..0] RW (@ 0x4000113C) Auto Address Length Register 2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_AUTO_LENGTH2 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_AUTO_LENGTH2 = (ETR_SPIC_AUTO_LENGTH2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ETR_SPIC_TPR1  ------------------------------
// SVD Line: 1682

unsigned int ETR_SPIC_TPR1 __AT (0x40001140);



// ------------------------------  Register Item: ETR_SPIC_TPR1  ----------------------------------
// SVD Line: 1682

//  <item> SFDITEM_REG__ETR_SPIC_TPR1
//    <name> TPR1 </name>
//    <i> [Bits 31..0] RW (@ 0x40001140) Timing Parameters Register 1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_TPR1 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_TPR1 = (ETR_SPIC_TPR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_SLOT_STARVE  --------------------------
// SVD Line: 1692

unsigned int ETR_SPIC_SLOT_STARVE __AT (0x40001144);



// ---------------------------  Register Item: ETR_SPIC_SLOT_STARVE  ------------------------------
// SVD Line: 1692

//  <item> SFDITEM_REG__ETR_SPIC_SLOT_STARVE
//    <name> SLOT_STARVE </name>
//    <i> [Bits 31..0] RW (@ 0x40001144) Slot starvation control register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_SLOT_STARVE >> 0) & 0xFFFFFFFF), ((ETR_SPIC_SLOT_STARVE = (ETR_SPIC_SLOT_STARVE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_PDEX_CTRL0  ---------------------------
// SVD Line: 1702

unsigned int ETR_SPIC_PDEX_CTRL0 __AT (0x40001148);



// ---------------------------  Register Item: ETR_SPIC_PDEX_CTRL0  -------------------------------
// SVD Line: 1702

//  <item> SFDITEM_REG__ETR_SPIC_PDEX_CTRL0
//    <name> PDEX_CTRL0 </name>
//    <i> [Bits 31..0] RW (@ 0x40001148) PDEX Ctrl Register 0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_PDEX_CTRL0 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_PDEX_CTRL0 = (ETR_SPIC_PDEX_CTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_PDEX_CTRL1  ---------------------------
// SVD Line: 1712

unsigned int ETR_SPIC_PDEX_CTRL1 __AT (0x4000114C);



// ---------------------------  Register Item: ETR_SPIC_PDEX_CTRL1  -------------------------------
// SVD Line: 1712

//  <item> SFDITEM_REG__ETR_SPIC_PDEX_CTRL1
//    <name> PDEX_CTRL1 </name>
//    <i> [Bits 31..0] RW (@ 0x4000114C) PDEX Ctrl Register 1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_PDEX_CTRL1 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_PDEX_CTRL1 = (ETR_SPIC_PDEX_CTRL1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_PDEX_CTRL2  ---------------------------
// SVD Line: 1722

unsigned int ETR_SPIC_PDEX_CTRL2 __AT (0x40001150);



// ---------------------------  Register Item: ETR_SPIC_PDEX_CTRL2  -------------------------------
// SVD Line: 1722

//  <item> SFDITEM_REG__ETR_SPIC_PDEX_CTRL2
//    <name> PDEX_CTRL2 </name>
//    <i> [Bits 31..0] RW (@ 0x40001150) PDEX Ctrl Register 2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_PDEX_CTRL2 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_PDEX_CTRL2 = (ETR_SPIC_PDEX_CTRL2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ETR_SPIC_TPR2  ------------------------------
// SVD Line: 1732

unsigned int ETR_SPIC_TPR2 __AT (0x40001154);



// ------------------------------  Register Item: ETR_SPIC_TPR2  ----------------------------------
// SVD Line: 1732

//  <item> SFDITEM_REG__ETR_SPIC_TPR2
//    <name> TPR2 </name>
//    <i> [Bits 31..0] RW (@ 0x40001154) Timing parameters Register 2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_TPR2 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_TPR2 = (ETR_SPIC_TPR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_ICG_EN  -----------------------------
// SVD Line: 1742

unsigned int ETR_SPIC_ICG_EN __AT (0x40001158);



// -----------------------------  Register Item: ETR_SPIC_ICG_EN  ---------------------------------
// SVD Line: 1742

//  <item> SFDITEM_REG__ETR_SPIC_ICG_EN
//    <name> ICG_EN </name>
//    <i> [Bits 31..0] RW (@ 0x40001158) Clock gating enable control register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_ICG_EN >> 0) & 0xFFFFFFFF), ((ETR_SPIC_ICG_EN = (ETR_SPIC_ICG_EN & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_WBUF_ID  ----------------------------
// SVD Line: 1752

unsigned int ETR_SPIC_WBUF_ID __AT (0x4000115C);



// -----------------------------  Register Item: ETR_SPIC_WBUF_ID  --------------------------------
// SVD Line: 1752

//  <item> SFDITEM_REG__ETR_SPIC_WBUF_ID
//    <name> WBUF_ID </name>
//    <i> [Bits 31..0] RW (@ 0x4000115C) WBUF ID control register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_WBUF_ID >> 0) & 0xFFFFFFFF), ((ETR_SPIC_WBUF_ID = (ETR_SPIC_WBUF_ID & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ETR_SPIC_DCX_CTRL  ----------------------------
// SVD Line: 1762

unsigned int ETR_SPIC_DCX_CTRL __AT (0x40001160);



// ----------------------------  Register Item: ETR_SPIC_DCX_CTRL  --------------------------------
// SVD Line: 1762

//  <item> SFDITEM_REG__ETR_SPIC_DCX_CTRL
//    <name> DCX_CTRL </name>
//    <i> [Bits 31..0] RW (@ 0x40001160) LCDC DCX control register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DCX_CTRL >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DCX_CTRL = (ETR_SPIC_DCX_CTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_DCX_CMD  ----------------------------
// SVD Line: 1772

unsigned int ETR_SPIC_DCX_CMD __AT (0x40001164);



// -----------------------------  Register Item: ETR_SPIC_DCX_CMD  --------------------------------
// SVD Line: 1772

//  <item> SFDITEM_REG__ETR_SPIC_DCX_CMD
//    <name> DCX_CMD </name>
//    <i> [Bits 31..0] RW (@ 0x40001164) LCDC cmd phase DCX control bit value register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DCX_CMD >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DCX_CMD = (ETR_SPIC_DCX_CMD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ETR_SPIC_DCX_ADDR  ----------------------------
// SVD Line: 1782

unsigned int ETR_SPIC_DCX_ADDR __AT (0x40001168);



// ----------------------------  Register Item: ETR_SPIC_DCX_ADDR  --------------------------------
// SVD Line: 1782

//  <item> SFDITEM_REG__ETR_SPIC_DCX_ADDR
//    <name> DCX_ADDR </name>
//    <i> [Bits 31..0] RW (@ 0x40001168) LCDC addr phase DCX control bit value register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DCX_ADDR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DCX_ADDR = (ETR_SPIC_DCX_ADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ETR_SPIC_DCX_DATA  ----------------------------
// SVD Line: 1792

unsigned int ETR_SPIC_DCX_DATA __AT (0x4000116C);



// ----------------------------  Register Item: ETR_SPIC_DCX_DATA  --------------------------------
// SVD Line: 1792

//  <item> SFDITEM_REG__ETR_SPIC_DCX_DATA
//    <name> DCX_DATA </name>
//    <i> [Bits 31..0] RW (@ 0x4000116C) LCDC data phase DCX control bit value register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_DCX_DATA >> 0) & 0xFFFFFFFF), ((ETR_SPIC_DCX_DATA = (ETR_SPIC_DCX_DATA & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_PAGE_CTRL0  ---------------------------
// SVD Line: 1802

unsigned int ETR_SPIC_PAGE_CTRL0 __AT (0x40001170);



// ---------------------------  Register Item: ETR_SPIC_PAGE_CTRL0  -------------------------------
// SVD Line: 1802

//  <item> SFDITEM_REG__ETR_SPIC_PAGE_CTRL0
//    <name> PAGE_CTRL0 </name>
//    <i> [Bits 31..0] RW (@ 0x40001170) NAND page ctrl Register 0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_PAGE_CTRL0 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_PAGE_CTRL0 = (ETR_SPIC_PAGE_CTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_PAGE_CTRL1  ---------------------------
// SVD Line: 1812

unsigned int ETR_SPIC_PAGE_CTRL1 __AT (0x40001174);



// ---------------------------  Register Item: ETR_SPIC_PAGE_CTRL1  -------------------------------
// SVD Line: 1812

//  <item> SFDITEM_REG__ETR_SPIC_PAGE_CTRL1
//    <name> PAGE_CTRL1 </name>
//    <i> [Bits 31..0] RW (@ 0x40001174) NAND page ctrl Register 1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_PAGE_CTRL1 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_PAGE_CTRL1 = (ETR_SPIC_PAGE_CTRL1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ETR_SPIC_ST_DR  -----------------------------
// SVD Line: 1822

unsigned int ETR_SPIC_ST_DR __AT (0x40001180);



// ------------------------------  Register Item: ETR_SPIC_ST_DR  ---------------------------------
// SVD Line: 1822

//  <item> SFDITEM_REG__ETR_SPIC_ST_DR
//    <name> ST_DR </name>
//    <i> [Bits 31..0] RW (@ 0x40001180) Status Data Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_ST_DR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_ST_DR = (ETR_SPIC_ST_DR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: ETR_SPIC_STFLR  -----------------------------
// SVD Line: 1832

unsigned int ETR_SPIC_STFLR __AT (0x400011C0);



// ------------------------------  Register Item: ETR_SPIC_STFLR  ---------------------------------
// SVD Line: 1832

//  <item> SFDITEM_REG__ETR_SPIC_STFLR
//    <name> STFLR </name>
//    <i> [Bits 31..0] RW (@ 0x400011C0) Status FIFO level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_STFLR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_STFLR = (ETR_SPIC_STFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ETR_SPIC_PAGE_READ  ---------------------------
// SVD Line: 1842

unsigned int ETR_SPIC_PAGE_READ __AT (0x400011D0);



// ----------------------------  Register Item: ETR_SPIC_PAGE_READ  -------------------------------
// SVD Line: 1842

//  <item> SFDITEM_REG__ETR_SPIC_PAGE_READ
//    <name> PAGE_READ </name>
//    <i> [Bits 31..0] RW (@ 0x400011D0) Page Read Command of NAND Flash </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_PAGE_READ >> 0) & 0xFFFFFFFF), ((ETR_SPIC_PAGE_READ = (ETR_SPIC_PAGE_READ & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_SEC_BASE_0  ---------------------------
// SVD Line: 1852

unsigned int ETR_SPIC_SEC_BASE_0 __AT (0x40001200);



// ---------------------------  Register Item: ETR_SPIC_SEC_BASE_0  -------------------------------
// SVD Line: 1852

//  <item> SFDITEM_REG__ETR_SPIC_SEC_BASE_0
//    <name> SEC_BASE_0 </name>
//    <i> [Bits 31..0] RW (@ 0x40001200) SEC region 0 base address register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_SEC_BASE_0 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_SEC_BASE_0 = (ETR_SPIC_SEC_BASE_0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: ETR_SPIC_SEC_END_0  ---------------------------
// SVD Line: 1862

unsigned int ETR_SPIC_SEC_END_0 __AT (0x40001204);



// ----------------------------  Register Item: ETR_SPIC_SEC_END_0  -------------------------------
// SVD Line: 1862

//  <item> SFDITEM_REG__ETR_SPIC_SEC_END_0
//    <name> SEC_END_0 </name>
//    <i> [Bits 31..0] RW (@ 0x40001204) SEC region 0 end address register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_SEC_END_0 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_SEC_END_0 = (ETR_SPIC_SEC_END_0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: ETR_SPIC_SEC_NONCE_0  --------------------------
// SVD Line: 1872

unsigned int ETR_SPIC_SEC_NONCE_0 __AT (0x40001208);



// ---------------------------  Register Item: ETR_SPIC_SEC_NONCE_0  ------------------------------
// SVD Line: 1872

//  <item> SFDITEM_REG__ETR_SPIC_SEC_NONCE_0
//    <name> SEC_NONCE_0 </name>
//    <i> [Bits 31..0] RW (@ 0x40001208) SEC region 0 nonce register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_SEC_NONCE_0 >> 0) & 0xFFFFFFFF), ((ETR_SPIC_SEC_NONCE_0 = (ETR_SPIC_SEC_NONCE_0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: ETR_SPIC_SEC_IDR  ----------------------------
// SVD Line: 1882

unsigned int ETR_SPIC_SEC_IDR __AT (0x400013FC);



// -----------------------------  Register Item: ETR_SPIC_SEC_IDR  --------------------------------
// SVD Line: 1882

//  <item> SFDITEM_REG__ETR_SPIC_SEC_IDR
//    <name> SEC_IDR </name>
//    <i> [Bits 31..0] RO (@ 0x400013FC) SEC ID register </i>
//    <edit> 
//      <loc> ( (unsigned int)((ETR_SPIC_SEC_IDR >> 0) & 0xFFFFFFFF), ((ETR_SPIC_SEC_IDR = (ETR_SPIC_SEC_IDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Peripheral View: ETR_SPIC  -----------------------------------
// SVD Line: 1893

//  <view> ETR_SPIC
//    <name> ETR_SPIC </name>
//    <item> SFDITEM_REG__ETR_SPIC_CTRLR0 </item>
//    <item> SFDITEM_REG__ETR_SPIC_RX_NDF </item>
//    <item> SFDITEM_REG__ETR_SPIC_SSIENR </item>
//    <item> SFDITEM_REG__ETR_SPIC_MWCR </item>
//    <item> SFDITEM_REG__ETR_SPIC_SER </item>
//    <item> SFDITEM_REG__ETR_SPIC_BAUDR </item>
//    <item> SFDITEM_REG__ETR_SPIC_TXFTLR </item>
//    <item> SFDITEM_REG__ETR_SPIC_RXFTLR </item>
//    <item> SFDITEM_REG__ETR_SPIC_TXFLR </item>
//    <item> SFDITEM_REG__ETR_SPIC_RXFLR </item>
//    <item> SFDITEM_REG__ETR_SPIC_SR </item>
//    <item> SFDITEM_REG__ETR_SPIC_IMR </item>
//    <item> SFDITEM_REG__ETR_SPIC_ISR </item>
//    <item> SFDITEM_REG__ETR_SPIC_RISR </item>
//    <item> SFDITEM_REG__ETR_SPIC_TXOICR </item>
//    <item> SFDITEM_REG__ETR_SPIC_RXOICR </item>
//    <item> SFDITEM_REG__ETR_SPIC_RXUICR </item>
//    <item> SFDITEM_REG__ETR_SPIC_MSTICR </item>
//    <item> SFDITEM_REG__ETR_SPIC_ICR </item>
//    <item> SFDITEM_REG__ETR_SPIC_DMACR </item>
//    <item> SFDITEM_REG__ETR_SPIC_DMATDLR </item>
//    <item> SFDITEM_REG__ETR_SPIC_DMARDLR </item>
//    <item> SFDITEM_REG__ETR_SPIC_IDR </item>
//    <item> SFDITEM_REG__ETR_SPIC_SPIC_VERSION </item>
//    <item> SFDITEM_REG__ETR_SPIC_DR </item>
//    <item> SFDITEM_REG__ETR_SPIC_DM_DR </item>
//    <item> SFDITEM_REG__ETR_SPIC_READ_FAST_SINGLE </item>
//    <item> SFDITEM_REG__ETR_SPIC_READ_DUAL_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_READ_DUAL_ADDR_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_READ_QUAD_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_READ_QUAD_ADDR_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_WRITE_SINGLE </item>
//    <item> SFDITEM_REG__ETR_SPIC_WRITE_DUAL_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_WRITE_DUAL_ADDR_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_WRITE_QUAD_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_WRITE_QUAD_ADDR_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_WRITE_ENABLE </item>
//    <item> SFDITEM_REG__ETR_SPIC_READ_STATUS </item>
//    <item> SFDITEM_REG__ETR_SPIC_CTRLR2 </item>
//    <item> SFDITEM_REG__ETR_SPIC_FBAUDR </item>
//    <item> SFDITEM_REG__ETR_SPIC_USER_LENGTH </item>
//    <item> SFDITEM_REG__ETR_SPIC_AUTO_LENGTH </item>
//    <item> SFDITEM_REG__ETR_SPIC_VALID_CMD </item>
//    <item> SFDITEM_REG__ETR_SPIC_FLASH_SIZE </item>
//    <item> SFDITEM_REG__ETR_SPIC_FLUSH_FIFO </item>
//    <item> SFDITEM_REG__ETR_SPIC_DUM_BYTE </item>
//    <item> SFDITEM_REG__ETR_SPIC_TX_NDF </item>
//    <item> SFDITEM_REG__ETR_SPIC_DEVICE_INFO </item>
//    <item> SFDITEM_REG__ETR_SPIC_TPR0 </item>
//    <item> SFDITEM_REG__ETR_SPIC_AUTO_LENGTH2 </item>
//    <item> SFDITEM_REG__ETR_SPIC_TPR1 </item>
//    <item> SFDITEM_REG__ETR_SPIC_SLOT_STARVE </item>
//    <item> SFDITEM_REG__ETR_SPIC_PDEX_CTRL0 </item>
//    <item> SFDITEM_REG__ETR_SPIC_PDEX_CTRL1 </item>
//    <item> SFDITEM_REG__ETR_SPIC_PDEX_CTRL2 </item>
//    <item> SFDITEM_REG__ETR_SPIC_TPR2 </item>
//    <item> SFDITEM_REG__ETR_SPIC_ICG_EN </item>
//    <item> SFDITEM_REG__ETR_SPIC_WBUF_ID </item>
//    <item> SFDITEM_REG__ETR_SPIC_DCX_CTRL </item>
//    <item> SFDITEM_REG__ETR_SPIC_DCX_CMD </item>
//    <item> SFDITEM_REG__ETR_SPIC_DCX_ADDR </item>
//    <item> SFDITEM_REG__ETR_SPIC_DCX_DATA </item>
//    <item> SFDITEM_REG__ETR_SPIC_PAGE_CTRL0 </item>
//    <item> SFDITEM_REG__ETR_SPIC_PAGE_CTRL1 </item>
//    <item> SFDITEM_REG__ETR_SPIC_ST_DR </item>
//    <item> SFDITEM_REG__ETR_SPIC_STFLR </item>
//    <item> SFDITEM_REG__ETR_SPIC_PAGE_READ </item>
//    <item> SFDITEM_REG__ETR_SPIC_SEC_BASE_0 </item>
//    <item> SFDITEM_REG__ETR_SPIC_SEC_END_0 </item>
//    <item> SFDITEM_REG__ETR_SPIC_SEC_NONCE_0 </item>
//    <item> SFDITEM_REG__ETR_SPIC_SEC_IDR </item>
//  </view>
//  


// -----------------------------  Register Item Address: DMA_SAR0  --------------------------------
// SVD Line: 1933

unsigned int DMA_SAR0 __AT (0x40002000);



// ---------------------------------  Register Item: DMA_SAR0  ------------------------------------
// SVD Line: 1933

//  <item> SFDITEM_REG__DMA_SAR0
//    <name> SAR0 </name>
//    <i> [Bits 31..0] RW (@ 0x40002000) Channel 0 Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SAR0 >> 0) & 0xFFFFFFFF), ((DMA_SAR0 = (DMA_SAR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_SAR0  ------------------------------
// SVD Line: 1943

unsigned int DMA_CURR_SAR0 __AT (0x40002004);



// ------------------------------  Register Item: DMA_CURR_SAR0  ----------------------------------
// SVD Line: 1943

//  <item> SFDITEM_REG__DMA_CURR_SAR0
//    <name> CURR_SAR0 </name>
//    <i> [Bits 31..0] RO (@ 0x40002004) Channel 0 Current Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_SAR0 >> 0) & 0xFFFFFFFF), ((DMA_CURR_SAR0 = (DMA_CURR_SAR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_DAR0  --------------------------------
// SVD Line: 1953

unsigned int DMA_DAR0 __AT (0x40002008);



// ---------------------------------  Register Item: DMA_DAR0  ------------------------------------
// SVD Line: 1953

//  <item> SFDITEM_REG__DMA_DAR0
//    <name> DAR0 </name>
//    <i> [Bits 31..0] RW (@ 0x40002008) Channel 0 Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DAR0 >> 0) & 0xFFFFFFFF), ((DMA_DAR0 = (DMA_DAR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_DAR0  ------------------------------
// SVD Line: 1963

unsigned int DMA_CURR_DAR0 __AT (0x4000200C);



// ------------------------------  Register Item: DMA_CURR_DAR0  ----------------------------------
// SVD Line: 1963

//  <item> SFDITEM_REG__DMA_CURR_DAR0
//    <name> CURR_DAR0 </name>
//    <i> [Bits 31..0] RO (@ 0x4000200C) Channel 0 Current Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_DAR0 >> 0) & 0xFFFFFFFF), ((DMA_CURR_DAR0 = (DMA_CURR_DAR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP0_L  -------------------------------
// SVD Line: 1973

unsigned int DMA_LLP0_L __AT (0x40002010);



// --------------------------------  Register Item: DMA_LLP0_L  -----------------------------------
// SVD Line: 1973

//  <item> SFDITEM_REG__DMA_LLP0_L
//    <name> LLP0_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002010) Channel 0 low-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP0_L >> 0) & 0xFFFFFFFF), ((DMA_LLP0_L = (DMA_LLP0_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP0_H  -------------------------------
// SVD Line: 1983

unsigned int DMA_LLP0_H __AT (0x40002014);



// --------------------------------  Register Item: DMA_LLP0_H  -----------------------------------
// SVD Line: 1983

//  <item> SFDITEM_REG__DMA_LLP0_H
//    <name> LLP0_H </name>
//    <i> [Bits 31..0] RW (@ 0x40002014) Channel 0 high-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP0_H >> 0) & 0xFFFFFFFF), ((DMA_LLP0_H = (DMA_LLP0_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_CTL0_L  -------------------------------
// SVD Line: 1993

unsigned int DMA_CTL0_L __AT (0x40002018);



// ----------------------------  Field Item: DMA_CTL0_L_LLP_SRC_EN  -------------------------------
// SVD Line: 2002

//  <item> SFDITEM_FIELD__DMA_CTL0_L_LLP_SRC_EN
//    <name> LLP_SRC_EN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40002018) Enables block chaining on the source side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL0_L ) </loc>
//      <o.28..28> LLP_SRC_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL0_L_LLP_DST_EN  -------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__DMA_CTL0_L_LLP_DST_EN
//    <name> LLP_DST_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40002018) Enables block chaining on the destination side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL0_L ) </loc>
//      <o.27..27> LLP_DST_EN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL0_L_TT_FC  ----------------------------------
// SVD Line: 2022

//  <item> SFDITEM_FIELD__DMA_CTL0_L_TT_FC
//    <name> TT_FC </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40002018) Transfer Type and Flow Control. Supports multiple transfer types, with specific flow control. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL0_L >> 20) & 0xF), ((DMA_CTL0_L = (DMA_CTL0_L & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL0_L_DST_SCATTER_EN  -----------------------------
// SVD Line: 2032

//  <item> SFDITEM_FIELD__DMA_CTL0_L_DST_SCATTER_EN
//    <name> DST_SCATTER_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40002018) Enables scatter on the destination side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL0_L ) </loc>
//      <o.18..18> DST_SCATTER_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL0_L_SRC_GATHER_EN  ------------------------------
// SVD Line: 2042

//  <item> SFDITEM_FIELD__DMA_CTL0_L_SRC_GATHER_EN
//    <name> SRC_GATHER_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40002018) Enables gather on the source side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL0_L ) </loc>
//      <o.17..17> SRC_GATHER_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL0_L_SRC_MSIZE  --------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__DMA_CTL0_L_SRC_MSIZE
//    <name> SRC_MSIZE </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x40002018) Number of data items per source burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL0_L >> 14) & 0x7), ((DMA_CTL0_L = (DMA_CTL0_L & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL0_L_DEST_MSIZE  -------------------------------
// SVD Line: 2062

//  <item> SFDITEM_FIELD__DMA_CTL0_L_DEST_MSIZE
//    <name> DEST_MSIZE </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40002018) Number of data items per destination burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL0_L >> 11) & 0x7), ((DMA_CTL0_L = (DMA_CTL0_L & ~(0x7UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL0_L_SINC  ----------------------------------
// SVD Line: 2072

//  <item> SFDITEM_FIELD__DMA_CTL0_L_SINC
//    <name> SINC </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40002018) Source Address Increment. Indicates increment behavior for source address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL0_L >> 9) & 0x3), ((DMA_CTL0_L = (DMA_CTL0_L & ~(0x3UL << 9 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 9 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL0_L_DINC  ----------------------------------
// SVD Line: 2082

//  <item> SFDITEM_FIELD__DMA_CTL0_L_DINC
//    <name> DINC </name>
//    <rw> 
//    <i> [Bits 8..7] RW (@ 0x40002018) Destination Address Increment. Indicates increment behavior for destination address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL0_L >> 7) & 0x3), ((DMA_CTL0_L = (DMA_CTL0_L & ~(0x3UL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL0_L_SRC_TR_WIDTH  ------------------------------
// SVD Line: 2092

//  <item> SFDITEM_FIELD__DMA_CTL0_L_SRC_TR_WIDTH
//    <name> SRC_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x40002018) Source Transfer Width. Specifies width of data transfer from source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL0_L >> 4) & 0x7), ((DMA_CTL0_L = (DMA_CTL0_L & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL0_L_DST_TR_WIDTH  ------------------------------
// SVD Line: 2102

//  <item> SFDITEM_FIELD__DMA_CTL0_L_DST_TR_WIDTH
//    <name> DST_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40002018) Destination Transfer Width. Specifies width of data transfer to destination. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL0_L >> 1) & 0x7), ((DMA_CTL0_L = (DMA_CTL0_L & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL0_L_INT_EN  ---------------------------------
// SVD Line: 2112

//  <item> SFDITEM_FIELD__DMA_CTL0_L_INT_EN
//    <name> INT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40002018) Interrupt Enable Bit. Globally enables interrupt sources for the channel. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL0_L ) </loc>
//      <o.0..0> INT_EN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL0_L  -----------------------------------
// SVD Line: 1993

//  <rtree> SFDITEM_REG__DMA_CTL0_L
//    <name> CTL0_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002018) Channel 0 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL0_L >> 0) & 0xFFFFFFFF), ((DMA_CTL0_L = (DMA_CTL0_L & ~(0x18F7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x18F7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_LLP_SRC_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_LLP_DST_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_TT_FC </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_DST_SCATTER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_SRC_GATHER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_SRC_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_DEST_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_SINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_DINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_SRC_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_DST_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL0_L_INT_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL1_L  -------------------------------
// SVD Line: 2123

unsigned int DMA_CTL1_L __AT (0x40002070);



// ----------------------------  Field Item: DMA_CTL1_L_LLP_SRC_EN  -------------------------------
// SVD Line: 2002

//  <item> SFDITEM_FIELD__DMA_CTL1_L_LLP_SRC_EN
//    <name> LLP_SRC_EN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40002070) Enables block chaining on the source side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL1_L ) </loc>
//      <o.28..28> LLP_SRC_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL1_L_LLP_DST_EN  -------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__DMA_CTL1_L_LLP_DST_EN
//    <name> LLP_DST_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40002070) Enables block chaining on the destination side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL1_L ) </loc>
//      <o.27..27> LLP_DST_EN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL1_L_TT_FC  ----------------------------------
// SVD Line: 2022

//  <item> SFDITEM_FIELD__DMA_CTL1_L_TT_FC
//    <name> TT_FC </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40002070) Transfer Type and Flow Control. Supports multiple transfer types, with specific flow control. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL1_L >> 20) & 0xF), ((DMA_CTL1_L = (DMA_CTL1_L & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL1_L_DST_SCATTER_EN  -----------------------------
// SVD Line: 2032

//  <item> SFDITEM_FIELD__DMA_CTL1_L_DST_SCATTER_EN
//    <name> DST_SCATTER_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40002070) Enables scatter on the destination side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL1_L ) </loc>
//      <o.18..18> DST_SCATTER_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL1_L_SRC_GATHER_EN  ------------------------------
// SVD Line: 2042

//  <item> SFDITEM_FIELD__DMA_CTL1_L_SRC_GATHER_EN
//    <name> SRC_GATHER_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40002070) Enables gather on the source side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL1_L ) </loc>
//      <o.17..17> SRC_GATHER_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL1_L_SRC_MSIZE  --------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__DMA_CTL1_L_SRC_MSIZE
//    <name> SRC_MSIZE </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x40002070) Number of data items per source burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL1_L >> 14) & 0x7), ((DMA_CTL1_L = (DMA_CTL1_L & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL1_L_DEST_MSIZE  -------------------------------
// SVD Line: 2062

//  <item> SFDITEM_FIELD__DMA_CTL1_L_DEST_MSIZE
//    <name> DEST_MSIZE </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40002070) Number of data items per destination burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL1_L >> 11) & 0x7), ((DMA_CTL1_L = (DMA_CTL1_L & ~(0x7UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL1_L_SINC  ----------------------------------
// SVD Line: 2072

//  <item> SFDITEM_FIELD__DMA_CTL1_L_SINC
//    <name> SINC </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40002070) Source Address Increment. Indicates increment behavior for source address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL1_L >> 9) & 0x3), ((DMA_CTL1_L = (DMA_CTL1_L & ~(0x3UL << 9 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 9 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL1_L_DINC  ----------------------------------
// SVD Line: 2082

//  <item> SFDITEM_FIELD__DMA_CTL1_L_DINC
//    <name> DINC </name>
//    <rw> 
//    <i> [Bits 8..7] RW (@ 0x40002070) Destination Address Increment. Indicates increment behavior for destination address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL1_L >> 7) & 0x3), ((DMA_CTL1_L = (DMA_CTL1_L & ~(0x3UL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL1_L_SRC_TR_WIDTH  ------------------------------
// SVD Line: 2092

//  <item> SFDITEM_FIELD__DMA_CTL1_L_SRC_TR_WIDTH
//    <name> SRC_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x40002070) Source Transfer Width. Specifies width of data transfer from source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL1_L >> 4) & 0x7), ((DMA_CTL1_L = (DMA_CTL1_L & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL1_L_DST_TR_WIDTH  ------------------------------
// SVD Line: 2102

//  <item> SFDITEM_FIELD__DMA_CTL1_L_DST_TR_WIDTH
//    <name> DST_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40002070) Destination Transfer Width. Specifies width of data transfer to destination. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL1_L >> 1) & 0x7), ((DMA_CTL1_L = (DMA_CTL1_L & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL1_L_INT_EN  ---------------------------------
// SVD Line: 2112

//  <item> SFDITEM_FIELD__DMA_CTL1_L_INT_EN
//    <name> INT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40002070) Interrupt Enable Bit. Globally enables interrupt sources for the channel. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL1_L ) </loc>
//      <o.0..0> INT_EN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL1_L  -----------------------------------
// SVD Line: 2123

//  <rtree> SFDITEM_REG__DMA_CTL1_L
//    <name> CTL1_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002070) Channel 1 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL1_L >> 0) & 0xFFFFFFFF), ((DMA_CTL1_L = (DMA_CTL1_L & ~(0x18F7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x18F7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_LLP_SRC_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_LLP_DST_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_TT_FC </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_DST_SCATTER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_SRC_GATHER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_SRC_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_DEST_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_SINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_DINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_SRC_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_DST_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL1_L_INT_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL2_L  -------------------------------
// SVD Line: 2129

unsigned int DMA_CTL2_L __AT (0x400020C8);



// ----------------------------  Field Item: DMA_CTL2_L_LLP_SRC_EN  -------------------------------
// SVD Line: 2002

//  <item> SFDITEM_FIELD__DMA_CTL2_L_LLP_SRC_EN
//    <name> LLP_SRC_EN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400020C8) Enables block chaining on the source side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL2_L ) </loc>
//      <o.28..28> LLP_SRC_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL2_L_LLP_DST_EN  -------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__DMA_CTL2_L_LLP_DST_EN
//    <name> LLP_DST_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x400020C8) Enables block chaining on the destination side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL2_L ) </loc>
//      <o.27..27> LLP_DST_EN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL2_L_TT_FC  ----------------------------------
// SVD Line: 2022

//  <item> SFDITEM_FIELD__DMA_CTL2_L_TT_FC
//    <name> TT_FC </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x400020C8) Transfer Type and Flow Control. Supports multiple transfer types, with specific flow control. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL2_L >> 20) & 0xF), ((DMA_CTL2_L = (DMA_CTL2_L & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL2_L_DST_SCATTER_EN  -----------------------------
// SVD Line: 2032

//  <item> SFDITEM_FIELD__DMA_CTL2_L_DST_SCATTER_EN
//    <name> DST_SCATTER_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x400020C8) Enables scatter on the destination side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL2_L ) </loc>
//      <o.18..18> DST_SCATTER_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL2_L_SRC_GATHER_EN  ------------------------------
// SVD Line: 2042

//  <item> SFDITEM_FIELD__DMA_CTL2_L_SRC_GATHER_EN
//    <name> SRC_GATHER_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x400020C8) Enables gather on the source side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL2_L ) </loc>
//      <o.17..17> SRC_GATHER_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL2_L_SRC_MSIZE  --------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__DMA_CTL2_L_SRC_MSIZE
//    <name> SRC_MSIZE </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x400020C8) Number of data items per source burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL2_L >> 14) & 0x7), ((DMA_CTL2_L = (DMA_CTL2_L & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL2_L_DEST_MSIZE  -------------------------------
// SVD Line: 2062

//  <item> SFDITEM_FIELD__DMA_CTL2_L_DEST_MSIZE
//    <name> DEST_MSIZE </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x400020C8) Number of data items per destination burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL2_L >> 11) & 0x7), ((DMA_CTL2_L = (DMA_CTL2_L & ~(0x7UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL2_L_SINC  ----------------------------------
// SVD Line: 2072

//  <item> SFDITEM_FIELD__DMA_CTL2_L_SINC
//    <name> SINC </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x400020C8) Source Address Increment. Indicates increment behavior for source address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL2_L >> 9) & 0x3), ((DMA_CTL2_L = (DMA_CTL2_L & ~(0x3UL << 9 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 9 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL2_L_DINC  ----------------------------------
// SVD Line: 2082

//  <item> SFDITEM_FIELD__DMA_CTL2_L_DINC
//    <name> DINC </name>
//    <rw> 
//    <i> [Bits 8..7] RW (@ 0x400020C8) Destination Address Increment. Indicates increment behavior for destination address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL2_L >> 7) & 0x3), ((DMA_CTL2_L = (DMA_CTL2_L & ~(0x3UL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL2_L_SRC_TR_WIDTH  ------------------------------
// SVD Line: 2092

//  <item> SFDITEM_FIELD__DMA_CTL2_L_SRC_TR_WIDTH
//    <name> SRC_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x400020C8) Source Transfer Width. Specifies width of data transfer from source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL2_L >> 4) & 0x7), ((DMA_CTL2_L = (DMA_CTL2_L & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL2_L_DST_TR_WIDTH  ------------------------------
// SVD Line: 2102

//  <item> SFDITEM_FIELD__DMA_CTL2_L_DST_TR_WIDTH
//    <name> DST_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x400020C8) Destination Transfer Width. Specifies width of data transfer to destination. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL2_L >> 1) & 0x7), ((DMA_CTL2_L = (DMA_CTL2_L & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL2_L_INT_EN  ---------------------------------
// SVD Line: 2112

//  <item> SFDITEM_FIELD__DMA_CTL2_L_INT_EN
//    <name> INT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400020C8) Interrupt Enable Bit. Globally enables interrupt sources for the channel. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL2_L ) </loc>
//      <o.0..0> INT_EN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL2_L  -----------------------------------
// SVD Line: 2129

//  <rtree> SFDITEM_REG__DMA_CTL2_L
//    <name> CTL2_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020C8) Channel 2 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL2_L >> 0) & 0xFFFFFFFF), ((DMA_CTL2_L = (DMA_CTL2_L & ~(0x18F7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x18F7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_LLP_SRC_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_LLP_DST_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_TT_FC </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_DST_SCATTER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_SRC_GATHER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_SRC_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_DEST_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_SINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_DINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_SRC_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_DST_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL2_L_INT_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL3_L  -------------------------------
// SVD Line: 2135

unsigned int DMA_CTL3_L __AT (0x40002120);



// ----------------------------  Field Item: DMA_CTL3_L_LLP_SRC_EN  -------------------------------
// SVD Line: 2002

//  <item> SFDITEM_FIELD__DMA_CTL3_L_LLP_SRC_EN
//    <name> LLP_SRC_EN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40002120) Enables block chaining on the source side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL3_L ) </loc>
//      <o.28..28> LLP_SRC_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL3_L_LLP_DST_EN  -------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__DMA_CTL3_L_LLP_DST_EN
//    <name> LLP_DST_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40002120) Enables block chaining on the destination side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL3_L ) </loc>
//      <o.27..27> LLP_DST_EN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL3_L_TT_FC  ----------------------------------
// SVD Line: 2022

//  <item> SFDITEM_FIELD__DMA_CTL3_L_TT_FC
//    <name> TT_FC </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40002120) Transfer Type and Flow Control. Supports multiple transfer types, with specific flow control. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL3_L >> 20) & 0xF), ((DMA_CTL3_L = (DMA_CTL3_L & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL3_L_DST_SCATTER_EN  -----------------------------
// SVD Line: 2032

//  <item> SFDITEM_FIELD__DMA_CTL3_L_DST_SCATTER_EN
//    <name> DST_SCATTER_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40002120) Enables scatter on the destination side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL3_L ) </loc>
//      <o.18..18> DST_SCATTER_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL3_L_SRC_GATHER_EN  ------------------------------
// SVD Line: 2042

//  <item> SFDITEM_FIELD__DMA_CTL3_L_SRC_GATHER_EN
//    <name> SRC_GATHER_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40002120) Enables gather on the source side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL3_L ) </loc>
//      <o.17..17> SRC_GATHER_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL3_L_SRC_MSIZE  --------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__DMA_CTL3_L_SRC_MSIZE
//    <name> SRC_MSIZE </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x40002120) Number of data items per source burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL3_L >> 14) & 0x7), ((DMA_CTL3_L = (DMA_CTL3_L & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL3_L_DEST_MSIZE  -------------------------------
// SVD Line: 2062

//  <item> SFDITEM_FIELD__DMA_CTL3_L_DEST_MSIZE
//    <name> DEST_MSIZE </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40002120) Number of data items per destination burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL3_L >> 11) & 0x7), ((DMA_CTL3_L = (DMA_CTL3_L & ~(0x7UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL3_L_SINC  ----------------------------------
// SVD Line: 2072

//  <item> SFDITEM_FIELD__DMA_CTL3_L_SINC
//    <name> SINC </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40002120) Source Address Increment. Indicates increment behavior for source address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL3_L >> 9) & 0x3), ((DMA_CTL3_L = (DMA_CTL3_L & ~(0x3UL << 9 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 9 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL3_L_DINC  ----------------------------------
// SVD Line: 2082

//  <item> SFDITEM_FIELD__DMA_CTL3_L_DINC
//    <name> DINC </name>
//    <rw> 
//    <i> [Bits 8..7] RW (@ 0x40002120) Destination Address Increment. Indicates increment behavior for destination address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL3_L >> 7) & 0x3), ((DMA_CTL3_L = (DMA_CTL3_L & ~(0x3UL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL3_L_SRC_TR_WIDTH  ------------------------------
// SVD Line: 2092

//  <item> SFDITEM_FIELD__DMA_CTL3_L_SRC_TR_WIDTH
//    <name> SRC_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x40002120) Source Transfer Width. Specifies width of data transfer from source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL3_L >> 4) & 0x7), ((DMA_CTL3_L = (DMA_CTL3_L & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL3_L_DST_TR_WIDTH  ------------------------------
// SVD Line: 2102

//  <item> SFDITEM_FIELD__DMA_CTL3_L_DST_TR_WIDTH
//    <name> DST_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40002120) Destination Transfer Width. Specifies width of data transfer to destination. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL3_L >> 1) & 0x7), ((DMA_CTL3_L = (DMA_CTL3_L & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL3_L_INT_EN  ---------------------------------
// SVD Line: 2112

//  <item> SFDITEM_FIELD__DMA_CTL3_L_INT_EN
//    <name> INT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40002120) Interrupt Enable Bit. Globally enables interrupt sources for the channel. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL3_L ) </loc>
//      <o.0..0> INT_EN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL3_L  -----------------------------------
// SVD Line: 2135

//  <rtree> SFDITEM_REG__DMA_CTL3_L
//    <name> CTL3_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002120) Channel 3 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL3_L >> 0) & 0xFFFFFFFF), ((DMA_CTL3_L = (DMA_CTL3_L & ~(0x18F7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x18F7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_LLP_SRC_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_LLP_DST_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_TT_FC </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_DST_SCATTER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_SRC_GATHER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_SRC_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_DEST_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_SINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_DINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_SRC_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_DST_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL3_L_INT_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL4_L  -------------------------------
// SVD Line: 2141

unsigned int DMA_CTL4_L __AT (0x40002178);



// ----------------------------  Field Item: DMA_CTL4_L_LLP_SRC_EN  -------------------------------
// SVD Line: 2002

//  <item> SFDITEM_FIELD__DMA_CTL4_L_LLP_SRC_EN
//    <name> LLP_SRC_EN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40002178) Enables block chaining on the source side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL4_L ) </loc>
//      <o.28..28> LLP_SRC_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL4_L_LLP_DST_EN  -------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__DMA_CTL4_L_LLP_DST_EN
//    <name> LLP_DST_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40002178) Enables block chaining on the destination side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL4_L ) </loc>
//      <o.27..27> LLP_DST_EN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL4_L_TT_FC  ----------------------------------
// SVD Line: 2022

//  <item> SFDITEM_FIELD__DMA_CTL4_L_TT_FC
//    <name> TT_FC </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40002178) Transfer Type and Flow Control. Supports multiple transfer types, with specific flow control. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL4_L >> 20) & 0xF), ((DMA_CTL4_L = (DMA_CTL4_L & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL4_L_DST_SCATTER_EN  -----------------------------
// SVD Line: 2032

//  <item> SFDITEM_FIELD__DMA_CTL4_L_DST_SCATTER_EN
//    <name> DST_SCATTER_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40002178) Enables scatter on the destination side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL4_L ) </loc>
//      <o.18..18> DST_SCATTER_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL4_L_SRC_GATHER_EN  ------------------------------
// SVD Line: 2042

//  <item> SFDITEM_FIELD__DMA_CTL4_L_SRC_GATHER_EN
//    <name> SRC_GATHER_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40002178) Enables gather on the source side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL4_L ) </loc>
//      <o.17..17> SRC_GATHER_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL4_L_SRC_MSIZE  --------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__DMA_CTL4_L_SRC_MSIZE
//    <name> SRC_MSIZE </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x40002178) Number of data items per source burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL4_L >> 14) & 0x7), ((DMA_CTL4_L = (DMA_CTL4_L & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL4_L_DEST_MSIZE  -------------------------------
// SVD Line: 2062

//  <item> SFDITEM_FIELD__DMA_CTL4_L_DEST_MSIZE
//    <name> DEST_MSIZE </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40002178) Number of data items per destination burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL4_L >> 11) & 0x7), ((DMA_CTL4_L = (DMA_CTL4_L & ~(0x7UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL4_L_SINC  ----------------------------------
// SVD Line: 2072

//  <item> SFDITEM_FIELD__DMA_CTL4_L_SINC
//    <name> SINC </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40002178) Source Address Increment. Indicates increment behavior for source address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL4_L >> 9) & 0x3), ((DMA_CTL4_L = (DMA_CTL4_L & ~(0x3UL << 9 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 9 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL4_L_DINC  ----------------------------------
// SVD Line: 2082

//  <item> SFDITEM_FIELD__DMA_CTL4_L_DINC
//    <name> DINC </name>
//    <rw> 
//    <i> [Bits 8..7] RW (@ 0x40002178) Destination Address Increment. Indicates increment behavior for destination address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL4_L >> 7) & 0x3), ((DMA_CTL4_L = (DMA_CTL4_L & ~(0x3UL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL4_L_SRC_TR_WIDTH  ------------------------------
// SVD Line: 2092

//  <item> SFDITEM_FIELD__DMA_CTL4_L_SRC_TR_WIDTH
//    <name> SRC_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x40002178) Source Transfer Width. Specifies width of data transfer from source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL4_L >> 4) & 0x7), ((DMA_CTL4_L = (DMA_CTL4_L & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL4_L_DST_TR_WIDTH  ------------------------------
// SVD Line: 2102

//  <item> SFDITEM_FIELD__DMA_CTL4_L_DST_TR_WIDTH
//    <name> DST_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40002178) Destination Transfer Width. Specifies width of data transfer to destination. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL4_L >> 1) & 0x7), ((DMA_CTL4_L = (DMA_CTL4_L & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL4_L_INT_EN  ---------------------------------
// SVD Line: 2112

//  <item> SFDITEM_FIELD__DMA_CTL4_L_INT_EN
//    <name> INT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40002178) Interrupt Enable Bit. Globally enables interrupt sources for the channel. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL4_L ) </loc>
//      <o.0..0> INT_EN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL4_L  -----------------------------------
// SVD Line: 2141

//  <rtree> SFDITEM_REG__DMA_CTL4_L
//    <name> CTL4_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002178) Channel 4 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL4_L >> 0) & 0xFFFFFFFF), ((DMA_CTL4_L = (DMA_CTL4_L & ~(0x18F7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x18F7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_LLP_SRC_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_LLP_DST_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_TT_FC </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_DST_SCATTER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_SRC_GATHER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_SRC_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_DEST_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_SINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_DINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_SRC_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_DST_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL4_L_INT_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL5_L  -------------------------------
// SVD Line: 2147

unsigned int DMA_CTL5_L __AT (0x400021D0);



// ----------------------------  Field Item: DMA_CTL5_L_LLP_SRC_EN  -------------------------------
// SVD Line: 2002

//  <item> SFDITEM_FIELD__DMA_CTL5_L_LLP_SRC_EN
//    <name> LLP_SRC_EN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x400021D0) Enables block chaining on the source side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL5_L ) </loc>
//      <o.28..28> LLP_SRC_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL5_L_LLP_DST_EN  -------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__DMA_CTL5_L_LLP_DST_EN
//    <name> LLP_DST_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x400021D0) Enables block chaining on the destination side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL5_L ) </loc>
//      <o.27..27> LLP_DST_EN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL5_L_TT_FC  ----------------------------------
// SVD Line: 2022

//  <item> SFDITEM_FIELD__DMA_CTL5_L_TT_FC
//    <name> TT_FC </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x400021D0) Transfer Type and Flow Control. Supports multiple transfer types, with specific flow control. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL5_L >> 20) & 0xF), ((DMA_CTL5_L = (DMA_CTL5_L & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL5_L_DST_SCATTER_EN  -----------------------------
// SVD Line: 2032

//  <item> SFDITEM_FIELD__DMA_CTL5_L_DST_SCATTER_EN
//    <name> DST_SCATTER_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x400021D0) Enables scatter on the destination side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL5_L ) </loc>
//      <o.18..18> DST_SCATTER_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL5_L_SRC_GATHER_EN  ------------------------------
// SVD Line: 2042

//  <item> SFDITEM_FIELD__DMA_CTL5_L_SRC_GATHER_EN
//    <name> SRC_GATHER_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x400021D0) Enables gather on the source side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL5_L ) </loc>
//      <o.17..17> SRC_GATHER_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL5_L_SRC_MSIZE  --------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__DMA_CTL5_L_SRC_MSIZE
//    <name> SRC_MSIZE </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x400021D0) Number of data items per source burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL5_L >> 14) & 0x7), ((DMA_CTL5_L = (DMA_CTL5_L & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL5_L_DEST_MSIZE  -------------------------------
// SVD Line: 2062

//  <item> SFDITEM_FIELD__DMA_CTL5_L_DEST_MSIZE
//    <name> DEST_MSIZE </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x400021D0) Number of data items per destination burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL5_L >> 11) & 0x7), ((DMA_CTL5_L = (DMA_CTL5_L & ~(0x7UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL5_L_SINC  ----------------------------------
// SVD Line: 2072

//  <item> SFDITEM_FIELD__DMA_CTL5_L_SINC
//    <name> SINC </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x400021D0) Source Address Increment. Indicates increment behavior for source address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL5_L >> 9) & 0x3), ((DMA_CTL5_L = (DMA_CTL5_L & ~(0x3UL << 9 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 9 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL5_L_DINC  ----------------------------------
// SVD Line: 2082

//  <item> SFDITEM_FIELD__DMA_CTL5_L_DINC
//    <name> DINC </name>
//    <rw> 
//    <i> [Bits 8..7] RW (@ 0x400021D0) Destination Address Increment. Indicates increment behavior for destination address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL5_L >> 7) & 0x3), ((DMA_CTL5_L = (DMA_CTL5_L & ~(0x3UL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL5_L_SRC_TR_WIDTH  ------------------------------
// SVD Line: 2092

//  <item> SFDITEM_FIELD__DMA_CTL5_L_SRC_TR_WIDTH
//    <name> SRC_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x400021D0) Source Transfer Width. Specifies width of data transfer from source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL5_L >> 4) & 0x7), ((DMA_CTL5_L = (DMA_CTL5_L & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL5_L_DST_TR_WIDTH  ------------------------------
// SVD Line: 2102

//  <item> SFDITEM_FIELD__DMA_CTL5_L_DST_TR_WIDTH
//    <name> DST_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x400021D0) Destination Transfer Width. Specifies width of data transfer to destination. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL5_L >> 1) & 0x7), ((DMA_CTL5_L = (DMA_CTL5_L & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL5_L_INT_EN  ---------------------------------
// SVD Line: 2112

//  <item> SFDITEM_FIELD__DMA_CTL5_L_INT_EN
//    <name> INT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400021D0) Interrupt Enable Bit. Globally enables interrupt sources for the channel. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL5_L ) </loc>
//      <o.0..0> INT_EN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL5_L  -----------------------------------
// SVD Line: 2147

//  <rtree> SFDITEM_REG__DMA_CTL5_L
//    <name> CTL5_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021D0) Channel 5 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL5_L >> 0) & 0xFFFFFFFF), ((DMA_CTL5_L = (DMA_CTL5_L & ~(0x18F7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x18F7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_LLP_SRC_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_LLP_DST_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_TT_FC </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_DST_SCATTER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_SRC_GATHER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_SRC_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_DEST_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_SINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_DINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_SRC_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_DST_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL5_L_INT_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL6_L  -------------------------------
// SVD Line: 2153

unsigned int DMA_CTL6_L __AT (0x40002228);



// ----------------------------  Field Item: DMA_CTL6_L_LLP_SRC_EN  -------------------------------
// SVD Line: 2002

//  <item> SFDITEM_FIELD__DMA_CTL6_L_LLP_SRC_EN
//    <name> LLP_SRC_EN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40002228) Enables block chaining on the source side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL6_L ) </loc>
//      <o.28..28> LLP_SRC_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL6_L_LLP_DST_EN  -------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__DMA_CTL6_L_LLP_DST_EN
//    <name> LLP_DST_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40002228) Enables block chaining on the destination side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL6_L ) </loc>
//      <o.27..27> LLP_DST_EN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL6_L_TT_FC  ----------------------------------
// SVD Line: 2022

//  <item> SFDITEM_FIELD__DMA_CTL6_L_TT_FC
//    <name> TT_FC </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40002228) Transfer Type and Flow Control. Supports multiple transfer types, with specific flow control. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL6_L >> 20) & 0xF), ((DMA_CTL6_L = (DMA_CTL6_L & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL6_L_DST_SCATTER_EN  -----------------------------
// SVD Line: 2032

//  <item> SFDITEM_FIELD__DMA_CTL6_L_DST_SCATTER_EN
//    <name> DST_SCATTER_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40002228) Enables scatter on the destination side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL6_L ) </loc>
//      <o.18..18> DST_SCATTER_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL6_L_SRC_GATHER_EN  ------------------------------
// SVD Line: 2042

//  <item> SFDITEM_FIELD__DMA_CTL6_L_SRC_GATHER_EN
//    <name> SRC_GATHER_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40002228) Enables gather on the source side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL6_L ) </loc>
//      <o.17..17> SRC_GATHER_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL6_L_SRC_MSIZE  --------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__DMA_CTL6_L_SRC_MSIZE
//    <name> SRC_MSIZE </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x40002228) Number of data items per source burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL6_L >> 14) & 0x7), ((DMA_CTL6_L = (DMA_CTL6_L & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL6_L_DEST_MSIZE  -------------------------------
// SVD Line: 2062

//  <item> SFDITEM_FIELD__DMA_CTL6_L_DEST_MSIZE
//    <name> DEST_MSIZE </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40002228) Number of data items per destination burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL6_L >> 11) & 0x7), ((DMA_CTL6_L = (DMA_CTL6_L & ~(0x7UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL6_L_SINC  ----------------------------------
// SVD Line: 2072

//  <item> SFDITEM_FIELD__DMA_CTL6_L_SINC
//    <name> SINC </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40002228) Source Address Increment. Indicates increment behavior for source address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL6_L >> 9) & 0x3), ((DMA_CTL6_L = (DMA_CTL6_L & ~(0x3UL << 9 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 9 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL6_L_DINC  ----------------------------------
// SVD Line: 2082

//  <item> SFDITEM_FIELD__DMA_CTL6_L_DINC
//    <name> DINC </name>
//    <rw> 
//    <i> [Bits 8..7] RW (@ 0x40002228) Destination Address Increment. Indicates increment behavior for destination address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL6_L >> 7) & 0x3), ((DMA_CTL6_L = (DMA_CTL6_L & ~(0x3UL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL6_L_SRC_TR_WIDTH  ------------------------------
// SVD Line: 2092

//  <item> SFDITEM_FIELD__DMA_CTL6_L_SRC_TR_WIDTH
//    <name> SRC_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x40002228) Source Transfer Width. Specifies width of data transfer from source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL6_L >> 4) & 0x7), ((DMA_CTL6_L = (DMA_CTL6_L & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL6_L_DST_TR_WIDTH  ------------------------------
// SVD Line: 2102

//  <item> SFDITEM_FIELD__DMA_CTL6_L_DST_TR_WIDTH
//    <name> DST_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40002228) Destination Transfer Width. Specifies width of data transfer to destination. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL6_L >> 1) & 0x7), ((DMA_CTL6_L = (DMA_CTL6_L & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL6_L_INT_EN  ---------------------------------
// SVD Line: 2112

//  <item> SFDITEM_FIELD__DMA_CTL6_L_INT_EN
//    <name> INT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40002228) Interrupt Enable Bit. Globally enables interrupt sources for the channel. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL6_L ) </loc>
//      <o.0..0> INT_EN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL6_L  -----------------------------------
// SVD Line: 2153

//  <rtree> SFDITEM_REG__DMA_CTL6_L
//    <name> CTL6_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002228) Channel 6 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL6_L >> 0) & 0xFFFFFFFF), ((DMA_CTL6_L = (DMA_CTL6_L & ~(0x18F7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x18F7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_LLP_SRC_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_LLP_DST_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_TT_FC </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_DST_SCATTER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_SRC_GATHER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_SRC_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_DEST_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_SINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_DINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_SRC_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_DST_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL6_L_INT_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL7_L  -------------------------------
// SVD Line: 2159

unsigned int DMA_CTL7_L __AT (0x40002280);



// ----------------------------  Field Item: DMA_CTL7_L_LLP_SRC_EN  -------------------------------
// SVD Line: 2002

//  <item> SFDITEM_FIELD__DMA_CTL7_L_LLP_SRC_EN
//    <name> LLP_SRC_EN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40002280) Enables block chaining on the source side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL7_L ) </loc>
//      <o.28..28> LLP_SRC_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL7_L_LLP_DST_EN  -------------------------------
// SVD Line: 2012

//  <item> SFDITEM_FIELD__DMA_CTL7_L_LLP_DST_EN
//    <name> LLP_DST_EN </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40002280) Enables block chaining on the destination side if high and LLPx_L.LOC is non-zero. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL7_L ) </loc>
//      <o.27..27> LLP_DST_EN
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL7_L_TT_FC  ----------------------------------
// SVD Line: 2022

//  <item> SFDITEM_FIELD__DMA_CTL7_L_TT_FC
//    <name> TT_FC </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40002280) Transfer Type and Flow Control. Supports multiple transfer types, with specific flow control. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL7_L >> 20) & 0xF), ((DMA_CTL7_L = (DMA_CTL7_L & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL7_L_DST_SCATTER_EN  -----------------------------
// SVD Line: 2032

//  <item> SFDITEM_FIELD__DMA_CTL7_L_DST_SCATTER_EN
//    <name> DST_SCATTER_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40002280) Enables scatter on the destination side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL7_L ) </loc>
//      <o.18..18> DST_SCATTER_EN
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CTL7_L_SRC_GATHER_EN  ------------------------------
// SVD Line: 2042

//  <item> SFDITEM_FIELD__DMA_CTL7_L_SRC_GATHER_EN
//    <name> SRC_GATHER_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40002280) Enables gather on the source side if conditions in address control align. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL7_L ) </loc>
//      <o.17..17> SRC_GATHER_EN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL7_L_SRC_MSIZE  --------------------------------
// SVD Line: 2052

//  <item> SFDITEM_FIELD__DMA_CTL7_L_SRC_MSIZE
//    <name> SRC_MSIZE </name>
//    <rw> 
//    <i> [Bits 16..14] RW (@ 0x40002280) Number of data items per source burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL7_L >> 14) & 0x7), ((DMA_CTL7_L = (DMA_CTL7_L & ~(0x7UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DMA_CTL7_L_DEST_MSIZE  -------------------------------
// SVD Line: 2062

//  <item> SFDITEM_FIELD__DMA_CTL7_L_DEST_MSIZE
//    <name> DEST_MSIZE </name>
//    <rw> 
//    <i> [Bits 13..11] RW (@ 0x40002280) Number of data items per destination burst transaction. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL7_L >> 11) & 0x7), ((DMA_CTL7_L = (DMA_CTL7_L & ~(0x7UL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL7_L_SINC  ----------------------------------
// SVD Line: 2072

//  <item> SFDITEM_FIELD__DMA_CTL7_L_SINC
//    <name> SINC </name>
//    <rw> 
//    <i> [Bits 10..9] RW (@ 0x40002280) Source Address Increment. Indicates increment behavior for source address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL7_L >> 9) & 0x3), ((DMA_CTL7_L = (DMA_CTL7_L & ~(0x3UL << 9 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 9 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_CTL7_L_DINC  ----------------------------------
// SVD Line: 2082

//  <item> SFDITEM_FIELD__DMA_CTL7_L_DINC
//    <name> DINC </name>
//    <rw> 
//    <i> [Bits 8..7] RW (@ 0x40002280) Destination Address Increment. Indicates increment behavior for destination address. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL7_L >> 7) & 0x3), ((DMA_CTL7_L = (DMA_CTL7_L & ~(0x3UL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL7_L_SRC_TR_WIDTH  ------------------------------
// SVD Line: 2092

//  <item> SFDITEM_FIELD__DMA_CTL7_L_SRC_TR_WIDTH
//    <name> SRC_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 6..4] RW (@ 0x40002280) Source Transfer Width. Specifies width of data transfer from source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL7_L >> 4) & 0x7), ((DMA_CTL7_L = (DMA_CTL7_L & ~(0x7UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DMA_CTL7_L_DST_TR_WIDTH  ------------------------------
// SVD Line: 2102

//  <item> SFDITEM_FIELD__DMA_CTL7_L_DST_TR_WIDTH
//    <name> DST_TR_WIDTH </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40002280) Destination Transfer Width. Specifies width of data transfer to destination. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CTL7_L >> 1) & 0x7), ((DMA_CTL7_L = (DMA_CTL7_L & ~(0x7UL << 1 )) | ((unsigned long)(Gui_u8:GuiVal & 0x7) << 1 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CTL7_L_INT_EN  ---------------------------------
// SVD Line: 2112

//  <item> SFDITEM_FIELD__DMA_CTL7_L_INT_EN
//    <name> INT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40002280) Interrupt Enable Bit. Globally enables interrupt sources for the channel. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CTL7_L ) </loc>
//      <o.0..0> INT_EN
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL7_L  -----------------------------------
// SVD Line: 2159

//  <rtree> SFDITEM_REG__DMA_CTL7_L
//    <name> CTL7_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002280) Channel 7 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL7_L >> 0) & 0xFFFFFFFF), ((DMA_CTL7_L = (DMA_CTL7_L & ~(0x18F7FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x18F7FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_LLP_SRC_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_LLP_DST_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_TT_FC </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_DST_SCATTER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_SRC_GATHER_EN </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_SRC_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_DEST_MSIZE </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_SINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_DINC </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_SRC_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_DST_TR_WIDTH </item>
//    <item> SFDITEM_FIELD__DMA_CTL7_L_INT_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL0_H  -------------------------------
// SVD Line: 2166

unsigned int DMA_CTL0_H __AT (0x4000201C);



// -----------------------------  Field Item: DMA_CTL0_H_BLOCK_TS  --------------------------------
// SVD Line: 2175

//  <item> SFDITEM_FIELD__DMA_CTL0_H_BLOCK_TS
//    <name> BLOCK_TS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000201C) Block Transfer Size. Configures single transaction counts per block, subject to AXI beat mapping. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CTL0_H >> 0) & 0xFFFFFFFF), ((DMA_CTL0_H = (DMA_CTL0_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL0_H  -----------------------------------
// SVD Line: 2166

//  <rtree> SFDITEM_REG__DMA_CTL0_H
//    <name> CTL0_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000201C) Channel 0 high-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL0_H >> 0) & 0xFFFFFFFF), ((DMA_CTL0_H = (DMA_CTL0_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL0_H_BLOCK_TS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL1_H  -------------------------------
// SVD Line: 2187

unsigned int DMA_CTL1_H __AT (0x40002074);



// -----------------------------  Field Item: DMA_CTL1_H_BLOCK_TS  --------------------------------
// SVD Line: 2175

//  <item> SFDITEM_FIELD__DMA_CTL1_H_BLOCK_TS
//    <name> BLOCK_TS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002074) Block Transfer Size. Configures single transaction counts per block, subject to AXI beat mapping. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CTL1_H >> 0) & 0xFFFFFFFF), ((DMA_CTL1_H = (DMA_CTL1_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL1_H  -----------------------------------
// SVD Line: 2187

//  <rtree> SFDITEM_REG__DMA_CTL1_H
//    <name> CTL1_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002074) Channel 1 low-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL1_H >> 0) & 0xFFFFFFFF), ((DMA_CTL1_H = (DMA_CTL1_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL1_H_BLOCK_TS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL2_H  -------------------------------
// SVD Line: 2193

unsigned int DMA_CTL2_H __AT (0x400020CC);



// -----------------------------  Field Item: DMA_CTL2_H_BLOCK_TS  --------------------------------
// SVD Line: 2175

//  <item> SFDITEM_FIELD__DMA_CTL2_H_BLOCK_TS
//    <name> BLOCK_TS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020CC) Block Transfer Size. Configures single transaction counts per block, subject to AXI beat mapping. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CTL2_H >> 0) & 0xFFFFFFFF), ((DMA_CTL2_H = (DMA_CTL2_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL2_H  -----------------------------------
// SVD Line: 2193

//  <rtree> SFDITEM_REG__DMA_CTL2_H
//    <name> CTL2_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020CC) Channel 2 high-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL2_H >> 0) & 0xFFFFFFFF), ((DMA_CTL2_H = (DMA_CTL2_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL2_H_BLOCK_TS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL3_H  -------------------------------
// SVD Line: 2199

unsigned int DMA_CTL3_H __AT (0x40002124);



// -----------------------------  Field Item: DMA_CTL3_H_BLOCK_TS  --------------------------------
// SVD Line: 2175

//  <item> SFDITEM_FIELD__DMA_CTL3_H_BLOCK_TS
//    <name> BLOCK_TS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002124) Block Transfer Size. Configures single transaction counts per block, subject to AXI beat mapping. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CTL3_H >> 0) & 0xFFFFFFFF), ((DMA_CTL3_H = (DMA_CTL3_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL3_H  -----------------------------------
// SVD Line: 2199

//  <rtree> SFDITEM_REG__DMA_CTL3_H
//    <name> CTL3_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002124) Channel 3 high-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL3_H >> 0) & 0xFFFFFFFF), ((DMA_CTL3_H = (DMA_CTL3_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL3_H_BLOCK_TS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL4_H  -------------------------------
// SVD Line: 2205

unsigned int DMA_CTL4_H __AT (0x4000217C);



// -----------------------------  Field Item: DMA_CTL4_H_BLOCK_TS  --------------------------------
// SVD Line: 2175

//  <item> SFDITEM_FIELD__DMA_CTL4_H_BLOCK_TS
//    <name> BLOCK_TS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000217C) Block Transfer Size. Configures single transaction counts per block, subject to AXI beat mapping. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CTL4_H >> 0) & 0xFFFFFFFF), ((DMA_CTL4_H = (DMA_CTL4_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL4_H  -----------------------------------
// SVD Line: 2205

//  <rtree> SFDITEM_REG__DMA_CTL4_H
//    <name> CTL4_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000217C) Channel 4 high-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL4_H >> 0) & 0xFFFFFFFF), ((DMA_CTL4_H = (DMA_CTL4_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL4_H_BLOCK_TS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL5_H  -------------------------------
// SVD Line: 2211

unsigned int DMA_CTL5_H __AT (0x400021D4);



// -----------------------------  Field Item: DMA_CTL5_H_BLOCK_TS  --------------------------------
// SVD Line: 2175

//  <item> SFDITEM_FIELD__DMA_CTL5_H_BLOCK_TS
//    <name> BLOCK_TS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021D4) Block Transfer Size. Configures single transaction counts per block, subject to AXI beat mapping. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CTL5_H >> 0) & 0xFFFFFFFF), ((DMA_CTL5_H = (DMA_CTL5_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL5_H  -----------------------------------
// SVD Line: 2211

//  <rtree> SFDITEM_REG__DMA_CTL5_H
//    <name> CTL5_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021D4) Channel 5 high-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL5_H >> 0) & 0xFFFFFFFF), ((DMA_CTL5_H = (DMA_CTL5_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL5_H_BLOCK_TS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL6_H  -------------------------------
// SVD Line: 2217

unsigned int DMA_CTL6_H __AT (0x4000222C);



// -----------------------------  Field Item: DMA_CTL6_H_BLOCK_TS  --------------------------------
// SVD Line: 2175

//  <item> SFDITEM_FIELD__DMA_CTL6_H_BLOCK_TS
//    <name> BLOCK_TS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000222C) Block Transfer Size. Configures single transaction counts per block, subject to AXI beat mapping. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CTL6_H >> 0) & 0xFFFFFFFF), ((DMA_CTL6_H = (DMA_CTL6_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL6_H  -----------------------------------
// SVD Line: 2217

//  <rtree> SFDITEM_REG__DMA_CTL6_H
//    <name> CTL6_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000222C) Channel 6 high-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL6_H >> 0) & 0xFFFFFFFF), ((DMA_CTL6_H = (DMA_CTL6_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL6_H_BLOCK_TS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CTL7_H  -------------------------------
// SVD Line: 2223

unsigned int DMA_CTL7_H __AT (0x40002284);



// -----------------------------  Field Item: DMA_CTL7_H_BLOCK_TS  --------------------------------
// SVD Line: 2175

//  <item> SFDITEM_FIELD__DMA_CTL7_H_BLOCK_TS
//    <name> BLOCK_TS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002284) Block Transfer Size. Configures single transaction counts per block, subject to AXI beat mapping. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CTL7_H >> 0) & 0xFFFFFFFF), ((DMA_CTL7_H = (DMA_CTL7_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CTL7_H  -----------------------------------
// SVD Line: 2223

//  <rtree> SFDITEM_REG__DMA_CTL7_H
//    <name> CTL7_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002284) Channel 7 high-32bits Control Register </i>
//    <loc> ( (unsigned int)((DMA_CTL7_H >> 0) & 0xFFFFFFFF), ((DMA_CTL7_H = (DMA_CTL7_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CTL7_H_BLOCK_TS </item>
//  </rtree>
//  


// -----------------------  Register Item Address: DMA_BLK_COUNTER_REG0  --------------------------
// SVD Line: 2230

unsigned int DMA_BLK_COUNTER_REG0 __AT (0x40002020);



// ---------------------------  Register Item: DMA_BLK_COUNTER_REG0  ------------------------------
// SVD Line: 2230

//  <item> SFDITEM_REG__DMA_BLK_COUNTER_REG0
//    <name> BLK_COUNTER_REG0 </name>
//    <i> [Bits 31..0] RW (@ 0x40002020) Channel 0 32bits Block Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_BLK_COUNTER_REG0 >> 0) & 0xFFFFFFFF), ((DMA_BLK_COUNTER_REG0 = (DMA_BLK_COUNTER_REG0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_REPEAT_PATTERN0  ---------------------------
// SVD Line: 2240

unsigned int DMA_REPEAT_PATTERN0 __AT (0x40002024);



// ---------------------------  Register Item: DMA_REPEAT_PATTERN0  -------------------------------
// SVD Line: 2240

//  <item> SFDITEM_REG__DMA_REPEAT_PATTERN0
//    <name> REPEAT_PATTERN0 </name>
//    <i> [Bits 31..0] RW (@ 0x40002024) Channel 0 32bits Memory Repeat Pattern Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_REPEAT_PATTERN0 >> 0) & 0xFFFFFFFF), ((DMA_REPEAT_PATTERN0 = (DMA_REPEAT_PATTERN0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_CFG0_L  -------------------------------
// SVD Line: 2250

unsigned int DMA_CFG0_L __AT (0x40002040);



// ----------------------------  Field Item: DMA_CFG0_L_RELOAD_DST  -------------------------------
// SVD Line: 2260

//  <item> SFDITEM_FIELD__DMA_CFG0_L_RELOAD_DST
//    <name> RELOAD_DST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40002040) Automatic Destination Reload. Reloads DARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.31..31> RELOAD_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG0_L_RELOAD_SRC  -------------------------------
// SVD Line: 2270

//  <item> SFDITEM_FIELD__DMA_CFG0_L_RELOAD_SRC
//    <name> RELOAD_SRC </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40002040) Automatic Source Reload. Reloads SARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.30..30> RELOAD_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG0_L_SRC_HS_POL  -------------------------------
// SVD Line: 2280

//  <item> SFDITEM_FIELD__DMA_CFG0_L_SRC_HS_POL
//    <name> SRC_HS_POL </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40002040) Source Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.19..19> SRC_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG0_L_DST_HS_POL  -------------------------------
// SVD Line: 2290

//  <item> SFDITEM_FIELD__DMA_CFG0_L_DST_HS_POL
//    <name> DST_HS_POL </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40002040) Destination Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.18..18> DST_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG0_L_HS_SEL_SRC  -------------------------------
// SVD Line: 2300

//  <item> SFDITEM_FIELD__DMA_CFG0_L_HS_SEL_SRC
//    <name> HS_SEL_SRC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40002040) Source Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.11..11> HS_SEL_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG0_L_HS_SEL_DST  -------------------------------
// SVD Line: 2310

//  <item> SFDITEM_FIELD__DMA_CFG0_L_HS_SEL_DST
//    <name> HS_SEL_DST </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40002040) Destination Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.10..10> HS_SEL_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG0_L_FIFO_EMPTY  -------------------------------
// SVD Line: 2320

//  <item> SFDITEM_FIELD__DMA_CFG0_L_FIFO_EMPTY
//    <name> FIFO_EMPTY </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40002040) Indicates if there is data left in the channel FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.9..9> FIFO_EMPTY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG0_L_CH_SUSP  ---------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__DMA_CFG0_L_CH_SUSP
//    <name> CH_SUSP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40002040) Channel Suspend. Suspends all DMA data transfers from the source until this bit is cleared. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.8..8> CH_SUSP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG0_L_CH_PRIOR  --------------------------------
// SVD Line: 2339

//  <item> SFDITEM_FIELD__DMA_CFG0_L_CH_PRIOR
//    <name> CH_PRIOR </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40002040) Channel priority configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG0_L >> 4) & 0xF), ((DMA_CFG0_L = (DMA_CFG0_L & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG0_L_DST_PCTL_OVER  ------------------------------
// SVD Line: 2349

//  <item> SFDITEM_FIELD__DMA_CFG0_L_DST_PCTL_OVER
//    <name> DST_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40002040) DMA destination bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.2..2> DST_PCTL_OVER
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG0_L_SRC_PCTL_OVER  ------------------------------
// SVD Line: 2359

//  <item> SFDITEM_FIELD__DMA_CFG0_L_SRC_PCTL_OVER
//    <name> SRC_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40002040) DMA Source bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.1..1> SRC_PCTL_OVER
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG0_L_INACTIVE  --------------------------------
// SVD Line: 2369

//  <item> SFDITEM_FIELD__DMA_CFG0_L_INACTIVE
//    <name> INACTIVE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40002040) Indicates if the channel is inactive. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_L ) </loc>
//      <o.0..0> INACTIVE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG0_L  -----------------------------------
// SVD Line: 2250

//  <rtree> SFDITEM_REG__DMA_CFG0_L
//    <name> CFG0_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002040) Channel 0 low-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG0_L >> 0) & 0xFFFFFFFF), ((DMA_CFG0_L = (DMA_CFG0_L & ~(0xC0000FF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0000FF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_RELOAD_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_RELOAD_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_SRC_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_DST_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_HS_SEL_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_HS_SEL_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_FIFO_EMPTY </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_CH_SUSP </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_CH_PRIOR </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_DST_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_SRC_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_L_INACTIVE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG1_L  -------------------------------
// SVD Line: 2381

unsigned int DMA_CFG1_L __AT (0x40002098);



// ----------------------------  Field Item: DMA_CFG1_L_RELOAD_DST  -------------------------------
// SVD Line: 2260

//  <item> SFDITEM_FIELD__DMA_CFG1_L_RELOAD_DST
//    <name> RELOAD_DST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40002098) Automatic Destination Reload. Reloads DARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.31..31> RELOAD_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG1_L_RELOAD_SRC  -------------------------------
// SVD Line: 2270

//  <item> SFDITEM_FIELD__DMA_CFG1_L_RELOAD_SRC
//    <name> RELOAD_SRC </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40002098) Automatic Source Reload. Reloads SARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.30..30> RELOAD_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG1_L_SRC_HS_POL  -------------------------------
// SVD Line: 2280

//  <item> SFDITEM_FIELD__DMA_CFG1_L_SRC_HS_POL
//    <name> SRC_HS_POL </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40002098) Source Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.19..19> SRC_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG1_L_DST_HS_POL  -------------------------------
// SVD Line: 2290

//  <item> SFDITEM_FIELD__DMA_CFG1_L_DST_HS_POL
//    <name> DST_HS_POL </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40002098) Destination Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.18..18> DST_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG1_L_HS_SEL_SRC  -------------------------------
// SVD Line: 2300

//  <item> SFDITEM_FIELD__DMA_CFG1_L_HS_SEL_SRC
//    <name> HS_SEL_SRC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40002098) Source Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.11..11> HS_SEL_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG1_L_HS_SEL_DST  -------------------------------
// SVD Line: 2310

//  <item> SFDITEM_FIELD__DMA_CFG1_L_HS_SEL_DST
//    <name> HS_SEL_DST </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40002098) Destination Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.10..10> HS_SEL_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG1_L_FIFO_EMPTY  -------------------------------
// SVD Line: 2320

//  <item> SFDITEM_FIELD__DMA_CFG1_L_FIFO_EMPTY
//    <name> FIFO_EMPTY </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40002098) Indicates if there is data left in the channel FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.9..9> FIFO_EMPTY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG1_L_CH_SUSP  ---------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__DMA_CFG1_L_CH_SUSP
//    <name> CH_SUSP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40002098) Channel Suspend. Suspends all DMA data transfers from the source until this bit is cleared. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.8..8> CH_SUSP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG1_L_CH_PRIOR  --------------------------------
// SVD Line: 2339

//  <item> SFDITEM_FIELD__DMA_CFG1_L_CH_PRIOR
//    <name> CH_PRIOR </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40002098) Channel priority configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG1_L >> 4) & 0xF), ((DMA_CFG1_L = (DMA_CFG1_L & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG1_L_DST_PCTL_OVER  ------------------------------
// SVD Line: 2349

//  <item> SFDITEM_FIELD__DMA_CFG1_L_DST_PCTL_OVER
//    <name> DST_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40002098) DMA destination bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.2..2> DST_PCTL_OVER
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG1_L_SRC_PCTL_OVER  ------------------------------
// SVD Line: 2359

//  <item> SFDITEM_FIELD__DMA_CFG1_L_SRC_PCTL_OVER
//    <name> SRC_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40002098) DMA Source bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.1..1> SRC_PCTL_OVER
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG1_L_INACTIVE  --------------------------------
// SVD Line: 2369

//  <item> SFDITEM_FIELD__DMA_CFG1_L_INACTIVE
//    <name> INACTIVE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40002098) Indicates if the channel is inactive. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_L ) </loc>
//      <o.0..0> INACTIVE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG1_L  -----------------------------------
// SVD Line: 2381

//  <rtree> SFDITEM_REG__DMA_CFG1_L
//    <name> CFG1_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002098) Channel 1 low-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG1_L >> 0) & 0xFFFFFFFF), ((DMA_CFG1_L = (DMA_CFG1_L & ~(0xC0000FF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0000FF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_RELOAD_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_RELOAD_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_SRC_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_DST_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_HS_SEL_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_HS_SEL_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_FIFO_EMPTY </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_CH_SUSP </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_CH_PRIOR </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_DST_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_SRC_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_L_INACTIVE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG2_L  -------------------------------
// SVD Line: 2387

unsigned int DMA_CFG2_L __AT (0x400020F0);



// ----------------------------  Field Item: DMA_CFG2_L_RELOAD_DST  -------------------------------
// SVD Line: 2260

//  <item> SFDITEM_FIELD__DMA_CFG2_L_RELOAD_DST
//    <name> RELOAD_DST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x400020F0) Automatic Destination Reload. Reloads DARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.31..31> RELOAD_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG2_L_RELOAD_SRC  -------------------------------
// SVD Line: 2270

//  <item> SFDITEM_FIELD__DMA_CFG2_L_RELOAD_SRC
//    <name> RELOAD_SRC </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x400020F0) Automatic Source Reload. Reloads SARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.30..30> RELOAD_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG2_L_SRC_HS_POL  -------------------------------
// SVD Line: 2280

//  <item> SFDITEM_FIELD__DMA_CFG2_L_SRC_HS_POL
//    <name> SRC_HS_POL </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x400020F0) Source Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.19..19> SRC_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG2_L_DST_HS_POL  -------------------------------
// SVD Line: 2290

//  <item> SFDITEM_FIELD__DMA_CFG2_L_DST_HS_POL
//    <name> DST_HS_POL </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x400020F0) Destination Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.18..18> DST_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG2_L_HS_SEL_SRC  -------------------------------
// SVD Line: 2300

//  <item> SFDITEM_FIELD__DMA_CFG2_L_HS_SEL_SRC
//    <name> HS_SEL_SRC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400020F0) Source Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.11..11> HS_SEL_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG2_L_HS_SEL_DST  -------------------------------
// SVD Line: 2310

//  <item> SFDITEM_FIELD__DMA_CFG2_L_HS_SEL_DST
//    <name> HS_SEL_DST </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x400020F0) Destination Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.10..10> HS_SEL_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG2_L_FIFO_EMPTY  -------------------------------
// SVD Line: 2320

//  <item> SFDITEM_FIELD__DMA_CFG2_L_FIFO_EMPTY
//    <name> FIFO_EMPTY </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x400020F0) Indicates if there is data left in the channel FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.9..9> FIFO_EMPTY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG2_L_CH_SUSP  ---------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__DMA_CFG2_L_CH_SUSP
//    <name> CH_SUSP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400020F0) Channel Suspend. Suspends all DMA data transfers from the source until this bit is cleared. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.8..8> CH_SUSP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG2_L_CH_PRIOR  --------------------------------
// SVD Line: 2339

//  <item> SFDITEM_FIELD__DMA_CFG2_L_CH_PRIOR
//    <name> CH_PRIOR </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x400020F0) Channel priority configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG2_L >> 4) & 0xF), ((DMA_CFG2_L = (DMA_CFG2_L & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG2_L_DST_PCTL_OVER  ------------------------------
// SVD Line: 2349

//  <item> SFDITEM_FIELD__DMA_CFG2_L_DST_PCTL_OVER
//    <name> DST_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x400020F0) DMA destination bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.2..2> DST_PCTL_OVER
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG2_L_SRC_PCTL_OVER  ------------------------------
// SVD Line: 2359

//  <item> SFDITEM_FIELD__DMA_CFG2_L_SRC_PCTL_OVER
//    <name> SRC_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x400020F0) DMA Source bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.1..1> SRC_PCTL_OVER
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG2_L_INACTIVE  --------------------------------
// SVD Line: 2369

//  <item> SFDITEM_FIELD__DMA_CFG2_L_INACTIVE
//    <name> INACTIVE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x400020F0) Indicates if the channel is inactive. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_L ) </loc>
//      <o.0..0> INACTIVE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG2_L  -----------------------------------
// SVD Line: 2387

//  <rtree> SFDITEM_REG__DMA_CFG2_L
//    <name> CFG2_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020F0) Channel 2 low-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG2_L >> 0) & 0xFFFFFFFF), ((DMA_CFG2_L = (DMA_CFG2_L & ~(0xC0000FF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0000FF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_RELOAD_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_RELOAD_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_SRC_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_DST_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_HS_SEL_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_HS_SEL_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_FIFO_EMPTY </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_CH_SUSP </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_CH_PRIOR </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_DST_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_SRC_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_L_INACTIVE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG3_L  -------------------------------
// SVD Line: 2393

unsigned int DMA_CFG3_L __AT (0x40002148);



// ----------------------------  Field Item: DMA_CFG3_L_RELOAD_DST  -------------------------------
// SVD Line: 2260

//  <item> SFDITEM_FIELD__DMA_CFG3_L_RELOAD_DST
//    <name> RELOAD_DST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40002148) Automatic Destination Reload. Reloads DARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.31..31> RELOAD_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG3_L_RELOAD_SRC  -------------------------------
// SVD Line: 2270

//  <item> SFDITEM_FIELD__DMA_CFG3_L_RELOAD_SRC
//    <name> RELOAD_SRC </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40002148) Automatic Source Reload. Reloads SARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.30..30> RELOAD_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG3_L_SRC_HS_POL  -------------------------------
// SVD Line: 2280

//  <item> SFDITEM_FIELD__DMA_CFG3_L_SRC_HS_POL
//    <name> SRC_HS_POL </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40002148) Source Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.19..19> SRC_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG3_L_DST_HS_POL  -------------------------------
// SVD Line: 2290

//  <item> SFDITEM_FIELD__DMA_CFG3_L_DST_HS_POL
//    <name> DST_HS_POL </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40002148) Destination Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.18..18> DST_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG3_L_HS_SEL_SRC  -------------------------------
// SVD Line: 2300

//  <item> SFDITEM_FIELD__DMA_CFG3_L_HS_SEL_SRC
//    <name> HS_SEL_SRC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40002148) Source Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.11..11> HS_SEL_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG3_L_HS_SEL_DST  -------------------------------
// SVD Line: 2310

//  <item> SFDITEM_FIELD__DMA_CFG3_L_HS_SEL_DST
//    <name> HS_SEL_DST </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40002148) Destination Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.10..10> HS_SEL_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG3_L_FIFO_EMPTY  -------------------------------
// SVD Line: 2320

//  <item> SFDITEM_FIELD__DMA_CFG3_L_FIFO_EMPTY
//    <name> FIFO_EMPTY </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40002148) Indicates if there is data left in the channel FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.9..9> FIFO_EMPTY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG3_L_CH_SUSP  ---------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__DMA_CFG3_L_CH_SUSP
//    <name> CH_SUSP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40002148) Channel Suspend. Suspends all DMA data transfers from the source until this bit is cleared. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.8..8> CH_SUSP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG3_L_CH_PRIOR  --------------------------------
// SVD Line: 2339

//  <item> SFDITEM_FIELD__DMA_CFG3_L_CH_PRIOR
//    <name> CH_PRIOR </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40002148) Channel priority configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG3_L >> 4) & 0xF), ((DMA_CFG3_L = (DMA_CFG3_L & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG3_L_DST_PCTL_OVER  ------------------------------
// SVD Line: 2349

//  <item> SFDITEM_FIELD__DMA_CFG3_L_DST_PCTL_OVER
//    <name> DST_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40002148) DMA destination bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.2..2> DST_PCTL_OVER
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG3_L_SRC_PCTL_OVER  ------------------------------
// SVD Line: 2359

//  <item> SFDITEM_FIELD__DMA_CFG3_L_SRC_PCTL_OVER
//    <name> SRC_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40002148) DMA Source bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.1..1> SRC_PCTL_OVER
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG3_L_INACTIVE  --------------------------------
// SVD Line: 2369

//  <item> SFDITEM_FIELD__DMA_CFG3_L_INACTIVE
//    <name> INACTIVE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40002148) Indicates if the channel is inactive. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_L ) </loc>
//      <o.0..0> INACTIVE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG3_L  -----------------------------------
// SVD Line: 2393

//  <rtree> SFDITEM_REG__DMA_CFG3_L
//    <name> CFG3_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002148) Channel 3 low-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG3_L >> 0) & 0xFFFFFFFF), ((DMA_CFG3_L = (DMA_CFG3_L & ~(0xC0000FF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0000FF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_RELOAD_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_RELOAD_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_SRC_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_DST_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_HS_SEL_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_HS_SEL_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_FIFO_EMPTY </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_CH_SUSP </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_CH_PRIOR </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_DST_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_SRC_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_L_INACTIVE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG4_L  -------------------------------
// SVD Line: 2399

unsigned int DMA_CFG4_L __AT (0x400021A0);



// ----------------------------  Field Item: DMA_CFG4_L_RELOAD_DST  -------------------------------
// SVD Line: 2260

//  <item> SFDITEM_FIELD__DMA_CFG4_L_RELOAD_DST
//    <name> RELOAD_DST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x400021A0) Automatic Destination Reload. Reloads DARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.31..31> RELOAD_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG4_L_RELOAD_SRC  -------------------------------
// SVD Line: 2270

//  <item> SFDITEM_FIELD__DMA_CFG4_L_RELOAD_SRC
//    <name> RELOAD_SRC </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x400021A0) Automatic Source Reload. Reloads SARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.30..30> RELOAD_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG4_L_SRC_HS_POL  -------------------------------
// SVD Line: 2280

//  <item> SFDITEM_FIELD__DMA_CFG4_L_SRC_HS_POL
//    <name> SRC_HS_POL </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x400021A0) Source Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.19..19> SRC_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG4_L_DST_HS_POL  -------------------------------
// SVD Line: 2290

//  <item> SFDITEM_FIELD__DMA_CFG4_L_DST_HS_POL
//    <name> DST_HS_POL </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x400021A0) Destination Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.18..18> DST_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG4_L_HS_SEL_SRC  -------------------------------
// SVD Line: 2300

//  <item> SFDITEM_FIELD__DMA_CFG4_L_HS_SEL_SRC
//    <name> HS_SEL_SRC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400021A0) Source Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.11..11> HS_SEL_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG4_L_HS_SEL_DST  -------------------------------
// SVD Line: 2310

//  <item> SFDITEM_FIELD__DMA_CFG4_L_HS_SEL_DST
//    <name> HS_SEL_DST </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x400021A0) Destination Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.10..10> HS_SEL_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG4_L_FIFO_EMPTY  -------------------------------
// SVD Line: 2320

//  <item> SFDITEM_FIELD__DMA_CFG4_L_FIFO_EMPTY
//    <name> FIFO_EMPTY </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x400021A0) Indicates if there is data left in the channel FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.9..9> FIFO_EMPTY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG4_L_CH_SUSP  ---------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__DMA_CFG4_L_CH_SUSP
//    <name> CH_SUSP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400021A0) Channel Suspend. Suspends all DMA data transfers from the source until this bit is cleared. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.8..8> CH_SUSP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG4_L_CH_PRIOR  --------------------------------
// SVD Line: 2339

//  <item> SFDITEM_FIELD__DMA_CFG4_L_CH_PRIOR
//    <name> CH_PRIOR </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x400021A0) Channel priority configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG4_L >> 4) & 0xF), ((DMA_CFG4_L = (DMA_CFG4_L & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG4_L_DST_PCTL_OVER  ------------------------------
// SVD Line: 2349

//  <item> SFDITEM_FIELD__DMA_CFG4_L_DST_PCTL_OVER
//    <name> DST_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x400021A0) DMA destination bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.2..2> DST_PCTL_OVER
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG4_L_SRC_PCTL_OVER  ------------------------------
// SVD Line: 2359

//  <item> SFDITEM_FIELD__DMA_CFG4_L_SRC_PCTL_OVER
//    <name> SRC_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x400021A0) DMA Source bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.1..1> SRC_PCTL_OVER
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG4_L_INACTIVE  --------------------------------
// SVD Line: 2369

//  <item> SFDITEM_FIELD__DMA_CFG4_L_INACTIVE
//    <name> INACTIVE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x400021A0) Indicates if the channel is inactive. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_L ) </loc>
//      <o.0..0> INACTIVE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG4_L  -----------------------------------
// SVD Line: 2399

//  <rtree> SFDITEM_REG__DMA_CFG4_L
//    <name> CFG4_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021A0) Channel 4 low-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG4_L >> 0) & 0xFFFFFFFF), ((DMA_CFG4_L = (DMA_CFG4_L & ~(0xC0000FF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0000FF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_RELOAD_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_RELOAD_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_SRC_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_DST_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_HS_SEL_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_HS_SEL_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_FIFO_EMPTY </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_CH_SUSP </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_CH_PRIOR </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_DST_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_SRC_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_L_INACTIVE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG5_L  -------------------------------
// SVD Line: 2405

unsigned int DMA_CFG5_L __AT (0x400021F8);



// ----------------------------  Field Item: DMA_CFG5_L_RELOAD_DST  -------------------------------
// SVD Line: 2260

//  <item> SFDITEM_FIELD__DMA_CFG5_L_RELOAD_DST
//    <name> RELOAD_DST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x400021F8) Automatic Destination Reload. Reloads DARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.31..31> RELOAD_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG5_L_RELOAD_SRC  -------------------------------
// SVD Line: 2270

//  <item> SFDITEM_FIELD__DMA_CFG5_L_RELOAD_SRC
//    <name> RELOAD_SRC </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x400021F8) Automatic Source Reload. Reloads SARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.30..30> RELOAD_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG5_L_SRC_HS_POL  -------------------------------
// SVD Line: 2280

//  <item> SFDITEM_FIELD__DMA_CFG5_L_SRC_HS_POL
//    <name> SRC_HS_POL </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x400021F8) Source Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.19..19> SRC_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG5_L_DST_HS_POL  -------------------------------
// SVD Line: 2290

//  <item> SFDITEM_FIELD__DMA_CFG5_L_DST_HS_POL
//    <name> DST_HS_POL </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x400021F8) Destination Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.18..18> DST_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG5_L_HS_SEL_SRC  -------------------------------
// SVD Line: 2300

//  <item> SFDITEM_FIELD__DMA_CFG5_L_HS_SEL_SRC
//    <name> HS_SEL_SRC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400021F8) Source Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.11..11> HS_SEL_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG5_L_HS_SEL_DST  -------------------------------
// SVD Line: 2310

//  <item> SFDITEM_FIELD__DMA_CFG5_L_HS_SEL_DST
//    <name> HS_SEL_DST </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x400021F8) Destination Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.10..10> HS_SEL_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG5_L_FIFO_EMPTY  -------------------------------
// SVD Line: 2320

//  <item> SFDITEM_FIELD__DMA_CFG5_L_FIFO_EMPTY
//    <name> FIFO_EMPTY </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x400021F8) Indicates if there is data left in the channel FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.9..9> FIFO_EMPTY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG5_L_CH_SUSP  ---------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__DMA_CFG5_L_CH_SUSP
//    <name> CH_SUSP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400021F8) Channel Suspend. Suspends all DMA data transfers from the source until this bit is cleared. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.8..8> CH_SUSP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG5_L_CH_PRIOR  --------------------------------
// SVD Line: 2339

//  <item> SFDITEM_FIELD__DMA_CFG5_L_CH_PRIOR
//    <name> CH_PRIOR </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x400021F8) Channel priority configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG5_L >> 4) & 0xF), ((DMA_CFG5_L = (DMA_CFG5_L & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG5_L_DST_PCTL_OVER  ------------------------------
// SVD Line: 2349

//  <item> SFDITEM_FIELD__DMA_CFG5_L_DST_PCTL_OVER
//    <name> DST_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x400021F8) DMA destination bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.2..2> DST_PCTL_OVER
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG5_L_SRC_PCTL_OVER  ------------------------------
// SVD Line: 2359

//  <item> SFDITEM_FIELD__DMA_CFG5_L_SRC_PCTL_OVER
//    <name> SRC_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x400021F8) DMA Source bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.1..1> SRC_PCTL_OVER
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG5_L_INACTIVE  --------------------------------
// SVD Line: 2369

//  <item> SFDITEM_FIELD__DMA_CFG5_L_INACTIVE
//    <name> INACTIVE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x400021F8) Indicates if the channel is inactive. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_L ) </loc>
//      <o.0..0> INACTIVE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG5_L  -----------------------------------
// SVD Line: 2405

//  <rtree> SFDITEM_REG__DMA_CFG5_L
//    <name> CFG5_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021F8) Channel 5 low-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG5_L >> 0) & 0xFFFFFFFF), ((DMA_CFG5_L = (DMA_CFG5_L & ~(0xC0000FF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0000FF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_RELOAD_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_RELOAD_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_SRC_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_DST_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_HS_SEL_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_HS_SEL_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_FIFO_EMPTY </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_CH_SUSP </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_CH_PRIOR </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_DST_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_SRC_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_L_INACTIVE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG6_L  -------------------------------
// SVD Line: 2411

unsigned int DMA_CFG6_L __AT (0x40002250);



// ----------------------------  Field Item: DMA_CFG6_L_RELOAD_DST  -------------------------------
// SVD Line: 2260

//  <item> SFDITEM_FIELD__DMA_CFG6_L_RELOAD_DST
//    <name> RELOAD_DST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40002250) Automatic Destination Reload. Reloads DARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.31..31> RELOAD_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG6_L_RELOAD_SRC  -------------------------------
// SVD Line: 2270

//  <item> SFDITEM_FIELD__DMA_CFG6_L_RELOAD_SRC
//    <name> RELOAD_SRC </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40002250) Automatic Source Reload. Reloads SARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.30..30> RELOAD_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG6_L_SRC_HS_POL  -------------------------------
// SVD Line: 2280

//  <item> SFDITEM_FIELD__DMA_CFG6_L_SRC_HS_POL
//    <name> SRC_HS_POL </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40002250) Source Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.19..19> SRC_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG6_L_DST_HS_POL  -------------------------------
// SVD Line: 2290

//  <item> SFDITEM_FIELD__DMA_CFG6_L_DST_HS_POL
//    <name> DST_HS_POL </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40002250) Destination Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.18..18> DST_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG6_L_HS_SEL_SRC  -------------------------------
// SVD Line: 2300

//  <item> SFDITEM_FIELD__DMA_CFG6_L_HS_SEL_SRC
//    <name> HS_SEL_SRC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40002250) Source Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.11..11> HS_SEL_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG6_L_HS_SEL_DST  -------------------------------
// SVD Line: 2310

//  <item> SFDITEM_FIELD__DMA_CFG6_L_HS_SEL_DST
//    <name> HS_SEL_DST </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40002250) Destination Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.10..10> HS_SEL_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG6_L_FIFO_EMPTY  -------------------------------
// SVD Line: 2320

//  <item> SFDITEM_FIELD__DMA_CFG6_L_FIFO_EMPTY
//    <name> FIFO_EMPTY </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40002250) Indicates if there is data left in the channel FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.9..9> FIFO_EMPTY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG6_L_CH_SUSP  ---------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__DMA_CFG6_L_CH_SUSP
//    <name> CH_SUSP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40002250) Channel Suspend. Suspends all DMA data transfers from the source until this bit is cleared. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.8..8> CH_SUSP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG6_L_CH_PRIOR  --------------------------------
// SVD Line: 2339

//  <item> SFDITEM_FIELD__DMA_CFG6_L_CH_PRIOR
//    <name> CH_PRIOR </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40002250) Channel priority configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG6_L >> 4) & 0xF), ((DMA_CFG6_L = (DMA_CFG6_L & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG6_L_DST_PCTL_OVER  ------------------------------
// SVD Line: 2349

//  <item> SFDITEM_FIELD__DMA_CFG6_L_DST_PCTL_OVER
//    <name> DST_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40002250) DMA destination bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.2..2> DST_PCTL_OVER
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG6_L_SRC_PCTL_OVER  ------------------------------
// SVD Line: 2359

//  <item> SFDITEM_FIELD__DMA_CFG6_L_SRC_PCTL_OVER
//    <name> SRC_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40002250) DMA Source bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.1..1> SRC_PCTL_OVER
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG6_L_INACTIVE  --------------------------------
// SVD Line: 2369

//  <item> SFDITEM_FIELD__DMA_CFG6_L_INACTIVE
//    <name> INACTIVE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40002250) Indicates if the channel is inactive. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_L ) </loc>
//      <o.0..0> INACTIVE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG6_L  -----------------------------------
// SVD Line: 2411

//  <rtree> SFDITEM_REG__DMA_CFG6_L
//    <name> CFG6_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002250) Channel 6 low-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG6_L >> 0) & 0xFFFFFFFF), ((DMA_CFG6_L = (DMA_CFG6_L & ~(0xC0000FF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0000FF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_RELOAD_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_RELOAD_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_SRC_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_DST_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_HS_SEL_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_HS_SEL_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_FIFO_EMPTY </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_CH_SUSP </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_CH_PRIOR </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_DST_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_SRC_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_L_INACTIVE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG7_L  -------------------------------
// SVD Line: 2417

unsigned int DMA_CFG7_L __AT (0x400022A8);



// ----------------------------  Field Item: DMA_CFG7_L_RELOAD_DST  -------------------------------
// SVD Line: 2260

//  <item> SFDITEM_FIELD__DMA_CFG7_L_RELOAD_DST
//    <name> RELOAD_DST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x400022A8) Automatic Destination Reload. Reloads DARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.31..31> RELOAD_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG7_L_RELOAD_SRC  -------------------------------
// SVD Line: 2270

//  <item> SFDITEM_FIELD__DMA_CFG7_L_RELOAD_SRC
//    <name> RELOAD_SRC </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x400022A8) Automatic Source Reload. Reloads SARx register from its initial value at the end of every block for multi-block transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.30..30> RELOAD_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG7_L_SRC_HS_POL  -------------------------------
// SVD Line: 2280

//  <item> SFDITEM_FIELD__DMA_CFG7_L_SRC_HS_POL
//    <name> SRC_HS_POL </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x400022A8) Source Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.19..19> SRC_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG7_L_DST_HS_POL  -------------------------------
// SVD Line: 2290

//  <item> SFDITEM_FIELD__DMA_CFG7_L_DST_HS_POL
//    <name> DST_HS_POL </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x400022A8) Destination Handshaking Interface Polarity. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.18..18> DST_HS_POL
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG7_L_HS_SEL_SRC  -------------------------------
// SVD Line: 2300

//  <item> SFDITEM_FIELD__DMA_CFG7_L_HS_SEL_SRC
//    <name> HS_SEL_SRC </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x400022A8) Source Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.11..11> HS_SEL_SRC
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG7_L_HS_SEL_DST  -------------------------------
// SVD Line: 2310

//  <item> SFDITEM_FIELD__DMA_CFG7_L_HS_SEL_DST
//    <name> HS_SEL_DST </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x400022A8) Destination Software or Hardware Handshaking Select. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.10..10> HS_SEL_DST
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_CFG7_L_FIFO_EMPTY  -------------------------------
// SVD Line: 2320

//  <item> SFDITEM_FIELD__DMA_CFG7_L_FIFO_EMPTY
//    <name> FIFO_EMPTY </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x400022A8) Indicates if there is data left in the channel FIFO. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.9..9> FIFO_EMPTY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG7_L_CH_SUSP  ---------------------------------
// SVD Line: 2329

//  <item> SFDITEM_FIELD__DMA_CFG7_L_CH_SUSP
//    <name> CH_SUSP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x400022A8) Channel Suspend. Suspends all DMA data transfers from the source until this bit is cleared. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.8..8> CH_SUSP
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG7_L_CH_PRIOR  --------------------------------
// SVD Line: 2339

//  <item> SFDITEM_FIELD__DMA_CFG7_L_CH_PRIOR
//    <name> CH_PRIOR </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x400022A8) Channel priority configuration. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG7_L >> 4) & 0xF), ((DMA_CFG7_L = (DMA_CFG7_L & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG7_L_DST_PCTL_OVER  ------------------------------
// SVD Line: 2349

//  <item> SFDITEM_FIELD__DMA_CFG7_L_DST_PCTL_OVER
//    <name> DST_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x400022A8) DMA destination bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.2..2> DST_PCTL_OVER
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG7_L_SRC_PCTL_OVER  ------------------------------
// SVD Line: 2359

//  <item> SFDITEM_FIELD__DMA_CFG7_L_SRC_PCTL_OVER
//    <name> SRC_PCTL_OVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x400022A8) DMA Source bus protocol finish indicator. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.1..1> SRC_PCTL_OVER
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG7_L_INACTIVE  --------------------------------
// SVD Line: 2369

//  <item> SFDITEM_FIELD__DMA_CFG7_L_INACTIVE
//    <name> INACTIVE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x400022A8) Indicates if the channel is inactive. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_L ) </loc>
//      <o.0..0> INACTIVE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG7_L  -----------------------------------
// SVD Line: 2417

//  <rtree> SFDITEM_REG__DMA_CFG7_L
//    <name> CFG7_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400022A8) Channel 7 low-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG7_L >> 0) & 0xFFFFFFFF), ((DMA_CFG7_L = (DMA_CFG7_L & ~(0xC0000FF0UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC0000FF0) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_RELOAD_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_RELOAD_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_SRC_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_DST_HS_POL </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_HS_SEL_SRC </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_HS_SEL_DST </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_FIFO_EMPTY </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_CH_SUSP </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_CH_PRIOR </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_DST_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_SRC_PCTL_OVER </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_L_INACTIVE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG0_H  -------------------------------
// SVD Line: 2424

unsigned int DMA_CFG0_H __AT (0x40002044);



// ------------------------  Field Item: DMA_CFG0_H_Extended_DEST_PER3  ---------------------------
// SVD Line: 2433

//  <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_DEST_PER3
//    <name> Extended_DEST_PER3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40002044) Extended 6th bit of DEST_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.20..20> Extended_DEST_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG0_H_Extended_SRC_PER3  ----------------------------
// SVD Line: 2443

//  <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_SRC_PER3
//    <name> Extended_SRC_PER3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40002044) Extended 6th bit of SRC_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.19..19> Extended_SRC_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG0_H_Extended_DEST_PER2  ---------------------------
// SVD Line: 2453

//  <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_DEST_PER2
//    <name> Extended_DEST_PER2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40002044) Extended 5th bit of DEST_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.18..18> Extended_DEST_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG0_H_Extended_SRC_PER2  ----------------------------
// SVD Line: 2463

//  <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_SRC_PER2
//    <name> Extended_SRC_PER2 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40002044) Extended 5th bit of SRC_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.17..17> Extended_SRC_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG0_H_Extended_DEST_PER1  ---------------------------
// SVD Line: 2473

//  <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_DEST_PER1
//    <name> Extended_DEST_PER1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40002044) Extended 4th bit of DEST_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.16..16> Extended_DEST_PER1
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG0_H_Extended_SRC_PER1  ----------------------------
// SVD Line: 2483

//  <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_SRC_PER1
//    <name> Extended_SRC_PER1 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40002044) Extended 4th bit of SRC_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.15..15> Extended_SRC_PER1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG0_H_DEST_PER  --------------------------------
// SVD Line: 2493

//  <item> SFDITEM_FIELD__DMA_CFG0_H_DEST_PER
//    <name> DEST_PER </name>
//    <rw> 
//    <i> [Bits 14..11] RW (@ 0x40002044) Assigns a hardware handshaking interface for the destination of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG0_H >> 11) & 0xF), ((DMA_CFG0_H = (DMA_CFG0_H & ~(0xFUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG0_H_SRC_PER  ---------------------------------
// SVD Line: 2503

//  <item> SFDITEM_FIELD__DMA_CFG0_H_SRC_PER
//    <name> SRC_PER </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x40002044) Assigns a hardware handshaking interface for the source of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG0_H >> 7) & 0xF), ((DMA_CFG0_H = (DMA_CFG0_H & ~(0xFUL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG0_H_CONT_DAR  --------------------------------
// SVD Line: 2513

//  <item> SFDITEM_FIELD__DMA_CFG0_H_CONT_DAR
//    <name> CONT_DAR </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40002044) Continuous for DAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.6..6> CONT_DAR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG0_H_CONT_SAR  --------------------------------
// SVD Line: 2523

//  <item> SFDITEM_FIELD__DMA_CFG0_H_CONT_SAR
//    <name> CONT_SAR </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40002044) Continuous for SAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.5..5> CONT_SAR
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG0_H_DIRECT_CTL_EN  ------------------------------
// SVD Line: 2533

//  <item> SFDITEM_FIELD__DMA_CFG0_H_DIRECT_CTL_EN
//    <name> DIRECT_CTL_EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40002044) Direct Control for channel enabling. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.4..4> DIRECT_CTL_EN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG0_H_PROTCTL  ---------------------------------
// SVD Line: 2543

//  <item> SFDITEM_FIELD__DMA_CFG0_H_PROTCTL
//    <name> PROTCTL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40002044) Protection Control bit for secure transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.3..3> PROTCTL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CFG0_H_FCMODE  ---------------------------------
// SVD Line: 2553

//  <item> SFDITEM_FIELD__DMA_CFG0_H_FCMODE
//    <name> FCMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40002044) Flow Control Mode. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG0_H ) </loc>
//      <o.0..0> FCMODE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG0_H  -----------------------------------
// SVD Line: 2424

//  <rtree> SFDITEM_REG__DMA_CFG0_H
//    <name> CFG0_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002044) Channel 0 high-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG0_H >> 0) & 0xFFFFFFFF), ((DMA_CFG0_H = (DMA_CFG0_H & ~(0x1FFFF9UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF9) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_DEST_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_SRC_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_DEST_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_SRC_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_DEST_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_Extended_SRC_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_DEST_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_SRC_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_CONT_DAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_CONT_SAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_DIRECT_CTL_EN </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_PROTCTL </item>
//    <item> SFDITEM_FIELD__DMA_CFG0_H_FCMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG1_H  -------------------------------
// SVD Line: 2565

unsigned int DMA_CFG1_H __AT (0x4000209C);



// ------------------------  Field Item: DMA_CFG1_H_Extended_DEST_PER3  ---------------------------
// SVD Line: 2433

//  <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_DEST_PER3
//    <name> Extended_DEST_PER3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x4000209C) Extended 6th bit of DEST_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.20..20> Extended_DEST_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG1_H_Extended_SRC_PER3  ----------------------------
// SVD Line: 2443

//  <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_SRC_PER3
//    <name> Extended_SRC_PER3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x4000209C) Extended 6th bit of SRC_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.19..19> Extended_SRC_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG1_H_Extended_DEST_PER2  ---------------------------
// SVD Line: 2453

//  <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_DEST_PER2
//    <name> Extended_DEST_PER2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4000209C) Extended 5th bit of DEST_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.18..18> Extended_DEST_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG1_H_Extended_SRC_PER2  ----------------------------
// SVD Line: 2463

//  <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_SRC_PER2
//    <name> Extended_SRC_PER2 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4000209C) Extended 5th bit of SRC_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.17..17> Extended_SRC_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG1_H_Extended_DEST_PER1  ---------------------------
// SVD Line: 2473

//  <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_DEST_PER1
//    <name> Extended_DEST_PER1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4000209C) Extended 4th bit of DEST_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.16..16> Extended_DEST_PER1
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG1_H_Extended_SRC_PER1  ----------------------------
// SVD Line: 2483

//  <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_SRC_PER1
//    <name> Extended_SRC_PER1 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4000209C) Extended 4th bit of SRC_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.15..15> Extended_SRC_PER1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG1_H_DEST_PER  --------------------------------
// SVD Line: 2493

//  <item> SFDITEM_FIELD__DMA_CFG1_H_DEST_PER
//    <name> DEST_PER </name>
//    <rw> 
//    <i> [Bits 14..11] RW (@ 0x4000209C) Assigns a hardware handshaking interface for the destination of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG1_H >> 11) & 0xF), ((DMA_CFG1_H = (DMA_CFG1_H & ~(0xFUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG1_H_SRC_PER  ---------------------------------
// SVD Line: 2503

//  <item> SFDITEM_FIELD__DMA_CFG1_H_SRC_PER
//    <name> SRC_PER </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x4000209C) Assigns a hardware handshaking interface for the source of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG1_H >> 7) & 0xF), ((DMA_CFG1_H = (DMA_CFG1_H & ~(0xFUL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG1_H_CONT_DAR  --------------------------------
// SVD Line: 2513

//  <item> SFDITEM_FIELD__DMA_CFG1_H_CONT_DAR
//    <name> CONT_DAR </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4000209C) Continuous for DAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.6..6> CONT_DAR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG1_H_CONT_SAR  --------------------------------
// SVD Line: 2523

//  <item> SFDITEM_FIELD__DMA_CFG1_H_CONT_SAR
//    <name> CONT_SAR </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4000209C) Continuous for SAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.5..5> CONT_SAR
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG1_H_DIRECT_CTL_EN  ------------------------------
// SVD Line: 2533

//  <item> SFDITEM_FIELD__DMA_CFG1_H_DIRECT_CTL_EN
//    <name> DIRECT_CTL_EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4000209C) Direct Control for channel enabling. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.4..4> DIRECT_CTL_EN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG1_H_PROTCTL  ---------------------------------
// SVD Line: 2543

//  <item> SFDITEM_FIELD__DMA_CFG1_H_PROTCTL
//    <name> PROTCTL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4000209C) Protection Control bit for secure transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.3..3> PROTCTL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CFG1_H_FCMODE  ---------------------------------
// SVD Line: 2553

//  <item> SFDITEM_FIELD__DMA_CFG1_H_FCMODE
//    <name> FCMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000209C) Flow Control Mode. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG1_H ) </loc>
//      <o.0..0> FCMODE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG1_H  -----------------------------------
// SVD Line: 2565

//  <rtree> SFDITEM_REG__DMA_CFG1_H
//    <name> CFG1_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000209C) Channel 1 high-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG1_H >> 0) & 0xFFFFFFFF), ((DMA_CFG1_H = (DMA_CFG1_H & ~(0x1FFFF9UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF9) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_DEST_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_SRC_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_DEST_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_SRC_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_DEST_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_Extended_SRC_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_DEST_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_SRC_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_CONT_DAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_CONT_SAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_DIRECT_CTL_EN </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_PROTCTL </item>
//    <item> SFDITEM_FIELD__DMA_CFG1_H_FCMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG2_H  -------------------------------
// SVD Line: 2571

unsigned int DMA_CFG2_H __AT (0x400020F4);



// ------------------------  Field Item: DMA_CFG2_H_Extended_DEST_PER3  ---------------------------
// SVD Line: 2433

//  <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_DEST_PER3
//    <name> Extended_DEST_PER3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400020F4) Extended 6th bit of DEST_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.20..20> Extended_DEST_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG2_H_Extended_SRC_PER3  ----------------------------
// SVD Line: 2443

//  <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_SRC_PER3
//    <name> Extended_SRC_PER3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x400020F4) Extended 6th bit of SRC_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.19..19> Extended_SRC_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG2_H_Extended_DEST_PER2  ---------------------------
// SVD Line: 2453

//  <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_DEST_PER2
//    <name> Extended_DEST_PER2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x400020F4) Extended 5th bit of DEST_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.18..18> Extended_DEST_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG2_H_Extended_SRC_PER2  ----------------------------
// SVD Line: 2463

//  <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_SRC_PER2
//    <name> Extended_SRC_PER2 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x400020F4) Extended 5th bit of SRC_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.17..17> Extended_SRC_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG2_H_Extended_DEST_PER1  ---------------------------
// SVD Line: 2473

//  <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_DEST_PER1
//    <name> Extended_DEST_PER1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400020F4) Extended 4th bit of DEST_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.16..16> Extended_DEST_PER1
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG2_H_Extended_SRC_PER1  ----------------------------
// SVD Line: 2483

//  <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_SRC_PER1
//    <name> Extended_SRC_PER1 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x400020F4) Extended 4th bit of SRC_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.15..15> Extended_SRC_PER1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG2_H_DEST_PER  --------------------------------
// SVD Line: 2493

//  <item> SFDITEM_FIELD__DMA_CFG2_H_DEST_PER
//    <name> DEST_PER </name>
//    <rw> 
//    <i> [Bits 14..11] RW (@ 0x400020F4) Assigns a hardware handshaking interface for the destination of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG2_H >> 11) & 0xF), ((DMA_CFG2_H = (DMA_CFG2_H & ~(0xFUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG2_H_SRC_PER  ---------------------------------
// SVD Line: 2503

//  <item> SFDITEM_FIELD__DMA_CFG2_H_SRC_PER
//    <name> SRC_PER </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x400020F4) Assigns a hardware handshaking interface for the source of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG2_H >> 7) & 0xF), ((DMA_CFG2_H = (DMA_CFG2_H & ~(0xFUL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG2_H_CONT_DAR  --------------------------------
// SVD Line: 2513

//  <item> SFDITEM_FIELD__DMA_CFG2_H_CONT_DAR
//    <name> CONT_DAR </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x400020F4) Continuous for DAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.6..6> CONT_DAR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG2_H_CONT_SAR  --------------------------------
// SVD Line: 2523

//  <item> SFDITEM_FIELD__DMA_CFG2_H_CONT_SAR
//    <name> CONT_SAR </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x400020F4) Continuous for SAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.5..5> CONT_SAR
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG2_H_DIRECT_CTL_EN  ------------------------------
// SVD Line: 2533

//  <item> SFDITEM_FIELD__DMA_CFG2_H_DIRECT_CTL_EN
//    <name> DIRECT_CTL_EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400020F4) Direct Control for channel enabling. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.4..4> DIRECT_CTL_EN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG2_H_PROTCTL  ---------------------------------
// SVD Line: 2543

//  <item> SFDITEM_FIELD__DMA_CFG2_H_PROTCTL
//    <name> PROTCTL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x400020F4) Protection Control bit for secure transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.3..3> PROTCTL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CFG2_H_FCMODE  ---------------------------------
// SVD Line: 2553

//  <item> SFDITEM_FIELD__DMA_CFG2_H_FCMODE
//    <name> FCMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400020F4) Flow Control Mode. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG2_H ) </loc>
//      <o.0..0> FCMODE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG2_H  -----------------------------------
// SVD Line: 2571

//  <rtree> SFDITEM_REG__DMA_CFG2_H
//    <name> CFG2_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020F4) Channel 2 high-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG2_H >> 0) & 0xFFFFFFFF), ((DMA_CFG2_H = (DMA_CFG2_H & ~(0x1FFFF9UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF9) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_DEST_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_SRC_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_DEST_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_SRC_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_DEST_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_Extended_SRC_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_DEST_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_SRC_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_CONT_DAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_CONT_SAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_DIRECT_CTL_EN </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_PROTCTL </item>
//    <item> SFDITEM_FIELD__DMA_CFG2_H_FCMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG3_H  -------------------------------
// SVD Line: 2577

unsigned int DMA_CFG3_H __AT (0x4000214C);



// ------------------------  Field Item: DMA_CFG3_H_Extended_DEST_PER3  ---------------------------
// SVD Line: 2433

//  <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_DEST_PER3
//    <name> Extended_DEST_PER3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x4000214C) Extended 6th bit of DEST_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.20..20> Extended_DEST_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG3_H_Extended_SRC_PER3  ----------------------------
// SVD Line: 2443

//  <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_SRC_PER3
//    <name> Extended_SRC_PER3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x4000214C) Extended 6th bit of SRC_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.19..19> Extended_SRC_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG3_H_Extended_DEST_PER2  ---------------------------
// SVD Line: 2453

//  <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_DEST_PER2
//    <name> Extended_DEST_PER2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4000214C) Extended 5th bit of DEST_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.18..18> Extended_DEST_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG3_H_Extended_SRC_PER2  ----------------------------
// SVD Line: 2463

//  <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_SRC_PER2
//    <name> Extended_SRC_PER2 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4000214C) Extended 5th bit of SRC_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.17..17> Extended_SRC_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG3_H_Extended_DEST_PER1  ---------------------------
// SVD Line: 2473

//  <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_DEST_PER1
//    <name> Extended_DEST_PER1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4000214C) Extended 4th bit of DEST_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.16..16> Extended_DEST_PER1
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG3_H_Extended_SRC_PER1  ----------------------------
// SVD Line: 2483

//  <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_SRC_PER1
//    <name> Extended_SRC_PER1 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4000214C) Extended 4th bit of SRC_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.15..15> Extended_SRC_PER1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG3_H_DEST_PER  --------------------------------
// SVD Line: 2493

//  <item> SFDITEM_FIELD__DMA_CFG3_H_DEST_PER
//    <name> DEST_PER </name>
//    <rw> 
//    <i> [Bits 14..11] RW (@ 0x4000214C) Assigns a hardware handshaking interface for the destination of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG3_H >> 11) & 0xF), ((DMA_CFG3_H = (DMA_CFG3_H & ~(0xFUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG3_H_SRC_PER  ---------------------------------
// SVD Line: 2503

//  <item> SFDITEM_FIELD__DMA_CFG3_H_SRC_PER
//    <name> SRC_PER </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x4000214C) Assigns a hardware handshaking interface for the source of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG3_H >> 7) & 0xF), ((DMA_CFG3_H = (DMA_CFG3_H & ~(0xFUL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG3_H_CONT_DAR  --------------------------------
// SVD Line: 2513

//  <item> SFDITEM_FIELD__DMA_CFG3_H_CONT_DAR
//    <name> CONT_DAR </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4000214C) Continuous for DAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.6..6> CONT_DAR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG3_H_CONT_SAR  --------------------------------
// SVD Line: 2523

//  <item> SFDITEM_FIELD__DMA_CFG3_H_CONT_SAR
//    <name> CONT_SAR </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4000214C) Continuous for SAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.5..5> CONT_SAR
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG3_H_DIRECT_CTL_EN  ------------------------------
// SVD Line: 2533

//  <item> SFDITEM_FIELD__DMA_CFG3_H_DIRECT_CTL_EN
//    <name> DIRECT_CTL_EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4000214C) Direct Control for channel enabling. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.4..4> DIRECT_CTL_EN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG3_H_PROTCTL  ---------------------------------
// SVD Line: 2543

//  <item> SFDITEM_FIELD__DMA_CFG3_H_PROTCTL
//    <name> PROTCTL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4000214C) Protection Control bit for secure transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.3..3> PROTCTL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CFG3_H_FCMODE  ---------------------------------
// SVD Line: 2553

//  <item> SFDITEM_FIELD__DMA_CFG3_H_FCMODE
//    <name> FCMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4000214C) Flow Control Mode. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG3_H ) </loc>
//      <o.0..0> FCMODE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG3_H  -----------------------------------
// SVD Line: 2577

//  <rtree> SFDITEM_REG__DMA_CFG3_H
//    <name> CFG3_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000214C) Channel 3 high-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG3_H >> 0) & 0xFFFFFFFF), ((DMA_CFG3_H = (DMA_CFG3_H & ~(0x1FFFF9UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF9) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_DEST_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_SRC_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_DEST_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_SRC_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_DEST_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_Extended_SRC_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_DEST_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_SRC_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_CONT_DAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_CONT_SAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_DIRECT_CTL_EN </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_PROTCTL </item>
//    <item> SFDITEM_FIELD__DMA_CFG3_H_FCMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG4_H  -------------------------------
// SVD Line: 2583

unsigned int DMA_CFG4_H __AT (0x400021A4);



// ------------------------  Field Item: DMA_CFG4_H_Extended_DEST_PER3  ---------------------------
// SVD Line: 2433

//  <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_DEST_PER3
//    <name> Extended_DEST_PER3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400021A4) Extended 6th bit of DEST_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.20..20> Extended_DEST_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG4_H_Extended_SRC_PER3  ----------------------------
// SVD Line: 2443

//  <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_SRC_PER3
//    <name> Extended_SRC_PER3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x400021A4) Extended 6th bit of SRC_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.19..19> Extended_SRC_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG4_H_Extended_DEST_PER2  ---------------------------
// SVD Line: 2453

//  <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_DEST_PER2
//    <name> Extended_DEST_PER2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x400021A4) Extended 5th bit of DEST_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.18..18> Extended_DEST_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG4_H_Extended_SRC_PER2  ----------------------------
// SVD Line: 2463

//  <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_SRC_PER2
//    <name> Extended_SRC_PER2 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x400021A4) Extended 5th bit of SRC_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.17..17> Extended_SRC_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG4_H_Extended_DEST_PER1  ---------------------------
// SVD Line: 2473

//  <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_DEST_PER1
//    <name> Extended_DEST_PER1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400021A4) Extended 4th bit of DEST_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.16..16> Extended_DEST_PER1
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG4_H_Extended_SRC_PER1  ----------------------------
// SVD Line: 2483

//  <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_SRC_PER1
//    <name> Extended_SRC_PER1 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x400021A4) Extended 4th bit of SRC_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.15..15> Extended_SRC_PER1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG4_H_DEST_PER  --------------------------------
// SVD Line: 2493

//  <item> SFDITEM_FIELD__DMA_CFG4_H_DEST_PER
//    <name> DEST_PER </name>
//    <rw> 
//    <i> [Bits 14..11] RW (@ 0x400021A4) Assigns a hardware handshaking interface for the destination of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG4_H >> 11) & 0xF), ((DMA_CFG4_H = (DMA_CFG4_H & ~(0xFUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG4_H_SRC_PER  ---------------------------------
// SVD Line: 2503

//  <item> SFDITEM_FIELD__DMA_CFG4_H_SRC_PER
//    <name> SRC_PER </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x400021A4) Assigns a hardware handshaking interface for the source of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG4_H >> 7) & 0xF), ((DMA_CFG4_H = (DMA_CFG4_H & ~(0xFUL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG4_H_CONT_DAR  --------------------------------
// SVD Line: 2513

//  <item> SFDITEM_FIELD__DMA_CFG4_H_CONT_DAR
//    <name> CONT_DAR </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x400021A4) Continuous for DAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.6..6> CONT_DAR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG4_H_CONT_SAR  --------------------------------
// SVD Line: 2523

//  <item> SFDITEM_FIELD__DMA_CFG4_H_CONT_SAR
//    <name> CONT_SAR </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x400021A4) Continuous for SAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.5..5> CONT_SAR
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG4_H_DIRECT_CTL_EN  ------------------------------
// SVD Line: 2533

//  <item> SFDITEM_FIELD__DMA_CFG4_H_DIRECT_CTL_EN
//    <name> DIRECT_CTL_EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400021A4) Direct Control for channel enabling. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.4..4> DIRECT_CTL_EN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG4_H_PROTCTL  ---------------------------------
// SVD Line: 2543

//  <item> SFDITEM_FIELD__DMA_CFG4_H_PROTCTL
//    <name> PROTCTL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x400021A4) Protection Control bit for secure transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.3..3> PROTCTL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CFG4_H_FCMODE  ---------------------------------
// SVD Line: 2553

//  <item> SFDITEM_FIELD__DMA_CFG4_H_FCMODE
//    <name> FCMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400021A4) Flow Control Mode. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG4_H ) </loc>
//      <o.0..0> FCMODE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG4_H  -----------------------------------
// SVD Line: 2583

//  <rtree> SFDITEM_REG__DMA_CFG4_H
//    <name> CFG4_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021A4) Channel 4 high-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG4_H >> 0) & 0xFFFFFFFF), ((DMA_CFG4_H = (DMA_CFG4_H & ~(0x1FFFF9UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF9) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_DEST_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_SRC_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_DEST_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_SRC_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_DEST_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_Extended_SRC_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_DEST_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_SRC_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_CONT_DAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_CONT_SAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_DIRECT_CTL_EN </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_PROTCTL </item>
//    <item> SFDITEM_FIELD__DMA_CFG4_H_FCMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG5_H  -------------------------------
// SVD Line: 2589

unsigned int DMA_CFG5_H __AT (0x400021FC);



// ------------------------  Field Item: DMA_CFG5_H_Extended_DEST_PER3  ---------------------------
// SVD Line: 2433

//  <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_DEST_PER3
//    <name> Extended_DEST_PER3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400021FC) Extended 6th bit of DEST_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.20..20> Extended_DEST_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG5_H_Extended_SRC_PER3  ----------------------------
// SVD Line: 2443

//  <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_SRC_PER3
//    <name> Extended_SRC_PER3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x400021FC) Extended 6th bit of SRC_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.19..19> Extended_SRC_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG5_H_Extended_DEST_PER2  ---------------------------
// SVD Line: 2453

//  <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_DEST_PER2
//    <name> Extended_DEST_PER2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x400021FC) Extended 5th bit of DEST_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.18..18> Extended_DEST_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG5_H_Extended_SRC_PER2  ----------------------------
// SVD Line: 2463

//  <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_SRC_PER2
//    <name> Extended_SRC_PER2 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x400021FC) Extended 5th bit of SRC_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.17..17> Extended_SRC_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG5_H_Extended_DEST_PER1  ---------------------------
// SVD Line: 2473

//  <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_DEST_PER1
//    <name> Extended_DEST_PER1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400021FC) Extended 4th bit of DEST_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.16..16> Extended_DEST_PER1
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG5_H_Extended_SRC_PER1  ----------------------------
// SVD Line: 2483

//  <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_SRC_PER1
//    <name> Extended_SRC_PER1 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x400021FC) Extended 4th bit of SRC_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.15..15> Extended_SRC_PER1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG5_H_DEST_PER  --------------------------------
// SVD Line: 2493

//  <item> SFDITEM_FIELD__DMA_CFG5_H_DEST_PER
//    <name> DEST_PER </name>
//    <rw> 
//    <i> [Bits 14..11] RW (@ 0x400021FC) Assigns a hardware handshaking interface for the destination of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG5_H >> 11) & 0xF), ((DMA_CFG5_H = (DMA_CFG5_H & ~(0xFUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG5_H_SRC_PER  ---------------------------------
// SVD Line: 2503

//  <item> SFDITEM_FIELD__DMA_CFG5_H_SRC_PER
//    <name> SRC_PER </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x400021FC) Assigns a hardware handshaking interface for the source of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG5_H >> 7) & 0xF), ((DMA_CFG5_H = (DMA_CFG5_H & ~(0xFUL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG5_H_CONT_DAR  --------------------------------
// SVD Line: 2513

//  <item> SFDITEM_FIELD__DMA_CFG5_H_CONT_DAR
//    <name> CONT_DAR </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x400021FC) Continuous for DAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.6..6> CONT_DAR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG5_H_CONT_SAR  --------------------------------
// SVD Line: 2523

//  <item> SFDITEM_FIELD__DMA_CFG5_H_CONT_SAR
//    <name> CONT_SAR </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x400021FC) Continuous for SAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.5..5> CONT_SAR
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG5_H_DIRECT_CTL_EN  ------------------------------
// SVD Line: 2533

//  <item> SFDITEM_FIELD__DMA_CFG5_H_DIRECT_CTL_EN
//    <name> DIRECT_CTL_EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400021FC) Direct Control for channel enabling. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.4..4> DIRECT_CTL_EN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG5_H_PROTCTL  ---------------------------------
// SVD Line: 2543

//  <item> SFDITEM_FIELD__DMA_CFG5_H_PROTCTL
//    <name> PROTCTL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x400021FC) Protection Control bit for secure transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.3..3> PROTCTL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CFG5_H_FCMODE  ---------------------------------
// SVD Line: 2553

//  <item> SFDITEM_FIELD__DMA_CFG5_H_FCMODE
//    <name> FCMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400021FC) Flow Control Mode. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG5_H ) </loc>
//      <o.0..0> FCMODE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG5_H  -----------------------------------
// SVD Line: 2589

//  <rtree> SFDITEM_REG__DMA_CFG5_H
//    <name> CFG5_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021FC) Channel 5 high-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG5_H >> 0) & 0xFFFFFFFF), ((DMA_CFG5_H = (DMA_CFG5_H & ~(0x1FFFF9UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF9) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_DEST_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_SRC_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_DEST_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_SRC_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_DEST_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_Extended_SRC_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_DEST_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_SRC_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_CONT_DAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_CONT_SAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_DIRECT_CTL_EN </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_PROTCTL </item>
//    <item> SFDITEM_FIELD__DMA_CFG5_H_FCMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG6_H  -------------------------------
// SVD Line: 2595

unsigned int DMA_CFG6_H __AT (0x40002254);



// ------------------------  Field Item: DMA_CFG6_H_Extended_DEST_PER3  ---------------------------
// SVD Line: 2433

//  <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_DEST_PER3
//    <name> Extended_DEST_PER3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40002254) Extended 6th bit of DEST_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.20..20> Extended_DEST_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG6_H_Extended_SRC_PER3  ----------------------------
// SVD Line: 2443

//  <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_SRC_PER3
//    <name> Extended_SRC_PER3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40002254) Extended 6th bit of SRC_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.19..19> Extended_SRC_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG6_H_Extended_DEST_PER2  ---------------------------
// SVD Line: 2453

//  <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_DEST_PER2
//    <name> Extended_DEST_PER2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40002254) Extended 5th bit of DEST_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.18..18> Extended_DEST_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG6_H_Extended_SRC_PER2  ----------------------------
// SVD Line: 2463

//  <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_SRC_PER2
//    <name> Extended_SRC_PER2 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40002254) Extended 5th bit of SRC_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.17..17> Extended_SRC_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG6_H_Extended_DEST_PER1  ---------------------------
// SVD Line: 2473

//  <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_DEST_PER1
//    <name> Extended_DEST_PER1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40002254) Extended 4th bit of DEST_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.16..16> Extended_DEST_PER1
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG6_H_Extended_SRC_PER1  ----------------------------
// SVD Line: 2483

//  <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_SRC_PER1
//    <name> Extended_SRC_PER1 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40002254) Extended 4th bit of SRC_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.15..15> Extended_SRC_PER1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG6_H_DEST_PER  --------------------------------
// SVD Line: 2493

//  <item> SFDITEM_FIELD__DMA_CFG6_H_DEST_PER
//    <name> DEST_PER </name>
//    <rw> 
//    <i> [Bits 14..11] RW (@ 0x40002254) Assigns a hardware handshaking interface for the destination of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG6_H >> 11) & 0xF), ((DMA_CFG6_H = (DMA_CFG6_H & ~(0xFUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG6_H_SRC_PER  ---------------------------------
// SVD Line: 2503

//  <item> SFDITEM_FIELD__DMA_CFG6_H_SRC_PER
//    <name> SRC_PER </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x40002254) Assigns a hardware handshaking interface for the source of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG6_H >> 7) & 0xF), ((DMA_CFG6_H = (DMA_CFG6_H & ~(0xFUL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG6_H_CONT_DAR  --------------------------------
// SVD Line: 2513

//  <item> SFDITEM_FIELD__DMA_CFG6_H_CONT_DAR
//    <name> CONT_DAR </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40002254) Continuous for DAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.6..6> CONT_DAR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG6_H_CONT_SAR  --------------------------------
// SVD Line: 2523

//  <item> SFDITEM_FIELD__DMA_CFG6_H_CONT_SAR
//    <name> CONT_SAR </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40002254) Continuous for SAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.5..5> CONT_SAR
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG6_H_DIRECT_CTL_EN  ------------------------------
// SVD Line: 2533

//  <item> SFDITEM_FIELD__DMA_CFG6_H_DIRECT_CTL_EN
//    <name> DIRECT_CTL_EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40002254) Direct Control for channel enabling. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.4..4> DIRECT_CTL_EN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG6_H_PROTCTL  ---------------------------------
// SVD Line: 2543

//  <item> SFDITEM_FIELD__DMA_CFG6_H_PROTCTL
//    <name> PROTCTL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40002254) Protection Control bit for secure transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.3..3> PROTCTL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CFG6_H_FCMODE  ---------------------------------
// SVD Line: 2553

//  <item> SFDITEM_FIELD__DMA_CFG6_H_FCMODE
//    <name> FCMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40002254) Flow Control Mode. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG6_H ) </loc>
//      <o.0..0> FCMODE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG6_H  -----------------------------------
// SVD Line: 2595

//  <rtree> SFDITEM_REG__DMA_CFG6_H
//    <name> CFG6_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002254) Channel 6 high-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG6_H >> 0) & 0xFFFFFFFF), ((DMA_CFG6_H = (DMA_CFG6_H & ~(0x1FFFF9UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF9) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_DEST_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_SRC_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_DEST_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_SRC_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_DEST_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_Extended_SRC_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_DEST_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_SRC_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_CONT_DAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_CONT_SAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_DIRECT_CTL_EN </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_PROTCTL </item>
//    <item> SFDITEM_FIELD__DMA_CFG6_H_FCMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_CFG7_H  -------------------------------
// SVD Line: 2601

unsigned int DMA_CFG7_H __AT (0x400022AC);



// ------------------------  Field Item: DMA_CFG7_H_Extended_DEST_PER3  ---------------------------
// SVD Line: 2433

//  <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_DEST_PER3
//    <name> Extended_DEST_PER3 </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x400022AC) Extended 6th bit of DEST_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.20..20> Extended_DEST_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG7_H_Extended_SRC_PER3  ----------------------------
// SVD Line: 2443

//  <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_SRC_PER3
//    <name> Extended_SRC_PER3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x400022AC) Extended 6th bit of SRC_PER if hardware handshake interfaces are configured to (64, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.19..19> Extended_SRC_PER3
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG7_H_Extended_DEST_PER2  ---------------------------
// SVD Line: 2453

//  <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_DEST_PER2
//    <name> Extended_DEST_PER2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x400022AC) Extended 5th bit of DEST_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.18..18> Extended_DEST_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG7_H_Extended_SRC_PER2  ----------------------------
// SVD Line: 2463

//  <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_SRC_PER2
//    <name> Extended_SRC_PER2 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x400022AC) Extended 5th bit of SRC_PER if hardware handshake interfaces are configured to (32, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.17..17> Extended_SRC_PER2
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG7_H_Extended_DEST_PER1  ---------------------------
// SVD Line: 2473

//  <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_DEST_PER1
//    <name> Extended_DEST_PER1 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x400022AC) Extended 4th bit of DEST_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.16..16> Extended_DEST_PER1
//    </check>
//  </item>
//  


// ------------------------  Field Item: DMA_CFG7_H_Extended_SRC_PER1  ----------------------------
// SVD Line: 2483

//  <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_SRC_PER1
//    <name> Extended_SRC_PER1 </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x400022AC) Extended 4th bit of SRC_PER if hardware handshake interfaces are configured to (16, 128]. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.15..15> Extended_SRC_PER1
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG7_H_DEST_PER  --------------------------------
// SVD Line: 2493

//  <item> SFDITEM_FIELD__DMA_CFG7_H_DEST_PER
//    <name> DEST_PER </name>
//    <rw> 
//    <i> [Bits 14..11] RW (@ 0x400022AC) Assigns a hardware handshaking interface for the destination of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG7_H >> 11) & 0xF), ((DMA_CFG7_H = (DMA_CFG7_H & ~(0xFUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG7_H_SRC_PER  ---------------------------------
// SVD Line: 2503

//  <item> SFDITEM_FIELD__DMA_CFG7_H_SRC_PER
//    <name> SRC_PER </name>
//    <rw> 
//    <i> [Bits 10..7] RW (@ 0x400022AC) Assigns a hardware handshaking interface for the source of channel x. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CFG7_H >> 7) & 0xF), ((DMA_CFG7_H = (DMA_CFG7_H & ~(0xFUL << 7 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 7 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG7_H_CONT_DAR  --------------------------------
// SVD Line: 2513

//  <item> SFDITEM_FIELD__DMA_CFG7_H_CONT_DAR
//    <name> CONT_DAR </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x400022AC) Continuous for DAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.6..6> CONT_DAR
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG7_H_CONT_SAR  --------------------------------
// SVD Line: 2523

//  <item> SFDITEM_FIELD__DMA_CFG7_H_CONT_SAR
//    <name> CONT_SAR </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x400022AC) Continuous for SAR between single block. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.5..5> CONT_SAR
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_CFG7_H_DIRECT_CTL_EN  ------------------------------
// SVD Line: 2533

//  <item> SFDITEM_FIELD__DMA_CFG7_H_DIRECT_CTL_EN
//    <name> DIRECT_CTL_EN </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x400022AC) Direct Control for channel enabling. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.4..4> DIRECT_CTL_EN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_CFG7_H_PROTCTL  ---------------------------------
// SVD Line: 2543

//  <item> SFDITEM_FIELD__DMA_CFG7_H_PROTCTL
//    <name> PROTCTL </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x400022AC) Protection Control bit for secure transfers. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.3..3> PROTCTL
//    </check>
//  </item>
//  


// ------------------------------  Field Item: DMA_CFG7_H_FCMODE  ---------------------------------
// SVD Line: 2553

//  <item> SFDITEM_FIELD__DMA_CFG7_H_FCMODE
//    <name> FCMODE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x400022AC) Flow Control Mode. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_CFG7_H ) </loc>
//      <o.0..0> FCMODE
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CFG7_H  -----------------------------------
// SVD Line: 2601

//  <rtree> SFDITEM_REG__DMA_CFG7_H
//    <name> CFG7_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400022AC) Channel 7 high-32bits Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_CFG7_H >> 0) & 0xFFFFFFFF), ((DMA_CFG7_H = (DMA_CFG7_H & ~(0x1FFFF9UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF9) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_DEST_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_SRC_PER3 </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_DEST_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_SRC_PER2 </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_DEST_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_Extended_SRC_PER1 </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_DEST_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_SRC_PER </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_CONT_DAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_CONT_SAR </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_DIRECT_CTL_EN </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_PROTCTL </item>
//    <item> SFDITEM_FIELD__DMA_CFG7_H_FCMODE </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR0_L  -------------------------------
// SVD Line: 2609

unsigned int DMA_SGR0_L __AT (0x40002048);



// -------------------------------  Field Item: DMA_SGR0_L_SGC  -----------------------------------
// SVD Line: 2619

//  <item> SFDITEM_FIELD__DMA_SGR0_L_SGC
//    <name> SGC </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x40002048) Source gather count. Source contiguous transfer count between successive gather boundaries. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR0_L >> 20) & 0xFFF), ((DMA_SGR0_L = (DMA_SGR0_L & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR0_L_SGI  -----------------------------------
// SVD Line: 2629

//  <item> SFDITEM_FIELD__DMA_SGR0_L_SGI
//    <name> SGI </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x40002048) Source gather interval. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SGR0_L >> 0) & 0xFFFFF), ((DMA_SGR0_L = (DMA_SGR0_L & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR0_L  -----------------------------------
// SVD Line: 2609

//  <rtree> SFDITEM_REG__DMA_SGR0_L
//    <name> SGR0_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002048) Channel 0 low-32bits Source Gather Register </i>
//    <loc> ( (unsigned int)((DMA_SGR0_L >> 0) & 0xFFFFFFFF), ((DMA_SGR0_L = (DMA_SGR0_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR0_L_SGC </item>
//    <item> SFDITEM_FIELD__DMA_SGR0_L_SGI </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR1_L  -------------------------------
// SVD Line: 2642

unsigned int DMA_SGR1_L __AT (0x400020A0);



// -------------------------------  Field Item: DMA_SGR1_L_SGC  -----------------------------------
// SVD Line: 2619

//  <item> SFDITEM_FIELD__DMA_SGR1_L_SGC
//    <name> SGC </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x400020A0) Source gather count. Source contiguous transfer count between successive gather boundaries. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR1_L >> 20) & 0xFFF), ((DMA_SGR1_L = (DMA_SGR1_L & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR1_L_SGI  -----------------------------------
// SVD Line: 2629

//  <item> SFDITEM_FIELD__DMA_SGR1_L_SGI
//    <name> SGI </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x400020A0) Source gather interval. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SGR1_L >> 0) & 0xFFFFF), ((DMA_SGR1_L = (DMA_SGR1_L & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR1_L  -----------------------------------
// SVD Line: 2642

//  <rtree> SFDITEM_REG__DMA_SGR1_L
//    <name> SGR1_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020A0) Channel 1 Source Gather Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR1_L >> 0) & 0xFFFFFFFF), ((DMA_SGR1_L = (DMA_SGR1_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR1_L_SGC </item>
//    <item> SFDITEM_FIELD__DMA_SGR1_L_SGI </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR2_L  -------------------------------
// SVD Line: 2648

unsigned int DMA_SGR2_L __AT (0x400020F8);



// -------------------------------  Field Item: DMA_SGR2_L_SGC  -----------------------------------
// SVD Line: 2619

//  <item> SFDITEM_FIELD__DMA_SGR2_L_SGC
//    <name> SGC </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x400020F8) Source gather count. Source contiguous transfer count between successive gather boundaries. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR2_L >> 20) & 0xFFF), ((DMA_SGR2_L = (DMA_SGR2_L & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR2_L_SGI  -----------------------------------
// SVD Line: 2629

//  <item> SFDITEM_FIELD__DMA_SGR2_L_SGI
//    <name> SGI </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x400020F8) Source gather interval. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SGR2_L >> 0) & 0xFFFFF), ((DMA_SGR2_L = (DMA_SGR2_L & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR2_L  -----------------------------------
// SVD Line: 2648

//  <rtree> SFDITEM_REG__DMA_SGR2_L
//    <name> SGR2_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020F8) Channel 2 Source Gather Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR2_L >> 0) & 0xFFFFFFFF), ((DMA_SGR2_L = (DMA_SGR2_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR2_L_SGC </item>
//    <item> SFDITEM_FIELD__DMA_SGR2_L_SGI </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR3_L  -------------------------------
// SVD Line: 2654

unsigned int DMA_SGR3_L __AT (0x40002150);



// -------------------------------  Field Item: DMA_SGR3_L_SGC  -----------------------------------
// SVD Line: 2619

//  <item> SFDITEM_FIELD__DMA_SGR3_L_SGC
//    <name> SGC </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x40002150) Source gather count. Source contiguous transfer count between successive gather boundaries. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR3_L >> 20) & 0xFFF), ((DMA_SGR3_L = (DMA_SGR3_L & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR3_L_SGI  -----------------------------------
// SVD Line: 2629

//  <item> SFDITEM_FIELD__DMA_SGR3_L_SGI
//    <name> SGI </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x40002150) Source gather interval. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SGR3_L >> 0) & 0xFFFFF), ((DMA_SGR3_L = (DMA_SGR3_L & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR3_L  -----------------------------------
// SVD Line: 2654

//  <rtree> SFDITEM_REG__DMA_SGR3_L
//    <name> SGR3_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002150) Channel 3 Source Gather Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR3_L >> 0) & 0xFFFFFFFF), ((DMA_SGR3_L = (DMA_SGR3_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR3_L_SGC </item>
//    <item> SFDITEM_FIELD__DMA_SGR3_L_SGI </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR4_L  -------------------------------
// SVD Line: 2660

unsigned int DMA_SGR4_L __AT (0x400021A8);



// -------------------------------  Field Item: DMA_SGR4_L_SGC  -----------------------------------
// SVD Line: 2619

//  <item> SFDITEM_FIELD__DMA_SGR4_L_SGC
//    <name> SGC </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x400021A8) Source gather count. Source contiguous transfer count between successive gather boundaries. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR4_L >> 20) & 0xFFF), ((DMA_SGR4_L = (DMA_SGR4_L & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR4_L_SGI  -----------------------------------
// SVD Line: 2629

//  <item> SFDITEM_FIELD__DMA_SGR4_L_SGI
//    <name> SGI </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x400021A8) Source gather interval. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SGR4_L >> 0) & 0xFFFFF), ((DMA_SGR4_L = (DMA_SGR4_L & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR4_L  -----------------------------------
// SVD Line: 2660

//  <rtree> SFDITEM_REG__DMA_SGR4_L
//    <name> SGR4_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021A8) Channel 4 Source Gather Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR4_L >> 0) & 0xFFFFFFFF), ((DMA_SGR4_L = (DMA_SGR4_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR4_L_SGC </item>
//    <item> SFDITEM_FIELD__DMA_SGR4_L_SGI </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR5_L  -------------------------------
// SVD Line: 2666

unsigned int DMA_SGR5_L __AT (0x40002200);



// -------------------------------  Field Item: DMA_SGR5_L_SGC  -----------------------------------
// SVD Line: 2619

//  <item> SFDITEM_FIELD__DMA_SGR5_L_SGC
//    <name> SGC </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x40002200) Source gather count. Source contiguous transfer count between successive gather boundaries. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR5_L >> 20) & 0xFFF), ((DMA_SGR5_L = (DMA_SGR5_L & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR5_L_SGI  -----------------------------------
// SVD Line: 2629

//  <item> SFDITEM_FIELD__DMA_SGR5_L_SGI
//    <name> SGI </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x40002200) Source gather interval. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SGR5_L >> 0) & 0xFFFFF), ((DMA_SGR5_L = (DMA_SGR5_L & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR5_L  -----------------------------------
// SVD Line: 2666

//  <rtree> SFDITEM_REG__DMA_SGR5_L
//    <name> SGR5_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002200) Channel 5 Source Gather Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR5_L >> 0) & 0xFFFFFFFF), ((DMA_SGR5_L = (DMA_SGR5_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR5_L_SGC </item>
//    <item> SFDITEM_FIELD__DMA_SGR5_L_SGI </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR6_L  -------------------------------
// SVD Line: 2672

unsigned int DMA_SGR6_L __AT (0x40002258);



// -------------------------------  Field Item: DMA_SGR6_L_SGC  -----------------------------------
// SVD Line: 2619

//  <item> SFDITEM_FIELD__DMA_SGR6_L_SGC
//    <name> SGC </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x40002258) Source gather count. Source contiguous transfer count between successive gather boundaries. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR6_L >> 20) & 0xFFF), ((DMA_SGR6_L = (DMA_SGR6_L & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR6_L_SGI  -----------------------------------
// SVD Line: 2629

//  <item> SFDITEM_FIELD__DMA_SGR6_L_SGI
//    <name> SGI </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x40002258) Source gather interval. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SGR6_L >> 0) & 0xFFFFF), ((DMA_SGR6_L = (DMA_SGR6_L & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR6_L  -----------------------------------
// SVD Line: 2672

//  <rtree> SFDITEM_REG__DMA_SGR6_L
//    <name> SGR6_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002258) Channel 6 Source Gather Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR6_L >> 0) & 0xFFFFFFFF), ((DMA_SGR6_L = (DMA_SGR6_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR6_L_SGC </item>
//    <item> SFDITEM_FIELD__DMA_SGR6_L_SGI </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR7_L  -------------------------------
// SVD Line: 2678

unsigned int DMA_SGR7_L __AT (0x400022B0);



// -------------------------------  Field Item: DMA_SGR7_L_SGC  -----------------------------------
// SVD Line: 2619

//  <item> SFDITEM_FIELD__DMA_SGR7_L_SGC
//    <name> SGC </name>
//    <rw> 
//    <i> [Bits 31..20] RW (@ 0x400022B0) Source gather count. Source contiguous transfer count between successive gather boundaries. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR7_L >> 20) & 0xFFF), ((DMA_SGR7_L = (DMA_SGR7_L & ~(0xFFFUL << 20 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR7_L_SGI  -----------------------------------
// SVD Line: 2629

//  <item> SFDITEM_FIELD__DMA_SGR7_L_SGI
//    <name> SGI </name>
//    <rw> 
//    <i> [Bits 19..0] RW (@ 0x400022B0) Source gather interval. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SGR7_L >> 0) & 0xFFFFF), ((DMA_SGR7_L = (DMA_SGR7_L & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR7_L  -----------------------------------
// SVD Line: 2678

//  <rtree> SFDITEM_REG__DMA_SGR7_L
//    <name> SGR7_L </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400022B0) Channel 7 Source Gather Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR7_L >> 0) & 0xFFFFFFFF), ((DMA_SGR7_L = (DMA_SGR7_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR7_L_SGC </item>
//    <item> SFDITEM_FIELD__DMA_SGR7_L_SGI </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR0_H  -------------------------------
// SVD Line: 2686

unsigned int DMA_SGR0_H __AT (0x4000204C);



// ----------------------------  Field Item: DMA_SGR0_H_BLOCK_TS_L  -------------------------------
// SVD Line: 2696

//  <item> SFDITEM_FIELD__DMA_SGR0_H_BLOCK_TS_L
//    <name> BLOCK_TS_L </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x4000204C) Low 16-bits of Block Transfer Size. Indicates the total number of single transactions per block transfer. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR0_H >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR0_H_SGSN  ----------------------------------
// SVD Line: 2706

//  <item> SFDITEM_FIELD__DMA_SGR0_H_SGSN
//    <name> SGSN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4000204C) Source gather circular streaming number. Enables circular gather feature if set greater than 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR0_H >> 0) & 0xFFFF), ((DMA_SGR0_H = (DMA_SGR0_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR0_H  -----------------------------------
// SVD Line: 2686

//  <rtree> SFDITEM_REG__DMA_SGR0_H
//    <name> SGR0_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000204C) Channel 0 high-32bits Source Gather Register </i>
//    <loc> ( (unsigned int)((DMA_SGR0_H >> 0) & 0xFFFFFFFF), ((DMA_SGR0_H = (DMA_SGR0_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR0_H_BLOCK_TS_L </item>
//    <item> SFDITEM_FIELD__DMA_SGR0_H_SGSN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR1_H  -------------------------------
// SVD Line: 2718

unsigned int DMA_SGR1_H __AT (0x400020A4);



// ----------------------------  Field Item: DMA_SGR1_H_BLOCK_TS_L  -------------------------------
// SVD Line: 2696

//  <item> SFDITEM_FIELD__DMA_SGR1_H_BLOCK_TS_L
//    <name> BLOCK_TS_L </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x400020A4) Low 16-bits of Block Transfer Size. Indicates the total number of single transactions per block transfer. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR1_H >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR1_H_SGSN  ----------------------------------
// SVD Line: 2706

//  <item> SFDITEM_FIELD__DMA_SGR1_H_SGSN
//    <name> SGSN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400020A4) Source gather circular streaming number. Enables circular gather feature if set greater than 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR1_H >> 0) & 0xFFFF), ((DMA_SGR1_H = (DMA_SGR1_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR1_H  -----------------------------------
// SVD Line: 2718

//  <rtree> SFDITEM_REG__DMA_SGR1_H
//    <name> SGR1_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020A4) Channel 1 Source Gather High Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR1_H >> 0) & 0xFFFFFFFF), ((DMA_SGR1_H = (DMA_SGR1_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR1_H_BLOCK_TS_L </item>
//    <item> SFDITEM_FIELD__DMA_SGR1_H_SGSN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR2_H  -------------------------------
// SVD Line: 2724

unsigned int DMA_SGR2_H __AT (0x400020FC);



// ----------------------------  Field Item: DMA_SGR2_H_BLOCK_TS_L  -------------------------------
// SVD Line: 2696

//  <item> SFDITEM_FIELD__DMA_SGR2_H_BLOCK_TS_L
//    <name> BLOCK_TS_L </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x400020FC) Low 16-bits of Block Transfer Size. Indicates the total number of single transactions per block transfer. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR2_H >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR2_H_SGSN  ----------------------------------
// SVD Line: 2706

//  <item> SFDITEM_FIELD__DMA_SGR2_H_SGSN
//    <name> SGSN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400020FC) Source gather circular streaming number. Enables circular gather feature if set greater than 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR2_H >> 0) & 0xFFFF), ((DMA_SGR2_H = (DMA_SGR2_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR2_H  -----------------------------------
// SVD Line: 2724

//  <rtree> SFDITEM_REG__DMA_SGR2_H
//    <name> SGR2_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400020FC) Channel 2 Source Gather High Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR2_H >> 0) & 0xFFFFFFFF), ((DMA_SGR2_H = (DMA_SGR2_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR2_H_BLOCK_TS_L </item>
//    <item> SFDITEM_FIELD__DMA_SGR2_H_SGSN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR3_H  -------------------------------
// SVD Line: 2730

unsigned int DMA_SGR3_H __AT (0x40002154);



// ----------------------------  Field Item: DMA_SGR3_H_BLOCK_TS_L  -------------------------------
// SVD Line: 2696

//  <item> SFDITEM_FIELD__DMA_SGR3_H_BLOCK_TS_L
//    <name> BLOCK_TS_L </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x40002154) Low 16-bits of Block Transfer Size. Indicates the total number of single transactions per block transfer. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR3_H >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR3_H_SGSN  ----------------------------------
// SVD Line: 2706

//  <item> SFDITEM_FIELD__DMA_SGR3_H_SGSN
//    <name> SGSN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40002154) Source gather circular streaming number. Enables circular gather feature if set greater than 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR3_H >> 0) & 0xFFFF), ((DMA_SGR3_H = (DMA_SGR3_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR3_H  -----------------------------------
// SVD Line: 2730

//  <rtree> SFDITEM_REG__DMA_SGR3_H
//    <name> SGR3_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002154) Channel 3 Source Gather High Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR3_H >> 0) & 0xFFFFFFFF), ((DMA_SGR3_H = (DMA_SGR3_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR3_H_BLOCK_TS_L </item>
//    <item> SFDITEM_FIELD__DMA_SGR3_H_SGSN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR4_H  -------------------------------
// SVD Line: 2736

unsigned int DMA_SGR4_H __AT (0x400021AC);



// ----------------------------  Field Item: DMA_SGR4_H_BLOCK_TS_L  -------------------------------
// SVD Line: 2696

//  <item> SFDITEM_FIELD__DMA_SGR4_H_BLOCK_TS_L
//    <name> BLOCK_TS_L </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x400021AC) Low 16-bits of Block Transfer Size. Indicates the total number of single transactions per block transfer. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR4_H >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR4_H_SGSN  ----------------------------------
// SVD Line: 2706

//  <item> SFDITEM_FIELD__DMA_SGR4_H_SGSN
//    <name> SGSN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400021AC) Source gather circular streaming number. Enables circular gather feature if set greater than 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR4_H >> 0) & 0xFFFF), ((DMA_SGR4_H = (DMA_SGR4_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR4_H  -----------------------------------
// SVD Line: 2736

//  <rtree> SFDITEM_REG__DMA_SGR4_H
//    <name> SGR4_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400021AC) Channel 4 Source Gather High Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR4_H >> 0) & 0xFFFFFFFF), ((DMA_SGR4_H = (DMA_SGR4_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR4_H_BLOCK_TS_L </item>
//    <item> SFDITEM_FIELD__DMA_SGR4_H_SGSN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR5_H  -------------------------------
// SVD Line: 2742

unsigned int DMA_SGR5_H __AT (0x40002204);



// ----------------------------  Field Item: DMA_SGR5_H_BLOCK_TS_L  -------------------------------
// SVD Line: 2696

//  <item> SFDITEM_FIELD__DMA_SGR5_H_BLOCK_TS_L
//    <name> BLOCK_TS_L </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x40002204) Low 16-bits of Block Transfer Size. Indicates the total number of single transactions per block transfer. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR5_H >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR5_H_SGSN  ----------------------------------
// SVD Line: 2706

//  <item> SFDITEM_FIELD__DMA_SGR5_H_SGSN
//    <name> SGSN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40002204) Source gather circular streaming number. Enables circular gather feature if set greater than 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR5_H >> 0) & 0xFFFF), ((DMA_SGR5_H = (DMA_SGR5_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR5_H  -----------------------------------
// SVD Line: 2742

//  <rtree> SFDITEM_REG__DMA_SGR5_H
//    <name> SGR5_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40002204) Channel 5 Source Gather High Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR5_H >> 0) & 0xFFFFFFFF), ((DMA_SGR5_H = (DMA_SGR5_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR5_H_BLOCK_TS_L </item>
//    <item> SFDITEM_FIELD__DMA_SGR5_H_SGSN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR6_H  -------------------------------
// SVD Line: 2748

unsigned int DMA_SGR6_H __AT (0x4000225C);



// ----------------------------  Field Item: DMA_SGR6_H_BLOCK_TS_L  -------------------------------
// SVD Line: 2696

//  <item> SFDITEM_FIELD__DMA_SGR6_H_BLOCK_TS_L
//    <name> BLOCK_TS_L </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x4000225C) Low 16-bits of Block Transfer Size. Indicates the total number of single transactions per block transfer. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR6_H >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR6_H_SGSN  ----------------------------------
// SVD Line: 2706

//  <item> SFDITEM_FIELD__DMA_SGR6_H_SGSN
//    <name> SGSN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4000225C) Source gather circular streaming number. Enables circular gather feature if set greater than 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR6_H >> 0) & 0xFFFF), ((DMA_SGR6_H = (DMA_SGR6_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR6_H  -----------------------------------
// SVD Line: 2748

//  <rtree> SFDITEM_REG__DMA_SGR6_H
//    <name> SGR6_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4000225C) Channel 6 Source Gather High Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR6_H >> 0) & 0xFFFFFFFF), ((DMA_SGR6_H = (DMA_SGR6_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR6_H_BLOCK_TS_L </item>
//    <item> SFDITEM_FIELD__DMA_SGR6_H_SGSN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_SGR7_H  -------------------------------
// SVD Line: 2754

unsigned int DMA_SGR7_H __AT (0x400022B4);



// ----------------------------  Field Item: DMA_SGR7_H_BLOCK_TS_L  -------------------------------
// SVD Line: 2696

//  <item> SFDITEM_FIELD__DMA_SGR7_H_BLOCK_TS_L
//    <name> BLOCK_TS_L </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x400022B4) Low 16-bits of Block Transfer Size. Indicates the total number of single transactions per block transfer. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR7_H >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: DMA_SGR7_H_SGSN  ----------------------------------
// SVD Line: 2706

//  <item> SFDITEM_FIELD__DMA_SGR7_H_SGSN
//    <name> SGSN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x400022B4) Source gather circular streaming number. Enables circular gather feature if set greater than 1. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DMA_SGR7_H >> 0) & 0xFFFF), ((DMA_SGR7_H = (DMA_SGR7_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_SGR7_H  -----------------------------------
// SVD Line: 2754

//  <rtree> SFDITEM_REG__DMA_SGR7_H
//    <name> SGR7_H </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400022B4) Channel 7 Source Gather High Configuration Register </i>
//    <loc> ( (unsigned int)((DMA_SGR7_H >> 0) & 0xFFFFFFFF), ((DMA_SGR7_H = (DMA_SGR7_H & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_SGR7_H_BLOCK_TS_L </item>
//    <item> SFDITEM_FIELD__DMA_SGR7_H_SGSN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: DMA_DSR0_L  -------------------------------
// SVD Line: 2761

unsigned int DMA_DSR0_L __AT (0x40002050);



// --------------------------------  Register Item: DMA_DSR0_L  -----------------------------------
// SVD Line: 2761

//  <item> SFDITEM_REG__DMA_DSR0_L
//    <name> DSR0_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002050) Channel 0 low-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR0_L >> 0) & 0xFFFFFFFF), ((DMA_DSR0_L = (DMA_DSR0_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR0_H  -------------------------------
// SVD Line: 2771

unsigned int DMA_DSR0_H __AT (0x40002054);



// --------------------------------  Register Item: DMA_DSR0_H  -----------------------------------
// SVD Line: 2771

//  <item> SFDITEM_REG__DMA_DSR0_H
//    <name> DSR0_H </name>
//    <i> [Bits 31..0] RW (@ 0x40002054) Channel 0 high-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR0_H >> 0) & 0xFFFFFFFF), ((DMA_DSR0_H = (DMA_DSR0_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_SAR1  --------------------------------
// SVD Line: 2782

unsigned int DMA_SAR1 __AT (0x40002058);



// ---------------------------------  Register Item: DMA_SAR1  ------------------------------------
// SVD Line: 2782

//  <item> SFDITEM_REG__DMA_SAR1
//    <name> SAR1 </name>
//    <i> [Bits 31..0] RW (@ 0x40002058) Channel 1 Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SAR1 >> 0) & 0xFFFFFFFF), ((DMA_SAR1 = (DMA_SAR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_SAR1  ------------------------------
// SVD Line: 2792

unsigned int DMA_CURR_SAR1 __AT (0x4000205C);



// ------------------------------  Register Item: DMA_CURR_SAR1  ----------------------------------
// SVD Line: 2792

//  <item> SFDITEM_REG__DMA_CURR_SAR1
//    <name> CURR_SAR1 </name>
//    <i> [Bits 31..0] RO (@ 0x4000205C) Channel 1 Current Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_SAR1 >> 0) & 0xFFFFFFFF), ((DMA_CURR_SAR1 = (DMA_CURR_SAR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_DAR1  --------------------------------
// SVD Line: 2802

unsigned int DMA_DAR1 __AT (0x40002060);



// ---------------------------------  Register Item: DMA_DAR1  ------------------------------------
// SVD Line: 2802

//  <item> SFDITEM_REG__DMA_DAR1
//    <name> DAR1 </name>
//    <i> [Bits 31..0] RW (@ 0x40002060) Channel 1 Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DAR1 >> 0) & 0xFFFFFFFF), ((DMA_DAR1 = (DMA_DAR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_DAR1  ------------------------------
// SVD Line: 2812

unsigned int DMA_CURR_DAR1 __AT (0x40002064);



// ------------------------------  Register Item: DMA_CURR_DAR1  ----------------------------------
// SVD Line: 2812

//  <item> SFDITEM_REG__DMA_CURR_DAR1
//    <name> CURR_DAR1 </name>
//    <i> [Bits 31..0] RO (@ 0x40002064) Channel 1 Current Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_DAR1 >> 0) & 0xFFFFFFFF), ((DMA_CURR_DAR1 = (DMA_CURR_DAR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP1_L  -------------------------------
// SVD Line: 2822

unsigned int DMA_LLP1_L __AT (0x40002068);



// --------------------------------  Register Item: DMA_LLP1_L  -----------------------------------
// SVD Line: 2822

//  <item> SFDITEM_REG__DMA_LLP1_L
//    <name> LLP1_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002068) Channel 1 low-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP1_L >> 0) & 0xFFFFFFFF), ((DMA_LLP1_L = (DMA_LLP1_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP1_H  -------------------------------
// SVD Line: 2832

unsigned int DMA_LLP1_H __AT (0x4000206C);



// --------------------------------  Register Item: DMA_LLP1_H  -----------------------------------
// SVD Line: 2832

//  <item> SFDITEM_REG__DMA_LLP1_H
//    <name> LLP1_H </name>
//    <i> [Bits 31..0] RW (@ 0x4000206C) Channel 1 high-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP1_H >> 0) & 0xFFFFFFFF), ((DMA_LLP1_H = (DMA_LLP1_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_BLK_COUNTER_REG1  --------------------------
// SVD Line: 2844

unsigned int DMA_BLK_COUNTER_REG1 __AT (0x40002078);



// ---------------------------  Register Item: DMA_BLK_COUNTER_REG1  ------------------------------
// SVD Line: 2844

//  <item> SFDITEM_REG__DMA_BLK_COUNTER_REG1
//    <name> BLK_COUNTER_REG1 </name>
//    <i> [Bits 31..0] RW (@ 0x40002078) Channel 1 32bits Block Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_BLK_COUNTER_REG1 >> 0) & 0xFFFFFFFF), ((DMA_BLK_COUNTER_REG1 = (DMA_BLK_COUNTER_REG1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_REPEAT_PATTERN1  ---------------------------
// SVD Line: 2854

unsigned int DMA_REPEAT_PATTERN1 __AT (0x4000207C);



// ---------------------------  Register Item: DMA_REPEAT_PATTERN1  -------------------------------
// SVD Line: 2854

//  <item> SFDITEM_REG__DMA_REPEAT_PATTERN1
//    <name> REPEAT_PATTERN1 </name>
//    <i> [Bits 31..0] RW (@ 0x4000207C) Channel 1 32bits Memory Repeat Pattern Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_REPEAT_PATTERN1 >> 0) & 0xFFFFFFFF), ((DMA_REPEAT_PATTERN1 = (DMA_REPEAT_PATTERN1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR1_L  -------------------------------
// SVD Line: 2864

unsigned int DMA_DSR1_L __AT (0x400020A8);



// --------------------------------  Register Item: DMA_DSR1_L  -----------------------------------
// SVD Line: 2864

//  <item> SFDITEM_REG__DMA_DSR1_L
//    <name> DSR1_L </name>
//    <i> [Bits 31..0] RW (@ 0x400020A8) Channel 1 low-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR1_L >> 0) & 0xFFFFFFFF), ((DMA_DSR1_L = (DMA_DSR1_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR1_H  -------------------------------
// SVD Line: 2874

unsigned int DMA_DSR1_H __AT (0x400020AC);



// --------------------------------  Register Item: DMA_DSR1_H  -----------------------------------
// SVD Line: 2874

//  <item> SFDITEM_REG__DMA_DSR1_H
//    <name> DSR1_H </name>
//    <i> [Bits 31..0] RW (@ 0x400020AC) Channel 1 high-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR1_H >> 0) & 0xFFFFFFFF), ((DMA_DSR1_H = (DMA_DSR1_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_SAR2  --------------------------------
// SVD Line: 2885

unsigned int DMA_SAR2 __AT (0x400020B0);



// ---------------------------------  Register Item: DMA_SAR2  ------------------------------------
// SVD Line: 2885

//  <item> SFDITEM_REG__DMA_SAR2
//    <name> SAR2 </name>
//    <i> [Bits 31..0] RW (@ 0x400020B0) Channel 2 Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SAR2 >> 0) & 0xFFFFFFFF), ((DMA_SAR2 = (DMA_SAR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_SAR2  ------------------------------
// SVD Line: 2895

unsigned int DMA_CURR_SAR2 __AT (0x400020B4);



// ------------------------------  Register Item: DMA_CURR_SAR2  ----------------------------------
// SVD Line: 2895

//  <item> SFDITEM_REG__DMA_CURR_SAR2
//    <name> CURR_SAR2 </name>
//    <i> [Bits 31..0] RO (@ 0x400020B4) Channel 2 Current Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_SAR2 >> 0) & 0xFFFFFFFF), ((DMA_CURR_SAR2 = (DMA_CURR_SAR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_DAR2  --------------------------------
// SVD Line: 2905

unsigned int DMA_DAR2 __AT (0x400020B8);



// ---------------------------------  Register Item: DMA_DAR2  ------------------------------------
// SVD Line: 2905

//  <item> SFDITEM_REG__DMA_DAR2
//    <name> DAR2 </name>
//    <i> [Bits 31..0] RW (@ 0x400020B8) Channel 2 Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DAR2 >> 0) & 0xFFFFFFFF), ((DMA_DAR2 = (DMA_DAR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_DAR2  ------------------------------
// SVD Line: 2915

unsigned int DMA_CURR_DAR2 __AT (0x400020BC);



// ------------------------------  Register Item: DMA_CURR_DAR2  ----------------------------------
// SVD Line: 2915

//  <item> SFDITEM_REG__DMA_CURR_DAR2
//    <name> CURR_DAR2 </name>
//    <i> [Bits 31..0] RO (@ 0x400020BC) Channel 2 Current Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_DAR2 >> 0) & 0xFFFFFFFF), ((DMA_CURR_DAR2 = (DMA_CURR_DAR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP2_L  -------------------------------
// SVD Line: 2925

unsigned int DMA_LLP2_L __AT (0x400020C0);



// --------------------------------  Register Item: DMA_LLP2_L  -----------------------------------
// SVD Line: 2925

//  <item> SFDITEM_REG__DMA_LLP2_L
//    <name> LLP2_L </name>
//    <i> [Bits 31..0] RW (@ 0x400020C0) Channel 2 low-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP2_L >> 0) & 0xFFFFFFFF), ((DMA_LLP2_L = (DMA_LLP2_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP2_H  -------------------------------
// SVD Line: 2935

unsigned int DMA_LLP2_H __AT (0x400020C4);



// --------------------------------  Register Item: DMA_LLP2_H  -----------------------------------
// SVD Line: 2935

//  <item> SFDITEM_REG__DMA_LLP2_H
//    <name> LLP2_H </name>
//    <i> [Bits 31..0] RW (@ 0x400020C4) Channel 2 high-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP2_H >> 0) & 0xFFFFFFFF), ((DMA_LLP2_H = (DMA_LLP2_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_BLK_COUNTER_REG2  --------------------------
// SVD Line: 2946

unsigned int DMA_BLK_COUNTER_REG2 __AT (0x400020D0);



// ---------------------------  Register Item: DMA_BLK_COUNTER_REG2  ------------------------------
// SVD Line: 2946

//  <item> SFDITEM_REG__DMA_BLK_COUNTER_REG2
//    <name> BLK_COUNTER_REG2 </name>
//    <i> [Bits 31..0] RW (@ 0x400020D0) Channel 2 32bits Block Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_BLK_COUNTER_REG2 >> 0) & 0xFFFFFFFF), ((DMA_BLK_COUNTER_REG2 = (DMA_BLK_COUNTER_REG2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_REPEAT_PATTERN2  ---------------------------
// SVD Line: 2956

unsigned int DMA_REPEAT_PATTERN2 __AT (0x400020D4);



// ---------------------------  Register Item: DMA_REPEAT_PATTERN2  -------------------------------
// SVD Line: 2956

//  <item> SFDITEM_REG__DMA_REPEAT_PATTERN2
//    <name> REPEAT_PATTERN2 </name>
//    <i> [Bits 31..0] RW (@ 0x400020D4) Channel 2 32bits Memory Repeat Pattern Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_REPEAT_PATTERN2 >> 0) & 0xFFFFFFFF), ((DMA_REPEAT_PATTERN2 = (DMA_REPEAT_PATTERN2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR2_L  -------------------------------
// SVD Line: 2966

unsigned int DMA_DSR2_L __AT (0x40002100);



// --------------------------------  Register Item: DMA_DSR2_L  -----------------------------------
// SVD Line: 2966

//  <item> SFDITEM_REG__DMA_DSR2_L
//    <name> DSR2_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002100) Channel 2 low-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR2_L >> 0) & 0xFFFFFFFF), ((DMA_DSR2_L = (DMA_DSR2_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR2_H  -------------------------------
// SVD Line: 2976

unsigned int DMA_DSR2_H __AT (0x40002104);



// --------------------------------  Register Item: DMA_DSR2_H  -----------------------------------
// SVD Line: 2976

//  <item> SFDITEM_REG__DMA_DSR2_H
//    <name> DSR2_H </name>
//    <i> [Bits 31..0] RW (@ 0x40002104) Channel 2 high-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR2_H >> 0) & 0xFFFFFFFF), ((DMA_DSR2_H = (DMA_DSR2_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_SAR3  --------------------------------
// SVD Line: 2987

unsigned int DMA_SAR3 __AT (0x40002108);



// ---------------------------------  Register Item: DMA_SAR3  ------------------------------------
// SVD Line: 2987

//  <item> SFDITEM_REG__DMA_SAR3
//    <name> SAR3 </name>
//    <i> [Bits 31..0] RW (@ 0x40002108) Channel 3 Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SAR3 >> 0) & 0xFFFFFFFF), ((DMA_SAR3 = (DMA_SAR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_SAR3  ------------------------------
// SVD Line: 2997

unsigned int DMA_CURR_SAR3 __AT (0x4000210C);



// ------------------------------  Register Item: DMA_CURR_SAR3  ----------------------------------
// SVD Line: 2997

//  <item> SFDITEM_REG__DMA_CURR_SAR3
//    <name> CURR_SAR3 </name>
//    <i> [Bits 31..0] RO (@ 0x4000210C) Channel 3 Current Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_SAR3 >> 0) & 0xFFFFFFFF), ((DMA_CURR_SAR3 = (DMA_CURR_SAR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_DAR3  --------------------------------
// SVD Line: 3007

unsigned int DMA_DAR3 __AT (0x40002110);



// ---------------------------------  Register Item: DMA_DAR3  ------------------------------------
// SVD Line: 3007

//  <item> SFDITEM_REG__DMA_DAR3
//    <name> DAR3 </name>
//    <i> [Bits 31..0] RW (@ 0x40002110) Channel 3 Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DAR3 >> 0) & 0xFFFFFFFF), ((DMA_DAR3 = (DMA_DAR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_DAR3  ------------------------------
// SVD Line: 3017

unsigned int DMA_CURR_DAR3 __AT (0x40002114);



// ------------------------------  Register Item: DMA_CURR_DAR3  ----------------------------------
// SVD Line: 3017

//  <item> SFDITEM_REG__DMA_CURR_DAR3
//    <name> CURR_DAR3 </name>
//    <i> [Bits 31..0] RO (@ 0x40002114) Channel 3 Current Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_DAR3 >> 0) & 0xFFFFFFFF), ((DMA_CURR_DAR3 = (DMA_CURR_DAR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP3_L  -------------------------------
// SVD Line: 3027

unsigned int DMA_LLP3_L __AT (0x40002118);



// --------------------------------  Register Item: DMA_LLP3_L  -----------------------------------
// SVD Line: 3027

//  <item> SFDITEM_REG__DMA_LLP3_L
//    <name> LLP3_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002118) Channel 3 low-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP3_L >> 0) & 0xFFFFFFFF), ((DMA_LLP3_L = (DMA_LLP3_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP3_H  -------------------------------
// SVD Line: 3037

unsigned int DMA_LLP3_H __AT (0x4000211C);



// --------------------------------  Register Item: DMA_LLP3_H  -----------------------------------
// SVD Line: 3037

//  <item> SFDITEM_REG__DMA_LLP3_H
//    <name> LLP3_H </name>
//    <i> [Bits 31..0] RW (@ 0x4000211C) Channel 3 high-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP3_H >> 0) & 0xFFFFFFFF), ((DMA_LLP3_H = (DMA_LLP3_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_BLK_COUNTER_REG3  --------------------------
// SVD Line: 3047

unsigned int DMA_BLK_COUNTER_REG3 __AT (0x40002128);



// ---------------------------  Register Item: DMA_BLK_COUNTER_REG3  ------------------------------
// SVD Line: 3047

//  <item> SFDITEM_REG__DMA_BLK_COUNTER_REG3
//    <name> BLK_COUNTER_REG3 </name>
//    <i> [Bits 31..0] RW (@ 0x40002128) Channel 3 32bits Block Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_BLK_COUNTER_REG3 >> 0) & 0xFFFFFFFF), ((DMA_BLK_COUNTER_REG3 = (DMA_BLK_COUNTER_REG3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_REPEAT_PATTERN3  ---------------------------
// SVD Line: 3057

unsigned int DMA_REPEAT_PATTERN3 __AT (0x4000212C);



// ---------------------------  Register Item: DMA_REPEAT_PATTERN3  -------------------------------
// SVD Line: 3057

//  <item> SFDITEM_REG__DMA_REPEAT_PATTERN3
//    <name> REPEAT_PATTERN3 </name>
//    <i> [Bits 31..0] RW (@ 0x4000212C) Channel 3 32bits Memory Repeat Pattern Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_REPEAT_PATTERN3 >> 0) & 0xFFFFFFFF), ((DMA_REPEAT_PATTERN3 = (DMA_REPEAT_PATTERN3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR3_L  -------------------------------
// SVD Line: 3067

unsigned int DMA_DSR3_L __AT (0x40002158);



// --------------------------------  Register Item: DMA_DSR3_L  -----------------------------------
// SVD Line: 3067

//  <item> SFDITEM_REG__DMA_DSR3_L
//    <name> DSR3_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002158) Channel 3 low-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR3_L >> 0) & 0xFFFFFFFF), ((DMA_DSR3_L = (DMA_DSR3_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR3_H  -------------------------------
// SVD Line: 3077

unsigned int DMA_DSR3_H __AT (0x4000215C);



// --------------------------------  Register Item: DMA_DSR3_H  -----------------------------------
// SVD Line: 3077

//  <item> SFDITEM_REG__DMA_DSR3_H
//    <name> DSR3_H </name>
//    <i> [Bits 31..0] RW (@ 0x4000215C) Channel 3 high-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR3_H >> 0) & 0xFFFFFFFF), ((DMA_DSR3_H = (DMA_DSR3_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_SAR4  --------------------------------
// SVD Line: 3088

unsigned int DMA_SAR4 __AT (0x40002160);



// ---------------------------------  Register Item: DMA_SAR4  ------------------------------------
// SVD Line: 3088

//  <item> SFDITEM_REG__DMA_SAR4
//    <name> SAR4 </name>
//    <i> [Bits 31..0] RW (@ 0x40002160) Channel 4 Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SAR4 >> 0) & 0xFFFFFFFF), ((DMA_SAR4 = (DMA_SAR4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_SAR4  ------------------------------
// SVD Line: 3098

unsigned int DMA_CURR_SAR4 __AT (0x40002164);



// ------------------------------  Register Item: DMA_CURR_SAR4  ----------------------------------
// SVD Line: 3098

//  <item> SFDITEM_REG__DMA_CURR_SAR4
//    <name> CURR_SAR4 </name>
//    <i> [Bits 31..0] RO (@ 0x40002164) Channel 4 Current Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_SAR4 >> 0) & 0xFFFFFFFF), ((DMA_CURR_SAR4 = (DMA_CURR_SAR4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_DAR4  --------------------------------
// SVD Line: 3108

unsigned int DMA_DAR4 __AT (0x40002168);



// ---------------------------------  Register Item: DMA_DAR4  ------------------------------------
// SVD Line: 3108

//  <item> SFDITEM_REG__DMA_DAR4
//    <name> DAR4 </name>
//    <i> [Bits 31..0] RW (@ 0x40002168) Channel 4 Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DAR4 >> 0) & 0xFFFFFFFF), ((DMA_DAR4 = (DMA_DAR4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_DAR4  ------------------------------
// SVD Line: 3118

unsigned int DMA_CURR_DAR4 __AT (0x4000216C);



// ------------------------------  Register Item: DMA_CURR_DAR4  ----------------------------------
// SVD Line: 3118

//  <item> SFDITEM_REG__DMA_CURR_DAR4
//    <name> CURR_DAR4 </name>
//    <i> [Bits 31..0] RO (@ 0x4000216C) Channel 4 Current Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_DAR4 >> 0) & 0xFFFFFFFF), ((DMA_CURR_DAR4 = (DMA_CURR_DAR4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP4_L  -------------------------------
// SVD Line: 3128

unsigned int DMA_LLP4_L __AT (0x40002170);



// --------------------------------  Register Item: DMA_LLP4_L  -----------------------------------
// SVD Line: 3128

//  <item> SFDITEM_REG__DMA_LLP4_L
//    <name> LLP4_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002170) Channel 4 low-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP4_L >> 0) & 0xFFFFFFFF), ((DMA_LLP4_L = (DMA_LLP4_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP4_H  -------------------------------
// SVD Line: 3138

unsigned int DMA_LLP4_H __AT (0x40002174);



// --------------------------------  Register Item: DMA_LLP4_H  -----------------------------------
// SVD Line: 3138

//  <item> SFDITEM_REG__DMA_LLP4_H
//    <name> LLP4_H </name>
//    <i> [Bits 31..0] RW (@ 0x40002174) Channel 4 high-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP4_H >> 0) & 0xFFFFFFFF), ((DMA_LLP4_H = (DMA_LLP4_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_BLK_COUNTER_REG4  --------------------------
// SVD Line: 3148

unsigned int DMA_BLK_COUNTER_REG4 __AT (0x40002180);



// ---------------------------  Register Item: DMA_BLK_COUNTER_REG4  ------------------------------
// SVD Line: 3148

//  <item> SFDITEM_REG__DMA_BLK_COUNTER_REG4
//    <name> BLK_COUNTER_REG4 </name>
//    <i> [Bits 31..0] RW (@ 0x40002180) Channel 4 32bits Block Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_BLK_COUNTER_REG4 >> 0) & 0xFFFFFFFF), ((DMA_BLK_COUNTER_REG4 = (DMA_BLK_COUNTER_REG4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_REPEAT_PATTERN4  ---------------------------
// SVD Line: 3158

unsigned int DMA_REPEAT_PATTERN4 __AT (0x40002184);



// ---------------------------  Register Item: DMA_REPEAT_PATTERN4  -------------------------------
// SVD Line: 3158

//  <item> SFDITEM_REG__DMA_REPEAT_PATTERN4
//    <name> REPEAT_PATTERN4 </name>
//    <i> [Bits 31..0] RW (@ 0x40002184) Channel 4 32bits Memory Repeat Pattern Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_REPEAT_PATTERN4 >> 0) & 0xFFFFFFFF), ((DMA_REPEAT_PATTERN4 = (DMA_REPEAT_PATTERN4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR4_L  -------------------------------
// SVD Line: 3168

unsigned int DMA_DSR4_L __AT (0x400021B0);



// --------------------------------  Register Item: DMA_DSR4_L  -----------------------------------
// SVD Line: 3168

//  <item> SFDITEM_REG__DMA_DSR4_L
//    <name> DSR4_L </name>
//    <i> [Bits 31..0] RW (@ 0x400021B0) Channel 4 low-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR4_L >> 0) & 0xFFFFFFFF), ((DMA_DSR4_L = (DMA_DSR4_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR4_H  -------------------------------
// SVD Line: 3178

unsigned int DMA_DSR4_H __AT (0x400021B4);



// --------------------------------  Register Item: DMA_DSR4_H  -----------------------------------
// SVD Line: 3178

//  <item> SFDITEM_REG__DMA_DSR4_H
//    <name> DSR4_H </name>
//    <i> [Bits 31..0] RW (@ 0x400021B4) Channel 4 high-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR4_H >> 0) & 0xFFFFFFFF), ((DMA_DSR4_H = (DMA_DSR4_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_SAR5  --------------------------------
// SVD Line: 3189

unsigned int DMA_SAR5 __AT (0x400021B8);



// ---------------------------------  Register Item: DMA_SAR5  ------------------------------------
// SVD Line: 3189

//  <item> SFDITEM_REG__DMA_SAR5
//    <name> SAR5 </name>
//    <i> [Bits 31..0] RW (@ 0x400021B8) Channel 5 Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SAR5 >> 0) & 0xFFFFFFFF), ((DMA_SAR5 = (DMA_SAR5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_SAR5  ------------------------------
// SVD Line: 3199

unsigned int DMA_CURR_SAR5 __AT (0x400021BC);



// ------------------------------  Register Item: DMA_CURR_SAR5  ----------------------------------
// SVD Line: 3199

//  <item> SFDITEM_REG__DMA_CURR_SAR5
//    <name> CURR_SAR5 </name>
//    <i> [Bits 31..0] RO (@ 0x400021BC) Channel 5 Current Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_SAR5 >> 0) & 0xFFFFFFFF), ((DMA_CURR_SAR5 = (DMA_CURR_SAR5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_DAR5  --------------------------------
// SVD Line: 3209

unsigned int DMA_DAR5 __AT (0x400021C0);



// ---------------------------------  Register Item: DMA_DAR5  ------------------------------------
// SVD Line: 3209

//  <item> SFDITEM_REG__DMA_DAR5
//    <name> DAR5 </name>
//    <i> [Bits 31..0] RW (@ 0x400021C0) Channel 5 Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DAR5 >> 0) & 0xFFFFFFFF), ((DMA_DAR5 = (DMA_DAR5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_DAR5  ------------------------------
// SVD Line: 3219

unsigned int DMA_CURR_DAR5 __AT (0x400021C4);



// ------------------------------  Register Item: DMA_CURR_DAR5  ----------------------------------
// SVD Line: 3219

//  <item> SFDITEM_REG__DMA_CURR_DAR5
//    <name> CURR_DAR5 </name>
//    <i> [Bits 31..0] RO (@ 0x400021C4) Channel 5 Current Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_DAR5 >> 0) & 0xFFFFFFFF), ((DMA_CURR_DAR5 = (DMA_CURR_DAR5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP5_L  -------------------------------
// SVD Line: 3229

unsigned int DMA_LLP5_L __AT (0x400021C8);



// --------------------------------  Register Item: DMA_LLP5_L  -----------------------------------
// SVD Line: 3229

//  <item> SFDITEM_REG__DMA_LLP5_L
//    <name> LLP5_L </name>
//    <i> [Bits 31..0] RW (@ 0x400021C8) Channel 5 low-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP5_L >> 0) & 0xFFFFFFFF), ((DMA_LLP5_L = (DMA_LLP5_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP5_H  -------------------------------
// SVD Line: 3239

unsigned int DMA_LLP5_H __AT (0x400021CC);



// --------------------------------  Register Item: DMA_LLP5_H  -----------------------------------
// SVD Line: 3239

//  <item> SFDITEM_REG__DMA_LLP5_H
//    <name> LLP5_H </name>
//    <i> [Bits 31..0] RW (@ 0x400021CC) Channel 5 high-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP5_H >> 0) & 0xFFFFFFFF), ((DMA_LLP5_H = (DMA_LLP5_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_BLK_COUNTER_REG5  --------------------------
// SVD Line: 3249

unsigned int DMA_BLK_COUNTER_REG5 __AT (0x400021D8);



// ---------------------------  Register Item: DMA_BLK_COUNTER_REG5  ------------------------------
// SVD Line: 3249

//  <item> SFDITEM_REG__DMA_BLK_COUNTER_REG5
//    <name> BLK_COUNTER_REG5 </name>
//    <i> [Bits 31..0] RW (@ 0x400021D8) Channel 5 32bits Block Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_BLK_COUNTER_REG5 >> 0) & 0xFFFFFFFF), ((DMA_BLK_COUNTER_REG5 = (DMA_BLK_COUNTER_REG5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_REPEAT_PATTERN5  ---------------------------
// SVD Line: 3259

unsigned int DMA_REPEAT_PATTERN5 __AT (0x400021DC);



// ---------------------------  Register Item: DMA_REPEAT_PATTERN5  -------------------------------
// SVD Line: 3259

//  <item> SFDITEM_REG__DMA_REPEAT_PATTERN5
//    <name> REPEAT_PATTERN5 </name>
//    <i> [Bits 31..0] RW (@ 0x400021DC) Channel 5 32bits Memory Repeat Pattern Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_REPEAT_PATTERN5 >> 0) & 0xFFFFFFFF), ((DMA_REPEAT_PATTERN5 = (DMA_REPEAT_PATTERN5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR5_L  -------------------------------
// SVD Line: 3269

unsigned int DMA_DSR5_L __AT (0x40002208);



// --------------------------------  Register Item: DMA_DSR5_L  -----------------------------------
// SVD Line: 3269

//  <item> SFDITEM_REG__DMA_DSR5_L
//    <name> DSR5_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002208) Channel 5 low-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR5_L >> 0) & 0xFFFFFFFF), ((DMA_DSR5_L = (DMA_DSR5_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR5_H  -------------------------------
// SVD Line: 3279

unsigned int DMA_DSR5_H __AT (0x4000220C);



// --------------------------------  Register Item: DMA_DSR5_H  -----------------------------------
// SVD Line: 3279

//  <item> SFDITEM_REG__DMA_DSR5_H
//    <name> DSR5_H </name>
//    <i> [Bits 31..0] RW (@ 0x4000220C) Channel 5 high-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR5_H >> 0) & 0xFFFFFFFF), ((DMA_DSR5_H = (DMA_DSR5_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_SAR6  --------------------------------
// SVD Line: 3289

unsigned int DMA_SAR6 __AT (0x40002210);



// ---------------------------------  Register Item: DMA_SAR6  ------------------------------------
// SVD Line: 3289

//  <item> SFDITEM_REG__DMA_SAR6
//    <name> SAR6 </name>
//    <i> [Bits 31..0] RW (@ 0x40002210) Channel 6 Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SAR6 >> 0) & 0xFFFFFFFF), ((DMA_SAR6 = (DMA_SAR6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_SAR6  ------------------------------
// SVD Line: 3299

unsigned int DMA_CURR_SAR6 __AT (0x40002214);



// ------------------------------  Register Item: DMA_CURR_SAR6  ----------------------------------
// SVD Line: 3299

//  <item> SFDITEM_REG__DMA_CURR_SAR6
//    <name> CURR_SAR6 </name>
//    <i> [Bits 31..0] RO (@ 0x40002214) Channel 6 Current Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_SAR6 >> 0) & 0xFFFFFFFF), ((DMA_CURR_SAR6 = (DMA_CURR_SAR6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_DAR6  --------------------------------
// SVD Line: 3309

unsigned int DMA_DAR6 __AT (0x40002218);



// ---------------------------------  Register Item: DMA_DAR6  ------------------------------------
// SVD Line: 3309

//  <item> SFDITEM_REG__DMA_DAR6
//    <name> DAR6 </name>
//    <i> [Bits 31..0] RW (@ 0x40002218) Channel 6 Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DAR6 >> 0) & 0xFFFFFFFF), ((DMA_DAR6 = (DMA_DAR6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_DAR6  ------------------------------
// SVD Line: 3318

unsigned int DMA_CURR_DAR6 __AT (0x4000221C);



// ------------------------------  Register Item: DMA_CURR_DAR6  ----------------------------------
// SVD Line: 3318

//  <item> SFDITEM_REG__DMA_CURR_DAR6
//    <name> CURR_DAR6 </name>
//    <i> [Bits 31..0] RO (@ 0x4000221C) Channel 6 Current Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_DAR6 >> 0) & 0xFFFFFFFF), ((DMA_CURR_DAR6 = (DMA_CURR_DAR6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP6_L  -------------------------------
// SVD Line: 3327

unsigned int DMA_LLP6_L __AT (0x40002220);



// --------------------------------  Register Item: DMA_LLP6_L  -----------------------------------
// SVD Line: 3327

//  <item> SFDITEM_REG__DMA_LLP6_L
//    <name> LLP6_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002220) Channel 6 low-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP6_L >> 0) & 0xFFFFFFFF), ((DMA_LLP6_L = (DMA_LLP6_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP6_H  -------------------------------
// SVD Line: 3336

unsigned int DMA_LLP6_H __AT (0x40002224);



// --------------------------------  Register Item: DMA_LLP6_H  -----------------------------------
// SVD Line: 3336

//  <item> SFDITEM_REG__DMA_LLP6_H
//    <name> LLP6_H </name>
//    <i> [Bits 31..0] RW (@ 0x40002224) Channel 6 high-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP6_H >> 0) & 0xFFFFFFFF), ((DMA_LLP6_H = (DMA_LLP6_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_BLK_COUNTER_REG6  --------------------------
// SVD Line: 3345

unsigned int DMA_BLK_COUNTER_REG6 __AT (0x40002230);



// ---------------------------  Register Item: DMA_BLK_COUNTER_REG6  ------------------------------
// SVD Line: 3345

//  <item> SFDITEM_REG__DMA_BLK_COUNTER_REG6
//    <name> BLK_COUNTER_REG6 </name>
//    <i> [Bits 31..0] RW (@ 0x40002230) Channel 6 32bits Block Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_BLK_COUNTER_REG6 >> 0) & 0xFFFFFFFF), ((DMA_BLK_COUNTER_REG6 = (DMA_BLK_COUNTER_REG6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_REPEAT_PATTERN6  ---------------------------
// SVD Line: 3354

unsigned int DMA_REPEAT_PATTERN6 __AT (0x40002234);



// ---------------------------  Register Item: DMA_REPEAT_PATTERN6  -------------------------------
// SVD Line: 3354

//  <item> SFDITEM_REG__DMA_REPEAT_PATTERN6
//    <name> REPEAT_PATTERN6 </name>
//    <i> [Bits 31..0] RW (@ 0x40002234) Channel 6 32bits Memory Repeat Pattern Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_REPEAT_PATTERN6 >> 0) & 0xFFFFFFFF), ((DMA_REPEAT_PATTERN6 = (DMA_REPEAT_PATTERN6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_SAR7  --------------------------------
// SVD Line: 3364

unsigned int DMA_SAR7 __AT (0x40002268);



// ---------------------------------  Register Item: DMA_SAR7  ------------------------------------
// SVD Line: 3364

//  <item> SFDITEM_REG__DMA_SAR7
//    <name> SAR7 </name>
//    <i> [Bits 31..0] RW (@ 0x40002268) Channel 7 Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_SAR7 >> 0) & 0xFFFFFFFF), ((DMA_SAR7 = (DMA_SAR7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_SAR7  ------------------------------
// SVD Line: 3374

unsigned int DMA_CURR_SAR7 __AT (0x4000226C);



// ------------------------------  Register Item: DMA_CURR_SAR7  ----------------------------------
// SVD Line: 3374

//  <item> SFDITEM_REG__DMA_CURR_SAR7
//    <name> CURR_SAR7 </name>
//    <i> [Bits 31..0] RO (@ 0x4000226C) Channel 7 Current Source Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_SAR7 >> 0) & 0xFFFFFFFF), ((DMA_CURR_SAR7 = (DMA_CURR_SAR7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: DMA_DAR7  --------------------------------
// SVD Line: 3384

unsigned int DMA_DAR7 __AT (0x40002270);



// ---------------------------------  Register Item: DMA_DAR7  ------------------------------------
// SVD Line: 3384

//  <item> SFDITEM_REG__DMA_DAR7
//    <name> DAR7 </name>
//    <i> [Bits 31..0] RW (@ 0x40002270) Channel 7 Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DAR7 >> 0) & 0xFFFFFFFF), ((DMA_DAR7 = (DMA_DAR7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_CURR_DAR7  ------------------------------
// SVD Line: 3394

unsigned int DMA_CURR_DAR7 __AT (0x40002274);



// ------------------------------  Register Item: DMA_CURR_DAR7  ----------------------------------
// SVD Line: 3394

//  <item> SFDITEM_REG__DMA_CURR_DAR7
//    <name> CURR_DAR7 </name>
//    <i> [Bits 31..0] RO (@ 0x40002274) Channel 7 Current Destination Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_CURR_DAR7 >> 0) & 0xFFFFFFFF), ((DMA_CURR_DAR7 = (DMA_CURR_DAR7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP7_L  -------------------------------
// SVD Line: 3404

unsigned int DMA_LLP7_L __AT (0x40002278);



// --------------------------------  Register Item: DMA_LLP7_L  -----------------------------------
// SVD Line: 3404

//  <item> SFDITEM_REG__DMA_LLP7_L
//    <name> LLP7_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002278) Channel 7 low-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP7_L >> 0) & 0xFFFFFFFF), ((DMA_LLP7_L = (DMA_LLP7_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_LLP7_H  -------------------------------
// SVD Line: 3414

unsigned int DMA_LLP7_H __AT (0x4000227C);



// --------------------------------  Register Item: DMA_LLP7_H  -----------------------------------
// SVD Line: 3414

//  <item> SFDITEM_REG__DMA_LLP7_H
//    <name> LLP7_H </name>
//    <i> [Bits 31..0] RW (@ 0x4000227C) Channel 7 high-32bits Linked List Pointer Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_LLP7_H >> 0) & 0xFFFFFFFF), ((DMA_LLP7_H = (DMA_LLP7_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_BLK_COUNTER_REG7  --------------------------
// SVD Line: 3424

unsigned int DMA_BLK_COUNTER_REG7 __AT (0x40002288);



// ---------------------------  Register Item: DMA_BLK_COUNTER_REG7  ------------------------------
// SVD Line: 3424

//  <item> SFDITEM_REG__DMA_BLK_COUNTER_REG7
//    <name> BLK_COUNTER_REG7 </name>
//    <i> [Bits 31..0] RW (@ 0x40002288) Channel 7 32bits Block Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_BLK_COUNTER_REG7 >> 0) & 0xFFFFFFFF), ((DMA_BLK_COUNTER_REG7 = (DMA_BLK_COUNTER_REG7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: DMA_REPEAT_PATTERN7  ---------------------------
// SVD Line: 3434

unsigned int DMA_REPEAT_PATTERN7 __AT (0x4000228C);



// ---------------------------  Register Item: DMA_REPEAT_PATTERN7  -------------------------------
// SVD Line: 3434

//  <item> SFDITEM_REG__DMA_REPEAT_PATTERN7
//    <name> REPEAT_PATTERN7 </name>
//    <i> [Bits 31..0] RW (@ 0x4000228C) Channel 7 32bits Memory Repeat Pattern Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_REPEAT_PATTERN7 >> 0) & 0xFFFFFFFF), ((DMA_REPEAT_PATTERN7 = (DMA_REPEAT_PATTERN7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR7_L  -------------------------------
// SVD Line: 3444

unsigned int DMA_DSR7_L __AT (0x400022B8);



// --------------------------------  Register Item: DMA_DSR7_L  -----------------------------------
// SVD Line: 3444

//  <item> SFDITEM_REG__DMA_DSR7_L
//    <name> DSR7_L </name>
//    <i> [Bits 31..0] RW (@ 0x400022B8) Channel 7 low-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR7_L >> 0) & 0xFFFFFFFF), ((DMA_DSR7_L = (DMA_DSR7_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: DMA_DSR7_H  -------------------------------
// SVD Line: 3454

unsigned int DMA_DSR7_H __AT (0x400022BC);



// --------------------------------  Register Item: DMA_DSR7_H  -----------------------------------
// SVD Line: 3454

//  <item> SFDITEM_REG__DMA_DSR7_H
//    <name> DSR7_H </name>
//    <i> [Bits 31..0] RW (@ 0x400022BC) Channel 7 high-32bits Destination Scatter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DSR7_H >> 0) & 0xFFFFFFFF), ((DMA_DSR7_H = (DMA_DSR7_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: DMA_RAWTFR_L  ------------------------------
// SVD Line: 3464

unsigned int DMA_RAWTFR_L __AT (0x400022C0);



// -------------------------------  Register Item: DMA_RAWTFR_L  ----------------------------------
// SVD Line: 3464

//  <item> SFDITEM_REG__DMA_RAWTFR_L
//    <name> RAWTFR_L </name>
//    <i> [Bits 31..0] RO (@ 0x400022C0) Raw Status for IntTfr Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_RAWTFR_L >> 0) & 0xFFFFFFFF), ((DMA_RAWTFR_L = (DMA_RAWTFR_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: DMA_RAWTFR_H  ------------------------------
// SVD Line: 3474

unsigned int DMA_RAWTFR_H __AT (0x400022C4);



// -------------------------------  Register Item: DMA_RAWTFR_H  ----------------------------------
// SVD Line: 3474

//  <item> SFDITEM_REG__DMA_RAWTFR_H
//    <name> RAWTFR_H </name>
//    <i> [Bits 31..0] RO (@ 0x400022C4) Raw Status for Blk Counter Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_RAWTFR_H >> 0) & 0xFFFFFFFF), ((DMA_RAWTFR_H = (DMA_RAWTFR_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_RAWBLOCK_L  -----------------------------
// SVD Line: 3484

unsigned int DMA_RAWBLOCK_L __AT (0x400022C8);



// ------------------------------  Register Item: DMA_RAWBLOCK_L  ---------------------------------
// SVD Line: 3484

//  <item> SFDITEM_REG__DMA_RAWBLOCK_L
//    <name> RAWBLOCK_L </name>
//    <i> [Bits 31..0] RO (@ 0x400022C8) Raw Status for IntBlock Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_RAWBLOCK_L >> 0) & 0xFFFFFFFF), ((DMA_RAWBLOCK_L = (DMA_RAWBLOCK_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_RAWBLOCK_H  -----------------------------
// SVD Line: 3494

unsigned int DMA_RAWBLOCK_H __AT (0x400022CC);



// ------------------------------  Register Item: DMA_RAWBLOCK_H  ---------------------------------
// SVD Line: 3494

//  <item> SFDITEM_REG__DMA_RAWBLOCK_H
//    <name> RAWBLOCK_H </name>
//    <i> [Bits 31..0] RO (@ 0x400022CC) Raw Status for Int_1_2_Block if defined </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_RAWBLOCK_H >> 0) & 0xFFFFFFFF), ((DMA_RAWBLOCK_H = (DMA_RAWBLOCK_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: DMA_RAWERR_L  ------------------------------
// SVD Line: 3504

unsigned int DMA_RAWERR_L __AT (0x400022D0);



// -------------------------------  Register Item: DMA_RAWERR_L  ----------------------------------
// SVD Line: 3504

//  <item> SFDITEM_REG__DMA_RAWERR_L
//    <name> RAWERR_L </name>
//    <i> [Bits 31..0] RO (@ 0x400022D0) Raw Status for IntErr Interrupt (protocol error) </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_RAWERR_L >> 0) & 0xFFFFFFFF), ((DMA_RAWERR_L = (DMA_RAWERR_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: DMA_RAWERR_H  ------------------------------
// SVD Line: 3514

unsigned int DMA_RAWERR_H __AT (0x400022E4);



// -------------------------------  Register Item: DMA_RAWERR_H  ----------------------------------
// SVD Line: 3514

//  <item> SFDITEM_REG__DMA_RAWERR_H
//    <name> RAWERR_H </name>
//    <i> [Bits 31..0] RO (@ 0x400022E4) Raw Status for non-secure access secure register error if defined </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_RAWERR_H >> 0) & 0xFFFFFFFF), ((DMA_RAWERR_H = (DMA_RAWERR_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: DMA_STATUSTFR_L  -----------------------------
// SVD Line: 3524

unsigned int DMA_STATUSTFR_L __AT (0x400022EC);



// -----------------------------  Register Item: DMA_STATUSTFR_L  ---------------------------------
// SVD Line: 3524

//  <item> SFDITEM_REG__DMA_STATUSTFR_L
//    <name> STATUSTFR_L </name>
//    <i> [Bits 31..0] RO (@ 0x400022EC) Status for IntTfr Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_STATUSTFR_L >> 0) & 0xFFFFFFFF), ((DMA_STATUSTFR_L = (DMA_STATUSTFR_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: DMA_STATUSTFR_H  -----------------------------
// SVD Line: 3534

unsigned int DMA_STATUSTFR_H __AT (0x400022F0);



// -----------------------------  Register Item: DMA_STATUSTFR_H  ---------------------------------
// SVD Line: 3534

//  <item> SFDITEM_REG__DMA_STATUSTFR_H
//    <name> STATUSTFR_H </name>
//    <i> [Bits 31..0] RO (@ 0x400022F0) Status for Blk Counter Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_STATUSTFR_H >> 0) & 0xFFFFFFFF), ((DMA_STATUSTFR_H = (DMA_STATUSTFR_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: DMA_STATUSBLOCK_L  ----------------------------
// SVD Line: 3544

unsigned int DMA_STATUSBLOCK_L __AT (0x400022F8);



// ----------------------------  Register Item: DMA_STATUSBLOCK_L  --------------------------------
// SVD Line: 3544

//  <item> SFDITEM_REG__DMA_STATUSBLOCK_L
//    <name> STATUSBLOCK_L </name>
//    <i> [Bits 31..0] RO (@ 0x400022F8) Status for IntBlock Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_STATUSBLOCK_L >> 0) & 0xFFFFFFFF), ((DMA_STATUSBLOCK_L = (DMA_STATUSBLOCK_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: DMA_STATUSERR_L  -----------------------------
// SVD Line: 3554

unsigned int DMA_STATUSERR_L __AT (0x40002308);



// -----------------------------  Register Item: DMA_STATUSERR_L  ---------------------------------
// SVD Line: 3554

//  <item> SFDITEM_REG__DMA_STATUSERR_L
//    <name> STATUSERR_L </name>
//    <i> [Bits 31..0] RO (@ 0x40002308) Status for IntErr Interrupt (protocol error) </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_STATUSERR_L >> 0) & 0xFFFFFFFF), ((DMA_STATUSERR_L = (DMA_STATUSERR_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_MASKTFR_L  ------------------------------
// SVD Line: 3564

unsigned int DMA_MASKTFR_L __AT (0x40002310);



// ------------------------------  Register Item: DMA_MASKTFR_L  ----------------------------------
// SVD Line: 3564

//  <item> SFDITEM_REG__DMA_MASKTFR_L
//    <name> MASKTFR_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002310) Mask for IntTfr Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_MASKTFR_L >> 0) & 0xFFFFFFFF), ((DMA_MASKTFR_L = (DMA_MASKTFR_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_MASKTFR_H  ------------------------------
// SVD Line: 3574

unsigned int DMA_MASKTFR_H __AT (0x40002314);



// ------------------------------  Register Item: DMA_MASKTFR_H  ----------------------------------
// SVD Line: 3574

//  <item> SFDITEM_REG__DMA_MASKTFR_H
//    <name> MASKTFR_H </name>
//    <i> [Bits 31..0] RW (@ 0x40002314) Mask for Blk Counter Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_MASKTFR_H >> 0) & 0xFFFFFFFF), ((DMA_MASKTFR_H = (DMA_MASKTFR_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: DMA_MASKBLOCK_L  -----------------------------
// SVD Line: 3584

unsigned int DMA_MASKBLOCK_L __AT (0x40002318);



// -----------------------------  Register Item: DMA_MASKBLOCK_L  ---------------------------------
// SVD Line: 3584

//  <item> SFDITEM_REG__DMA_MASKBLOCK_L
//    <name> MASKBLOCK_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002318) Mask for IntBlock Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_MASKBLOCK_L >> 0) & 0xFFFFFFFF), ((DMA_MASKBLOCK_L = (DMA_MASKBLOCK_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: DMA_MASKBLOCK_H  -----------------------------
// SVD Line: 3594

unsigned int DMA_MASKBLOCK_H __AT (0x4000231C);



// -----------------------------  Register Item: DMA_MASKBLOCK_H  ---------------------------------
// SVD Line: 3594

//  <item> SFDITEM_REG__DMA_MASKBLOCK_H
//    <name> MASKBLOCK_H </name>
//    <i> [Bits 31..0] RW (@ 0x4000231C) Mask for Int_1_2_Block if defined </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_MASKBLOCK_H >> 0) & 0xFFFFFFFF), ((DMA_MASKBLOCK_H = (DMA_MASKBLOCK_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_MASKERR_L  ------------------------------
// SVD Line: 3604

unsigned int DMA_MASKERR_L __AT (0x40002330);



// ------------------------------  Register Item: DMA_MASKERR_L  ----------------------------------
// SVD Line: 3604

//  <item> SFDITEM_REG__DMA_MASKERR_L
//    <name> MASKERR_L </name>
//    <i> [Bits 31..0] RW (@ 0x40002330) Mask for IntErr Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_MASKERR_L >> 0) & 0xFFFFFFFF), ((DMA_MASKERR_L = (DMA_MASKERR_L & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_MASKERR_H  ------------------------------
// SVD Line: 3614

unsigned int DMA_MASKERR_H __AT (0x40002334);



// ------------------------------  Register Item: DMA_MASKERR_H  ----------------------------------
// SVD Line: 3614

//  <item> SFDITEM_REG__DMA_MASKERR_H
//    <name> MASKERR_H </name>
//    <i> [Bits 31..0] RW (@ 0x40002334) Mask for non-secure access secure register error if defined </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_MASKERR_H >> 0) & 0xFFFFFFFF), ((DMA_MASKERR_H = (DMA_MASKERR_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: DMA_STATUSINT_L  -----------------------------
// SVD Line: 3624

unsigned int DMA_STATUSINT_L __AT (0x40002360);



// ------------------------  Field Item: DMA_STATUSINT_L_Block_Counter  ---------------------------
// SVD Line: 3633

//  <item> SFDITEM_FIELD__DMA_STATUSINT_L_Block_Counter
//    <name> Block_Counter </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40002360) Reserved Condition: OR of the StatusTfr_H register contents if DMAC_CHx_SUPPORT_BLK_COUNTER is defined. Otherwise, 0. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_STATUSINT_L ) </loc>
//      <o.6..6> Block_Counter
//    </check>
//  </item>
//  


// --------------------------  Field Item: DMA_STATUSINT_L_Block_1_2  -----------------------------
// SVD Line: 3643

//  <item> SFDITEM_FIELD__DMA_STATUSINT_L_Block_1_2
//    <name> Block_1_2 </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40002360) Reserved Condition: OR of the Status_1_2_Block register contents if DMAC_1_2_BLK_TRANSFER_INT is defined. Otherwise, 0. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_STATUSINT_L ) </loc>
//      <o.5..5> Block_1_2
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_STATUSINT_L_Error  -------------------------------
// SVD Line: 3653

//  <item> SFDITEM_FIELD__DMA_STATUSINT_L_Error
//    <name> Error </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40002360) OR of the contents of StatusErr register. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_STATUSINT_L ) </loc>
//      <o.4..4> Error
//    </check>
//  </item>
//  


// ----------------------------  Field Item: DMA_STATUSINT_L_Block  -------------------------------
// SVD Line: 3661

//  <item> SFDITEM_FIELD__DMA_STATUSINT_L_Block
//    <name> Block </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40002360) OR of the contents of StatusBlock register. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_STATUSINT_L ) </loc>
//      <o.1..1> Block
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DMA_STATUSINT_L_Tfr  --------------------------------
// SVD Line: 3669

//  <item> SFDITEM_FIELD__DMA_STATUSINT_L_Tfr
//    <name> Tfr </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40002360) OR of the contents of StatusTfr_L register. </i>
//    <check> 
//      <loc> ( (unsigned int) DMA_STATUSINT_L ) </loc>
//      <o.0..0> Tfr
//    </check>
//  </item>
//  


// -----------------------------  Register RTree: DMA_STATUSINT_L  --------------------------------
// SVD Line: 3624

//  <rtree> SFDITEM_REG__DMA_STATUSINT_L
//    <name> STATUSINT_L </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40002360) Combined Interrupt Status (Low) Register </i>
//    <loc> ( (unsigned int)((DMA_STATUSINT_L >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__DMA_STATUSINT_L_Block_Counter </item>
//    <item> SFDITEM_FIELD__DMA_STATUSINT_L_Block_1_2 </item>
//    <item> SFDITEM_FIELD__DMA_STATUSINT_L_Error </item>
//    <item> SFDITEM_FIELD__DMA_STATUSINT_L_Block </item>
//    <item> SFDITEM_FIELD__DMA_STATUSINT_L_Tfr </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DMA_STATUSINT_H  -----------------------------
// SVD Line: 3679

unsigned int DMA_STATUSINT_H __AT (0x40002364);



// -----------------------------  Register Item: DMA_STATUSINT_H  ---------------------------------
// SVD Line: 3679

//  <item> SFDITEM_REG__DMA_STATUSINT_H
//    <name> STATUSINT_H </name>
//    <i> [Bits 31..0] RO (@ 0x40002364) Combined Interrupt Status (High) Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_STATUSINT_H >> 0) & 0xFFFFFFFF), ((DMA_STATUSINT_H = (DMA_STATUSINT_H & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: DMA_DMACFGREG  ------------------------------
// SVD Line: 3689

unsigned int DMA_DMACFGREG __AT (0x40002398);



// ------------------------------  Register Item: DMA_DMACFGREG  ----------------------------------
// SVD Line: 3689

//  <item> SFDITEM_REG__DMA_DMACFGREG
//    <name> DMACFGREG </name>
//    <i> [Bits 31..0] RW (@ 0x40002398) DMA Configuration Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((DMA_DMACFGREG >> 0) & 0xFFFFFFFF), ((DMA_DMACFGREG = (DMA_DMACFGREG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: DMA_CHENREG  -------------------------------
// SVD Line: 3699

unsigned int DMA_CHENREG __AT (0x400023A0);



// ----------------------------  Field Item: DMA_CHENREG_CH_EN_WE  --------------------------------
// SVD Line: 3709

//  <item> SFDITEM_FIELD__DMA_CHENREG_CH_EN_WE
//    <name> CH_EN_WE </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x400023A0) Channel enable write enable. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CHENREG >> 8) & 0xFF), ((DMA_CHENREG = (DMA_CHENREG & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: DMA_CHENREG_CH_EN  ---------------------------------
// SVD Line: 3717

//  <item> SFDITEM_FIELD__DMA_CHENREG_CH_EN
//    <name> CH_EN </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x400023A0) Enables/Disables the channel. Setting this bit enables a channel; clearing it disables the channel.  - 0 = Disable the Channel  - 1 = Enable the Channel   The CHENREG_L.CH_EN bit is automatically cleared by hardware after the last AXI transfer of the DMA transfer to the destination has completed. Software can poll this bit to determine when the channel is available for a new DMA transfer. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DMA_CHENREG >> 0) & 0xFF), ((DMA_CHENREG = (DMA_CHENREG & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DMA_CHENREG  ----------------------------------
// SVD Line: 3699

//  <rtree> SFDITEM_REG__DMA_CHENREG
//    <name> CHENREG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x400023A0) DMA low-32bits Channel Enable Register </i>
//    <loc> ( (unsigned int)((DMA_CHENREG >> 0) & 0xFFFFFFFF), ((DMA_CHENREG = (DMA_CHENREG & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DMA_CHENREG_CH_EN_WE </item>
//    <item> SFDITEM_FIELD__DMA_CHENREG_CH_EN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: DMA  --------------------------------------
// SVD Line: 1904

//  <view> DMA
//    <name> DMA </name>
//    <item> SFDITEM_REG__DMA_SAR0 </item>
//    <item> SFDITEM_REG__DMA_CURR_SAR0 </item>
//    <item> SFDITEM_REG__DMA_DAR0 </item>
//    <item> SFDITEM_REG__DMA_CURR_DAR0 </item>
//    <item> SFDITEM_REG__DMA_LLP0_L </item>
//    <item> SFDITEM_REG__DMA_LLP0_H </item>
//    <item> SFDITEM_REG__DMA_CTL0_L </item>
//    <item> SFDITEM_REG__DMA_CTL1_L </item>
//    <item> SFDITEM_REG__DMA_CTL2_L </item>
//    <item> SFDITEM_REG__DMA_CTL3_L </item>
//    <item> SFDITEM_REG__DMA_CTL4_L </item>
//    <item> SFDITEM_REG__DMA_CTL5_L </item>
//    <item> SFDITEM_REG__DMA_CTL6_L </item>
//    <item> SFDITEM_REG__DMA_CTL7_L </item>
//    <item> SFDITEM_REG__DMA_CTL0_H </item>
//    <item> SFDITEM_REG__DMA_CTL1_H </item>
//    <item> SFDITEM_REG__DMA_CTL2_H </item>
//    <item> SFDITEM_REG__DMA_CTL3_H </item>
//    <item> SFDITEM_REG__DMA_CTL4_H </item>
//    <item> SFDITEM_REG__DMA_CTL5_H </item>
//    <item> SFDITEM_REG__DMA_CTL6_H </item>
//    <item> SFDITEM_REG__DMA_CTL7_H </item>
//    <item> SFDITEM_REG__DMA_BLK_COUNTER_REG0 </item>
//    <item> SFDITEM_REG__DMA_REPEAT_PATTERN0 </item>
//    <item> SFDITEM_REG__DMA_CFG0_L </item>
//    <item> SFDITEM_REG__DMA_CFG1_L </item>
//    <item> SFDITEM_REG__DMA_CFG2_L </item>
//    <item> SFDITEM_REG__DMA_CFG3_L </item>
//    <item> SFDITEM_REG__DMA_CFG4_L </item>
//    <item> SFDITEM_REG__DMA_CFG5_L </item>
//    <item> SFDITEM_REG__DMA_CFG6_L </item>
//    <item> SFDITEM_REG__DMA_CFG7_L </item>
//    <item> SFDITEM_REG__DMA_CFG0_H </item>
//    <item> SFDITEM_REG__DMA_CFG1_H </item>
//    <item> SFDITEM_REG__DMA_CFG2_H </item>
//    <item> SFDITEM_REG__DMA_CFG3_H </item>
//    <item> SFDITEM_REG__DMA_CFG4_H </item>
//    <item> SFDITEM_REG__DMA_CFG5_H </item>
//    <item> SFDITEM_REG__DMA_CFG6_H </item>
//    <item> SFDITEM_REG__DMA_CFG7_H </item>
//    <item> SFDITEM_REG__DMA_SGR0_L </item>
//    <item> SFDITEM_REG__DMA_SGR1_L </item>
//    <item> SFDITEM_REG__DMA_SGR2_L </item>
//    <item> SFDITEM_REG__DMA_SGR3_L </item>
//    <item> SFDITEM_REG__DMA_SGR4_L </item>
//    <item> SFDITEM_REG__DMA_SGR5_L </item>
//    <item> SFDITEM_REG__DMA_SGR6_L </item>
//    <item> SFDITEM_REG__DMA_SGR7_L </item>
//    <item> SFDITEM_REG__DMA_SGR0_H </item>
//    <item> SFDITEM_REG__DMA_SGR1_H </item>
//    <item> SFDITEM_REG__DMA_SGR2_H </item>
//    <item> SFDITEM_REG__DMA_SGR3_H </item>
//    <item> SFDITEM_REG__DMA_SGR4_H </item>
//    <item> SFDITEM_REG__DMA_SGR5_H </item>
//    <item> SFDITEM_REG__DMA_SGR6_H </item>
//    <item> SFDITEM_REG__DMA_SGR7_H </item>
//    <item> SFDITEM_REG__DMA_DSR0_L </item>
//    <item> SFDITEM_REG__DMA_DSR0_H </item>
//    <item> SFDITEM_REG__DMA_SAR1 </item>
//    <item> SFDITEM_REG__DMA_CURR_SAR1 </item>
//    <item> SFDITEM_REG__DMA_DAR1 </item>
//    <item> SFDITEM_REG__DMA_CURR_DAR1 </item>
//    <item> SFDITEM_REG__DMA_LLP1_L </item>
//    <item> SFDITEM_REG__DMA_LLP1_H </item>
//    <item> SFDITEM_REG__DMA_BLK_COUNTER_REG1 </item>
//    <item> SFDITEM_REG__DMA_REPEAT_PATTERN1 </item>
//    <item> SFDITEM_REG__DMA_DSR1_L </item>
//    <item> SFDITEM_REG__DMA_DSR1_H </item>
//    <item> SFDITEM_REG__DMA_SAR2 </item>
//    <item> SFDITEM_REG__DMA_CURR_SAR2 </item>
//    <item> SFDITEM_REG__DMA_DAR2 </item>
//    <item> SFDITEM_REG__DMA_CURR_DAR2 </item>
//    <item> SFDITEM_REG__DMA_LLP2_L </item>
//    <item> SFDITEM_REG__DMA_LLP2_H </item>
//    <item> SFDITEM_REG__DMA_BLK_COUNTER_REG2 </item>
//    <item> SFDITEM_REG__DMA_REPEAT_PATTERN2 </item>
//    <item> SFDITEM_REG__DMA_DSR2_L </item>
//    <item> SFDITEM_REG__DMA_DSR2_H </item>
//    <item> SFDITEM_REG__DMA_SAR3 </item>
//    <item> SFDITEM_REG__DMA_CURR_SAR3 </item>
//    <item> SFDITEM_REG__DMA_DAR3 </item>
//    <item> SFDITEM_REG__DMA_CURR_DAR3 </item>
//    <item> SFDITEM_REG__DMA_LLP3_L </item>
//    <item> SFDITEM_REG__DMA_LLP3_H </item>
//    <item> SFDITEM_REG__DMA_BLK_COUNTER_REG3 </item>
//    <item> SFDITEM_REG__DMA_REPEAT_PATTERN3 </item>
//    <item> SFDITEM_REG__DMA_DSR3_L </item>
//    <item> SFDITEM_REG__DMA_DSR3_H </item>
//    <item> SFDITEM_REG__DMA_SAR4 </item>
//    <item> SFDITEM_REG__DMA_CURR_SAR4 </item>
//    <item> SFDITEM_REG__DMA_DAR4 </item>
//    <item> SFDITEM_REG__DMA_CURR_DAR4 </item>
//    <item> SFDITEM_REG__DMA_LLP4_L </item>
//    <item> SFDITEM_REG__DMA_LLP4_H </item>
//    <item> SFDITEM_REG__DMA_BLK_COUNTER_REG4 </item>
//    <item> SFDITEM_REG__DMA_REPEAT_PATTERN4 </item>
//    <item> SFDITEM_REG__DMA_DSR4_L </item>
//    <item> SFDITEM_REG__DMA_DSR4_H </item>
//    <item> SFDITEM_REG__DMA_SAR5 </item>
//    <item> SFDITEM_REG__DMA_CURR_SAR5 </item>
//    <item> SFDITEM_REG__DMA_DAR5 </item>
//    <item> SFDITEM_REG__DMA_CURR_DAR5 </item>
//    <item> SFDITEM_REG__DMA_LLP5_L </item>
//    <item> SFDITEM_REG__DMA_LLP5_H </item>
//    <item> SFDITEM_REG__DMA_BLK_COUNTER_REG5 </item>
//    <item> SFDITEM_REG__DMA_REPEAT_PATTERN5 </item>
//    <item> SFDITEM_REG__DMA_DSR5_L </item>
//    <item> SFDITEM_REG__DMA_DSR5_H </item>
//    <item> SFDITEM_REG__DMA_SAR6 </item>
//    <item> SFDITEM_REG__DMA_CURR_SAR6 </item>
//    <item> SFDITEM_REG__DMA_DAR6 </item>
//    <item> SFDITEM_REG__DMA_CURR_DAR6 </item>
//    <item> SFDITEM_REG__DMA_LLP6_L </item>
//    <item> SFDITEM_REG__DMA_LLP6_H </item>
//    <item> SFDITEM_REG__DMA_BLK_COUNTER_REG6 </item>
//    <item> SFDITEM_REG__DMA_REPEAT_PATTERN6 </item>
//    <item> SFDITEM_REG__DMA_SAR7 </item>
//    <item> SFDITEM_REG__DMA_CURR_SAR7 </item>
//    <item> SFDITEM_REG__DMA_DAR7 </item>
//    <item> SFDITEM_REG__DMA_CURR_DAR7 </item>
//    <item> SFDITEM_REG__DMA_LLP7_L </item>
//    <item> SFDITEM_REG__DMA_LLP7_H </item>
//    <item> SFDITEM_REG__DMA_BLK_COUNTER_REG7 </item>
//    <item> SFDITEM_REG__DMA_REPEAT_PATTERN7 </item>
//    <item> SFDITEM_REG__DMA_DSR7_L </item>
//    <item> SFDITEM_REG__DMA_DSR7_H </item>
//    <item> SFDITEM_REG__DMA_RAWTFR_L </item>
//    <item> SFDITEM_REG__DMA_RAWTFR_H </item>
//    <item> SFDITEM_REG__DMA_RAWBLOCK_L </item>
//    <item> SFDITEM_REG__DMA_RAWBLOCK_H </item>
//    <item> SFDITEM_REG__DMA_RAWERR_L </item>
//    <item> SFDITEM_REG__DMA_RAWERR_H </item>
//    <item> SFDITEM_REG__DMA_STATUSTFR_L </item>
//    <item> SFDITEM_REG__DMA_STATUSTFR_H </item>
//    <item> SFDITEM_REG__DMA_STATUSBLOCK_L </item>
//    <item> SFDITEM_REG__DMA_STATUSERR_L </item>
//    <item> SFDITEM_REG__DMA_MASKTFR_L </item>
//    <item> SFDITEM_REG__DMA_MASKTFR_H </item>
//    <item> SFDITEM_REG__DMA_MASKBLOCK_L </item>
//    <item> SFDITEM_REG__DMA_MASKBLOCK_H </item>
//    <item> SFDITEM_REG__DMA_MASKERR_L </item>
//    <item> SFDITEM_REG__DMA_MASKERR_H </item>
//    <item> SFDITEM_REG__DMA_STATUSINT_L </item>
//    <item> SFDITEM_REG__DMA_STATUSINT_H </item>
//    <item> SFDITEM_REG__DMA_DMACFGREG </item>
//    <item> SFDITEM_REG__DMA_CHENREG </item>
//  </view>
//  


// -------------------------  Register Item Address: USB_CORE_GOTGCTL  ----------------------------
// SVD Line: 3762

unsigned int USB_CORE_GOTGCTL __AT (0x40040000);



// --------------------  Field Item: USB_CORE_GOTGCTL_Testmode_corr_eUSB2  ------------------------
// SVD Line: 3770

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_Testmode_corr_eUSB2
//    <name> Testmode_corr_eUSB2 </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40040000) Correction for eUSB2 PHY during Test mode </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.31..31> Testmode_corr_eUSB2
//    </check>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GOTGCTL_ChirpEn  ------------------------------
// SVD Line: 3777

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_ChirpEn
//    <name> ChirpEn </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40040000) Core asserting chirp_on before sending an actual Chirp K signal on USB. </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.27..27> ChirpEn
//    </check>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GOTGCTL_MultValIdBC  ----------------------------
// SVD Line: 3784

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_MultValIdBC
//    <name> MultValIdBC </name>
//    <r> 
//    <i> [Bits 26..22] RO (@ 0x40040000) Multi Valued ID pin (MultValIdBC) </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GOTGCTL >> 22) & 0x1F) ) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GOTGCTL_CurMod  ------------------------------
// SVD Line: 3791

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_CurMod
//    <name> CurMod </name>
//    <r> 
//    <i> [Bit 21] RO (@ 0x40040000) Current Mode of Operation </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.21..21> CurMod
//    </check>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GOTGCTL_OTGVer  ------------------------------
// SVD Line: 3798

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_OTGVer
//    <name> OTGVer </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40040000) OTG Version </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.20..20> OTGVer
//    </check>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GOTGCTL_BSesVld  ------------------------------
// SVD Line: 3805

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_BSesVld
//    <name> BSesVld </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40040000) B-session Valid </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.19..19> BSesVld
//    </check>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GOTGCTL_ASesVld  ------------------------------
// SVD Line: 3812

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_ASesVld
//    <name> ASesVld </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40040000) A-session Valid </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.18..18> ASesVld
//    </check>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GOTGCTL_DbncTime  -----------------------------
// SVD Line: 3819

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_DbncTime
//    <name> DbncTime </name>
//    <r> 
//    <i> [Bit 17] RO (@ 0x40040000) Debounce Time </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.17..17> DbncTime
//    </check>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GOTGCTL_ConIDSts  -----------------------------
// SVD Line: 3826

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_ConIDSts
//    <name> ConIDSts </name>
//    <r> 
//    <i> [Bit 16] RO (@ 0x40040000) Connector ID Status </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.16..16> ConIDSts
//    </check>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GOTGCTL_DbnceFltrBypass  --------------------------
// SVD Line: 3833

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_DbnceFltrBypass
//    <name> DbnceFltrBypass </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40040000) Debounce Filter Bypass </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.15..15> DbnceFltrBypass
//    </check>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GOTGCTL_EHEn  -------------------------------
// SVD Line: 3840

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_EHEn
//    <name> EHEn </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40040000) Embedded Host Enable (EHEn) </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.12..12> EHEn
//    </check>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GOTGCTL_DevHNPEn  -----------------------------
// SVD Line: 3847

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_DevHNPEn
//    <name> DevHNPEn </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40040000) Device HNP Enabled (DevHNPEn) </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.11..11> DevHNPEn
//    </check>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GOTGCTL_HstSetHNPEn  ----------------------------
// SVD Line: 3854

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_HstSetHNPEn
//    <name> HstSetHNPEn </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40040000) Host Set HNP Enable (HstSetHNPEn) </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.10..10> HstSetHNPEn
//    </check>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GOTGCTL_HNPReq  ------------------------------
// SVD Line: 3861

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_HNPReq
//    <name> HNPReq </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40040000) HNP Request (HNPReq) </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.9..9> HNPReq
//    </check>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GOTGCTL_HstNegScs  -----------------------------
// SVD Line: 3868

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_HstNegScs
//    <name> HstNegScs </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40040000) Host Negotiation Success (HstNegScs) </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.8..8> HstNegScs
//    </check>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GOTGCTL_BvalidOvVal  ----------------------------
// SVD Line: 3875

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_BvalidOvVal
//    <name> BvalidOvVal </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40040000) B-Peripheral Session Valid OverrideValue (BvalidOvVal) </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.7..7> BvalidOvVal
//    </check>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GOTGCTL_BvalidOvEn  ----------------------------
// SVD Line: 3882

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_BvalidOvEn
//    <name> BvalidOvEn </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40040000) B-Peripheral Session Valid Override Enable </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.6..6> BvalidOvEn
//    </check>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GOTGCTL_AvalidOvVal  ----------------------------
// SVD Line: 3889

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_AvalidOvVal
//    <name> AvalidOvVal </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40040000) A-Peripheral Session Valid OverrideValue (AvalidOvVal) </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.5..5> AvalidOvVal
//    </check>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GOTGCTL_AvalidOvEn  ----------------------------
// SVD Line: 3896

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_AvalidOvEn
//    <name> AvalidOvEn </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40040000) A-Peripheral Session Valid Override Enable </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.4..4> AvalidOvEn
//    </check>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GOTGCTL_VbvalidOvVal  ---------------------------
// SVD Line: 3903

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_VbvalidOvVal
//    <name> VbvalidOvVal </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40040000) VBUS Valid OverrideValue (VbvalidOvVal) </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.3..3> VbvalidOvVal
//    </check>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GOTGCTL_VbvalidOvEn  ----------------------------
// SVD Line: 3910

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_VbvalidOvEn
//    <name> VbvalidOvEn </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40040000) VBUS Valid Override Enable </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.2..2> VbvalidOvEn
//    </check>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GOTGCTL_SesReq  ------------------------------
// SVD Line: 3917

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_SesReq
//    <name> SesReq </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40040000) Session Request </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.1..1> SesReq
//    </check>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GOTGCTL_SesReqScs  -----------------------------
// SVD Line: 3924

//  <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_SesReqScs
//    <name> SesReqScs </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40040000) Session Request Success </i>
//    <check> 
//      <loc> ( (unsigned int) USB_CORE_GOTGCTL ) </loc>
//      <o.0..0> SesReqScs
//    </check>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GOTGCTL  --------------------------------
// SVD Line: 3762

//  <rtree> SFDITEM_REG__USB_CORE_GOTGCTL
//    <name> GOTGCTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040000) Control and Status Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GOTGCTL >> 0) & 0xFFFFFFFF), ((USB_CORE_GOTGCTL = (USB_CORE_GOTGCTL & ~(0x88109EFEUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x88109EFE) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_Testmode_corr_eUSB2 </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_ChirpEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_MultValIdBC </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_CurMod </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_OTGVer </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_BSesVld </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_ASesVld </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_DbncTime </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_ConIDSts </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_DbnceFltrBypass </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_EHEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_DevHNPEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_HstSetHNPEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_HNPReq </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_HstNegScs </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_BvalidOvVal </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_BvalidOvEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_AvalidOvVal </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_AvalidOvEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_VbvalidOvVal </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_VbvalidOvEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_SesReq </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGCTL_SesReqScs </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GOTGINT  ----------------------------
// SVD Line: 3935

unsigned int USB_CORE_GOTGINT __AT (0x40040004);



// -----------------------  Field Item: USB_CORE_GOTGINT_MultValIpChng  ---------------------------
// SVD Line: 3943

//  <item> SFDITEM_FIELD__USB_CORE_GOTGINT_MultValIpChng
//    <name> MultValIpChng </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40040004) \nIndicates change in ACA pin value\n0 : NO_ACA_PIN_CHANGE = No change in ACA pin value\n1 : ACA_PIN_CHANGE = Change in ACA pin value </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GOTGINT ) </loc>
//      <o.20..20> MultValIpChng
//        <0=> 0: NO_ACA_PIN_CHANGE = No change in ACA pin value
//        <1=> 1: ACA_PIN_CHANGE = Change in ACA pin value
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GOTGINT_DbnceDone  -----------------------------
// SVD Line: 3962

//  <item> SFDITEM_FIELD__USB_CORE_GOTGINT_DbnceDone
//    <name> DbnceDone </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40040004) \nDebounce Done\n0 : INACTIVE = Waiting for debounce completion\n1 : ACTIVE = Debounce completed </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GOTGINT ) </loc>
//      <o.19..19> DbnceDone
//        <0=> 0: INACTIVE = Waiting for debounce completion
//        <1=> 1: ACTIVE = Debounce completed
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GOTGINT_ADevTOUTChg  ----------------------------
// SVD Line: 3981

//  <item> SFDITEM_FIELD__USB_CORE_GOTGINT_ADevTOUTChg
//    <name> ADevTOUTChg </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40040004) \nA-Device Timeout Change\n0 : INACTIVE = No A-Device Timeout\n1 : ACTIVE = A-Device Timeout </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GOTGINT ) </loc>
//      <o.18..18> ADevTOUTChg
//        <0=> 0: INACTIVE = No A-Device Timeout
//        <1=> 1: ACTIVE = A-Device Timeout
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GOTGINT_HstNegDet  -----------------------------
// SVD Line: 4000

//  <item> SFDITEM_FIELD__USB_CORE_GOTGINT_HstNegDet
//    <name> HstNegDet </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40040004) \nHost Negotiation Detected\n0 : INACTIVE = No Active HNP Request\n1 : ACTIVE = Active HNP Request Detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GOTGINT ) </loc>
//      <o.17..17> HstNegDet
//        <0=> 0: INACTIVE = No Active HNP Request
//        <1=> 1: ACTIVE = Active HNP Request Detected
//    </combo>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GOTGINT_HstNegSucStsChng  -------------------------
// SVD Line: 4019

//  <item> SFDITEM_FIELD__USB_CORE_GOTGINT_HstNegSucStsChng
//    <name> HstNegSucStsChng </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40040004) \nHost Negotiation Success Status Change\n0 : INACTIVE = No Change\n1 : ACTIVE = Host Negotiation Status Change </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GOTGINT ) </loc>
//      <o.9..9> HstNegSucStsChng
//        <0=> 0: INACTIVE = No Change
//        <1=> 1: ACTIVE = Host Negotiation Status Change
//    </combo>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GOTGINT_SesReqSucStsChng  -------------------------
// SVD Line: 4038

//  <item> SFDITEM_FIELD__USB_CORE_GOTGINT_SesReqSucStsChng
//    <name> SesReqSucStsChng </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40040004) \nSession Request Success Status Change\n0 : INACTIVE = No Change in Session Request Status\n1 : ACTIVE = Session Request Status has changed </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GOTGINT ) </loc>
//      <o.8..8> SesReqSucStsChng
//        <0=> 0: INACTIVE = No Change in Session Request Status
//        <1=> 1: ACTIVE = Session Request Status has changed
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GOTGINT_SesEndDet  -----------------------------
// SVD Line: 4057

//  <item> SFDITEM_FIELD__USB_CORE_GOTGINT_SesEndDet
//    <name> SesEndDet </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40040004) \nSession End Detected\n0 : INACTIVE = Session is Active\n1 : ACTIVE = Session End signal is deasserted </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GOTGINT ) </loc>
//      <o.2..2> SesEndDet
//        <0=> 0: INACTIVE = Session is Active
//        <1=> 1: ACTIVE = Session End signal is deasserted
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GOTGINT  --------------------------------
// SVD Line: 3935

//  <rtree> SFDITEM_REG__USB_CORE_GOTGINT
//    <name> GOTGINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040004) Interrupt Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GOTGINT >> 0) & 0xFFFFFFFF), ((USB_CORE_GOTGINT = (USB_CORE_GOTGINT & ~(0x1E0304UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1E0304) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGINT_MultValIpChng </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGINT_DbnceDone </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGINT_ADevTOUTChg </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGINT_HstNegDet </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGINT_HstNegSucStsChng </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGINT_SesReqSucStsChng </item>
//    <item> SFDITEM_FIELD__USB_CORE_GOTGINT_SesEndDet </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GAHBCFG  ----------------------------
// SVD Line: 4080

unsigned int USB_CORE_GAHBCFG __AT (0x40040008);



// ----------------------  Field Item: USB_CORE_GAHBCFG_InvDescEndianess  -------------------------
// SVD Line: 4088

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_InvDescEndianess
//    <name> InvDescEndianess </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40040008) \nInvert Descriptor Endianess\n0 : DISABLE = Descriptor Endianness is same as AHB Master Endianness\n1 : ENABLE = Descriptor Endianness is opposite to AHB Master Endianness </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.24..24> InvDescEndianess
//        <0=> 0: DISABLE = Descriptor Endianness is same as AHB Master Endianness
//        <1=> 1: ENABLE = Descriptor Endianness is opposite to AHB Master Endianness
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GAHBCFG_AHBSingle  -----------------------------
// SVD Line: 4107

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_AHBSingle
//    <name> AHBSingle </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40040008) \nAHB Single Support\n0 : INCRBURST = INCR burst size\n1 : SINGLEBURST = Single burst size </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.23..23> AHBSingle
//        <0=> 0: INCRBURST = INCR burst size
//        <1=> 1: SINGLEBURST = Single burst size
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GAHBCFG_NotiAllDmaWrit  --------------------------
// SVD Line: 4126

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_NotiAllDmaWrit
//    <name> NotiAllDmaWrit </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40040008) \nNotify All DMA Write Transactions\n0 : LASTTRANS = LASTTRANS\n1 : ALLTRANS = ALLTRANS </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.22..22> NotiAllDmaWrit
//        <0=> 0: LASTTRANS = LASTTRANS
//        <1=> 1: ALLTRANS = ALLTRANS
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GAHBCFG_RemMemSupp  ----------------------------
// SVD Line: 4143

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_RemMemSupp
//    <name> RemMemSupp </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40040008) \nRemote Memory Support\n0 : DISABLED = DISABLED\n1 : ENABLED = ENABLED </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.21..21> RemMemSupp
//        <0=> 0: DISABLED = DISABLED
//        <1=> 1: ENABLED = ENABLED
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GAHBCFG_PTxFEmpLvl  ----------------------------
// SVD Line: 4160

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_PTxFEmpLvl
//    <name> PTxFEmpLvl </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40040008) \nPeriodic TxFIFO Empty Level\n0 : HALFEMPTY = HALFEMPTY\n1 : EMPTY = EMPTY </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.8..8> PTxFEmpLvl
//        <0=> 0: HALFEMPTY = HALFEMPTY
//        <1=> 1: EMPTY = EMPTY
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GAHBCFG_NPTxFEmpLvl  ----------------------------
// SVD Line: 4177

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_NPTxFEmpLvl
//    <name> NPTxFEmpLvl </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40040008) \nNon-Periodic TxFIFO Empty Level\n0 : HALFEMPTY = HALFEMPTY\n1 : EMPTY = EMPTY </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.7..7> NPTxFEmpLvl
//        <0=> 0: HALFEMPTY = HALFEMPTY
//        <1=> 1: EMPTY = EMPTY
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GAHBCFG_DMAEn  -------------------------------
// SVD Line: 4194

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_DMAEn
//    <name> DMAEn </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40040008) \nDMA Enable\n0 : SLAVEMODE = SLAVEMODE\n1 : DMAMODE = DMAMODE </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.5..5> DMAEn
//        <0=> 0: SLAVEMODE = SLAVEMODE
//        <1=> 1: DMAMODE = DMAMODE
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GAHBCFG_HBstLen  ------------------------------
// SVD Line: 4210

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_HBstLen
//    <name> HBstLen </name>
//    <rw> 
//    <i> [Bits 4..1] RW (@ 0x40040008) \nBurst Length/Type\n0 : WORD1ORSINGLE = WORD1ORSINGLE\n1 : WORD4ORINCR = WORD4ORINCR\n2 : WORD8 = WORD8\n3 : WORD16ORINCR4 = WORD16ORINCR4\n4 : WORD32 = WORD32\n5 : WORD64ORINCR8 = WORD64ORINCR8\n6 : WORD128 = WORD128\n7 : WORD256ORINCR16 = WORD256ORINCR16\n8 : WORDX = Others reserved\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.4..1> HBstLen
//        <0=> 0: WORD1ORSINGLE = WORD1ORSINGLE
//        <1=> 1: WORD4ORINCR = WORD4ORINCR
//        <2=> 2: WORD8 = WORD8
//        <3=> 3: WORD16ORINCR4 = WORD16ORINCR4
//        <4=> 4: WORD32 = WORD32
//        <5=> 5: WORD64ORINCR8 = WORD64ORINCR8
//        <6=> 6: WORD128 = WORD128
//        <7=> 7: WORD256ORINCR16 = WORD256ORINCR16
//        <8=> 8: WORDX = Others reserved
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GAHBCFG_GlblIntrMsk  ----------------------------
// SVD Line: 4255

//  <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_GlblIntrMsk
//    <name> GlblIntrMsk </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40040008) \nGlobal Interrupt Mask\n0 : MASK = Mask the interrupt assertion to the application\n1 : NOMASK = Unmask the interrupt assertion to the application </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GAHBCFG ) </loc>
//      <o.0..0> GlblIntrMsk
//        <0=> 0: MASK = Mask the interrupt assertion to the application
//        <1=> 1: NOMASK = Unmask the interrupt assertion to the application
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GAHBCFG  --------------------------------
// SVD Line: 4080

//  <rtree> SFDITEM_REG__USB_CORE_GAHBCFG
//    <name> GAHBCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040008) AHB Configuration Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GAHBCFG >> 0) & 0xFFFFFFFF), ((USB_CORE_GAHBCFG = (USB_CORE_GAHBCFG & ~(0x1E001BFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1E001BF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_InvDescEndianess </item>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_AHBSingle </item>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_NotiAllDmaWrit </item>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_RemMemSupp </item>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_PTxFEmpLvl </item>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_NPTxFEmpLvl </item>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_DMAEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_HBstLen </item>
//    <item> SFDITEM_FIELD__USB_CORE_GAHBCFG_GlblIntrMsk </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GUSBCFG  ----------------------------
// SVD Line: 4278

unsigned int USB_CORE_GUSBCFG __AT (0x4004000C);



// ------------------------  Field Item: USB_CORE_GUSBCFG_CorruptTxPkt  ---------------------------
// SVD Line: 4287

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_CorruptTxPkt
//    <name> CorruptTxPkt </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4004000C) \nCorrupt Tx packet\n0 : NODEBUG = Normal Mode\n1 : DEBUG = Debug Mode </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.31..31> CorruptTxPkt
//        <0=> 0: NODEBUG = Normal Mode
//        <1=> 1: DEBUG = Debug Mode
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GUSBCFG_ForceDevMode  ---------------------------
// SVD Line: 4307

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ForceDevMode
//    <name> ForceDevMode </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4004000C) \nForce Device Mode\n0 : DISABLED = Normal Mode\n1 : ENABLED = Force Device Mode </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.30..30> ForceDevMode
//        <0=> 0: DISABLED = Normal Mode
//        <1=> 1: ENABLED = Force Device Mode
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GUSBCFG_ForceHstMode  ---------------------------
// SVD Line: 4327

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ForceHstMode
//    <name> ForceHstMode </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x4004000C) \nForce Host Mode\n0 : DISABLED = Normal Mode\n1 : ENABLED = Force Host Mode </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.29..29> ForceHstMode
//        <0=> 0: DISABLED = Normal Mode
//        <1=> 1: ENABLED = Force Host Mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GUSBCFG_TxEndDelay  ----------------------------
// SVD Line: 4347

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_TxEndDelay
//    <name> TxEndDelay </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4004000C) \nTx End Delay\n0 : DISABLED = Normal Mode\n1 : ENABLED = Tx End delay </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.28..28> TxEndDelay
//        <0=> 0: DISABLED = Normal Mode
//        <1=> 1: ENABLED = Tx End delay
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GUSBCFG_IC_USBTrafCtl  ---------------------------
// SVD Line: 4367

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_IC_USBTrafCtl
//    <name> IC_USBTrafCtl </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x4004000C) \nIC_USB-TrafficPullRemove Control\n0 : DISABLED = Not detached during signaling\n1 : ENABLED = Detached during signaling </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.27..27> IC_USBTrafCtl
//        <0=> 0: DISABLED = Not detached during signaling
//        <1=> 1: ENABLED = Detached during signaling
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GUSBCFG_IC_USBCap  -----------------------------
// SVD Line: 4387

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_IC_USBCap
//    <name> IC_USBCap </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4004000C) \nIC_USB-Capable PHY Interface Selection\n0 : NOTSELECTED = PHY Interface not selected\n1 : SELECTED = PHY Interface selected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.26..26> IC_USBCap
//        <0=> 0: NOTSELECTED = PHY Interface not selected
//        <1=> 1: SELECTED = PHY Interface selected
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GUSBCFG_ULPI  -------------------------------
// SVD Line: 4407

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPI
//    <name> ULPI </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x4004000C) \nULPI Interface Protect Disable\n0 : ENABLED = Interface protect circuit enabled\n1 : DISABLED = Interface protect circuit disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.25..25> ULPI
//        <0=> 0: ENABLED = Interface protect circuit enabled
//        <1=> 1: DISABLED = Interface protect circuit disabled
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GUSBCFG_Indicator  -----------------------------
// SVD Line: 4427

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_Indicator
//    <name> Indicator </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x4004000C) \nIndicator Pass Through\n0 : QUALIFIED = Qualified with Internal VbusValid\n1 : NOTQUALIFIED = Not qualified with Internal VbusValid </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.24..24> Indicator
//        <0=> 0: QUALIFIED = Qualified with Internal VbusValid
//        <1=> 1: NOTQUALIFIED = Not qualified with Internal VbusValid
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GUSBCFG_Complement  ----------------------------
// SVD Line: 4447

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_Complement
//    <name> Complement </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x4004000C) \nIndicator Complement Controls\n0 : NONINVERT = Does not invert signal\n1 : INVERT = Inverts the signal </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.23..23> Complement
//        <0=> 0: NONINVERT = Does not invert signal
//        <1=> 1: INVERT = Inverts the signal
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GUSBCFG_TermSelDLPulse  --------------------------
// SVD Line: 4467

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_TermSelDLPulse
//    <name> TermSelDLPulse </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x4004000C) \nTermSel DLine Pulsing Selection\n0 : TXVALID = Using utmi_txvalid\n1 : TERMSEL = Using utmi_termsel </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.22..22> TermSelDLPulse
//        <0=> 0: TXVALID = Using utmi_txvalid
//        <1=> 1: TERMSEL = Using utmi_termsel
//    </combo>
//  </item>
//  


// --------------------  Field Item: USB_CORE_GUSBCFG_ULPIExtVbusIndicator  -----------------------
// SVD Line: 4487

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIExtVbusIndicator
//    <name> ULPIExtVbusIndicator </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x4004000C) \nULPI External VBUS Indicator\n0 : INTERN = Uses internal VBUS comparator\n1 : EXTERN = Uses external VBUS comparator </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.21..21> ULPIExtVbusIndicator
//        <0=> 0: INTERN = Uses internal VBUS comparator
//        <1=> 1: EXTERN = Uses external VBUS comparator
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GUSBCFG_ULPIExtVbusDrv  --------------------------
// SVD Line: 4507

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIExtVbusDrv
//    <name> ULPIExtVbusDrv </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x4004000C) \nULPI External VBUS Drive\n0 : INTERN = Drives VBUS with internal charge pump\n1 : EXTERN = Drives VBUS using external supply </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.20..20> ULPIExtVbusDrv
//        <0=> 0: INTERN = Drives VBUS with internal charge pump
//        <1=> 1: EXTERN = Drives VBUS using external supply
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GUSBCFG_ULPIClkSusM  ----------------------------
// SVD Line: 4527

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIClkSusM
//    <name> ULPIClkSusM </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x4004000C) \nULPI Clock SuspendM\n0 : PWDCLK = Powers down internal clock during suspend\n1 : NONPWDCLK = Does not power down internal clock </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.19..19> ULPIClkSusM
//        <0=> 0: PWDCLK = Powers down internal clock during suspend
//        <1=> 1: NONPWDCLK = Does not power down internal clock
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GUSBCFG_ULPIAutoRes  ----------------------------
// SVD Line: 4547

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIAutoRes
//    <name> ULPIAutoRes </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4004000C) \nULPI Auto Resume\n0 : DISABLED = No AutoResume feature\n1 : ENABLED = Uses AutoResume feature </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.18..18> ULPIAutoRes
//        <0=> 0: DISABLED = No AutoResume feature
//        <1=> 1: ENABLED = Uses AutoResume feature
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GUSBCFG_ULPIFsLs  -----------------------------
// SVD Line: 4567

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIFsLs
//    <name> ULPIFsLs </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4004000C) \nULPI FS/LS Select\n0 : DISABLED = ULPI interface selected\n1 : ENABLED = ULPI FS/LS serial interface selected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.17..17> ULPIFsLs
//        <0=> 0: DISABLED = ULPI interface selected
//        <1=> 1: ENABLED = ULPI FS/LS serial interface selected
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GUSBCFG_OtgI2CSel  -----------------------------
// SVD Line: 4587

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_OtgI2CSel
//    <name> OtgI2CSel </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4004000C) \nUTMIFS or I2C Interface Select\n0 : DISABLED = UTMI+ USB 1.1 interface for OTG signals\n1 : ENABLED = I2C interface for OTG signals </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.16..16> OtgI2CSel
//        <0=> 0: DISABLED = UTMI+ USB 1.1 interface for OTG signals
//        <1=> 1: ENABLED = I2C interface for OTG signals
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GUSBCFG_PhyLPwrClkSel  ---------------------------
// SVD Line: 4607

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_PhyLPwrClkSel
//    <name> PhyLPwrClkSel </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4004000C) \nPHY Low-Power Clock Select\n0 : INTPLLCLK = 480-MHz Internal PLL clock\n1 : EXTCLK = 48-MHz External Clock </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.15..15> PhyLPwrClkSel
//        <0=> 0: INTPLLCLK = 480-MHz Internal PLL clock
//        <1=> 1: EXTCLK = 48-MHz External Clock
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GUSBCFG_USBTrdTim  -----------------------------
// SVD Line: 4627

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_USBTrdTim
//    <name> USBTrdTim </name>
//    <rw> 
//    <i> [Bits 13..10] RW (@ 0x4004000C) \nUSB Turnaround Time\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : TURNTIME16BIT = 16-bit UTMI+\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : TURNTIME8BIT = 8-bit UTMI+\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.13..10> USBTrdTim
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: TURNTIME16BIT = 16-bit UTMI+
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: TURNTIME8BIT = 8-bit UTMI+
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GUSBCFG_HNPCap  ------------------------------
// SVD Line: 4647

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_HNPCap
//    <name> HNPCap </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4004000C) \nHNP-Capable\n0 : DISABLED = HNP not enabled\n1 : ENABLED = HNP capability enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.9..9> HNPCap
//        <0=> 0: DISABLED = HNP not enabled
//        <1=> 1: ENABLED = HNP capability enabled
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GUSBCFG_SRPCap  ------------------------------
// SVD Line: 4667

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_SRPCap
//    <name> SRPCap </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4004000C) \nSRP-Capable\n0 : DISABLED = SRP capability not enabled\n1 : ENABLED = SRP capability enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.8..8> SRPCap
//        <0=> 0: DISABLED = SRP capability not enabled
//        <1=> 1: ENABLED = SRP capability enabled
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GUSBCFG_DDRSel  ------------------------------
// SVD Line: 4687

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_DDRSel
//    <name> DDRSel </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4004000C) \nULPI DDR Select\n0 : SDR = SDR ULPI Interface\n1 : DDR = DDR ULPI Interface </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.7..7> DDRSel
//        <0=> 0: SDR = SDR ULPI Interface
//        <1=> 1: DDR = DDR ULPI Interface
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GUSBCFG_PHYSel  ------------------------------
// SVD Line: 4707

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_PHYSel
//    <name> PHYSel </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4004000C) \nPHY Selection\n0 : USB20 = Use USB 2.0 high-speed UTMI+ or ULPI PHY\n1 : USB11 = USB 1.1 full-speed serial transceiver selected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.6..6> PHYSel
//        <0=> 0: USB20 = Use USB 2.0 high-speed UTMI+ or ULPI PHY
//        <1=> 1: USB11 = USB 1.1 full-speed serial transceiver selected
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GUSBCFG_FSIntf  ------------------------------
// SVD Line: 4727

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_FSIntf
//    <name> FSIntf </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4004000C) \nFull-Speed Serial Interface Select\n0 : FS6PIN = 6-pin unidirectional interface\n1 : FS3PIN = 3-pin bidirectional interface </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.5..5> FSIntf
//        <0=> 0: FS6PIN = 6-pin unidirectional interface
//        <1=> 1: FS3PIN = 3-pin bidirectional interface
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GUSBCFG_ULPI_UTMI_Sel  ---------------------------
// SVD Line: 4747

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPI_UTMI_Sel
//    <name> ULPI_UTMI_Sel </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4004000C) \nULPI or UTMI+ Select\n0 : UTMI = UTMI+ Interface\n1 : ULPI = ULPI Interface </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.4..4> ULPI_UTMI_Sel
//        <0=> 0: UTMI = UTMI+ Interface
//        <1=> 1: ULPI = ULPI Interface
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GUSBCFG_PHYIf  -------------------------------
// SVD Line: 4767

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_PHYIf
//    <name> PHYIf </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4004000C) \nPHY Interface\n0 : BITS8 = 8bit Mode\n1 : BITS16 = 16bit Mode </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.3..3> PHYIf
//        <0=> 0: BITS8 = 8bit Mode
//        <1=> 1: BITS16 = 16bit Mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GUSBCFG_TOutCal  ------------------------------
// SVD Line: 4787

//  <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_TOutCal
//    <name> TOutCal </name>
//    <rw> 
//    <i> [Bits 2..0] RW (@ 0x4004000C) \nHS/FS Timeout Calibration\n0 : ZERO = Add 0 PHY clocks\n1 : ONE = Add 1 PHY clocks\n2 : TWO = Add 2 PHY clocks\n3 : THREE = Add 3 PHY clocks\n4 : FOUR = Add 4 PHY clocks\n5 : FIVE = Add 5 PHY clocks\n6 : SIX = Add 6 PHY clocks\n7 : SEVEN = Add 7 PHY clocks </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GUSBCFG ) </loc>
//      <o.2..0> TOutCal
//        <0=> 0: ZERO = Add 0 PHY clocks
//        <1=> 1: ONE = Add 1 PHY clocks
//        <2=> 2: TWO = Add 2 PHY clocks
//        <3=> 3: THREE = Add 3 PHY clocks
//        <4=> 4: FOUR = Add 4 PHY clocks
//        <5=> 5: FIVE = Add 5 PHY clocks
//        <6=> 6: SIX = Add 6 PHY clocks
//        <7=> 7: SEVEN = Add 7 PHY clocks
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GUSBCFG  --------------------------------
// SVD Line: 4278

//  <rtree> SFDITEM_REG__USB_CORE_GUSBCFG
//    <name> GUSBCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4004000C) USB Configuration Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GUSBCFG >> 0) & 0xFFFFFFFF), ((USB_CORE_GUSBCFG = (USB_CORE_GUSBCFG & ~(0xFFFFBFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFBFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_CorruptTxPkt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ForceDevMode </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ForceHstMode </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_TxEndDelay </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_IC_USBTrafCtl </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_IC_USBCap </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPI </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_Indicator </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_Complement </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_TermSelDLPulse </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIExtVbusIndicator </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIExtVbusDrv </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIClkSusM </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIAutoRes </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPIFsLs </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_OtgI2CSel </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_PhyLPwrClkSel </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_USBTrdTim </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_HNPCap </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_SRPCap </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_DDRSel </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_PHYSel </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_FSIntf </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_ULPI_UTMI_Sel </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_PHYIf </item>
//    <item> SFDITEM_FIELD__USB_CORE_GUSBCFG_TOutCal </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GRSTCTL  ----------------------------
// SVD Line: 4839

unsigned int USB_CORE_GRSTCTL __AT (0x40040010);



// --------------------------  Field Item: USB_CORE_GRSTCTL_AHBIdle  ------------------------------
// SVD Line: 4848

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_AHBIdle
//    <name> AHBIdle </name>
//    <r> 
//    <i> [Bit 31] RO (@ 0x40040010) \nAHB Master Idle\n0 : INACTIVE = Not Idle\n1 : ACTIVE = AHB Master Idle </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.31..31> AHBIdle
//        <0=> 0: INACTIVE = Not Idle
//        <1=> 1: ACTIVE = AHB Master Idle
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GRSTCTL_DMAReq  ------------------------------
// SVD Line: 4867

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_DMAReq
//    <name> DMAReq </name>
//    <r> 
//    <i> [Bit 30] RO (@ 0x40040010) \nDMA Request Signal\n0 : INACTIVE = No DMA request\n1 : ACTIVE = DMA request in progress </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.30..30> DMAReq
//        <0=> 0: INACTIVE = No DMA request
//        <1=> 1: ACTIVE = DMA request in progress
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GRSTCTL_CSftRstDone  ----------------------------
// SVD Line: 4886

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_CSftRstDone
//    <name> CSftRstDone </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40040010) \nCore Soft Reset Done\n0 : INACTIVE = No reset\n1 : ACTIVE = Core Soft Reset is done </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.29..29> CSftRstDone
//        <0=> 0: INACTIVE = No reset
//        <1=> 1: ACTIVE = Core Soft Reset is done
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GRSTCTL_TxFNum  ------------------------------
// SVD Line: 4905

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_TxFNum
//    <name> TxFNum </name>
//    <rw> 
//    <i> [Bits 10..6] RW (@ 0x40040010) \nTxFIFO Number\n0 : TXF0 = Periodic TxFIFO 0 Flush\n1 : TXF1 = Periodic TxFIFO 1 Flush\n2 : TXF2 = Periodic TxFIFO 2 Flush\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : TXF16 = Flush all Tx FIFOs\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.10..6> TxFNum
//        <0=> 0: TXF0 = Periodic TxFIFO 0 Flush
//        <1=> 1: TXF1 = Periodic TxFIFO 1 Flush
//        <2=> 2: TXF2 = Periodic TxFIFO 2 Flush
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: TXF16 = Flush all Tx FIFOs
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GRSTCTL_TxFFlsh  ------------------------------
// SVD Line: 4935

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_TxFFlsh
//    <name> TxFFlsh </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40040010) \nTxFIFO Flush\n0 : INACTIVE = No Flush\n1 : ACTIVE = Flushes TxFIFOs </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.5..5> TxFFlsh
//        <0=> 0: INACTIVE = No Flush
//        <1=> 1: ACTIVE = Flushes TxFIFOs
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GRSTCTL_RxFFlsh  ------------------------------
// SVD Line: 4954

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_RxFFlsh
//    <name> RxFFlsh </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40040010) \nRxFIFO Flush\n0 : INACTIVE = Does not flush RxFIFO\n1 : ACTIVE = Flushes entire RxFIFO </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.4..4> RxFFlsh
//        <0=> 0: INACTIVE = Does not flush RxFIFO
//        <1=> 1: ACTIVE = Flushes entire RxFIFO
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GRSTCTL_INTknQFlsh  ----------------------------
// SVD Line: 4973

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_INTknQFlsh
//    <name> INTknQFlsh </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40040010) \nIN Token Queue Flush\n0 : INACTIVE = No Flush\n1 : ACTIVE = Flush IN Token Queue </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.3..3> INTknQFlsh
//        <0=> 0: INACTIVE = No Flush
//        <1=> 1: ACTIVE = Flush IN Token Queue
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GRSTCTL_FrmCntrRst  ----------------------------
// SVD Line: 4992

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_FrmCntrRst
//    <name> FrmCntrRst </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40040010) \nHost Frame Counter Reset\n0 : NOTACTIVE = No reset\n1 : ACTIVE = Reset Frame Counter </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.2..2> FrmCntrRst
//        <0=> 0: NOTACTIVE = No reset
//        <1=> 1: ACTIVE = Reset Frame Counter
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GRSTCTL_PIUFSSftRst  ----------------------------
// SVD Line: 5011

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_PIUFSSftRst
//    <name> PIUFSSftRst </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40040010) \nPIU FS Soft Reset\n0 : RESET_INACTIVE = No Reset\n1 : RESET_ACTIVE = PIU FS Soft Reset </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.1..1> PIUFSSftRst
//        <0=> 0: RESET_INACTIVE = No Reset
//        <1=> 1: RESET_ACTIVE = PIU FS Soft Reset
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GRSTCTL_CSftRst  ------------------------------
// SVD Line: 5030

//  <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_CSftRst
//    <name> CSftRst </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40040010) \nCore Soft Reset\n0 : NOTACTIVE = No reset\n1 : ACTIVE = Reset both hclk and phy_clock domains </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRSTCTL ) </loc>
//      <o.0..0> CSftRst
//        <0=> 0: NOTACTIVE = No reset
//        <1=> 1: ACTIVE = Reset both hclk and phy_clock domains
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GRSTCTL  --------------------------------
// SVD Line: 4839

//  <rtree> SFDITEM_REG__USB_CORE_GRSTCTL
//    <name> GRSTCTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040010) Reset Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GRSTCTL >> 0) & 0xFFFFFFFF), ((USB_CORE_GRSTCTL = (USB_CORE_GRSTCTL & ~(0x200007FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x200007FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_AHBIdle </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_DMAReq </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_CSftRstDone </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_TxFNum </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_TxFFlsh </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_RxFFlsh </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_INTknQFlsh </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_FrmCntrRst </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_PIUFSSftRst </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRSTCTL_CSftRst </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GINTSTS  ----------------------------
// SVD Line: 5052

unsigned int USB_CORE_GINTSTS __AT (0x40040014);



// --------------------------  Field Item: USB_CORE_GINTSTS_WkUpInt  ------------------------------
// SVD Line: 5061

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_WkUpInt
//    <name> WkUpInt </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40040014) \nResume/Remote Wakeup Detected Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Resume/Remote Wakeup Detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.31..31> WkUpInt
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Resume/Remote Wakeup Detected
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTSTS_SessReqInt  ----------------------------
// SVD Line: 5080

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_SessReqInt
//    <name> SessReqInt </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40040014) \nSession Request/New Session Detected Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Session Request/New Session Detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.30..30> SessReqInt
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Session Request/New Session Detected
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTSTS_DisconnInt  ----------------------------
// SVD Line: 5099

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_DisconnInt
//    <name> DisconnInt </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40040014) \nDisconnect Detected Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Disconnect Detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.29..29> DisconnInt
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Disconnect Detected
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTSTS_ConIDStsChng  ---------------------------
// SVD Line: 5118

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ConIDStsChng
//    <name> ConIDStsChng </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40040014) \nConnector ID Status Change\n0 : INACTIVE = Not active\n1 : ACTIVE = Connector ID Status Change </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.28..28> ConIDStsChng
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Connector ID Status Change
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_LPM_Int  ------------------------------
// SVD Line: 5137

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_LPM_Int
//    <name> LPM_Int </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40040014) \nLPM Transaction Received Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = LPM Transaction Received </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.27..27> LPM_Int
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = LPM Transaction Received
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_PTxFEmp  ------------------------------
// SVD Line: 5156

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_PTxFEmp
//    <name> PTxFEmp </name>
//    <r> 
//    <i> [Bit 26] RO (@ 0x40040014) \nPeriodic TxFIFO Empty\n0 : INACTIVE = Not active\n1 : ACTIVE = Periodic TxFIFO Empty </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.26..26> PTxFEmp
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Periodic TxFIFO Empty
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_HChInt  ------------------------------
// SVD Line: 5175

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_HChInt
//    <name> HChInt </name>
//    <r> 
//    <i> [Bit 25] RO (@ 0x40040014) \nHost Channels Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Host Channels Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.25..25> HChInt
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Host Channels Interrupt
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_PrtInt  ------------------------------
// SVD Line: 5194

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_PrtInt
//    <name> PrtInt </name>
//    <r> 
//    <i> [Bit 24] RO (@ 0x40040014) \nHost Port Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Host Port Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.24..24> PrtInt
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Host Port Interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_ResetDet  -----------------------------
// SVD Line: 5213

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ResetDet
//    <name> ResetDet </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40040014) \nReset Detected Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Reset Detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.23..23> ResetDet
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Reset Detected
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_FetSusp  ------------------------------
// SVD Line: 5232

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_FetSusp
//    <name> FetSusp </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40040014) \nData Fetch Suspended\n0 : INACTIVE = Not active\n1 : ACTIVE = Data Fetch Suspended </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.22..22> FetSusp
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Data Fetch Suspended
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_incomplP  -----------------------------
// SVD Line: 5251

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_incomplP
//    <name> incomplP </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40040014) \nIncomplete Periodic Transfer\n0 : INACTIVE = Not active\n1 : ACTIVE = Incomplete Periodic Transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.21..21> incomplP
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Incomplete Periodic Transfer
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTSTS_incompISOIN  ----------------------------
// SVD Line: 5270

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_incompISOIN
//    <name> incompISOIN </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40040014) \nIncomplete Isochronous IN Transfer\n0 : INACTIVE = Not active\n1 : ACTIVE = Incomplete Isochronous IN Transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.20..20> incompISOIN
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Incomplete Isochronous IN Transfer
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_OEPInt  ------------------------------
// SVD Line: 5289

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_OEPInt
//    <name> OEPInt </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40040014) \nOUT Endpoints Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = OUT Endpoints Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.19..19> OEPInt
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = OUT Endpoints Interrupt
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_IEPInt  ------------------------------
// SVD Line: 5308

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_IEPInt
//    <name> IEPInt </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40040014) \nIN Endpoints Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = IN Endpoints Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.18..18> IEPInt
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = IN Endpoints Interrupt
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_EPMis  -------------------------------
// SVD Line: 5327

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_EPMis
//    <name> EPMis </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40040014) \nEndpoint Mismatch Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Endpoint Mismatch Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.17..17> EPMis
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Endpoint Mismatch Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTSTS_RstrDoneInt  ----------------------------
// SVD Line: 5346

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_RstrDoneInt
//    <name> RstrDoneInt </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40040014) \nRestore Done Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Restore Done Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.16..16> RstrDoneInt
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Restore Done Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GINTSTS_EOPF  -------------------------------
// SVD Line: 5365

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_EOPF
//    <name> EOPF </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40040014) \nEnd of Periodic Frame Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = End of Periodic Frame Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.15..15> EOPF
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = End of Periodic Frame Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTSTS_ISOOutDrop  ----------------------------
// SVD Line: 5384

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ISOOutDrop
//    <name> ISOOutDrop </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40040014) \nIsochronous OUT Packet Dropped Interrupt\n0 : INACTIVE = Not active\n1 : ACTIVE = Isochronous OUT Packet Dropped </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.14..14> ISOOutDrop
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Isochronous OUT Packet Dropped
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_EnumDone  -----------------------------
// SVD Line: 5403

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_EnumDone
//    <name> EnumDone </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40040014) \nEnumeration Done\n0 : INACTIVE = Not active\n1 : ACTIVE = Enumeration Done </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.13..13> EnumDone
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = Enumeration Done
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_USBRst  ------------------------------
// SVD Line: 5422

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_USBRst
//    <name> USBRst </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40040014) \nUSB Reset\n0 : INACTIVE = Not active\n1 : ACTIVE = USB Reset </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.12..12> USBRst
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = USB Reset
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_USBSusp  ------------------------------
// SVD Line: 5441

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_USBSusp
//    <name> USBSusp </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40040014) \nUSB Suspend\n0 : INACTIVE = Not active\n1 : ACTIVE = USB Suspend </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.11..11> USBSusp
//        <0=> 0: INACTIVE = Not active
//        <1=> 1: ACTIVE = USB Suspend
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_ErlySusp  -----------------------------
// SVD Line: 5460

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ErlySusp
//    <name> ErlySusp </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40040014) \nEarly Suspend\n0 : INACTIVE = No Idle state detected\n1 : ACTIVE = 3ms of Idle state detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.10..10> ErlySusp
//        <0=> 0: INACTIVE = No Idle state detected
//        <1=> 1: ACTIVE = 3ms of Idle state detected
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_I2CINT  ------------------------------
// SVD Line: 5479

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_I2CINT
//    <name> I2CINT </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40040014) \nI2C Interrupt\n0 : INACTIVE = Not Active\n1 : ACTIVE = I2C Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.9..9> I2CINT
//        <0=> 0: INACTIVE = Not Active
//        <1=> 1: ACTIVE = I2C Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTSTS_ULPICKINT  -----------------------------
// SVD Line: 5498

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ULPICKINT
//    <name> ULPICKINT </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40040014) \nULPI Carkit Interrupt\n0 : INACTIVE = Not Active\n1 : ACTIVE = Interrupt is asserted high when ULPI Carkit Interrupt is received </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.8..8> ULPICKINT
//        <0=> 0: INACTIVE = Not Active
//        <1=> 1: ACTIVE = Interrupt is asserted high when ULPI Carkit Interrupt is received
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTSTS_GOUTNakEff  ----------------------------
// SVD Line: 5517

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_GOUTNakEff
//    <name> GOUTNakEff </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40040014) \nGlobal OUT NAK Effective\n0 : INACTIVE = Not Active\n1 : ACTIVE = Global OUT NAK Effective </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.7..7> GOUTNakEff
//        <0=> 0: INACTIVE = Not Active
//        <1=> 1: ACTIVE = Global OUT NAK Effective
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTSTS_GINNakEff  -----------------------------
// SVD Line: 5536

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_GINNakEff
//    <name> GINNakEff </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40040014) \nGlobal IN Non-periodic NAK Effective\n0 : INACTIVE = Global Non-periodic IN NAK not active\n1 : ACTIVE = Set Global Non-periodic IN NAK bit </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.6..6> GINNakEff
//        <0=> 0: INACTIVE = Global Non-periodic IN NAK not active
//        <1=> 1: ACTIVE = Set Global Non-periodic IN NAK bit
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_NPTxFEmp  -----------------------------
// SVD Line: 5555

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_NPTxFEmp
//    <name> NPTxFEmp </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40040014) \nNon-periodic TxFIFO Empty\n0 : INACTIVE = Non-periodic TxFIFO is not empty\n1 : ACTIVE = Non-periodic TxFIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.5..5> NPTxFEmp
//        <0=> 0: INACTIVE = Non-periodic TxFIFO is not empty
//        <1=> 1: ACTIVE = Non-periodic TxFIFO is empty
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_RxFLvl  ------------------------------
// SVD Line: 5574

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_RxFLvl
//    <name> RxFLvl </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40040014) \nRxFIFO Non-Empty\n0 : INACTIVE = RxFIFO is empty\n1 : ACTIVE = RxFIFO is not empty </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.4..4> RxFLvl
//        <0=> 0: INACTIVE = RxFIFO is empty
//        <1=> 1: ACTIVE = RxFIFO is not empty
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GINTSTS_Sof  --------------------------------
// SVD Line: 5593

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_Sof
//    <name> Sof </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40040014) \nStart of (micro)Frame\n0 : INACTIVE = No Start of Frame\n1 : ACTIVE = Start of Frame </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.3..3> Sof
//        <0=> 0: INACTIVE = No Start of Frame
//        <1=> 1: ACTIVE = Start of Frame
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_OTGInt  ------------------------------
// SVD Line: 5612

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_OTGInt
//    <name> OTGInt </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40040014) \nOTG Interrupt\n0 : INACTIVE = No Interrupt\n1 : ACTIVE = OTG Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.2..2> OTGInt
//        <0=> 0: INACTIVE = No Interrupt
//        <1=> 1: ACTIVE = OTG Interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTSTS_ModeMis  ------------------------------
// SVD Line: 5631

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ModeMis
//    <name> ModeMis </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40040014) \nMode Mismatch Interrupt\n0 : INACTIVE = No Mode Mismatch Interrupt\n1 : ACTIVE = Mode Mismatch Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.1..1> ModeMis
//        <0=> 0: INACTIVE = No Mode Mismatch Interrupt
//        <1=> 1: ACTIVE = Mode Mismatch Interrupt
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTSTS_CurMod  ------------------------------
// SVD Line: 5650

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS_CurMod
//    <name> CurMod </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40040014) \nCurrent Mode of Operation\n0 : DEVICE = Device mode\n1 : HOST = Host mode </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS ) </loc>
//      <o.0..0> CurMod
//        <0=> 0: DEVICE = Device mode
//        <1=> 1: HOST = Host mode
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GINTSTS  --------------------------------
// SVD Line: 5052

//  <rtree> SFDITEM_REG__USB_CORE_GINTSTS
//    <name> GINTSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040014) Interrupt Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GINTSTS >> 0) & 0xFFFFFFFF), ((USB_CORE_GINTSTS = (USB_CORE_GINTSTS & ~(0xF8F3FF0AUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF8F3FF0A) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_WkUpInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_SessReqInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_DisconnInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ConIDStsChng </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_LPM_Int </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_PTxFEmp </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_HChInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_PrtInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ResetDet </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_FetSusp </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_incomplP </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_incompISOIN </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_OEPInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_IEPInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_EPMis </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_RstrDoneInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_EOPF </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ISOOutDrop </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_EnumDone </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_USBRst </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_USBSusp </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ErlySusp </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_I2CINT </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ULPICKINT </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_GOUTNakEff </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_GINNakEff </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_NPTxFEmp </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_RxFLvl </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_Sof </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_OTGInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_ModeMis </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS_CurMod </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GINTMSK  ----------------------------
// SVD Line: 5672

unsigned int USB_CORE_GINTMSK __AT (0x40040018);



// -------------------------  Field Item: USB_CORE_GINTMSK_WkUpIntMsk  ----------------------------
// SVD Line: 5681

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_WkUpIntMsk
//    <name> WkUpIntMsk </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40040018) \nResume/Remote Wakeup Detected Interrupt Mask\n0 : MASK = Mask Resume/Remote Wakeup Detected Interrupt\n1 : NOMASK = Unmask Resume/Remote Wakeup Detected Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.31..31> WkUpIntMsk
//        <0=> 0: MASK = Mask Resume/Remote Wakeup Detected Interrupt
//        <1=> 1: NOMASK = Unmask Resume/Remote Wakeup Detected Interrupt
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GINTMSK_SessReqIntMsk  ---------------------------
// SVD Line: 5700

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_SessReqIntMsk
//    <name> SessReqIntMsk </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40040018) \nSession Request/New Session Detected Interrupt Mask\n0 : MASK = Mask Session Request/New Session Detected Interrupt\n1 : NOMASK = Unmask Session Request/New Session Detected Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.30..30> SessReqIntMsk
//        <0=> 0: MASK = Mask Session Request/New Session Detected Interrupt
//        <1=> 1: NOMASK = Unmask Session Request/New Session Detected Interrupt
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GINTMSK_DisconnIntMsk  ---------------------------
// SVD Line: 5719

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_DisconnIntMsk
//    <name> DisconnIntMsk </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40040018) \nDisconnect Detected Interrupt Mask\n0 : MASK = Mask Disconnect Detected Interrupt\n1 : NOMASK = Unmask Disconnect Detected Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.29..29> DisconnIntMsk
//        <0=> 0: MASK = Mask Disconnect Detected Interrupt
//        <1=> 1: NOMASK = Unmask Disconnect Detected Interrupt
//    </combo>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GINTMSK_ConIDStsChngMsk  --------------------------
// SVD Line: 5738

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ConIDStsChngMsk
//    <name> ConIDStsChngMsk </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40040018) \nConnector ID Status Change Mask\n0 : MASK = Mask Connector ID Status Change Interrupt\n1 : NOMASK = Unmask Connector ID Status Change Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.28..28> ConIDStsChngMsk
//        <0=> 0: MASK = Mask Connector ID Status Change Interrupt
//        <1=> 1: NOMASK = Unmask Connector ID Status Change Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_LPM_IntMsk  ----------------------------
// SVD Line: 5757

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_LPM_IntMsk
//    <name> LPM_IntMsk </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40040018) \nLPM Transaction Received Interrupt Mask\n0 : MASK = Mask LPM Transaction Received Interrupt\n1 : NOMASK = Unmask LPM Transaction Received Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.27..27> LPM_IntMsk
//        <0=> 0: MASK = Mask LPM Transaction Received Interrupt
//        <1=> 1: NOMASK = Unmask LPM Transaction Received Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_PTxFEmpMsk  ----------------------------
// SVD Line: 5776

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_PTxFEmpMsk
//    <name> PTxFEmpMsk </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40040018) \nPeriodic TxFIFO Empty Mask, Host only\n0 : MASK = Mask Periodic TxFIFO Empty Interrupt\n1 : NOMASK = Unmask Periodic TxFIFO Empty Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.26..26> PTxFEmpMsk
//        <0=> 0: MASK = Mask Periodic TxFIFO Empty Interrupt
//        <1=> 1: NOMASK = Unmask Periodic TxFIFO Empty Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_HChIntMsk  -----------------------------
// SVD Line: 5795

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_HChIntMsk
//    <name> HChIntMsk </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40040018) \nHost Channels Interrupt Mask, Host only\n0 : MASK = Mask Host Channels Interrupt\n1 : NOMASK = Unmask Host Channels Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.25..25> HChIntMsk
//        <0=> 0: MASK = Mask Host Channels Interrupt
//        <1=> 1: NOMASK = Unmask Host Channels Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_PrtIntMsk  -----------------------------
// SVD Line: 5814

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_PrtIntMsk
//    <name> PrtIntMsk </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40040018) \nHost Port Interrupt Mask, Host only\n0 : MASK = Mask Host Port Interrupt\n1 : NOMASK = Unmask Host Port Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.24..24> PrtIntMsk
//        <0=> 0: MASK = Mask Host Port Interrupt
//        <1=> 1: NOMASK = Unmask Host Port Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTMSK_ResetDetMsk  ----------------------------
// SVD Line: 5833

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ResetDetMsk
//    <name> ResetDetMsk </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40040018) \nReset Detected Interrupt Mask, Device only\n0 : MASK = Mask Reset Detected Interrupt\n1 : NOMASK = Unmask Reset Detected Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.23..23> ResetDetMsk
//        <0=> 0: MASK = Mask Reset Detected Interrupt
//        <1=> 1: NOMASK = Unmask Reset Detected Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_FetSuspMsk  ----------------------------
// SVD Line: 5852

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_FetSuspMsk
//    <name> FetSuspMsk </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40040018) \nData Fetch Suspended Mask, Device only\n0 : MASK = Mask Data Fetch Suspended Interrupt\n1 : NOMASK = Unmask Data Fetch Suspended Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.22..22> FetSuspMsk
//        <0=> 0: MASK = Mask Data Fetch Suspended Interrupt
//        <1=> 1: NOMASK = Unmask Data Fetch Suspended Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTMSK_incomplPMsK  ----------------------------
// SVD Line: 5871

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_incomplPMsK
//    <name> incomplPMsK </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40040018) \nIncomplete Periodic Transfer Mask, Host only\n0 : MASK = Mask Incomplete Periodic Transfer Interrupt\n1 : NOMASK = Unmask Incomplete Periodic Transfer Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.21..21> incomplPMsK
//        <0=> 0: MASK = Mask Incomplete Periodic Transfer Interrupt
//        <1=> 1: NOMASK = Unmask Incomplete Periodic Transfer Interrupt
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GINTMSK_incompISOINMsk  --------------------------
// SVD Line: 5890

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_incompISOINMsk
//    <name> incompISOINMsk </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40040018) \nIncomplete Isochronous IN Transfer Mask, Device only\n0 : MASK = Mask Incomplete Isochronous IN Transfer Interrupt\n1 : NOMASK = Unmask Incomplete Isochronous IN Transfer Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.20..20> incompISOINMsk
//        <0=> 0: MASK = Mask Incomplete Isochronous IN Transfer Interrupt
//        <1=> 1: NOMASK = Unmask Incomplete Isochronous IN Transfer Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_OEPIntMsk  -----------------------------
// SVD Line: 5909

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_OEPIntMsk
//    <name> OEPIntMsk </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40040018) \nOUT Endpoints Interrupt Mask, Device only\n0 : MASK = Mask OUT Endpoints Interrupt\n1 : NOMASK = Unmask OUT Endpoints Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.19..19> OEPIntMsk
//        <0=> 0: MASK = Mask OUT Endpoints Interrupt
//        <1=> 1: NOMASK = Unmask OUT Endpoints Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_IEPIntMsk  -----------------------------
// SVD Line: 5928

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_IEPIntMsk
//    <name> IEPIntMsk </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40040018) \nIN Endpoints Interrupt Mask, Device only\n0 : MASK = Mask IN Endpoints Interrupt\n1 : NOMASK = Unmask IN Endpoints Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.18..18> IEPIntMsk
//        <0=> 0: MASK = Mask IN Endpoints Interrupt
//        <1=> 1: NOMASK = Unmask IN Endpoints Interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTMSK_EPMisMsk  -----------------------------
// SVD Line: 5947

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_EPMisMsk
//    <name> EPMisMsk </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40040018) \nEndpoint Mismatch Interrupt Mask, Device only\n0 : MASK = Mask Endpoint Mismatch Interrupt\n1 : NOMASK = Unmask Endpoint Mismatch Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.17..17> EPMisMsk
//        <0=> 0: MASK = Mask Endpoint Mismatch Interrupt
//        <1=> 1: NOMASK = Unmask Endpoint Mismatch Interrupt
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GINTMSK_RstrDoneIntMsk  --------------------------
// SVD Line: 5966

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_RstrDoneIntMsk
//    <name> RstrDoneIntMsk </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40040018) \nRestore Done Interrupt Mask\n0 : MASK = Mask Restore Done Interrupt\n1 : NOMASK = Unmask Restore Done Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.16..16> RstrDoneIntMsk
//        <0=> 0: MASK = Mask Restore Done Interrupt
//        <1=> 1: NOMASK = Unmask Restore Done Interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GINTMSK_EOPFMsk  ------------------------------
// SVD Line: 5985

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_EOPFMsk
//    <name> EOPFMsk </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40040018) \nEnd of Periodic Frame Interrupt Mask, Device only\n0 : MASK = Mask End of Periodic Frame Interrupt\n1 : NOMASK = Unmask End of Periodic Frame Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.15..15> EOPFMsk
//        <0=> 0: MASK = Mask End of Periodic Frame Interrupt
//        <1=> 1: NOMASK = Unmask End of Periodic Frame Interrupt
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GINTMSK_ISOOutDropMsk  ---------------------------
// SVD Line: 6004

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ISOOutDropMsk
//    <name> ISOOutDropMsk </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40040018) \nIsochronous OUT Packet Dropped Interrupt Mask, Device only\n0 : MASK = Mask Isochronous OUT Packet Dropped Interrupt\n1 : NOMASK = Unmask Isochronous OUT Packet Dropped Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.14..14> ISOOutDropMsk
//        <0=> 0: MASK = Mask Isochronous OUT Packet Dropped Interrupt
//        <1=> 1: NOMASK = Unmask Isochronous OUT Packet Dropped Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTMSK_EnumDoneMsk  ----------------------------
// SVD Line: 6023

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_EnumDoneMsk
//    <name> EnumDoneMsk </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40040018) \nEnumeration Done Mask, Device only\n0 : MASK = Mask Enumeration Done Interrupt\n1 : NOMASK = Unmask Enumeration Done Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.13..13> EnumDoneMsk
//        <0=> 0: MASK = Mask Enumeration Done Interrupt
//        <1=> 1: NOMASK = Unmask Enumeration Done Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_USBRstMsk  -----------------------------
// SVD Line: 6042

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_USBRstMsk
//    <name> USBRstMsk </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40040018) \nUSB Reset Mask, Device only\n0 : MASK = Mask USB Reset Interrupt\n1 : NOMASK = Unmask USB Reset Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.12..12> USBRstMsk
//        <0=> 0: MASK = Mask USB Reset Interrupt
//        <1=> 1: NOMASK = Unmask USB Reset Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_USBSuspMsk  ----------------------------
// SVD Line: 6061

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_USBSuspMsk
//    <name> USBSuspMsk </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40040018) \nUSB Suspend Mask, Device only\n0 : MASK = Mask USB Suspend Interrupt\n1 : NOMASK = Unmask USB Suspend Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.11..11> USBSuspMsk
//        <0=> 0: MASK = Mask USB Suspend Interrupt
//        <1=> 1: NOMASK = Unmask USB Suspend Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTMSK_ErlySuspMsk  ----------------------------
// SVD Line: 6080

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ErlySuspMsk
//    <name> ErlySuspMsk </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40040018) \nEarly Suspend Mask, Device only\n0 : MASK = Mask Early Suspend Interrupt\n1 : NOMASK = Unmask Early Suspend Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.10..10> ErlySuspMsk
//        <0=> 0: MASK = Mask Early Suspend Interrupt
//        <1=> 1: NOMASK = Unmask Early Suspend Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_I2CIntMsk  -----------------------------
// SVD Line: 6099

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_I2CIntMsk
//    <name> I2CIntMsk </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40040018) \nI2C Interrupt Mask\n0 : MASK = Mask I2C Interrupt\n1 : NOMASK = Unmask I2C Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.9..9> I2CIntMsk
//        <0=> 0: MASK = Mask I2C Interrupt
//        <1=> 1: NOMASK = Unmask I2C Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTMSK_ULPICKINTMsk  ---------------------------
// SVD Line: 6118

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ULPICKINTMsk
//    <name> ULPICKINTMsk </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40040018) \nULPI Carkit Interrupt Mask\n0 : MASK = Mask ULPI Carkit Interrupt\n1 : NOMASK = Unmask ULPI Carkit Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.8..8> ULPICKINTMsk
//        <0=> 0: MASK = Mask ULPI Carkit Interrupt
//        <1=> 1: NOMASK = Unmask ULPI Carkit Interrupt
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GINTMSK_GOUTNakEffMsk  ---------------------------
// SVD Line: 6137

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_GOUTNakEffMsk
//    <name> GOUTNakEffMsk </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40040018) \nGlobal OUT NAK Effective Mask, Device only\n0 : MASK = Mask Global OUT NAK Effective Interrupt\n1 : NOMASK = Unmask Global OUT NAK Effective Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.7..7> GOUTNakEffMsk
//        <0=> 0: MASK = Mask Global OUT NAK Effective Interrupt
//        <1=> 1: NOMASK = Unmask Global OUT NAK Effective Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTMSK_GINNakEffMsk  ---------------------------
// SVD Line: 6156

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_GINNakEffMsk
//    <name> GINNakEffMsk </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40040018) \nGlobal Non-periodic IN NAK Effective Mask, Device only\n0 : MASK = Mask Global Non-periodic IN NAK Effective Interrupt\n1 : NOMASK = Unmask Global Non-periodic IN NAK Effective Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.6..6> GINNakEffMsk
//        <0=> 0: MASK = Mask Global Non-periodic IN NAK Effective Interrupt
//        <1=> 1: NOMASK = Unmask Global Non-periodic IN NAK Effective Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GINTMSK_NPTxFEmpMsk  ----------------------------
// SVD Line: 6175

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_NPTxFEmpMsk
//    <name> NPTxFEmpMsk </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40040018) \nNon-periodic TxFIFO Empty Mask\n0 : MASK = Mask Non-periodic TxFIFO Empty Interrupt\n1 : NOMASK = Unmask Non-periodic TxFIFO Empty Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.5..5> NPTxFEmpMsk
//        <0=> 0: MASK = Mask Non-periodic TxFIFO Empty Interrupt
//        <1=> 1: NOMASK = Unmask Non-periodic TxFIFO Empty Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_RxFLvlMsk  -----------------------------
// SVD Line: 6194

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_RxFLvlMsk
//    <name> RxFLvlMsk </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40040018) \nReceive FIFO Non-Empty Mask\n0 : MASK = Mask Receive FIFO Non-Empty Interrupt\n1 : NOMASK = Unmask Receive FIFO Non-Empty Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.4..4> RxFLvlMsk
//        <0=> 0: MASK = Mask Receive FIFO Non-Empty Interrupt
//        <1=> 1: NOMASK = Unmask Receive FIFO Non-Empty Interrupt
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GINTMSK_SofMsk  ------------------------------
// SVD Line: 6213

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_SofMsk
//    <name> SofMsk </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40040018) \nStart of Frame Mask\n0 : MASK = Mask Start of Frame Interrupt\n1 : NOMASK = Unmask Start of Frame Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.3..3> SofMsk
//        <0=> 0: MASK = Mask Start of Frame Interrupt
//        <1=> 1: NOMASK = Unmask Start of Frame Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_OTGIntMsk  -----------------------------
// SVD Line: 6232

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_OTGIntMsk
//    <name> OTGIntMsk </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40040018) \nOTG Interrupt Mask\n0 : MASK = Mask OTG Interrupt\n1 : NOMASK = Unmask OTG Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.2..2> OTGIntMsk
//        <0=> 0: MASK = Mask OTG Interrupt
//        <1=> 1: NOMASK = Unmask OTG Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GINTMSK_ModeMisMsk  ----------------------------
// SVD Line: 6251

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ModeMisMsk
//    <name> ModeMisMsk </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40040018) \nMode Mismatch Interrupt Mask\n0 : MASK = Mask Mode Mismatch Interrupt\n1 : NOMASK = Unmask Mode Mismatch Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK ) </loc>
//      <o.1..1> ModeMisMsk
//        <0=> 0: MASK = Mask Mode Mismatch Interrupt
//        <1=> 1: NOMASK = Unmask Mode Mismatch Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GINTMSK  --------------------------------
// SVD Line: 5672

//  <rtree> SFDITEM_REG__USB_CORE_GINTMSK
//    <name> GINTMSK </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040018) Interrupt Mask Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GINTMSK >> 0) & 0xFFFFFFFF), ((USB_CORE_GINTMSK = (USB_CORE_GINTMSK & ~(0xFFFFFFFEUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFE) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_WkUpIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_SessReqIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_DisconnIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ConIDStsChngMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_LPM_IntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_PTxFEmpMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_HChIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_PrtIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ResetDetMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_FetSuspMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_incomplPMsK </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_incompISOINMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_OEPIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_IEPIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_EPMisMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_RstrDoneIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_EOPFMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ISOOutDropMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_EnumDoneMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_USBRstMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_USBSuspMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ErlySuspMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_I2CIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ULPICKINTMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_GOUTNakEffMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_GINNakEffMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_NPTxFEmpMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_RxFLvlMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_SofMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_OTGIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK_ModeMisMsk </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GRXSTSR  ----------------------------
// SVD Line: 6273

unsigned int USB_CORE_GRXSTSR __AT (0x4004001C);



// -----------------------------  Field Item: USB_CORE_GRXSTSR_FN  --------------------------------
// SVD Line: 6282

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_FN
//    <name> FN </name>
//    <r> 
//    <i> [Bits 24..21] RO (@ 0x4004001C) Frame Number (Device only) </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GRXSTSR >> 21) & 0xF) ) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GRXSTSR_PktSts  ------------------------------
// SVD Line: 6289

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_PktSts
//    <name> PktSts </name>
//    <r> 
//    <i> [Bits 20..17] RO (@ 0x4004001C) \nPacket Status\n0 : Reserved - do not use\n1 : OUTNAK = Global OUT NAK in device mode\n2 : INOUTDPRX = IN/OUT data packet received\n3 : INOUTTRCOM = IN or OUT transfer completed\n4 : DSETUPCOM = SETUP transaction completed\n5 : DTTOG = Data toggle error\n6 : DSETUPRX = SETUP data packet received\n7 : CHHALT = Channel halted\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRXSTSR ) </loc>
//      <o.20..17> PktSts
//        <0=> 0: 
//        <1=> 1: OUTNAK = Global OUT NAK in device mode
//        <2=> 2: INOUTDPRX = IN/OUT data packet received
//        <3=> 3: INOUTTRCOM = IN or OUT transfer completed
//        <4=> 4: DSETUPCOM = SETUP transaction completed
//        <5=> 5: DTTOG = Data toggle error
//        <6=> 6: DSETUPRX = SETUP data packet received
//        <7=> 7: CHHALT = Channel halted
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GRXSTSR_DPID  -------------------------------
// SVD Line: 6333

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_DPID
//    <name> DPID </name>
//    <r> 
//    <i> [Bits 16..15] RO (@ 0x4004001C) \nData PID\n0 : DATA0 = DATA0 packet\n1 : DATA2 = DATA2 packet\n2 : DATA1 = DATA1 packet\n3 : MDATA = MDATA packet </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRXSTSR ) </loc>
//      <o.16..15> DPID
//        <0=> 0: DATA0 = DATA0 packet
//        <1=> 1: DATA2 = DATA2 packet
//        <2=> 2: DATA1 = DATA1 packet
//        <3=> 3: MDATA = MDATA packet
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GRXSTSR_BCnt  -------------------------------
// SVD Line: 6362

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_BCnt
//    <name> BCnt </name>
//    <r> 
//    <i> [Bits 14..4] RO (@ 0x4004001C) Byte Count </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GRXSTSR >> 4) & 0x7FF) ) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GRXSTSR_ChNum  -------------------------------
// SVD Line: 6369

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_ChNum
//    <name> ChNum </name>
//    <r> 
//    <i> [Bits 3..0] RO (@ 0x4004001C) \nChannel Number / Endpoint Number\n0 : CHEP0 = Channel or Endpoint 0\n1 : CHEP1 = Channel or Endpoint 1\n2 : CHEP2 = Channel or Endpoint 2\n3 : CHEP3 = Channel or Endpoint 3\n4 : CHEP4 = Channel or Endpoint 4\n5 : CHEP5 = Channel or Endpoint 5\n6 : CHEP6 = Channel or Endpoint 6\n7 : CHEP7 = Channel or Endpoint 7\n8 : CHEP8 = Channel or Endpoint 8\n9 : CHEP9 = Channel or Endpoint 9\n10 : CHEP10 = Channel or Endpoint 10\n11 : CHEP11 = Channel or Endpoint 11\n12 : CHEP12 = Channel or Endpoint 12\n13 : CHEP13 = Channel or Endpoint 13\n14 : CHEP14 = Channel or Endpoint 14\n15 : CHEP15 = Channel or Endpoint 15 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRXSTSR ) </loc>
//      <o.3..0> ChNum
//        <0=> 0: CHEP0 = Channel or Endpoint 0
//        <1=> 1: CHEP1 = Channel or Endpoint 1
//        <2=> 2: CHEP2 = Channel or Endpoint 2
//        <3=> 3: CHEP3 = Channel or Endpoint 3
//        <4=> 4: CHEP4 = Channel or Endpoint 4
//        <5=> 5: CHEP5 = Channel or Endpoint 5
//        <6=> 6: CHEP6 = Channel or Endpoint 6
//        <7=> 7: CHEP7 = Channel or Endpoint 7
//        <8=> 8: CHEP8 = Channel or Endpoint 8
//        <9=> 9: CHEP9 = Channel or Endpoint 9
//        <10=> 10: CHEP10 = Channel or Endpoint 10
//        <11=> 11: CHEP11 = Channel or Endpoint 11
//        <12=> 12: CHEP12 = Channel or Endpoint 12
//        <13=> 13: CHEP13 = Channel or Endpoint 13
//        <14=> 14: CHEP14 = Channel or Endpoint 14
//        <15=> 15: CHEP15 = Channel or Endpoint 15
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GRXSTSR  --------------------------------
// SVD Line: 6273

//  <rtree> SFDITEM_REG__USB_CORE_GRXSTSR
//    <name> GRXSTSR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4004001C) Receive Status Debug Read Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GRXSTSR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_FN </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_PktSts </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_DPID </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_BCnt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSR_ChNum </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GRXSTSP  ----------------------------
// SVD Line: 6461

unsigned int USB_CORE_GRXSTSP __AT (0x40040020);



// -----------------------------  Field Item: USB_CORE_GRXSTSP_FN  --------------------------------
// SVD Line: 6470

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_FN
//    <name> FN </name>
//    <r> 
//    <i> [Bits 24..21] RO (@ 0x40040020) Frame Number (Device only) </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GRXSTSP >> 21) & 0xF) ) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GRXSTSP_PktSts  ------------------------------
// SVD Line: 6477

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_PktSts
//    <name> PktSts </name>
//    <r> 
//    <i> [Bits 20..17] RO (@ 0x40040020) \nPacket Status\n0 : Reserved - do not use\n1 : OUTNAK = Global OUT NAK in device mode\n2 : INOUTDPRX = IN/OUT data packet received\n3 : INOUTTRCOM = IN or OUT transfer completed\n4 : DSETUPCOM = SETUP transaction completed\n5 : DTTOG = Data toggle error\n6 : DSETUPRX = SETUP data packet received\n7 : CHHALT = Channel halted\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRXSTSP ) </loc>
//      <o.20..17> PktSts
//        <0=> 0: 
//        <1=> 1: OUTNAK = Global OUT NAK in device mode
//        <2=> 2: INOUTDPRX = IN/OUT data packet received
//        <3=> 3: INOUTTRCOM = IN or OUT transfer completed
//        <4=> 4: DSETUPCOM = SETUP transaction completed
//        <5=> 5: DTTOG = Data toggle error
//        <6=> 6: DSETUPRX = SETUP data packet received
//        <7=> 7: CHHALT = Channel halted
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GRXSTSP_DPID  -------------------------------
// SVD Line: 6521

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_DPID
//    <name> DPID </name>
//    <r> 
//    <i> [Bits 16..15] RO (@ 0x40040020) \nData PID\n0 : DATA0 = DATA0 packet\n1 : DATA2 = DATA2 packet\n2 : DATA1 = DATA1 packet\n3 : MDATA = MDATA packet </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRXSTSP ) </loc>
//      <o.16..15> DPID
//        <0=> 0: DATA0 = DATA0 packet
//        <1=> 1: DATA2 = DATA2 packet
//        <2=> 2: DATA1 = DATA1 packet
//        <3=> 3: MDATA = MDATA packet
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GRXSTSP_BCnt  -------------------------------
// SVD Line: 6550

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_BCnt
//    <name> BCnt </name>
//    <r> 
//    <i> [Bits 14..4] RO (@ 0x40040020) Byte Count </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GRXSTSP >> 4) & 0x7FF) ) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GRXSTSP_ChNum  -------------------------------
// SVD Line: 6557

//  <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_ChNum
//    <name> ChNum </name>
//    <r> 
//    <i> [Bits 3..0] RO (@ 0x40040020) \nChannel Number / Endpoint Number\n0 : CHEP0 = Channel or Endpoint 0\n1 : CHEP1 = Channel or Endpoint 1\n2 : CHEP2 = Channel or Endpoint 2\n3 : CHEP3 = Channel or Endpoint 3\n4 : CHEP4 = Channel or Endpoint 4\n5 : CHEP5 = Channel or Endpoint 5\n6 : CHEP6 = Channel or Endpoint 6\n7 : CHEP7 = Channel or Endpoint 7\n8 : CHEP8 = Channel or Endpoint 8\n9 : CHEP9 = Channel or Endpoint 9\n10 : CHEP10 = Channel or Endpoint 10\n11 : CHEP11 = Channel or Endpoint 11\n12 : CHEP12 = Channel or Endpoint 12\n13 : CHEP13 = Channel or Endpoint 13\n14 : CHEP14 = Channel or Endpoint 14\n15 : CHEP15 = Channel or Endpoint 15 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GRXSTSP ) </loc>
//      <o.3..0> ChNum
//        <0=> 0: CHEP0 = Channel or Endpoint 0
//        <1=> 1: CHEP1 = Channel or Endpoint 1
//        <2=> 2: CHEP2 = Channel or Endpoint 2
//        <3=> 3: CHEP3 = Channel or Endpoint 3
//        <4=> 4: CHEP4 = Channel or Endpoint 4
//        <5=> 5: CHEP5 = Channel or Endpoint 5
//        <6=> 6: CHEP6 = Channel or Endpoint 6
//        <7=> 7: CHEP7 = Channel or Endpoint 7
//        <8=> 8: CHEP8 = Channel or Endpoint 8
//        <9=> 9: CHEP9 = Channel or Endpoint 9
//        <10=> 10: CHEP10 = Channel or Endpoint 10
//        <11=> 11: CHEP11 = Channel or Endpoint 11
//        <12=> 12: CHEP12 = Channel or Endpoint 12
//        <13=> 13: CHEP13 = Channel or Endpoint 13
//        <14=> 14: CHEP14 = Channel or Endpoint 14
//        <15=> 15: CHEP15 = Channel or Endpoint 15
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GRXSTSP  --------------------------------
// SVD Line: 6461

//  <rtree> SFDITEM_REG__USB_CORE_GRXSTSP
//    <name> GRXSTSP </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40040020) Receive Status Read/Pop Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GRXSTSP >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_FN </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_PktSts </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_DPID </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_BCnt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GRXSTSP_ChNum </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GRXFSIZ  ----------------------------
// SVD Line: 6649

unsigned int USB_CORE_GRXFSIZ __AT (0x40040024);



// -----------------------------  Register Item: USB_CORE_GRXFSIZ  --------------------------------
// SVD Line: 6649

//  <item> SFDITEM_REG__USB_CORE_GRXFSIZ
//    <name> GRXFSIZ </name>
//    <i> [Bits 31..0] RW (@ 0x40040024) Receive FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_GRXFSIZ >> 0) & 0xFFFFFFFF), ((USB_CORE_GRXFSIZ = (USB_CORE_GRXFSIZ & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_CORE_GNPTXFSIZ  ---------------------------
// SVD Line: 6659

unsigned int USB_CORE_GNPTXFSIZ __AT (0x40040028);



// -------------------------  Field Item: USB_CORE_GNPTXFSIZ_NPTxFDep  ----------------------------
// SVD Line: 6668

//  <item> SFDITEM_FIELD__USB_CORE_GNPTXFSIZ_NPTxFDep
//    <name> NPTxFDep </name>
//    <rw> 
//    <i> [Bits 26..16] RW (@ 0x40040028) Non-periodic TxFIFO Depth </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GNPTXFSIZ >> 16) & 0x7FF), ((USB_CORE_GNPTXFSIZ = (USB_CORE_GNPTXFSIZ & ~(0x7FFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0x7FF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GNPTXFSIZ_NPTxFStAddr  ---------------------------
// SVD Line: 6675

//  <item> SFDITEM_FIELD__USB_CORE_GNPTXFSIZ_NPTxFStAddr
//    <name> NPTxFStAddr </name>
//    <rw> 
//    <i> [Bits 10..0] RW (@ 0x40040028) Non-periodic Transmit RAM Start Address </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GNPTXFSIZ >> 0) & 0x7FF), ((USB_CORE_GNPTXFSIZ = (USB_CORE_GNPTXFSIZ & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: USB_CORE_GNPTXFSIZ  -------------------------------
// SVD Line: 6659

//  <rtree> SFDITEM_REG__USB_CORE_GNPTXFSIZ
//    <name> GNPTXFSIZ </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040028) Non-periodic Transmit FIFO Size Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GNPTXFSIZ >> 0) & 0xFFFFFFFF), ((USB_CORE_GNPTXFSIZ = (USB_CORE_GNPTXFSIZ & ~(0x7FF07FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF07FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GNPTXFSIZ_NPTxFDep </item>
//    <item> SFDITEM_FIELD__USB_CORE_GNPTXFSIZ_NPTxFStAddr </item>
//  </rtree>
//  


// ------------------------  Register Item Address: USB_CORE_GNPTXSTS  ----------------------------
// SVD Line: 6685

unsigned int USB_CORE_GNPTXSTS __AT (0x4004002C);



// -------------------------  Field Item: USB_CORE_GNPTXSTS_NPTxQTop  -----------------------------
// SVD Line: 6694

//  <item> SFDITEM_FIELD__USB_CORE_GNPTXSTS_NPTxQTop
//    <name> NPTxQTop </name>
//    <r> 
//    <i> [Bits 30..24] RO (@ 0x4004002C) Top of the Non-periodic Transmit Request Queue </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GNPTXSTS >> 24) & 0x7F) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GNPTXSTS_NPTxQSpcAvail  --------------------------
// SVD Line: 6701

//  <item> SFDITEM_FIELD__USB_CORE_GNPTXSTS_NPTxQSpcAvail
//    <name> NPTxQSpcAvail </name>
//    <r> 
//    <i> [Bits 23..16] RO (@ 0x4004002C) Non-periodic Transmit Request Queue Space Available </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GNPTXSTS >> 16) & 0xFF) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GNPTXSTS_NPTxFSpcAvail  --------------------------
// SVD Line: 6755

//  <item> SFDITEM_FIELD__USB_CORE_GNPTXSTS_NPTxFSpcAvail
//    <name> NPTxFSpcAvail </name>
//    <r> 
//    <i> [Bits 15..0] RO (@ 0x4004002C) Non-periodic TxFIFO Space Available </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GNPTXSTS >> 0) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GNPTXSTS  -------------------------------
// SVD Line: 6685

//  <rtree> SFDITEM_REG__USB_CORE_GNPTXSTS
//    <name> GNPTXSTS </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4004002C) Non-periodic Transmit FIFO/Queue Status Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GNPTXSTS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GNPTXSTS_NPTxQTop </item>
//    <item> SFDITEM_FIELD__USB_CORE_GNPTXSTS_NPTxQSpcAvail </item>
//    <item> SFDITEM_FIELD__USB_CORE_GNPTXSTS_NPTxFSpcAvail </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GI2CCTL  ----------------------------
// SVD Line: 6766

unsigned int USB_CORE_GI2CCTL __AT (0x40040030);



// -----------------------------  Register Item: USB_CORE_GI2CCTL  --------------------------------
// SVD Line: 6766

//  <item> SFDITEM_REG__USB_CORE_GI2CCTL
//    <name> GI2CCTL </name>
//    <i> [Bits 31..0] RW (@ 0x40040030) I2C Access Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_GI2CCTL >> 0) & 0xFFFFFFFF), ((USB_CORE_GI2CCTL = (USB_CORE_GI2CCTL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_CORE_GPVNDCTL  ----------------------------
// SVD Line: 6776

unsigned int USB_CORE_GPVNDCTL __AT (0x40040034);



// ------------------------  Field Item: USB_CORE_GPVNDCTL_DisUlpiDrvr  ---------------------------
// SVD Line: 6785

//  <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_DisUlpiDrvr
//    <name> DisUlpiDrvr </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40040034) \nDisable ULPI Drivers\n0 : ENABLED = Enable ULPI output signals\n1 : DISABLED = Disable ULPI output signals </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPVNDCTL ) </loc>
//      <o.31..31> DisUlpiDrvr
//        <0=> 0: ENABLED = Enable ULPI output signals
//        <1=> 1: DISABLED = Disable ULPI output signals
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPVNDCTL_VStsDone  -----------------------------
// SVD Line: 6804

//  <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_VStsDone
//    <name> VStsDone </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40040034) \nVStatus Done\n0 : INACTIVE = VStatus Done inactive\n1 : ACTIVE = VStatus Done active </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPVNDCTL ) </loc>
//      <o.27..27> VStsDone
//        <0=> 0: INACTIVE = VStatus Done inactive
//        <1=> 1: ACTIVE = VStatus Done active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPVNDCTL_VStsBsy  -----------------------------
// SVD Line: 6823

//  <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_VStsBsy
//    <name> VStsBsy </name>
//    <r> 
//    <i> [Bit 26] RO (@ 0x40040034) \nVStatus Busy\n0 : INACTIVE = VStatus Busy inactive\n1 : ACTIVE = VStatus Busy active </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPVNDCTL ) </loc>
//      <o.26..26> VStsBsy
//        <0=> 0: INACTIVE = VStatus Busy inactive
//        <1=> 1: ACTIVE = VStatus Busy active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPVNDCTL_NewRegReq  ----------------------------
// SVD Line: 6842

//  <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_NewRegReq
//    <name> NewRegReq </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40040034) \nNew Register Request\n0 : INACTIVE = New Register Request not active\n1 : ACTIVE = New Register Request active </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPVNDCTL ) </loc>
//      <o.25..25> NewRegReq
//        <0=> 0: INACTIVE = New Register Request not active
//        <1=> 1: ACTIVE = New Register Request active
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GPVNDCTL_RegWr  ------------------------------
// SVD Line: 6861

//  <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_RegWr
//    <name> RegWr </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40040034) \nRegister Write\n0 : READ = Register Read\n1 : WRITE = Register Write </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPVNDCTL ) </loc>
//      <o.22..22> RegWr
//        <0=> 0: READ = Register Read
//        <1=> 1: WRITE = Register Write
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPVNDCTL_RegAddr  -----------------------------
// SVD Line: 6880

//  <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_RegAddr
//    <name> RegAddr </name>
//    <rw> 
//    <i> [Bits 21..16] RW (@ 0x40040034) Register Address </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GPVNDCTL >> 16) & 0x3F), ((USB_CORE_GPVNDCTL = (USB_CORE_GPVNDCTL & ~(0x3FUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GPVNDCTL_VCtrl  ------------------------------
// SVD Line: 6887

//  <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_VCtrl
//    <name> VCtrl </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40040034) UTMI+ Vendor Control Register Address </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GPVNDCTL >> 8) & 0xFF), ((USB_CORE_GPVNDCTL = (USB_CORE_GPVNDCTL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPVNDCTL_RegData  -----------------------------
// SVD Line: 6894

//  <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_RegData
//    <name> RegData </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40040034) Register Data </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GPVNDCTL >> 0) & 0xFF), ((USB_CORE_GPVNDCTL = (USB_CORE_GPVNDCTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GPVNDCTL  -------------------------------
// SVD Line: 6776

//  <rtree> SFDITEM_REG__USB_CORE_GPVNDCTL
//    <name> GPVNDCTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040034) PHY Vendor Control Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GPVNDCTL >> 0) & 0xFFFFFFFF), ((USB_CORE_GPVNDCTL = (USB_CORE_GPVNDCTL & ~(0x8A7FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x8A7FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_DisUlpiDrvr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_VStsDone </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_VStsBsy </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_NewRegReq </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_RegWr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_RegAddr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_VCtrl </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPVNDCTL_RegData </item>
//  </rtree>
//  


// --------------------------  Register Item Address: USB_CORE_GGPIO  -----------------------------
// SVD Line: 6904

unsigned int USB_CORE_GGPIO __AT (0x40040038);



// ------------------------------  Register Item: USB_CORE_GGPIO  ---------------------------------
// SVD Line: 6904

//  <item> SFDITEM_REG__USB_CORE_GGPIO
//    <name> GGPIO </name>
//    <i> [Bits 31..0] RW (@ 0x40040038) General Purpose Input/Output Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_GGPIO >> 0) & 0xFFFFFFFF), ((USB_CORE_GGPIO = (USB_CORE_GGPIO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: USB_CORE_GUID  ------------------------------
// SVD Line: 6914

unsigned int USB_CORE_GUID __AT (0x4004003C);



// ------------------------------  Register Item: USB_CORE_GUID  ----------------------------------
// SVD Line: 6914

//  <item> SFDITEM_REG__USB_CORE_GUID
//    <name> GUID </name>
//    <i> [Bits 31..0] RW (@ 0x4004003C) User ID Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_GUID >> 0) & 0xFFFFFFFF), ((USB_CORE_GUID = (USB_CORE_GUID & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_CORE_GSNPSID  ----------------------------
// SVD Line: 6924

unsigned int USB_CORE_GSNPSID __AT (0x40040040);



// -----------------------------  Register Item: USB_CORE_GSNPSID  --------------------------------
// SVD Line: 6924

//  <item> SFDITEM_REG__USB_CORE_GSNPSID
//    <name> GSNPSID </name>
//    <i> [Bits 31..0] RO (@ 0x40040040) Synopsys ID Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_GSNPSID >> 0) & 0xFFFFFFFF), ((USB_CORE_GSNPSID = (USB_CORE_GSNPSID & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_CORE_GHWCFG1  ----------------------------
// SVD Line: 6934

unsigned int USB_CORE_GHWCFG1 __AT (0x40040044);



// -----------------------------  Register Item: USB_CORE_GHWCFG1  --------------------------------
// SVD Line: 6934

//  <item> SFDITEM_REG__USB_CORE_GHWCFG1
//    <name> GHWCFG1 </name>
//    <i> [Bits 31..0] RO (@ 0x40040044) User Hardware Configuration 1 Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_GHWCFG1 >> 0) & 0xFFFFFFFF), ((USB_CORE_GHWCFG1 = (USB_CORE_GHWCFG1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_CORE_GHWCFG2  ----------------------------
// SVD Line: 6944

unsigned int USB_CORE_GHWCFG2 __AT (0x40040048);



// ---------------------  Field Item: USB_CORE_GHWCFG2_OTG_ENABLE_IC_USB  -------------------------
// SVD Line: 6952

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_OTG_ENABLE_IC_USB
//    <name> OTG_ENABLE_IC_USB </name>
//    <r> 
//    <i> [Bit 31] RO (@ 0x40040048) \nIC_USB mode specified for mode of operation\n0 : DISABLE = Disabled the IC_USB Full-Speed Serial Transceiver interface\n1 : ENABLE = Enabled the IC_USB Full-Speed Serial Transceiver interface </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.31..31> OTG_ENABLE_IC_USB
//        <0=> 0: DISABLE = Disabled the IC_USB Full-Speed Serial Transceiver interface
//        <1=> 1: ENABLE = Enabled the IC_USB Full-Speed Serial Transceiver interface
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG2_TknQDepth  -----------------------------
// SVD Line: 6970

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_TknQDepth
//    <name> TknQDepth </name>
//    <r> 
//    <i> [Bits 30..26] RO (@ 0x40040048) Device Mode IN Token Sequence Learning Queue Depth </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GHWCFG2 >> 26) & 0x1F) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG2_PTxQDepth  -----------------------------
// SVD Line: 6976

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_PTxQDepth
//    <name> PTxQDepth </name>
//    <r> 
//    <i> [Bits 25..24] RO (@ 0x40040048) \nHost Mode Periodic Request Queue Depth\n0 : QUE2 = Queue Depth 2\n1 : QUE4 = Queue Depth 4\n2 : QUE8 = Queue Depth 8\n3 : QUE16 = Queue Depth 16 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.25..24> PTxQDepth
//        <0=> 0: QUE2 = Queue Depth 2
//        <1=> 1: QUE4 = Queue Depth 4
//        <2=> 2: QUE8 = Queue Depth 8
//        <3=> 3: QUE16 = Queue Depth 16
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG2_NPTxQDepth  ----------------------------
// SVD Line: 7004

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_NPTxQDepth
//    <name> NPTxQDepth </name>
//    <r> 
//    <i> [Bits 23..22] RO (@ 0x40040048) \nNon-periodic Request Queue Depth\n0 : TWO = Queue size 2\n1 : FOUR = Queue size 4\n2 : EIGHT = Queue size 8\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.23..22> NPTxQDepth
//        <0=> 0: TWO = Queue size 2
//        <1=> 1: FOUR = Queue size 4
//        <2=> 2: EIGHT = Queue size 8
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GHWCFG2_MultiProcIntrpt  --------------------------
// SVD Line: 7027

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_MultiProcIntrpt
//    <name> MultiProcIntrpt </name>
//    <r> 
//    <i> [Bit 20] RO (@ 0x40040048) \nMulti Processor Interrupt Enabled\n0 : DISABLED = No Multi Processor Interrupt Enabled\n1 : ENABLED = Multi Processor Interrupt Enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.20..20> MultiProcIntrpt
//        <0=> 0: DISABLED = No Multi Processor Interrupt Enabled
//        <1=> 1: ENABLED = Multi Processor Interrupt Enabled
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GHWCFG2_DynFifoSizing  ---------------------------
// SVD Line: 7045

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_DynFifoSizing
//    <name> DynFifoSizing </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40040048) \nDynamic FIFO Sizing Enabled\n0 : DISABLED = Dynamic FIFO Sizing Disabled\n1 : ENABLED = Dynamic FIFO Sizing Enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.19..19> DynFifoSizing
//        <0=> 0: DISABLED = Dynamic FIFO Sizing Disabled
//        <1=> 1: ENABLED = Dynamic FIFO Sizing Enabled
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG2_PerioSupport  ---------------------------
// SVD Line: 7063

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_PerioSupport
//    <name> PerioSupport </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40040048) \nPeriodic OUT Channels Supported in Host Mode\n0 : DISABLED = Periodic OUT Channels is not supported in Host Mode\n1 : ENABLED = Periodic OUT Channels Supported in Host Mode Supported </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.18..18> PerioSupport
//        <0=> 0: DISABLED = Periodic OUT Channels is not supported in Host Mode
//        <1=> 1: ENABLED = Periodic OUT Channels Supported in Host Mode Supported
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG2_NumHstChnl  ----------------------------
// SVD Line: 7081

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_NumHstChnl
//    <name> NumHstChnl </name>
//    <r> 
//    <i> [Bits 17..14] RO (@ 0x40040048) \nNumber of Host Channels\n0 : HOSTCH0 = Host Channel 1\n1 : HOSTCH1 = Host Channel 2\n2 : HOSTCH2 = Host Channel 3\n3 : HOSTCH3 = Host Channel 4\n4 : HOSTCH4 = Host Channel 5\n5 : HOSTCH5 = Host Channel 6\n6 : HOSTCH6 = Host Channel 7\n7 : HOSTCH7 = Host Channel 8\n8 : HOSTCH8 = Host Channel 9\n9 : HOSTCH9 = Host Channel 10\n10 : HOSTCH10 = Host Channel 11\n11 : HOSTCH11 = Host Channel 12\n12 : HOSTCH12 = Host Channel 13\n13 : HOSTCH13 = Host Channel 14\n14 : HOSTCH14 = Host Channel 15\n15 : HOSTCH15 = Host Channel 16 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.17..14> NumHstChnl
//        <0=> 0: HOSTCH0 = Host Channel 1
//        <1=> 1: HOSTCH1 = Host Channel 2
//        <2=> 2: HOSTCH2 = Host Channel 3
//        <3=> 3: HOSTCH3 = Host Channel 4
//        <4=> 4: HOSTCH4 = Host Channel 5
//        <5=> 5: HOSTCH5 = Host Channel 6
//        <6=> 6: HOSTCH6 = Host Channel 7
//        <7=> 7: HOSTCH7 = Host Channel 8
//        <8=> 8: HOSTCH8 = Host Channel 9
//        <9=> 9: HOSTCH9 = Host Channel 10
//        <10=> 10: HOSTCH10 = Host Channel 11
//        <11=> 11: HOSTCH11 = Host Channel 12
//        <12=> 12: HOSTCH12 = Host Channel 13
//        <13=> 13: HOSTCH13 = Host Channel 14
//        <14=> 14: HOSTCH14 = Host Channel 15
//        <15=> 15: HOSTCH15 = Host Channel 16
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG2_NumDevEps  -----------------------------
// SVD Line: 7169

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_NumDevEps
//    <name> NumDevEps </name>
//    <r> 
//    <i> [Bits 13..10] RO (@ 0x40040048) \nNumber of Device Endpoints\n0 : ENDPT0 = End point 0\n1 : ENDPT1 = End point 1\n2 : ENDPT2 = End point 2\n3 : ENDPT3 = End point 3\n4 : ENDPT4 = End point 4\n5 : ENDPT5 = End point 5\n6 : ENDPT6 = End point 6\n7 : ENDPT7 = End point 7\n8 : ENDPT8 = End point 8\n9 : ENDPT9 = End point 9\n10 : ENDPT10 = End point 10\n11 : ENDPT11 = End point 11\n12 : ENDPT12 = End point 12\n13 : ENDPT13 = End point 13\n14 : ENDPT14 = End point 14\n15 : ENDPT15 = End point 15 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.13..10> NumDevEps
//        <0=> 0: ENDPT0 = End point 0
//        <1=> 1: ENDPT1 = End point 1
//        <2=> 2: ENDPT2 = End point 2
//        <3=> 3: ENDPT3 = End point 3
//        <4=> 4: ENDPT4 = End point 4
//        <5=> 5: ENDPT5 = End point 5
//        <6=> 6: ENDPT6 = End point 6
//        <7=> 7: ENDPT7 = End point 7
//        <8=> 8: ENDPT8 = End point 8
//        <9=> 9: ENDPT9 = End point 9
//        <10=> 10: ENDPT10 = End point 10
//        <11=> 11: ENDPT11 = End point 11
//        <12=> 12: ENDPT12 = End point 12
//        <13=> 13: ENDPT13 = End point 13
//        <14=> 14: ENDPT14 = End point 14
//        <15=> 15: ENDPT15 = End point 15
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG2_FSPhyType  -----------------------------
// SVD Line: 7257

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_FSPhyType
//    <name> FSPhyType </name>
//    <r> 
//    <i> [Bits 9..8] RO (@ 0x40040048) \nFull-Speed PHY Interface Type\n0 : NO_FS = Full-speed interface not supported\n1 : FS = Dedicated full-speed interface is supported\n2 : FSPLUSUTMI = FS pins shared with UTMI+ pins is supported\n3 : FSPLUSULPI = FS pins shared with ULPI pins is supported </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.9..8> FSPhyType
//        <0=> 0: NO_FS = Full-speed interface not supported
//        <1=> 1: FS = Dedicated full-speed interface is supported
//        <2=> 2: FSPLUSUTMI = FS pins shared with UTMI+ pins is supported
//        <3=> 3: FSPLUSULPI = FS pins shared with ULPI pins is supported
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG2_HSPhyType  -----------------------------
// SVD Line: 7285

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_HSPhyType
//    <name> HSPhyType </name>
//    <r> 
//    <i> [Bits 7..6] RO (@ 0x40040048) \nHigh-Speed PHY Interface Type\n0 : NOHS = High-Speed interface not supported\n1 : UTMIPLUS = High Speed Interface UTMI+ is supported\n2 : ULPI = High Speed Interface ULPI is supported\n3 : UTMIPUSULPI = High Speed Interfaces UTMI+ and ULPI is supported </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.7..6> HSPhyType
//        <0=> 0: NOHS = High-Speed interface not supported
//        <1=> 1: UTMIPLUS = High Speed Interface UTMI+ is supported
//        <2=> 2: ULPI = High Speed Interface ULPI is supported
//        <3=> 3: UTMIPUSULPI = High Speed Interfaces UTMI+ and ULPI is supported
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG2_SingPnt  ------------------------------
// SVD Line: 7313

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_SingPnt
//    <name> SingPnt </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40040048) \nPoint-to-Point\n0 : MULTIPOINT = Multi-point application (hub and split support)\n1 : SINGLEPOINT = Single-point application (no hub and split support) </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.5..5> SingPnt
//        <0=> 0: MULTIPOINT = Multi-point application (hub and split support)
//        <1=> 1: SINGLEPOINT = Single-point application (no hub and split support)
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG2_OtgArch  ------------------------------
// SVD Line: 7331

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_OtgArch
//    <name> OtgArch </name>
//    <r> 
//    <i> [Bits 4..3] RO (@ 0x40040048) \nArchitecture\n0 : SLAVEMODE = Slave Mode\n1 : EXTERNALDMA = External DMA Mode\n2 : INTERNALDMA = Internal DMA Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.4..3> OtgArch
//        <0=> 0: SLAVEMODE = Slave Mode
//        <1=> 1: EXTERNALDMA = External DMA Mode
//        <2=> 2: INTERNALDMA = Internal DMA Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG2_OtgMode  ------------------------------
// SVD Line: 7354

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_OtgMode
//    <name> OtgMode </name>
//    <r> 
//    <i> [Bits 2..0] RO (@ 0x40040048) \nMode of Operation\n0 : HNPSRP = HNP- and SRP-Capable OTG (Host and Device)\n1 : SRPOTG = SRP-Capable OTG (Host and Device)\n2 : NHNPNSRP = Non-HNP and Non-SRP Capable OTG (Host and Device)\n3 : SRPCAPD = SRP-Capable Device\n4 : NONOTGD = Non-OTG Device\n5 : SRPCAPH = SRP-Capable Host\n6 : NONOTGH = Non-OTG Host\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG2 ) </loc>
//      <o.2..0> OtgMode
//        <0=> 0: HNPSRP = HNP- and SRP-Capable OTG (Host and Device)
//        <1=> 1: SRPOTG = SRP-Capable OTG (Host and Device)
//        <2=> 2: NHNPNSRP = Non-HNP and Non-SRP Capable OTG (Host and Device)
//        <3=> 3: SRPCAPD = SRP-Capable Device
//        <4=> 4: NONOTGD = Non-OTG Device
//        <5=> 5: SRPCAPH = SRP-Capable Host
//        <6=> 6: NONOTGH = Non-OTG Host
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GHWCFG2  --------------------------------
// SVD Line: 6944

//  <rtree> SFDITEM_REG__USB_CORE_GHWCFG2
//    <name> GHWCFG2 </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40040048) User Hardware Configuration 2 Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GHWCFG2 >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_OTG_ENABLE_IC_USB </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_TknQDepth </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_PTxQDepth </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_NPTxQDepth </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_MultiProcIntrpt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_DynFifoSizing </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_PerioSupport </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_NumHstChnl </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_NumDevEps </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_FSPhyType </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_HSPhyType </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_SingPnt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_OtgArch </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG2_OtgMode </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GHWCFG3  ----------------------------
// SVD Line: 7402

unsigned int USB_CORE_GHWCFG3 __AT (0x4004004C);



// -------------------------  Field Item: USB_CORE_GHWCFG3_DfifoDepth  ----------------------------
// SVD Line: 7411

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_DfifoDepth
//    <name> DfifoDepth </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x4004004C) DFIFO Depth </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GHWCFG3 >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG3_LPMMode  ------------------------------
// SVD Line: 7418

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_LPMMode
//    <name> LPMMode </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x4004004C) \nLPM Mode\n0 : DISABLED = LPM disabled\n1 : ENABLED = LPM enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.15..15> LPMMode
//        <0=> 0: DISABLED = LPM disabled
//        <1=> 1: ENABLED = LPM enabled
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG3_BCSupport  -----------------------------
// SVD Line: 7437

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_BCSupport
//    <name> BCSupport </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x4004004C) \nBattery Charger Support\n0 : DISABLED = No Battery Charger Support\n1 : ENABLED = Battery Charger Support present </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.14..14> BCSupport
//        <0=> 0: DISABLED = No Battery Charger Support
//        <1=> 1: ENABLED = Battery Charger Support present
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG3_HSICMode  -----------------------------
// SVD Line: 7456

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_HSICMode
//    <name> HSICMode </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x4004004C) \nHSIC Mode\n0 : DISABLED = No HSIC capability\n1 : ENABLED = HSIC-capable with shared UTMI PHY </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.13..13> HSICMode
//        <0=> 0: DISABLED = No HSIC capability
//        <1=> 1: ENABLED = HSIC-capable with shared UTMI PHY
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG3_ADPSupport  ----------------------------
// SVD Line: 7475

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_ADPSupport
//    <name> ADPSupport </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x4004004C) \nADP Logic Support\n0 : DISABLED = ADP logic is not present\n1 : ENABLED = ADP logic is present </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.12..12> ADPSupport
//        <0=> 0: DISABLED = ADP logic is not present
//        <1=> 1: ENABLED = ADP logic is present
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG3_RstType  ------------------------------
// SVD Line: 7494

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_RstType
//    <name> RstType </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x4004004C) \nReset Style for Clocked Blocks\n0 : ASYNCRST = Asynchronous reset is used\n1 : SYNCRST = Synchronous reset is used </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.11..11> RstType
//        <0=> 0: ASYNCRST = Asynchronous reset is used
//        <1=> 1: SYNCRST = Synchronous reset is used
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG3_OptFeature  ----------------------------
// SVD Line: 7513

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_OptFeature
//    <name> OptFeature </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x4004004C) \nOptional Features Removed\n0 : DISABLED = Optional features not removed\n1 : ENABLED = Optional features removed </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.10..10> OptFeature
//        <0=> 0: DISABLED = Optional features not removed
//        <1=> 1: ENABLED = Optional features removed
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG3_VndctlSupt  ----------------------------
// SVD Line: 7532

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_VndctlSupt
//    <name> VndctlSupt </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x4004004C) \nVendor Control Interface Support\n0 : DISABLED = Vendor Control Interface not available\n1 : ENABLED = Vendor Control Interface available </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.9..9> VndctlSupt
//        <0=> 0: DISABLED = Vendor Control Interface not available
//        <1=> 1: ENABLED = Vendor Control Interface available
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG3_I2CIntSel  -----------------------------
// SVD Line: 7551

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_I2CIntSel
//    <name> I2CIntSel </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x4004004C) \nI2C Interface Selection\n0 : DISABLED = I2C Interface not available\n1 : ENABLED = I2C Interface available </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.8..8> I2CIntSel
//        <0=> 0: DISABLED = I2C Interface not available
//        <1=> 1: ENABLED = I2C Interface available
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GHWCFG3_OtgEn  -------------------------------
// SVD Line: 7570

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_OtgEn
//    <name> OtgEn </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x4004004C) \nOTG Function Enabled\n0 : DISABLED = Not OTG Capable\n1 : ENABLED = OTG Capable </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.7..7> OtgEn
//        <0=> 0: DISABLED = Not OTG Capable
//        <1=> 1: ENABLED = OTG Capable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG3_PktSizeWidth  ---------------------------
// SVD Line: 7589

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_PktSizeWidth
//    <name> PktSizeWidth </name>
//    <r> 
//    <i> [Bits 6..4] RO (@ 0x4004004C) \nWidth of Packet Size Counters\n0 : BITS4 = Width of Packet Size Counter 4\n1 : BITS5 = Width of Packet Size Counter 5\n2 : BITS6 = Width of Packet Size Counter 6\n3 : BITS7 = Width of Packet Size Counter 7\n4 : BITS8 = Width of Packet Size Counter 8\n5 : BITS9 = Width of Packet Size Counter 9\n6 : BITS10 = Width of Packet Size Counter 10\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.6..4> PktSizeWidth
//        <0=> 0: BITS4 = Width of Packet Size Counter 4
//        <1=> 1: BITS5 = Width of Packet Size Counter 5
//        <2=> 2: BITS6 = Width of Packet Size Counter 6
//        <3=> 3: BITS7 = Width of Packet Size Counter 7
//        <4=> 4: BITS8 = Width of Packet Size Counter 8
//        <5=> 5: BITS9 = Width of Packet Size Counter 9
//        <6=> 6: BITS10 = Width of Packet Size Counter 10
//        <7=> 7: 
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GHWCFG3_XferSizeWidth  ---------------------------
// SVD Line: 7633

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_XferSizeWidth
//    <name> XferSizeWidth </name>
//    <r> 
//    <i> [Bits 3..0] RO (@ 0x4004004C) \nWidth of Transfer Size Counters\n0 : WIDTH11 = Width of Transfer Size Counter 11 bits\n1 : WIDTH12 = Width of Transfer Size Counter 12 bits\n2 : WIDTH13 = Width of Transfer Size Counter 13 bits\n3 : WIDTH14 = Width of Transfer Size Counter 14 bits\n4 : WIDTH15 = Width of Transfer Size Counter 15 bits\n5 : WIDTH16 = Width of Transfer Size Counter 16 bits\n6 : WIDTH17 = Width of Transfer Size Counter 17 bits\n7 : WIDTH18 = Width of Transfer Size Counter 18 bits\n8 : WIDTH19 = Width of Transfer Size Counter 19 bits\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG3 ) </loc>
//      <o.3..0> XferSizeWidth
//        <0=> 0: WIDTH11 = Width of Transfer Size Counter 11 bits
//        <1=> 1: WIDTH12 = Width of Transfer Size Counter 12 bits
//        <2=> 2: WIDTH13 = Width of Transfer Size Counter 13 bits
//        <3=> 3: WIDTH14 = Width of Transfer Size Counter 14 bits
//        <4=> 4: WIDTH15 = Width of Transfer Size Counter 15 bits
//        <5=> 5: WIDTH16 = Width of Transfer Size Counter 16 bits
//        <6=> 6: WIDTH17 = Width of Transfer Size Counter 17 bits
//        <7=> 7: WIDTH18 = Width of Transfer Size Counter 18 bits
//        <8=> 8: WIDTH19 = Width of Transfer Size Counter 19 bits
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GHWCFG3  --------------------------------
// SVD Line: 7402

//  <rtree> SFDITEM_REG__USB_CORE_GHWCFG3
//    <name> GHWCFG3 </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4004004C) User Hardware Configuration 3 Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GHWCFG3 >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_DfifoDepth </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_LPMMode </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_BCSupport </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_HSICMode </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_ADPSupport </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_RstType </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_OptFeature </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_VndctlSupt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_I2CIntSel </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_OtgEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_PktSizeWidth </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG3_XferSizeWidth </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GHWCFG4  ----------------------------
// SVD Line: 7690

unsigned int USB_CORE_GHWCFG4 __AT (0x40040050);



// --------------------------  Field Item: USB_CORE_GHWCFG4_DescDMA  ------------------------------
// SVD Line: 7699

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_DescDMA
//    <name> DescDMA </name>
//    <r> 
//    <i> [Bit 31] RO (@ 0x40040050) \nScatter/Gather DMA configuration\n0 : CONFIG1 = Non-Dynamic configuration\n1 : CONFIG2 = Dynamic configuration </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.31..31> DescDMA
//        <0=> 0: CONFIG1 = Non-Dynamic configuration
//        <1=> 1: CONFIG2 = Dynamic configuration
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GHWCFG4_DescDMAEnabled  --------------------------
// SVD Line: 7718

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_DescDMAEnabled
//    <name> DescDMAEnabled </name>
//    <r> 
//    <i> [Bit 30] RO (@ 0x40040050) \nScatter/Gather DMA configuration enabled\n0 : DISABLE = Non-Scatter/Gather DMA configuration\n1 : ENABLE = Scatter/Gather DMA configuration </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.30..30> DescDMAEnabled
//        <0=> 0: DISABLE = Non-Scatter/Gather DMA configuration
//        <1=> 1: ENABLE = Scatter/Gather DMA configuration
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GHWCFG4_INEps  -------------------------------
// SVD Line: 7737

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_INEps
//    <name> INEps </name>
//    <r> 
//    <i> [Bits 29..26] RO (@ 0x40040050) \nNumber of Device Mode IN Endpoints Including Control Endpoints\n0 : ENDPT1 = 1 IN Endpoint\n1 : ENDPT2 = 2 IN Endpoints\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : ENDPT16 = 16 IN Endpoints </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.29..26> INEps
//        <0=> 0: ENDPT1 = 1 IN Endpoint
//        <1=> 1: ENDPT2 = 2 IN Endpoints
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: ENDPT16 = 16 IN Endpoints
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG4_DedFifoMode  ----------------------------
// SVD Line: 7762

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_DedFifoMode
//    <name> DedFifoMode </name>
//    <r> 
//    <i> [Bit 25] RO (@ 0x40040050) \nEnable Dedicated Transmit FIFO for device IN Endpoints\n0 : DISABLED = Dedicated Transmit FIFO Operation not enabled\n1 : ENABLED = Dedicated Transmit FIFO Operation enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.25..25> DedFifoMode
//        <0=> 0: DISABLED = Dedicated Transmit FIFO Operation not enabled
//        <1=> 1: ENABLED = Dedicated Transmit FIFO Operation enabled
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG4_SessEndFltr  ----------------------------
// SVD Line: 7781

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_SessEndFltr
//    <name> SessEndFltr </name>
//    <r> 
//    <i> [Bit 24] RO (@ 0x40040050) \nSession end filter enabled\n0 : DISABLED = No filter\n1 : ENABLED = Filter enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.24..24> SessEndFltr
//        <0=> 0: DISABLED = No filter
//        <1=> 1: ENABLED = Filter enabled
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG4_BValidFltr  ----------------------------
// SVD Line: 7800

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_BValidFltr
//    <name> BValidFltr </name>
//    <r> 
//    <i> [Bit 23] RO (@ 0x40040050) \nb_valid filter enabled\n0 : DISABLED = No Filter\n1 : ENABLED = Filter enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.23..23> BValidFltr
//        <0=> 0: DISABLED = No Filter
//        <1=> 1: ENABLED = Filter enabled
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG4_AValidFltr  ----------------------------
// SVD Line: 7819

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_AValidFltr
//    <name> AValidFltr </name>
//    <r> 
//    <i> [Bit 22] RO (@ 0x40040050) \na_valid filter enabled\n0 : DISABLED = No filter\n1 : ENABLED = Filter enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.22..22> AValidFltr
//        <0=> 0: DISABLED = No filter
//        <1=> 1: ENABLED = Filter enabled
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GHWCFG4_VBusValidFltr  ---------------------------
// SVD Line: 7838

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_VBusValidFltr
//    <name> VBusValidFltr </name>
//    <r> 
//    <i> [Bit 21] RO (@ 0x40040050) \nVBUS Valid Filter Enabled\n0 : DISABLED = Vbus Valid Filter Disabled\n1 : ENABLED = Vbus Valid Filter Enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.21..21> VBusValidFltr
//        <0=> 0: DISABLED = Vbus Valid Filter Disabled
//        <1=> 1: ENABLED = Vbus Valid Filter Enabled
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG4_IddgFltr  -----------------------------
// SVD Line: 7857

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_IddgFltr
//    <name> IddgFltr </name>
//    <r> 
//    <i> [Bit 20] RO (@ 0x40040050) \nIDDIG Filter Enabled\n0 : DISABLED = Iddig Filter Disabled\n1 : ENABLED = Iddig Filter Enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.20..20> IddgFltr
//        <0=> 0: DISABLED = Iddig Filter Disabled
//        <1=> 1: ENABLED = Iddig Filter Enabled
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GHWCFG4_NumCtlEps  -----------------------------
// SVD Line: 7876

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_NumCtlEps
//    <name> NumCtlEps </name>
//    <r> 
//    <i> [Bits 19..16] RO (@ 0x40040050) \nNumber of Device Mode Control Endpoints in Addition to Endpoint 0\n0 : ENDPT0 = End point 0\n1 : ENDPT1 = End point 1\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : ENDPT15 = End point 15 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.19..16> NumCtlEps
//        <0=> 0: ENDPT0 = End point 0
//        <1=> 1: ENDPT1 = End point 1
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: ENDPT15 = End point 15
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG4_PhyDataWidth  ---------------------------
// SVD Line: 7901

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_PhyDataWidth
//    <name> PhyDataWidth </name>
//    <r> 
//    <i> [Bits 15..14] RO (@ 0x40040050) \nUTMI+ PHY/ULPI-to-Internal UTMI+ Wrapper Data Width\n0 : WIDTH1 = 8 bits\n1 : WIDTH2 = 16 bits\n2 : WIDTH3 = 8/16 bits, software selectable\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.15..14> PhyDataWidth
//        <0=> 0: WIDTH1 = 8 bits
//        <1=> 1: WIDTH2 = 16 bits
//        <2=> 2: WIDTH3 = 8/16 bits, software selectable
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GHWCFG4_EnhancedLPMSupt  --------------------------
// SVD Line: 7925

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_EnhancedLPMSupt
//    <name> EnhancedLPMSupt </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x40040050) \nEnhanced LPM Support\n0 : DISABLED = Enhanced LPM Support is Disabled\n1 : ENABLED = Enhanced LPM Support is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.13..13> EnhancedLPMSupt
//        <0=> 0: DISABLED = Enhanced LPM Support is Disabled
//        <1=> 1: ENABLED = Enhanced LPM Support is enabled
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG4_ACGSupt  ------------------------------
// SVD Line: 7944

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_ACGSupt
//    <name> ACGSupt </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x40040050) \nActive Clock Gating Support\n0 : DISABLED = Active Clock Gating Support disabled\n1 : ENABLED = Active Clock Gating Support enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.12..12> ACGSupt
//        <0=> 0: DISABLED = Active Clock Gating Support disabled
//        <1=> 1: ENABLED = Active Clock Gating Support enabled
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG4_ipgisocSupt  ----------------------------
// SVD Line: 7963

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_ipgisocSupt
//    <name> ipgisocSupt </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40040050) \nInterpacket Gap ISOC OUT Worst-case Support\n0 : DISABLED = Interpacket Gap ISOC OUT Worst-case Support is Disabled\n1 : ENABLED = Interpacket Gap ISOC OUT Worst-case Support is Enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.11..11> ipgisocSupt
//        <0=> 0: DISABLED = Interpacket Gap ISOC OUT Worst-case Support is Disabled
//        <1=> 1: ENABLED = Interpacket Gap ISOC OUT Worst-case Support is Enabled
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG4_ServIntFlow  ----------------------------
// SVD Line: 7982

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_ServIntFlow
//    <name> ServIntFlow </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40040050) \nService Interval Flow\n0 : DISABLED = Service Interval Flow not supported\n1 : ENABLED = Service Interval Flow supported </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.10..10> ServIntFlow
//        <0=> 0: DISABLED = Service Interval Flow not supported
//        <1=> 1: ENABLED = Service Interval Flow supported
//    </combo>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GHWCFG4_EnhancedLPMSupt1  -------------------------
// SVD Line: 8001

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_EnhancedLPMSupt1
//    <name> EnhancedLPMSupt1 </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40040050) \nEnhanced LPM Support1\n0 : DISABLED = Reject L1 Request if Non-Periodic TxFIFO is not empty\n1 : ENABLED = Accept L1 Request even if Non-Periodic TxFIFO not empty </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.9..9> EnhancedLPMSupt1
//        <0=> 0: DISABLED = Reject L1 Request if Non-Periodic TxFIFO is not empty
//        <1=> 1: ENABLED = Accept L1 Request even if Non-Periodic TxFIFO not empty
//    </combo>
//  </item>
//  


// --------------------  Field Item: USB_CORE_GHWCFG4_ExtendedHibernation  ------------------------
// SVD Line: 8020

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_ExtendedHibernation
//    <name> ExtendedHibernation </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40040050) \nEnable Hibernation\n0 : DISABLED = Extended Hibernation feature not enabled\n1 : ENABLED = Extended Hibernation feature enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.7..7> ExtendedHibernation
//        <0=> 0: DISABLED = Extended Hibernation feature not enabled
//        <1=> 1: ENABLED = Extended Hibernation feature enabled
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG4_Hibernation  ----------------------------
// SVD Line: 8039

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_Hibernation
//    <name> Hibernation </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40040050) \nEnable Hibernation\n0 : DISABLED = Hibernation feature disabled\n1 : ENABLED = Hibernation feature enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.6..6> Hibernation
//        <0=> 0: DISABLED = Hibernation feature disabled
//        <1=> 1: ENABLED = Hibernation feature enabled
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GHWCFG4_AhbFreq  ------------------------------
// SVD Line: 8058

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_AhbFreq
//    <name> AhbFreq </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40040050) \nMinimum AHB Frequency Less Than 60 MHz\n0 : DISABLED = Minimum AHB Frequency More Than 60 MHz\n1 : ENABLED = Minimum AHB Frequency Less Than 60 MHz </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.5..5> AhbFreq
//        <0=> 0: DISABLED = Minimum AHB Frequency More Than 60 MHz
//        <1=> 1: ENABLED = Minimum AHB Frequency Less Than 60 MHz
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GHWCFG4_PartialPwrDn  ---------------------------
// SVD Line: 8077

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_PartialPwrDn
//    <name> PartialPwrDn </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40040050) \nEnable Partial Power Down\n0 : DISABLED = Partial Power Down disabled\n1 : ENABLED = Partial Power Down enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.4..4> PartialPwrDn
//        <0=> 0: DISABLED = Partial Power Down disabled
//        <1=> 1: ENABLED = Partial Power Down enabled
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GHWCFG4_NumDevPerioEps  --------------------------
// SVD Line: 8096

//  <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_NumDevPerioEps
//    <name> NumDevPerioEps </name>
//    <r> 
//    <i> [Bits 3..0] RO (@ 0x40040050) \nNumber of Device Mode Periodic IN Endpoints\n0 : Value0 = Number of Periodic IN EPs is 0\n1 : Value1 = Number of Periodic IN EPs is 1\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Value15 = Number of Periodic IN EPs is 15 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GHWCFG4 ) </loc>
//      <o.3..0> NumDevPerioEps
//        <0=> 0: Value0 = Number of Periodic IN EPs is 0
//        <1=> 1: Value1 = Number of Periodic IN EPs is 1
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: Value15 = Number of Periodic IN EPs is 15
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GHWCFG4  --------------------------------
// SVD Line: 7690

//  <rtree> SFDITEM_REG__USB_CORE_GHWCFG4
//    <name> GHWCFG4 </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40040050) User Hardware Configuration 4 Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GHWCFG4 >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_DescDMA </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_DescDMAEnabled </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_INEps </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_DedFifoMode </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_SessEndFltr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_BValidFltr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_AValidFltr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_VBusValidFltr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_IddgFltr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_NumCtlEps </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_PhyDataWidth </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_EnhancedLPMSupt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_ACGSupt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_ipgisocSupt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_ServIntFlow </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_EnhancedLPMSupt1 </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_ExtendedHibernation </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_Hibernation </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_AhbFreq </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_PartialPwrDn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GHWCFG4_NumDevPerioEps </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GLPMCFG  ----------------------------
// SVD Line: 8124

unsigned int USB_CORE_GLPMCFG __AT (0x40040054);



// -------------------------  Field Item: USB_CORE_GLPMCFG_InvSelHsic  ----------------------------
// SVD Line: 8133

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_InvSelHsic
//    <name> InvSelHsic </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40040054) \nHSIC-Invert Select HSIC\n0 : InvSelHsic_0 = HSIC capability enabled if if_sel_hsic=1\n1 : InvSelHsic_1 = HSIC capability enabled if if_sel_hsic=0 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.31..31> InvSelHsic
//        <0=> 0: InvSelHsic_0 = HSIC capability enabled if if_sel_hsic=1
//        <1=> 1: InvSelHsic_1 = HSIC capability enabled if if_sel_hsic=0
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GLPMCFG_HSICCon  ------------------------------
// SVD Line: 8152

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_HSICCon
//    <name> HSICCon </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40040054) \nHSIC-Connect\n0 : DISABLE_HSIC_CONNECT = Core does not initiate HSIC connect\n1 : ENABLE_HSIC_CONNECT = Core initiates the HSIC connect </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.30..30> HSICCon
//        <0=> 0: DISABLE_HSIC_CONNECT = Core does not initiate HSIC connect
//        <1=> 1: ENABLE_HSIC_CONNECT = Core initiates the HSIC connect
//    </combo>
//  </item>
//  


// ---------------------  Field Item: USB_CORE_GLPMCFG_LPM_RestoreSlpSts  -------------------------
// SVD Line: 8171

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_RestoreSlpSts
//    <name> LPM_RestoreSlpSts </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40040054) \nLPM Restore Sleep Status\n0 : DISABLED = Shallow Sleep mode based on BESL value\n1 : ENABLED = Deep Sleep mode based on BESL value </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.29..29> LPM_RestoreSlpSts
//        <0=> 0: DISABLED = Shallow Sleep mode based on BESL value
//        <1=> 1: ENABLED = Deep Sleep mode based on BESL value
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GLPMCFG_LPM_EnBESL  ----------------------------
// SVD Line: 8190

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_EnBESL
//    <name> LPM_EnBESL </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40040054) \nLPM Enable BESL\n0 : DISABLED = BESL is disabled\n1 : ENABLED = BESL is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.28..28> LPM_EnBESL
//        <0=> 0: DISABLED = BESL is disabled
//        <1=> 1: ENABLED = BESL is enabled
//    </combo>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GLPMCFG_LPM_RetryCnt_Sts  -------------------------
// SVD Line: 8209

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_RetryCnt_Sts
//    <name> LPM_RetryCnt_Sts </name>
//    <r> 
//    <i> [Bits 27..25] RO (@ 0x40040054) \nLPM Retry Count Status\n0 : RETRY_REM0 = Zero LPM retries remaining\n1 : RETRY_REM1 = One LPM retry remaining\n2 : RETRY_REM2 = Two LPM retries remaining\n3 : RETRY_REM3 = Three LPM retries remaining\n4 : RETRY_REM4 = Four LPM retries remaining\n5 : RETRY_REM5 = Five LPM retries remaining\n6 : RETRY_REM6 = Six LPM retries remaining\n7 : RETRY_REM7 = Seven LPM retries remaining </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.27..25> LPM_RetryCnt_Sts
//        <0=> 0: RETRY_REM0 = Zero LPM retries remaining
//        <1=> 1: RETRY_REM1 = One LPM retry remaining
//        <2=> 2: RETRY_REM2 = Two LPM retries remaining
//        <3=> 3: RETRY_REM3 = Three LPM retries remaining
//        <4=> 4: RETRY_REM4 = Four LPM retries remaining
//        <5=> 5: RETRY_REM5 = Five LPM retries remaining
//        <6=> 6: RETRY_REM6 = Six LPM retries remaining
//        <7=> 7: RETRY_REM7 = Seven LPM retries remaining
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GLPMCFG_SndLPM  ------------------------------
// SVD Line: 8258

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_SndLPM
//    <name> SndLPM </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40040054) \nSend LPM Transaction\n0 : DISABLED = Received the response from device\n1 : ENABLED = Sending LPM transaction </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.24..24> SndLPM
//        <0=> 0: DISABLED = Received the response from device
//        <1=> 1: ENABLED = Sending LPM transaction
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GLPMCFG_LPM_Retry_Cnt  ---------------------------
// SVD Line: 8277

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_Retry_Cnt
//    <name> LPM_Retry_Cnt </name>
//    <rw> 
//    <i> [Bits 23..21] RW (@ 0x40040054) \nLPM Retry Count\n0 : RETRY0 = Zero LPM retries\n1 : RETRY1 = One LPM retry\n2 : RETRY2 = Two LPM retries\n3 : RETRY3 = Three LPM retries\n4 : RETRY4 = Four LPM retries\n5 : RETRY5 = Five LPM retries\n6 : RETRY6 = Six LPM retries\n7 : RETRY7 = Seven LPM retries </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.23..21> LPM_Retry_Cnt
//        <0=> 0: RETRY0 = Zero LPM retries
//        <1=> 1: RETRY1 = One LPM retry
//        <2=> 2: RETRY2 = Two LPM retries
//        <3=> 3: RETRY3 = Three LPM retries
//        <4=> 4: RETRY4 = Four LPM retries
//        <5=> 5: RETRY5 = Five LPM retries
//        <6=> 6: RETRY6 = Six LPM retries
//        <7=> 7: RETRY7 = Seven LPM retries
//    </combo>
//  </item>
//  


// -----------------------  Field Item: USB_CORE_GLPMCFG_LPM_Chnl_Indx  ---------------------------
// SVD Line: 8326

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_Chnl_Indx
//    <name> LPM_Chnl_Indx </name>
//    <rw> 
//    <i> [Bits 20..17] RW (@ 0x40040054) \nLPM Channel Index\n0 : CH0 = Channel 0\n1 : CH1 = Channel 1\n2 : CH2 = Channel 2\n3 : CH3 = Channel 3\n4 : CH4 = Channel 4\n5 : CH5 = Channel 5\n6 : CH6 = Channel 6\n7 : CH7 = Channel 7\n8 : CH8 = Channel 8\n9 : CH9 = Channel 9\n10 : CH10 = Channel 10\n11 : CH11 = Channel 11\n12 : CH12 = Channel 12\n13 : CH13 = Channel 13\n14 : CH14 = Channel 14\n15 : CH15 = Channel 15 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.20..17> LPM_Chnl_Indx
//        <0=> 0: CH0 = Channel 0
//        <1=> 1: CH1 = Channel 1
//        <2=> 2: CH2 = Channel 2
//        <3=> 3: CH3 = Channel 3
//        <4=> 4: CH4 = Channel 4
//        <5=> 5: CH5 = Channel 5
//        <6=> 6: CH6 = Channel 6
//        <7=> 7: CH7 = Channel 7
//        <8=> 8: CH8 = Channel 8
//        <9=> 9: CH9 = Channel 9
//        <10=> 10: CH10 = Channel 10
//        <11=> 11: CH11 = Channel 11
//        <12=> 12: CH12 = Channel 12
//        <13=> 13: CH13 = Channel 13
//        <14=> 14: CH14 = Channel 14
//        <15=> 15: CH15 = Channel 15
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GLPMCFG_L1ResumeOK  ----------------------------
// SVD Line: 8415

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_L1ResumeOK
//    <name> L1ResumeOK </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40040054) \nSleep State Resume OK\n0 : NOTOK = Cannot start Resume from Sleep state\n1 : OK = Can start Resume from Sleep state </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.16..16> L1ResumeOK
//        <0=> 0: NOTOK = Cannot start Resume from Sleep state
//        <1=> 1: OK = Can start Resume from Sleep state
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GLPMCFG_SlpSts  ------------------------------
// SVD Line: 8434

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_SlpSts
//    <name> SlpSts </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40040054) \nPort Sleep Status\n0 : CORE_NOT_IN_L1 = Core is not in L1\n1 : CORE_IN_L1 = Core transitions to Sleep state </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.15..15> SlpSts
//        <0=> 0: CORE_NOT_IN_L1 = Core is not in L1
//        <1=> 1: CORE_IN_L1 = Core transitions to Sleep state
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GLPMCFG_CoreL1Res  -----------------------------
// SVD Line: 8453

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_CoreL1Res
//    <name> CoreL1Res </name>
//    <rw> 
//    <i> [Bits 14..13] RW (@ 0x40040054) \nLPM Response\n0 : LPMRESP1 = No handshake response\n1 : LPMRESP2 = STALL response\n2 : LPMRESP3 = NYET response\n3 : LPMRESP4 = ACK response </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.14..13> CoreL1Res
//        <0=> 0: LPMRESP1 = No handshake response
//        <1=> 1: LPMRESP2 = STALL response
//        <2=> 2: LPMRESP3 = NYET response
//        <3=> 3: LPMRESP4 = ACK response
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GLPMCFG_HIRD_Thres  ----------------------------
// SVD Line: 8482

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_HIRD_Thres
//    <name> HIRD_Thres </name>
//    <rw> 
//    <i> [Bits 12..8] RW (@ 0x40040054) BESL/HIRD Threshold </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GLPMCFG >> 8) & 0x1F), ((USB_CORE_GLPMCFG = (USB_CORE_GLPMCFG & ~(0x1FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GLPMCFG_EnblSlpM  -----------------------------
// SVD Line: 8489

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_EnblSlpM
//    <name> EnblSlpM </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40040054) \nEnable utmi_sleep_n\n0 : DISABLED = utmi_sleep_n assertion not transferred\n1 : ENABLED = utmi_sleep_n assertion transferred </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.7..7> EnblSlpM
//        <0=> 0: DISABLED = utmi_sleep_n assertion not transferred
//        <1=> 1: ENABLED = utmi_sleep_n assertion transferred
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GLPMCFG_bRemoteWake  ----------------------------
// SVD Line: 8508

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_bRemoteWake
//    <name> bRemoteWake </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40040054) \nRemoteWakeEnable\n0 : DISABLED = Remote Wakeup is disabled\n1 : ENABLED = Remote Wakeup enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.6..6> bRemoteWake
//        <0=> 0: DISABLED = Remote Wakeup is disabled
//        <1=> 1: ENABLED = Remote Wakeup enabled
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GLPMCFG_HIRD  -------------------------------
// SVD Line: 8527

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_HIRD
//    <name> HIRD </name>
//    <rw> 
//    <i> [Bits 5..2] RW (@ 0x40040054) Host-Initiated Resume Duration </i>
//    <edit> 
//      <loc> ( (unsigned char)((USB_CORE_GLPMCFG >> 2) & 0xF), ((USB_CORE_GLPMCFG = (USB_CORE_GLPMCFG & ~(0xFUL << 2 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GLPMCFG_AppL1Res  -----------------------------
// SVD Line: 8534

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_AppL1Res
//    <name> AppL1Res </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40040054) \nLPM response programmed by application\n0 : NYET_RESP = Respond with NYET on error detection\n1 : ACK_RESP = Respond with ACK on successful LPM transaction </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.1..1> AppL1Res
//        <0=> 0: NYET_RESP = Respond with NYET on error detection
//        <1=> 1: ACK_RESP = Respond with ACK on successful LPM transaction
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GLPMCFG_LPMCap  ------------------------------
// SVD Line: 8553

//  <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPMCap
//    <name> LPMCap </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40040054) \nLPM-Capable\n0 : DISABLED = LPM capability not enabled\n1 : ENABLED = LPM capability enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GLPMCFG ) </loc>
//      <o.0..0> LPMCap
//        <0=> 0: DISABLED = LPM capability not enabled
//        <1=> 1: ENABLED = LPM capability enabled
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GLPMCFG  --------------------------------
// SVD Line: 8124

//  <rtree> SFDITEM_REG__USB_CORE_GLPMCFG
//    <name> GLPMCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040054) LPM Config Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GLPMCFG >> 0) & 0xFFFFFFFF), ((USB_CORE_GLPMCFG = (USB_CORE_GLPMCFG & ~(0xF1FFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF1FFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_InvSelHsic </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_HSICCon </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_RestoreSlpSts </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_EnBESL </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_RetryCnt_Sts </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_SndLPM </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_Retry_Cnt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPM_Chnl_Indx </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_L1ResumeOK </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_SlpSts </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_CoreL1Res </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_HIRD_Thres </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_EnblSlpM </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_bRemoteWake </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_HIRD </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_AppL1Res </item>
//    <item> SFDITEM_FIELD__USB_CORE_GLPMCFG_LPMCap </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GPWRDN  -----------------------------
// SVD Line: 8575

unsigned int USB_CORE_GPWRDN __AT (0x40040058);



// -------------------------  Field Item: USB_CORE_GPWRDN_MultValIdBC  ----------------------------
// SVD Line: 8584

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_MultValIdBC
//    <name> MultValIdBC </name>
//    <rw> 
//    <i> [Bits 28..24] RW (@ 0x40040058) \nMultValIdBC\n0 : RID_0 = OTG device as B-device\n1 : RID_C = OTG device as B-device, can connect\n2 : RID_B = OTG device as B-device, cannot connect\n3 : Reserved - do not use\n4 : RID_A = OTG device as A-device\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : RID_GND = ID_OTG pin is grounded\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : RID_A_RID_GND = OTG device as A-device, RID_A=1 and RID_GND=1\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : RID_FLOAT = ID pull down when ID_OTG is floating\n17 : RID_C_RID_FLOAT = OTG device as B-device, can connect, RID_C=1 and RID_FLOAT=1\n18 : RID_B_RID_FLOAT = OTG device as B-device, cannot connect, RID_B=1 and RID_FLOAT=1\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : RID_1 = OTG device as A-device </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.28..24> MultValIdBC
//        <0=> 0: RID_0 = OTG device as B-device
//        <1=> 1: RID_C = OTG device as B-device, can connect
//        <2=> 2: RID_B = OTG device as B-device, cannot connect
//        <3=> 3: 
//        <4=> 4: RID_A = OTG device as A-device
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: RID_GND = ID_OTG pin is grounded
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: RID_A_RID_GND = OTG device as A-device, RID_A=1 and RID_GND=1
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: RID_FLOAT = ID pull down when ID_OTG is floating
//        <17=> 17: RID_C_RID_FLOAT = OTG device as B-device, can connect, RID_C=1 and RID_FLOAT=1
//        <18=> 18: RID_B_RID_FLOAT = OTG device as B-device, cannot connect, RID_B=1 and RID_FLOAT=1
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: RID_1 = OTG device as A-device
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GPWRDN_ADPInt  -------------------------------
// SVD Line: 8643

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ADPInt
//    <name> ADPInt </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40040058) \nADP Interrupt\n0 : DISABLED = No ADP Event Interrupt\n1 : ENABLED = ADP Event Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.23..23> ADPInt
//        <0=> 0: DISABLED = No ADP Event Interrupt
//        <1=> 1: ENABLED = ADP Event Interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPWRDN_BSessVld  ------------------------------
// SVD Line: 8662

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_BSessVld
//    <name> BSessVld </name>
//    <r> 
//    <i> [Bit 22] RO (@ 0x40040058) \nB Session Valid\n0 : NOTVALID = B_Valid is 0\n1 : VALID = B_Valid is 1 </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.22..22> BSessVld
//        <0=> 0: NOTVALID = B_Valid is 0
//        <1=> 1: VALID = B_Valid is 1
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GPWRDN_IDDIG  -------------------------------
// SVD Line: 8681

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_IDDIG
//    <name> IDDIG </name>
//    <r> 
//    <i> [Bit 21] RO (@ 0x40040058) \nStatus of signal IDDIG\n0 : DISABLED = Host Mode\n1 : ENABLED = Device Mode </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.21..21> IDDIG
//        <0=> 0: DISABLED = Host Mode
//        <1=> 1: ENABLED = Device Mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPWRDN_LineState  -----------------------------
// SVD Line: 8700

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_LineState
//    <name> LineState </name>
//    <r> 
//    <i> [Bits 20..19] RO (@ 0x40040058) \nLineState.\n0 : LS1 = Linestate on USB: DM = 0, DP = 0\n1 : LS2 = Linestate on USB: DM = 0, DP = 1\n2 : LS3 = Linestate on USB: DM = 1, DP = 0\n3 : LS4 = Linestate on USB: Not-defined </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.20..19> LineState
//        <0=> 0: LS1 = Linestate on USB: DM = 0, DP = 0
//        <1=> 1: LS2 = Linestate on USB: DM = 0, DP = 1
//        <2=> 2: LS3 = Linestate on USB: DM = 1, DP = 0
//        <3=> 3: LS4 = Linestate on USB: Not-defined
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GPWRDN_StsChngIntMsk  ---------------------------
// SVD Line: 8729

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_StsChngIntMsk
//    <name> StsChngIntMsk </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40040058) \nStatus Change Interrupt Mask\n0 : NOMASK = No Status Change Interrupt Mask\n1 : MASK = Mask for Status Change Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.18..18> StsChngIntMsk
//        <0=> 0: NOMASK = No Status Change Interrupt Mask
//        <1=> 1: MASK = Mask for Status Change Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPWRDN_StsChngInt  -----------------------------
// SVD Line: 8748

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_StsChngInt
//    <name> StsChngInt </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40040058) \nStatus Change Interrupt\n0 : DISABLED = No Status change\n1 : ENABLED = Status change detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.17..17> StsChngInt
//        <0=> 0: DISABLED = No Status change
//        <1=> 1: ENABLED = Status change detected
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GPWRDN_SRPDetectMsk  ----------------------------
// SVD Line: 8767

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_SRPDetectMsk
//    <name> SRPDetectMsk </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40040058) \nSRP Detect Mask\n0 : NOMASK = No SRPDetect Interrupt Mask\n1 : MASK = Mask for SRPDetect Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.16..16> SRPDetectMsk
//        <0=> 0: NOMASK = No SRPDetect Interrupt Mask
//        <1=> 1: MASK = Mask for SRPDetect Interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPWRDN_SRPDetect  -----------------------------
// SVD Line: 8786

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_SRPDetect
//    <name> SRPDetect </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40040058) \nSRP Detect\n0 : DISABLED = SRP not detected\n1 : ENABLED = SRP detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.15..15> SRPDetect
//        <0=> 0: DISABLED = SRP not detected
//        <1=> 1: ENABLED = SRP detected
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPWRDN_ConnDetMsk  -----------------------------
// SVD Line: 8805

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ConnDetMsk
//    <name> ConnDetMsk </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40040058) \nConnect Detect Mask\n0 : NOMASK = No ConnectDet Interrupt Mask\n1 : MASK = Mask for ConnectDet Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.14..14> ConnDetMsk
//        <0=> 0: NOMASK = No ConnectDet Interrupt Mask
//        <1=> 1: MASK = Mask for ConnectDet Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPWRDN_ConnectDet  -----------------------------
// SVD Line: 8824

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ConnectDet
//    <name> ConnectDet </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40040058) \nConnect Detect\n0 : DISABLED = Connect not detected\n1 : ENABLED = Connect detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.13..13> ConnectDet
//        <0=> 0: DISABLED = Connect not detected
//        <1=> 1: ENABLED = Connect detected
//    </combo>
//  </item>
//  


// ---------------------  Field Item: USB_CORE_GPWRDN_DisconnectDetectMsk  ------------------------
// SVD Line: 8843

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_DisconnectDetectMsk
//    <name> DisconnectDetectMsk </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40040058) \nDisconnect Detect Mask\n0 : NOMASK = No DisconnectDetect Interrupt Mask\n1 : MASK = Mask for DisconnectDetect Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.12..12> DisconnectDetectMsk
//        <0=> 0: NOMASK = No DisconnectDetect Interrupt Mask
//        <1=> 1: MASK = Mask for DisconnectDetect Interrupt
//    </combo>
//  </item>
//  


// ----------------------  Field Item: USB_CORE_GPWRDN_DisconnectDetect  --------------------------
// SVD Line: 8862

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_DisconnectDetect
//    <name> DisconnectDetect </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40040058) \nDisconnect Detect\n0 : DISABLED = Disconnect not detected\n1 : ENABLED = Disconnect detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.11..11> DisconnectDetect
//        <0=> 0: DISABLED = Disconnect not detected
//        <1=> 1: ENABLED = Disconnect detected
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPWRDN_ResetDetMsk  ----------------------------
// SVD Line: 8881

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ResetDetMsk
//    <name> ResetDetMsk </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40040058) \nReset Detect Mask\n0 : NOMASK = No ResetDetect Interrupt Mask\n1 : MASK = Mask for ResetDetect Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.10..10> ResetDetMsk
//        <0=> 0: NOMASK = No ResetDetect Interrupt Mask
//        <1=> 1: MASK = Mask for ResetDetect Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GPWRDN_ResetDetected  ---------------------------
// SVD Line: 8900

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ResetDetected
//    <name> ResetDetected </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40040058) \nReset Detected\n0 : DISABLED = Reset not detected\n1 : ENABLED = Reset detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.9..9> ResetDetected
//        <0=> 0: DISABLED = Reset not detected
//        <1=> 1: ENABLED = Reset detected
//    </combo>
//  </item>
//  


// ---------------------  Field Item: USB_CORE_GPWRDN_LineStageChangeMsk  -------------------------
// SVD Line: 8919

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_LineStageChangeMsk
//    <name> LineStageChangeMsk </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40040058) \nLine State Change Mask\n0 : NOMASK = No LineStateChange Interrupt Mask\n1 : MASK = Mask for LineStateChange Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.8..8> LineStageChangeMsk
//        <0=> 0: NOMASK = No LineStateChange Interrupt Mask
//        <1=> 1: MASK = Mask for LineStateChange Interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPWRDN_LnStsChng  -----------------------------
// SVD Line: 8938

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_LnStsChng
//    <name> LnStsChng </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40040058) \nLine State Change\n0 : DISABLED = No LineState change on USB\n1 : ENABLED = LineState change on USB </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.7..7> LnStsChng
//        <0=> 0: DISABLED = No LineState change on USB
//        <1=> 1: ENABLED = LineState change on USB
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPWRDN_DisableVBUS  ----------------------------
// SVD Line: 8957

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_DisableVBUS
//    <name> DisableVBUS </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40040058) \nDisable VBUS\n0 : DISABLED = Not programmed to disable VBUS\n1 : ENABLED = Programmed to disable VBUS </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.6..6> DisableVBUS
//        <0=> 0: DISABLED = Not programmed to disable VBUS
//        <1=> 1: ENABLED = Programmed to disable VBUS
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPWRDN_PwrDnSwtch  -----------------------------
// SVD Line: 8976

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PwrDnSwtch
//    <name> PwrDnSwtch </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40040058) \nPower Down Switch\n0 : ON = The controller is in ON state\n1 : OFF = The controller is in OFF state </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.5..5> PwrDnSwtch
//        <0=> 0: ON = The controller is in ON state
//        <1=> 1: OFF = The controller is in OFF state
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GPWRDN_PwrDnRst_n  -----------------------------
// SVD Line: 8995

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PwrDnRst_n
//    <name> PwrDnRst_n </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40040058) \nPower Down ResetN\n0 : DISABLE = Reset the controller\n1 : ENABLE = Normal operation </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.4..4> PwrDnRst_n
//        <0=> 0: DISABLE = Reset the controller
//        <1=> 1: ENABLE = Normal operation
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPWRDN_PwrDnClmp  -----------------------------
// SVD Line: 9014

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PwrDnClmp
//    <name> PwrDnClmp </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40040058) \nPower Down Clamp\n0 : DISABLE = Disable PMU power clamp\n1 : ENABLE = Enable PMU power clamp </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.3..3> PwrDnClmp
//        <0=> 0: DISABLE = Disable PMU power clamp
//        <1=> 1: ENABLE = Enable PMU power clamp
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GPWRDN_Restore  ------------------------------
// SVD Line: 9033

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_Restore
//    <name> Restore </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40040058) \nRestore.\n0 : DISABLE = Normal mode of operation\n1 : ENABLE = Restore mode </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.2..2> Restore
//        <0=> 0: DISABLE = Normal mode of operation
//        <1=> 1: ENABLE = Restore mode
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GPWRDN_PMUActv  ------------------------------
// SVD Line: 9052

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PMUActv
//    <name> PMUActv </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40040058) \nPMU Active\n0 : DISABLE = Disable PMU module\n1 : ENABLE = Enable PMU module </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.1..1> PMUActv
//        <0=> 0: DISABLE = Disable PMU module
//        <1=> 1: ENABLE = Enable PMU module
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GPWRDN_PMUIntSel  -----------------------------
// SVD Line: 9071

//  <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PMUIntSel
//    <name> PMUIntSel </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40040058) \nPMU Interrupt Select\n0 : DISABLE = Internal DWC_otg_core interrupt\n1 : ENABLE = External DWC_otg_pmu interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GPWRDN ) </loc>
//      <o.0..0> PMUIntSel
//        <0=> 0: DISABLE = Internal DWC_otg_core interrupt
//        <1=> 1: ENABLE = External DWC_otg_pmu interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: USB_CORE_GPWRDN  --------------------------------
// SVD Line: 8575

//  <rtree> SFDITEM_REG__USB_CORE_GPWRDN
//    <name> GPWRDN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040058) Global Power Down Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GPWRDN >> 0) & 0xFFFFFFFF), ((USB_CORE_GPWRDN = (USB_CORE_GPWRDN & ~(0x1F87FFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F87FFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_MultValIdBC </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ADPInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_BSessVld </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_IDDIG </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_LineState </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_StsChngIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_StsChngInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_SRPDetectMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_SRPDetect </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ConnDetMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ConnectDet </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_DisconnectDetectMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_DisconnectDetect </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ResetDetMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_ResetDetected </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_LineStageChangeMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_LnStsChng </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_DisableVBUS </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PwrDnSwtch </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PwrDnRst_n </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PwrDnClmp </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_Restore </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PMUActv </item>
//    <item> SFDITEM_FIELD__USB_CORE_GPWRDN_PMUIntSel </item>
//  </rtree>
//  


// ------------------------  Register Item Address: USB_CORE_GDFIFOCFG  ---------------------------
// SVD Line: 9093

unsigned int USB_CORE_GDFIFOCFG __AT (0x4004005C);



// ----------------------  Field Item: USB_CORE_GDFIFOCFG_EPInfoBaseAddr  -------------------------
// SVD Line: 9102

//  <item> SFDITEM_FIELD__USB_CORE_GDFIFOCFG_EPInfoBaseAddr
//    <name> EPInfoBaseAddr </name>
//    <rw> 
//    <i> [Bits 31..16] RW (@ 0x4004005C) Start address of the EP info controller </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GDFIFOCFG >> 16) & 0xFFFF), ((USB_CORE_GDFIFOCFG = (USB_CORE_GDFIFOCFG & ~(0xFFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GDFIFOCFG_GDFIFOCfg  ----------------------------
// SVD Line: 9109

//  <item> SFDITEM_FIELD__USB_CORE_GDFIFOCFG_GDFIFOCfg
//    <name> GDFIFOCfg </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4004005C) GDFIFO Configuration </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GDFIFOCFG >> 0) & 0xFFFF), ((USB_CORE_GDFIFOCFG = (USB_CORE_GDFIFOCFG & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: USB_CORE_GDFIFOCFG  -------------------------------
// SVD Line: 9093

//  <rtree> SFDITEM_REG__USB_CORE_GDFIFOCFG
//    <name> GDFIFOCFG </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4004005C) Global DFIFO Configuration Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GDFIFOCFG >> 0) & 0xFFFFFFFF), ((USB_CORE_GDFIFOCFG = (USB_CORE_GDFIFOCFG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GDFIFOCFG_EPInfoBaseAddr </item>
//    <item> SFDITEM_FIELD__USB_CORE_GDFIFOCFG_GDFIFOCfg </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GADPCTL  ----------------------------
// SVD Line: 9119

unsigned int USB_CORE_GADPCTL __AT (0x40040060);



// -----------------------------  Field Item: USB_CORE_GADPCTL_AR  --------------------------------
// SVD Line: 9128

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AR
//    <name> AR </name>
//    <rw> 
//    <i> [Bits 28..27] RW (@ 0x40040060) \nAccess Request\n0 : Request1 = Read/Write\n1 : Request2 = Read\n2 : Request3 = Write\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.28..27> AR
//        <0=> 0: Request1 = Read/Write
//        <1=> 1: Request2 = Read
//        <2=> 2: Request3 = Write
//        <3=> 3: 
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GADPCTL_AdpToutMsk  ----------------------------
// SVD Line: 9152

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpToutMsk
//    <name> AdpToutMsk </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40040060) \nADP Timeout Interrupt Mask\n0 : MASK = Mask ADP Timeout Interrupt\n1 : NOMASK = Unmask ADP Timeout Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.26..26> AdpToutMsk
//        <0=> 0: MASK = Mask ADP Timeout Interrupt
//        <1=> 1: NOMASK = Unmask ADP Timeout Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GADPCTL_AdpSnsIntMsk  ---------------------------
// SVD Line: 9171

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpSnsIntMsk
//    <name> AdpSnsIntMsk </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40040060) \nADP Sense Interrupt Mask\n0 : MASK = Mask ADP Sense Interrupt\n1 : NOMASK = Unmask ADP Sense Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.25..25> AdpSnsIntMsk
//        <0=> 0: MASK = Mask ADP Sense Interrupt
//        <1=> 1: NOMASK = Unmask ADP Sense Interrupt
//    </combo>
//  </item>
//  


// ------------------------  Field Item: USB_CORE_GADPCTL_AdpPrbIntMsk  ---------------------------
// SVD Line: 9190

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpPrbIntMsk
//    <name> AdpPrbIntMsk </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40040060) \nADP Probe Interrupt Mask\n0 : MASK = Mask ADP Probe Interrupt\n1 : NOMASK = Unmask ADP Probe Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.24..24> AdpPrbIntMsk
//        <0=> 0: MASK = Mask ADP Probe Interrupt
//        <1=> 1: NOMASK = Unmask ADP Probe Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GADPCTL_AdpToutInt  ----------------------------
// SVD Line: 9209

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpToutInt
//    <name> AdpToutInt </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40040060) \nADP Timeout Interrupt\n0 : NOTACTIVE = Not active\n1 : ACTIVE = ADP Timeout Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.23..23> AdpToutInt
//        <0=> 0: NOTACTIVE = Not active
//        <1=> 1: ACTIVE = ADP Timeout Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GADPCTL_AdpSnsInt  -----------------------------
// SVD Line: 9228

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpSnsInt
//    <name> AdpSnsInt </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40040060) \nADP Sense Interrupt\n0 : NOTACTIVE = Not active\n1 : ACTIVE = ADP Sense Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.22..22> AdpSnsInt
//        <0=> 0: NOTACTIVE = Not active
//        <1=> 1: ACTIVE = ADP Sense Interrupt
//    </combo>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GADPCTL_AdpPrbInt  -----------------------------
// SVD Line: 9247

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpPrbInt
//    <name> AdpPrbInt </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40040060) \nADP Probe Interrupt\n0 : NOTACTIVE = Not active\n1 : ACTIVE = ADP Probe Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.21..21> AdpPrbInt
//        <0=> 0: NOTACTIVE = Not active
//        <1=> 1: ACTIVE = ADP Probe Interrupt
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GADPCTL_ADPEn  -------------------------------
// SVD Line: 9266

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_ADPEn
//    <name> ADPEn </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40040060) \nADP Enable\n0 : DISABLE = Not active\n1 : ENABLE = Core does ADP Probing or Sensing </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.20..20> ADPEn
//        <0=> 0: DISABLE = Not active
//        <1=> 1: ENABLE = Core does ADP Probing or Sensing
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GADPCTL_ADPRes  ------------------------------
// SVD Line: 9285

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_ADPRes
//    <name> ADPRes </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40040060) \nADP Reset\n0 : DISABLE = Not active\n1 : ENABLE = ADP controller is reset </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.19..19> ADPRes
//        <0=> 0: DISABLE = Not active
//        <1=> 1: ENABLE = ADP controller is reset
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GADPCTL_EnaSns  ------------------------------
// SVD Line: 9304

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_EnaSns
//    <name> EnaSns </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40040060) \nEnable Sense\n0 : DISABLE = Not active\n1 : ENABLE = Core performs sense operation </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.18..18> EnaSns
//        <0=> 0: DISABLE = Not active
//        <1=> 1: ENABLE = Core performs sense operation
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GADPCTL_EnaPrb  ------------------------------
// SVD Line: 9323

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_EnaPrb
//    <name> EnaPrb </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40040060) \nEnable Probe\n0 : DISABLE = Not active\n1 : ENABLE = Core performs probe operation </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.17..17> EnaPrb
//        <0=> 0: DISABLE = Not active
//        <1=> 1: ENABLE = Core performs probe operation
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: USB_CORE_GADPCTL_RTIM  -------------------------------
// SVD Line: 9342

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_RTIM
//    <name> RTIM </name>
//    <r> 
//    <i> [Bits 16..6] RO (@ 0x40040060) RAMP TIME </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GADPCTL >> 6) & 0x7FF) ) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: USB_CORE_GADPCTL_PrbPer  ------------------------------
// SVD Line: 9371

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_PrbPer
//    <name> PrbPer </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40040060) \nProbe Period\n0 : TADP_PRB_0.6_0.9SEC = TadpPrd: 0.625 to 0.925 sec\n1 : TADP_PRB_1.2_1.8SEC = TadpPrd: 1.25 to 1.85 sec\n2 : TADP_PRB_1.9_2.6SEC = TadpPrd: 1.9 to 2.6 sec\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.5..4> PrbPer
//        <0=> 0: TADP_PRB_0.6_0.9SEC = TadpPrd: 0.625 to 0.925 sec
//        <1=> 1: TADP_PRB_1.2_1.8SEC = TadpPrd: 1.25 to 1.85 sec
//        <2=> 2: TADP_PRB_1.9_2.6SEC = TadpPrd: 1.9 to 2.6 sec
//        <3=> 3: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GADPCTL_PrbDelta  -----------------------------
// SVD Line: 9395

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_PrbDelta
//    <name> PrbDelta </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x40040060) \nProbe Delta\n0 : VALUE1 = 1 cycle\n1 : VALUE2 = 2 cycles\n2 : VALUE3 = 3 cycles\n3 : VALUE4 = 4 cycles </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.3..2> PrbDelta
//        <0=> 0: VALUE1 = 1 cycle
//        <1=> 1: VALUE2 = 2 cycles
//        <2=> 2: VALUE3 = 3 cycles
//        <3=> 3: VALUE4 = 4 cycles
//    </combo>
//  </item>
//  


// --------------------------  Field Item: USB_CORE_GADPCTL_PrbDschg  -----------------------------
// SVD Line: 9424

//  <item> SFDITEM_FIELD__USB_CORE_GADPCTL_PrbDschg
//    <name> PrbDschg </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40040060) \nProbe Discharge\n0 : VALUE1 = Probe Discharge time: 4 msec\n1 : VALUE2 = Probe Discharge time: 8 msec\n2 : VALUE3 = Probe Discharge time: 16 msec\n3 : VALUE4 = Probe Discharge time: 32 msec </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GADPCTL ) </loc>
//      <o.1..0> PrbDschg
//        <0=> 0: VALUE1 = Probe Discharge time: 4 msec
//        <1=> 1: VALUE2 = Probe Discharge time: 8 msec
//        <2=> 2: VALUE3 = Probe Discharge time: 16 msec
//        <3=> 3: VALUE4 = Probe Discharge time: 32 msec
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GADPCTL  --------------------------------
// SVD Line: 9119

//  <rtree> SFDITEM_REG__USB_CORE_GADPCTL
//    <name> GADPCTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040060) ADP Timer, Control and Status Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GADPCTL >> 0) & 0xFFFFFFFF), ((USB_CORE_GADPCTL = (USB_CORE_GADPCTL & ~(0x1FFE003FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFE003F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AR </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpToutMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpSnsIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpPrbIntMsk </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpToutInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpSnsInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_AdpPrbInt </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_ADPEn </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_ADPRes </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_EnaSns </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_EnaPrb </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_RTIM </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_PrbPer </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_PrbDelta </item>
//    <item> SFDITEM_FIELD__USB_CORE_GADPCTL_PrbDschg </item>
//  </rtree>
//  


// -------------------------  Register Item Address: USB_CORE_GREFCLK  ----------------------------
// SVD Line: 9457

unsigned int USB_CORE_GREFCLK __AT (0x40040064);



// -------------------------  Field Item: USB_CORE_GREFCLK_REFCLKPER  -----------------------------
// SVD Line: 9466

//  <item> SFDITEM_FIELD__USB_CORE_GREFCLK_REFCLKPER
//    <name> REFCLKPER </name>
//    <rw> 
//    <i> [Bits 31..15] RW (@ 0x40040064) Period of ref_clk in terms of pico seconds </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_GREFCLK >> 15) & 0x1FFFF), ((USB_CORE_GREFCLK = (USB_CORE_GREFCLK & ~(0x1FFFFUL << 15 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1FFFF) << 15 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: USB_CORE_GREFCLK_RefclkMode  ----------------------------
// SVD Line: 9473

//  <item> SFDITEM_FIELD__USB_CORE_GREFCLK_RefclkMode
//    <name> RefclkMode </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40040064) \nRefclk Mode of Operation\n0 : DISABLE = Controller uses phy_clk to run internal micro-frame timers\n1 : ENABLE = Controller uses ref_clk to run internal micro-frame timers </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GREFCLK ) </loc>
//      <o.14..14> RefclkMode
//        <0=> 0: DISABLE = Controller uses phy_clk to run internal micro-frame timers
//        <1=> 1: ENABLE = Controller uses ref_clk to run internal micro-frame timers
//    </combo>
//  </item>
//  


// ---------------------  Field Item: USB_CORE_GREFCLK_SOF_CNT_WKUP_ALERT  ------------------------
// SVD Line: 9492

//  <item> SFDITEM_FIELD__USB_CORE_GREFCLK_SOF_CNT_WKUP_ALERT
//    <name> SOF_CNT_WKUP_ALERT </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x40040064) Number of SOF's for wakeup alert </i>
//    <edit> 
//      <loc> ( (unsigned short)((USB_CORE_GREFCLK >> 0) & 0x3FF), ((USB_CORE_GREFCLK = (USB_CORE_GREFCLK & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GREFCLK  --------------------------------
// SVD Line: 9457

//  <rtree> SFDITEM_REG__USB_CORE_GREFCLK
//    <name> GREFCLK </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040064) ref_clk Control Register </i>
//    <loc> ( (unsigned int)((USB_CORE_GREFCLK >> 0) & 0xFFFFFFFF), ((USB_CORE_GREFCLK = (USB_CORE_GREFCLK & ~(0xFFFFC3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFC3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GREFCLK_REFCLKPER </item>
//    <item> SFDITEM_FIELD__USB_CORE_GREFCLK_RefclkMode </item>
//    <item> SFDITEM_FIELD__USB_CORE_GREFCLK_SOF_CNT_WKUP_ALERT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: USB_CORE_GINTMSK2  ----------------------------
// SVD Line: 9502

unsigned int USB_CORE_GINTMSK2 __AT (0x40040068);



// ----------------------  Field Item: USB_CORE_GINTMSK2_WkUpAlertIntMsk  -------------------------
// SVD Line: 9511

//  <item> SFDITEM_FIELD__USB_CORE_GINTMSK2_WkUpAlertIntMsk
//    <name> WkUpAlertIntMsk </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40040068) \nRemote WakeUp Alert Interrupt Mask\n0 : MASK = Mask Remote WakeUp Alert Interrupt\n1 : NOMASK = Unmask Remote WakeUp Alert Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTMSK2 ) </loc>
//      <o.0..0> WkUpAlertIntMsk
//        <0=> 0: MASK = Mask Remote WakeUp Alert Interrupt
//        <1=> 1: NOMASK = Unmask Remote WakeUp Alert Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GINTMSK2  -------------------------------
// SVD Line: 9502

//  <rtree> SFDITEM_REG__USB_CORE_GINTMSK2
//    <name> GINTMSK2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40040068) Interrupt Mask Register 2 </i>
//    <loc> ( (unsigned int)((USB_CORE_GINTMSK2 >> 0) & 0xFFFFFFFF), ((USB_CORE_GINTMSK2 = (USB_CORE_GINTMSK2 & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GINTMSK2_WkUpAlertIntMsk </item>
//  </rtree>
//  


// ------------------------  Register Item Address: USB_CORE_GINTSTS2  ----------------------------
// SVD Line: 9533

unsigned int USB_CORE_GINTSTS2 __AT (0x4004006C);



// -----------------------  Field Item: USB_CORE_GINTSTS2_WkUpAlertInt  ---------------------------
// SVD Line: 9542

//  <item> SFDITEM_FIELD__USB_CORE_GINTSTS2_WkUpAlertInt
//    <name> WkUpAlertInt </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4004006C) \nRemote WakeUp Alert Interrupt\n0 : INACTIVE = Not Active\n1 : ACTIVE = Remote WakeUp Alert Interrupt detected </i>
//    <combo> 
//      <loc> ( (unsigned int) USB_CORE_GINTSTS2 ) </loc>
//      <o.0..0> WkUpAlertInt
//        <0=> 0: INACTIVE = Not Active
//        <1=> 1: ACTIVE = Remote WakeUp Alert Interrupt detected
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: USB_CORE_GINTSTS2  -------------------------------
// SVD Line: 9533

//  <rtree> SFDITEM_REG__USB_CORE_GINTSTS2
//    <name> GINTSTS2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4004006C) Interrupt Register 2 </i>
//    <loc> ( (unsigned int)((USB_CORE_GINTSTS2 >> 0) & 0xFFFFFFFF), ((USB_CORE_GINTSTS2 = (USB_CORE_GINTSTS2 & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__USB_CORE_GINTSTS2_WkUpAlertInt </item>
//  </rtree>
//  


// ------------------------  Register Item Address: USB_CORE_HPTXFSIZ  ----------------------------
// SVD Line: 9564

unsigned int USB_CORE_HPTXFSIZ __AT (0x40040100);



// ----------------------------  Register Item: USB_CORE_HPTXFSIZ  --------------------------------
// SVD Line: 9564

//  <item> SFDITEM_REG__USB_CORE_HPTXFSIZ
//    <name> HPTXFSIZ </name>
//    <i> [Bits 31..0] RW (@ 0x40040100) Host Periodic Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_HPTXFSIZ >> 0) & 0xFFFFFFFF), ((USB_CORE_HPTXFSIZ = (USB_CORE_HPTXFSIZ & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF0  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF0 __AT (0x40040104);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF0  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF0
//    <name> [0] </name>
//    <i> [Bits 31..0] RW (@ 0x40040104) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF0 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF0 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF1  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF1 __AT (0x40040108);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF1  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF1
//    <name> [1] </name>
//    <i> [Bits 31..0] RW (@ 0x40040108) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF1 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF1 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF2  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF2 __AT (0x4004010C);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF2  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF2
//    <name> [2] </name>
//    <i> [Bits 31..0] RW (@ 0x4004010C) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF2 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF2 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF3  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF3 __AT (0x40040110);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF3  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF3
//    <name> [3] </name>
//    <i> [Bits 31..0] RW (@ 0x40040110) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF3 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF3 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF4  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF4 __AT (0x40040114);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF4  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF4
//    <name> [4] </name>
//    <i> [Bits 31..0] RW (@ 0x40040114) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF4 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF4 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF5  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF5 __AT (0x40040118);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF5  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF5
//    <name> [5] </name>
//    <i> [Bits 31..0] RW (@ 0x40040118) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF5 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF5 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF6  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF6 __AT (0x4004011C);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF6  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF6
//    <name> [6] </name>
//    <i> [Bits 31..0] RW (@ 0x4004011C) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF6 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF6 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF7  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF7 __AT (0x40040120);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF7  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF7
//    <name> [7] </name>
//    <i> [Bits 31..0] RW (@ 0x40040120) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF7 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF7 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF8  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF8 __AT (0x40040124);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF8  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF8
//    <name> [8] </name>
//    <i> [Bits 31..0] RW (@ 0x40040124) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF8 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF8 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF9  -----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF9 __AT (0x40040128);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF9  ---------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF9
//    <name> [9] </name>
//    <i> [Bits 31..0] RW (@ 0x40040128) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF9 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF9 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF10  ----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF10 __AT (0x4004012C);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF10  --------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF10
//    <name> [10] </name>
//    <i> [Bits 31..0] RW (@ 0x4004012C) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF10 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF10 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF11  ----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF11 __AT (0x40040130);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF11  --------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF11
//    <name> [11] </name>
//    <i> [Bits 31..0] RW (@ 0x40040130) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF11 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF11 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF12  ----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF12 __AT (0x40040134);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF12  --------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF12
//    <name> [12] </name>
//    <i> [Bits 31..0] RW (@ 0x40040134) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF12 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF12 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF13  ----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF13 __AT (0x40040138);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF13  --------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF13
//    <name> [13] </name>
//    <i> [Bits 31..0] RW (@ 0x40040138) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF13 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF13 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Register Array Item Address: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF14  ----------------
// SVD Line: 9574

unsigned int USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF14 __AT (0x4004013C);



// -----------------  Register Array Item: USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF14  --------------------
// SVD Line: 9574

//  <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF14
//    <name> [14] </name>
//    <i> [Bits 31..0] RW (@ 0x4004013C) Device IN Endpoint Transmit FIFO Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF14 >> 0) & 0xFFFFFFFF), ((USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF14 = (USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Array ITree: USB_CORE_DIEPTXF  -----------------------------
// SVD Line: 9574

//  <itree> SFDITEM_REG__USB_CORE_DIEPTXF
//    <name> DIEPTXF </name>
//    <i> Device IN Endpoint Transmit FIFO Size Register </i>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF0 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF1 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF2 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF3 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF4 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF5 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF6 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF7 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF8 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF9 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF10 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF11 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF12 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF13 </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF_DIEPTXF_DIEPTXF14 </item>
//  </itree>
//  


// --------------------------------  Peripheral View: USB_CORE  -----------------------------------
// SVD Line: 3735

//  <view> USB_CORE
//    <name> USB_CORE </name>
//    <item> SFDITEM_REG__USB_CORE_GOTGCTL </item>
//    <item> SFDITEM_REG__USB_CORE_GOTGINT </item>
//    <item> SFDITEM_REG__USB_CORE_GAHBCFG </item>
//    <item> SFDITEM_REG__USB_CORE_GUSBCFG </item>
//    <item> SFDITEM_REG__USB_CORE_GRSTCTL </item>
//    <item> SFDITEM_REG__USB_CORE_GINTSTS </item>
//    <item> SFDITEM_REG__USB_CORE_GINTMSK </item>
//    <item> SFDITEM_REG__USB_CORE_GRXSTSR </item>
//    <item> SFDITEM_REG__USB_CORE_GRXSTSP </item>
//    <item> SFDITEM_REG__USB_CORE_GRXFSIZ </item>
//    <item> SFDITEM_REG__USB_CORE_GNPTXFSIZ </item>
//    <item> SFDITEM_REG__USB_CORE_GNPTXSTS </item>
//    <item> SFDITEM_REG__USB_CORE_GI2CCTL </item>
//    <item> SFDITEM_REG__USB_CORE_GPVNDCTL </item>
//    <item> SFDITEM_REG__USB_CORE_GGPIO </item>
//    <item> SFDITEM_REG__USB_CORE_GUID </item>
//    <item> SFDITEM_REG__USB_CORE_GSNPSID </item>
//    <item> SFDITEM_REG__USB_CORE_GHWCFG1 </item>
//    <item> SFDITEM_REG__USB_CORE_GHWCFG2 </item>
//    <item> SFDITEM_REG__USB_CORE_GHWCFG3 </item>
//    <item> SFDITEM_REG__USB_CORE_GHWCFG4 </item>
//    <item> SFDITEM_REG__USB_CORE_GLPMCFG </item>
//    <item> SFDITEM_REG__USB_CORE_GPWRDN </item>
//    <item> SFDITEM_REG__USB_CORE_GDFIFOCFG </item>
//    <item> SFDITEM_REG__USB_CORE_GADPCTL </item>
//    <item> SFDITEM_REG__USB_CORE_GREFCLK </item>
//    <item> SFDITEM_REG__USB_CORE_GINTMSK2 </item>
//    <item> SFDITEM_REG__USB_CORE_GINTSTS2 </item>
//    <item> SFDITEM_REG__USB_CORE_HPTXFSIZ </item>
//    <item> SFDITEM_REG__USB_CORE_DIEPTXF </item>
//  </view>
//  


// --------------------------  Register Item Address: USB_HOST_HCFG  ------------------------------
// SVD Line: 9609

unsigned int USB_HOST_HCFG __AT (0x40040400);



// ------------------------------  Register Item: USB_HOST_HCFG  ----------------------------------
// SVD Line: 9609

//  <item> SFDITEM_REG__USB_HOST_HCFG
//    <name> HCFG </name>
//    <i> [Bits 31..0] RW (@ 0x40040400) Host Configuration Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCFG >> 0) & 0xFFFFFFFF), ((USB_HOST_HCFG = (USB_HOST_HCFG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: USB_HOST_HFIR  ------------------------------
// SVD Line: 9619

unsigned int USB_HOST_HFIR __AT (0x40040404);



// ------------------------------  Register Item: USB_HOST_HFIR  ----------------------------------
// SVD Line: 9619

//  <item> SFDITEM_REG__USB_HOST_HFIR
//    <name> HFIR </name>
//    <i> [Bits 31..0] RW (@ 0x40040404) Host Frame Interval Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HFIR >> 0) & 0xFFFFFFFF), ((USB_HOST_HFIR = (USB_HOST_HFIR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: USB_HOST_HFNUM  -----------------------------
// SVD Line: 9629

unsigned int USB_HOST_HFNUM __AT (0x40040408);



// ------------------------------  Register Item: USB_HOST_HFNUM  ---------------------------------
// SVD Line: 9629

//  <item> SFDITEM_REG__USB_HOST_HFNUM
//    <name> HFNUM </name>
//    <i> [Bits 31..0] RO (@ 0x40040408) Host Frame Number/Frame Time Remaining Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HFNUM >> 0) & 0xFFFFFFFF), ((USB_HOST_HFNUM = (USB_HOST_HFNUM & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HPTXSTS  ----------------------------
// SVD Line: 9639

unsigned int USB_HOST_HPTXSTS __AT (0x40040410);



// -----------------------------  Register Item: USB_HOST_HPTXSTS  --------------------------------
// SVD Line: 9639

//  <item> SFDITEM_REG__USB_HOST_HPTXSTS
//    <name> HPTXSTS </name>
//    <i> [Bits 31..0] RO (@ 0x40040410) Host Periodic Transmit FIFO/Queue Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HPTXSTS >> 0) & 0xFFFFFFFF), ((USB_HOST_HPTXSTS = (USB_HOST_HPTXSTS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: USB_HOST_HAINT  -----------------------------
// SVD Line: 9649

unsigned int USB_HOST_HAINT __AT (0x40040414);



// ------------------------------  Register Item: USB_HOST_HAINT  ---------------------------------
// SVD Line: 9649

//  <item> SFDITEM_REG__USB_HOST_HAINT
//    <name> HAINT </name>
//    <i> [Bits 31..0] RO (@ 0x40040414) Host All Channels Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HAINT >> 0) & 0xFFFFFFFF), ((USB_HOST_HAINT = (USB_HOST_HAINT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_HOST_HAINTMSK  ----------------------------
// SVD Line: 9659

unsigned int USB_HOST_HAINTMSK __AT (0x40040418);



// ----------------------------  Register Item: USB_HOST_HAINTMSK  --------------------------------
// SVD Line: 9659

//  <item> SFDITEM_REG__USB_HOST_HAINTMSK
//    <name> HAINTMSK </name>
//    <i> [Bits 31..0] RW (@ 0x40040418) Host All Channels Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HAINTMSK >> 0) & 0xFFFFFFFF), ((USB_HOST_HAINTMSK = (USB_HOST_HAINTMSK & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_HOST_HFLBAddr  ----------------------------
// SVD Line: 9669

unsigned int USB_HOST_HFLBAddr __AT (0x4004041C);



// ----------------------------  Register Item: USB_HOST_HFLBAddr  --------------------------------
// SVD Line: 9669

//  <item> SFDITEM_REG__USB_HOST_HFLBAddr
//    <name> HFLBAddr </name>
//    <i> [Bits 31..0] RW (@ 0x4004041C) Host Frame List Base Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HFLBAddr >> 0) & 0xFFFFFFFF), ((USB_HOST_HFLBAddr = (USB_HOST_HFLBAddr & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: USB_HOST_HPRT  ------------------------------
// SVD Line: 9679

unsigned int USB_HOST_HPRT __AT (0x40040440);



// ------------------------------  Register Item: USB_HOST_HPRT  ----------------------------------
// SVD Line: 9679

//  <item> SFDITEM_REG__USB_HOST_HPRT
//    <name> HPRT </name>
//    <i> [Bits 31..0] RW (@ 0x40040440) Host Port Control and Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HPRT >> 0) & 0xFFFFFFFF), ((USB_HOST_HPRT = (USB_HOST_HPRT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCCHAR0  ----------------------------
// SVD Line: 9689

unsigned int USB_HOST_HCCHAR0 __AT (0x40040500);



// -----------------------------  Register Item: USB_HOST_HCCHAR0  --------------------------------
// SVD Line: 9689

//  <item> SFDITEM_REG__USB_HOST_HCCHAR0
//    <name> HCCHAR0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040500) Host Channel 0 Characteristics Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCCHAR0 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCCHAR0 = (USB_HOST_HCCHAR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCSPLT0  ----------------------------
// SVD Line: 9699

unsigned int USB_HOST_HCSPLT0 __AT (0x40040504);



// -----------------------------  Register Item: USB_HOST_HCSPLT0  --------------------------------
// SVD Line: 9699

//  <item> SFDITEM_REG__USB_HOST_HCSPLT0
//    <name> HCSPLT0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040504) Host Channel 0 Split Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCSPLT0 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCSPLT0 = (USB_HOST_HCSPLT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCINT0  -----------------------------
// SVD Line: 9709

unsigned int USB_HOST_HCINT0 __AT (0x40040508);



// -----------------------------  Register Item: USB_HOST_HCINT0  ---------------------------------
// SVD Line: 9709

//  <item> SFDITEM_REG__USB_HOST_HCINT0
//    <name> HCINT0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040508) Host Channel 0 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCINT0 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCINT0 = (USB_HOST_HCINT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_HOST_HCINTMSK0  ---------------------------
// SVD Line: 9719

unsigned int USB_HOST_HCINTMSK0 __AT (0x4004050C);



// ----------------------------  Register Item: USB_HOST_HCINTMSK0  -------------------------------
// SVD Line: 9719

//  <item> SFDITEM_REG__USB_HOST_HCINTMSK0
//    <name> HCINTMSK0 </name>
//    <i> [Bits 31..0] RW (@ 0x4004050C) Host Channel 0 Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCINTMSK0 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCINTMSK0 = (USB_HOST_HCINTMSK0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCTSIZ0  ----------------------------
// SVD Line: 9729

unsigned int USB_HOST_HCTSIZ0 __AT (0x40040510);



// -----------------------------  Register Item: USB_HOST_HCTSIZ0  --------------------------------
// SVD Line: 9729

//  <item> SFDITEM_REG__USB_HOST_HCTSIZ0
//    <name> HCTSIZ0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040510) Host Channel 0 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCTSIZ0 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCTSIZ0 = (USB_HOST_HCTSIZ0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCCHAR1  ----------------------------
// SVD Line: 9739

unsigned int USB_HOST_HCCHAR1 __AT (0x40040520);



// -----------------------------  Register Item: USB_HOST_HCCHAR1  --------------------------------
// SVD Line: 9739

//  <item> SFDITEM_REG__USB_HOST_HCCHAR1
//    <name> HCCHAR1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040520) Host Channel 1 Characteristics Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCCHAR1 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCCHAR1 = (USB_HOST_HCCHAR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCSPLT1  ----------------------------
// SVD Line: 9747

unsigned int USB_HOST_HCSPLT1 __AT (0x40040524);



// -----------------------------  Register Item: USB_HOST_HCSPLT1  --------------------------------
// SVD Line: 9747

//  <item> SFDITEM_REG__USB_HOST_HCSPLT1
//    <name> HCSPLT1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040524) Host Channel 1 Split Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCSPLT1 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCSPLT1 = (USB_HOST_HCSPLT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCINT1  -----------------------------
// SVD Line: 9755

unsigned int USB_HOST_HCINT1 __AT (0x40040528);



// -----------------------------  Register Item: USB_HOST_HCINT1  ---------------------------------
// SVD Line: 9755

//  <item> SFDITEM_REG__USB_HOST_HCINT1
//    <name> HCINT1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040528) Host Channel 1 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCINT1 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCINT1 = (USB_HOST_HCINT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_HOST_HCINTMSK1  ---------------------------
// SVD Line: 9763

unsigned int USB_HOST_HCINTMSK1 __AT (0x4004052C);



// ----------------------------  Register Item: USB_HOST_HCINTMSK1  -------------------------------
// SVD Line: 9763

//  <item> SFDITEM_REG__USB_HOST_HCINTMSK1
//    <name> HCINTMSK1 </name>
//    <i> [Bits 31..0] RW (@ 0x4004052C) Host Channel 1 Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCINTMSK1 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCINTMSK1 = (USB_HOST_HCINTMSK1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCTSIZ1  ----------------------------
// SVD Line: 9771

unsigned int USB_HOST_HCTSIZ1 __AT (0x40040530);



// -----------------------------  Register Item: USB_HOST_HCTSIZ1  --------------------------------
// SVD Line: 9771

//  <item> SFDITEM_REG__USB_HOST_HCTSIZ1
//    <name> HCTSIZ1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040530) Host Channel 1 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCTSIZ1 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCTSIZ1 = (USB_HOST_HCTSIZ1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCCHAR2  ----------------------------
// SVD Line: 9781

unsigned int USB_HOST_HCCHAR2 __AT (0x40040540);



// -----------------------------  Register Item: USB_HOST_HCCHAR2  --------------------------------
// SVD Line: 9781

//  <item> SFDITEM_REG__USB_HOST_HCCHAR2
//    <name> HCCHAR2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040540) Host Channel 2 Characteristics Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCCHAR2 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCCHAR2 = (USB_HOST_HCCHAR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCSPLT2  ----------------------------
// SVD Line: 9789

unsigned int USB_HOST_HCSPLT2 __AT (0x40040544);



// -----------------------------  Register Item: USB_HOST_HCSPLT2  --------------------------------
// SVD Line: 9789

//  <item> SFDITEM_REG__USB_HOST_HCSPLT2
//    <name> HCSPLT2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040544) Host Channel 2 Split Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCSPLT2 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCSPLT2 = (USB_HOST_HCSPLT2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCINT2  -----------------------------
// SVD Line: 9797

unsigned int USB_HOST_HCINT2 __AT (0x40040548);



// -----------------------------  Register Item: USB_HOST_HCINT2  ---------------------------------
// SVD Line: 9797

//  <item> SFDITEM_REG__USB_HOST_HCINT2
//    <name> HCINT2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040548) Host Channel 2 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCINT2 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCINT2 = (USB_HOST_HCINT2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_HOST_HCINTMSK2  ---------------------------
// SVD Line: 9805

unsigned int USB_HOST_HCINTMSK2 __AT (0x4004054C);



// ----------------------------  Register Item: USB_HOST_HCINTMSK2  -------------------------------
// SVD Line: 9805

//  <item> SFDITEM_REG__USB_HOST_HCINTMSK2
//    <name> HCINTMSK2 </name>
//    <i> [Bits 31..0] RW (@ 0x4004054C) Host Channel 2 Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCINTMSK2 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCINTMSK2 = (USB_HOST_HCINTMSK2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCTSIZ2  ----------------------------
// SVD Line: 9813

unsigned int USB_HOST_HCTSIZ2 __AT (0x40040550);



// -----------------------------  Register Item: USB_HOST_HCTSIZ2  --------------------------------
// SVD Line: 9813

//  <item> SFDITEM_REG__USB_HOST_HCTSIZ2
//    <name> HCTSIZ2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040550) Host Channel 2 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCTSIZ2 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCTSIZ2 = (USB_HOST_HCTSIZ2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCCHAR3  ----------------------------
// SVD Line: 9822

unsigned int USB_HOST_HCCHAR3 __AT (0x40040560);



// -----------------------------  Register Item: USB_HOST_HCCHAR3  --------------------------------
// SVD Line: 9822

//  <item> SFDITEM_REG__USB_HOST_HCCHAR3
//    <name> HCCHAR3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040560) Host Channel 3 Characteristics Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCCHAR3 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCCHAR3 = (USB_HOST_HCCHAR3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCSPLT3  ----------------------------
// SVD Line: 9830

unsigned int USB_HOST_HCSPLT3 __AT (0x40040564);



// -----------------------------  Register Item: USB_HOST_HCSPLT3  --------------------------------
// SVD Line: 9830

//  <item> SFDITEM_REG__USB_HOST_HCSPLT3
//    <name> HCSPLT3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040564) Host Channel 3 Split Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCSPLT3 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCSPLT3 = (USB_HOST_HCSPLT3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCINT3  -----------------------------
// SVD Line: 9838

unsigned int USB_HOST_HCINT3 __AT (0x40040568);



// -----------------------------  Register Item: USB_HOST_HCINT3  ---------------------------------
// SVD Line: 9838

//  <item> SFDITEM_REG__USB_HOST_HCINT3
//    <name> HCINT3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040568) Host Channel 3 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCINT3 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCINT3 = (USB_HOST_HCINT3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_HOST_HCINTMSK3  ---------------------------
// SVD Line: 9846

unsigned int USB_HOST_HCINTMSK3 __AT (0x4004056C);



// ----------------------------  Register Item: USB_HOST_HCINTMSK3  -------------------------------
// SVD Line: 9846

//  <item> SFDITEM_REG__USB_HOST_HCINTMSK3
//    <name> HCINTMSK3 </name>
//    <i> [Bits 31..0] RW (@ 0x4004056C) Host Channel 3 Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCINTMSK3 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCINTMSK3 = (USB_HOST_HCINTMSK3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_HOST_HCTSIZ3  ----------------------------
// SVD Line: 9854

unsigned int USB_HOST_HCTSIZ3 __AT (0x40040570);



// -----------------------------  Register Item: USB_HOST_HCTSIZ3  --------------------------------
// SVD Line: 9854

//  <item> SFDITEM_REG__USB_HOST_HCTSIZ3
//    <name> HCTSIZ3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040570) Host Channel 3 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_HOST_HCTSIZ3 >> 0) & 0xFFFFFFFF), ((USB_HOST_HCTSIZ3 = (USB_HOST_HCTSIZ3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Peripheral View: USB_HOST  -----------------------------------
// SVD Line: 9589

//  <view> USB_HOST
//    <name> USB_HOST </name>
//    <item> SFDITEM_REG__USB_HOST_HCFG </item>
//    <item> SFDITEM_REG__USB_HOST_HFIR </item>
//    <item> SFDITEM_REG__USB_HOST_HFNUM </item>
//    <item> SFDITEM_REG__USB_HOST_HPTXSTS </item>
//    <item> SFDITEM_REG__USB_HOST_HAINT </item>
//    <item> SFDITEM_REG__USB_HOST_HAINTMSK </item>
//    <item> SFDITEM_REG__USB_HOST_HFLBAddr </item>
//    <item> SFDITEM_REG__USB_HOST_HPRT </item>
//    <item> SFDITEM_REG__USB_HOST_HCCHAR0 </item>
//    <item> SFDITEM_REG__USB_HOST_HCSPLT0 </item>
//    <item> SFDITEM_REG__USB_HOST_HCINT0 </item>
//    <item> SFDITEM_REG__USB_HOST_HCINTMSK0 </item>
//    <item> SFDITEM_REG__USB_HOST_HCTSIZ0 </item>
//    <item> SFDITEM_REG__USB_HOST_HCCHAR1 </item>
//    <item> SFDITEM_REG__USB_HOST_HCSPLT1 </item>
//    <item> SFDITEM_REG__USB_HOST_HCINT1 </item>
//    <item> SFDITEM_REG__USB_HOST_HCINTMSK1 </item>
//    <item> SFDITEM_REG__USB_HOST_HCTSIZ1 </item>
//    <item> SFDITEM_REG__USB_HOST_HCCHAR2 </item>
//    <item> SFDITEM_REG__USB_HOST_HCSPLT2 </item>
//    <item> SFDITEM_REG__USB_HOST_HCINT2 </item>
//    <item> SFDITEM_REG__USB_HOST_HCINTMSK2 </item>
//    <item> SFDITEM_REG__USB_HOST_HCTSIZ2 </item>
//    <item> SFDITEM_REG__USB_HOST_HCCHAR3 </item>
//    <item> SFDITEM_REG__USB_HOST_HCSPLT3 </item>
//    <item> SFDITEM_REG__USB_HOST_HCINT3 </item>
//    <item> SFDITEM_REG__USB_HOST_HCINTMSK3 </item>
//    <item> SFDITEM_REG__USB_HOST_HCTSIZ3 </item>
//  </view>
//  


// -------------------------  Register Item Address: USB_DEVICE_DCFG  -----------------------------
// SVD Line: 9886

unsigned int USB_DEVICE_DCFG __AT (0x40040800);



// -----------------------------  Register Item: USB_DEVICE_DCFG  ---------------------------------
// SVD Line: 9886

//  <item> SFDITEM_REG__USB_DEVICE_DCFG
//    <name> DCFG </name>
//    <i> [Bits 31..0] RW (@ 0x40040800) Device Configuration Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DCFG >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DCFG = (USB_DEVICE_DCFG & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_DEVICE_DCTL  -----------------------------
// SVD Line: 9896

unsigned int USB_DEVICE_DCTL __AT (0x40040804);



// -----------------------------  Register Item: USB_DEVICE_DCTL  ---------------------------------
// SVD Line: 9896

//  <item> SFDITEM_REG__USB_DEVICE_DCTL
//    <name> DCTL </name>
//    <i> [Bits 31..0] RW (@ 0x40040804) Device Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DCTL >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DCTL = (USB_DEVICE_DCTL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_DEVICE_DSTS  -----------------------------
// SVD Line: 9906

unsigned int USB_DEVICE_DSTS __AT (0x40040808);



// -----------------------------  Register Item: USB_DEVICE_DSTS  ---------------------------------
// SVD Line: 9906

//  <item> SFDITEM_REG__USB_DEVICE_DSTS
//    <name> DSTS </name>
//    <i> [Bits 31..0] RW (@ 0x40040808) Device Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DSTS >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DSTS = (USB_DEVICE_DSTS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_DEVICE_DIEPMSK  ---------------------------
// SVD Line: 9916

unsigned int USB_DEVICE_DIEPMSK __AT (0x40040810);



// ----------------------------  Register Item: USB_DEVICE_DIEPMSK  -------------------------------
// SVD Line: 9916

//  <item> SFDITEM_REG__USB_DEVICE_DIEPMSK
//    <name> DIEPMSK </name>
//    <i> [Bits 31..0] RW (@ 0x40040810) Device IN Endpoint Common Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPMSK >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPMSK = (USB_DEVICE_DIEPMSK & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_DEVICE_DOEPMSK  ---------------------------
// SVD Line: 9926

unsigned int USB_DEVICE_DOEPMSK __AT (0x40040814);



// ----------------------------  Register Item: USB_DEVICE_DOEPMSK  -------------------------------
// SVD Line: 9926

//  <item> SFDITEM_REG__USB_DEVICE_DOEPMSK
//    <name> DOEPMSK </name>
//    <i> [Bits 31..0] RW (@ 0x40040814) Device OUT Endpoint Common Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPMSK >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPMSK = (USB_DEVICE_DOEPMSK & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: USB_DEVICE_DAINT  ----------------------------
// SVD Line: 9936

unsigned int USB_DEVICE_DAINT __AT (0x40040818);



// -----------------------------  Register Item: USB_DEVICE_DAINT  --------------------------------
// SVD Line: 9936

//  <item> SFDITEM_REG__USB_DEVICE_DAINT
//    <name> DAINT </name>
//    <i> [Bits 31..0] RW (@ 0x40040818) Device All Endpoints Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DAINT >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DAINT = (USB_DEVICE_DAINT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_DEVICE_DAINTMSK  ---------------------------
// SVD Line: 9946

unsigned int USB_DEVICE_DAINTMSK __AT (0x4004081C);



// ---------------------------  Register Item: USB_DEVICE_DAINTMSK  -------------------------------
// SVD Line: 9946

//  <item> SFDITEM_REG__USB_DEVICE_DAINTMSK
//    <name> DAINTMSK </name>
//    <i> [Bits 31..0] RW (@ 0x4004081C) Device All Endpoints Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DAINTMSK >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DAINTMSK = (USB_DEVICE_DAINTMSK & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_DEVICE_DVBUSDIS  ---------------------------
// SVD Line: 9956

unsigned int USB_DEVICE_DVBUSDIS __AT (0x40040828);



// ---------------------------  Register Item: USB_DEVICE_DVBUSDIS  -------------------------------
// SVD Line: 9956

//  <item> SFDITEM_REG__USB_DEVICE_DVBUSDIS
//    <name> DVBUSDIS </name>
//    <i> [Bits 31..0] RW (@ 0x40040828) Device VBUS Discharge Time Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DVBUSDIS >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DVBUSDIS = (USB_DEVICE_DVBUSDIS & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_DEVICE_DVBUSPULSE  --------------------------
// SVD Line: 9966

unsigned int USB_DEVICE_DVBUSPULSE __AT (0x4004082C);



// --------------------------  Register Item: USB_DEVICE_DVBUSPULSE  ------------------------------
// SVD Line: 9966

//  <item> SFDITEM_REG__USB_DEVICE_DVBUSPULSE
//    <name> DVBUSPULSE </name>
//    <i> [Bits 31..0] RW (@ 0x4004082C) Device VBUS Pulsing Time Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DVBUSPULSE >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DVBUSPULSE = (USB_DEVICE_DVBUSPULSE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_DEVICE_DTHRCTL  ---------------------------
// SVD Line: 9976

unsigned int USB_DEVICE_DTHRCTL __AT (0x40040830);



// ----------------------------  Register Item: USB_DEVICE_DTHRCTL  -------------------------------
// SVD Line: 9976

//  <item> SFDITEM_REG__USB_DEVICE_DTHRCTL
//    <name> DTHRCTL </name>
//    <i> [Bits 31..0] RW (@ 0x40040830) Device Threshold Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DTHRCTL >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DTHRCTL = (USB_DEVICE_DTHRCTL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_DEVICE_DIEPEMPMSK  --------------------------
// SVD Line: 9986

unsigned int USB_DEVICE_DIEPEMPMSK __AT (0x40040834);



// --------------------------  Register Item: USB_DEVICE_DIEPEMPMSK  ------------------------------
// SVD Line: 9986

//  <item> SFDITEM_REG__USB_DEVICE_DIEPEMPMSK
//    <name> DIEPEMPMSK </name>
//    <i> [Bits 31..0] RW (@ 0x40040834) Device IN Endpoint FIFO Empty Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPEMPMSK >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPEMPMSK = (USB_DEVICE_DIEPEMPMSK & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_DEVICE_DEACHINT  ---------------------------
// SVD Line: 9996

unsigned int USB_DEVICE_DEACHINT __AT (0x40040838);



// ---------------------------  Register Item: USB_DEVICE_DEACHINT  -------------------------------
// SVD Line: 9996

//  <item> SFDITEM_REG__USB_DEVICE_DEACHINT
//    <name> DEACHINT </name>
//    <i> [Bits 31..0] RW (@ 0x40040838) Device Each Endpoints Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DEACHINT >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DEACHINT = (USB_DEVICE_DEACHINT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------  Register Item Address: USB_DEVICE_DEACHINTMSK0  -------------------------
// SVD Line: 10006

unsigned int USB_DEVICE_DEACHINTMSK0 __AT (0x4004083C);



// -------------------------  Register Item: USB_DEVICE_DEACHINTMSK0  -----------------------------
// SVD Line: 10006

//  <item> SFDITEM_REG__USB_DEVICE_DEACHINTMSK0
//    <name> DEACHINTMSK0 </name>
//    <i> [Bits 31..0] RW (@ 0x4004083C) Device Each Endpoints Interrupt Mask Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DEACHINTMSK0 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DEACHINTMSK0 = (USB_DEVICE_DEACHINTMSK0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF0  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF0 __AT (0x40040840);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF0  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF0
//    <name> [0] </name>
//    <i> [Bits 31..0] RW (@ 0x40040840) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF0 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF0 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF1  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF1 __AT (0x40040844);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF1  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF1
//    <name> [1] </name>
//    <i> [Bits 31..0] RW (@ 0x40040844) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF1 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF1 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF2  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF2 __AT (0x40040848);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF2  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF2
//    <name> [2] </name>
//    <i> [Bits 31..0] RW (@ 0x40040848) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF2 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF2 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF3  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF3 __AT (0x4004084C);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF3  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF3
//    <name> [3] </name>
//    <i> [Bits 31..0] RW (@ 0x4004084C) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF3 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF3 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF4  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF4 __AT (0x40040850);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF4  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF4
//    <name> [4] </name>
//    <i> [Bits 31..0] RW (@ 0x40040850) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF4 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF4 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF5  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF5 __AT (0x40040854);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF5  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF5
//    <name> [5] </name>
//    <i> [Bits 31..0] RW (@ 0x40040854) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF5 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF5 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF6  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF6 __AT (0x40040858);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF6  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF6
//    <name> [6] </name>
//    <i> [Bits 31..0] RW (@ 0x40040858) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF6 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF6 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF7  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF7 __AT (0x4004085C);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF7  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF7
//    <name> [7] </name>
//    <i> [Bits 31..0] RW (@ 0x4004085C) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF7 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF7 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF8  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF8 __AT (0x40040860);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF8  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF8
//    <name> [8] </name>
//    <i> [Bits 31..0] RW (@ 0x40040860) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF8 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF8 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF9  ----------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF9 __AT (0x40040864);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF9  --------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF9
//    <name> [9] </name>
//    <i> [Bits 31..0] RW (@ 0x40040864) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF9 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF9 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF10  ---------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF10 __AT (0x40040868);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF10  -------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF10
//    <name> [10] </name>
//    <i> [Bits 31..0] RW (@ 0x40040868) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF10 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF10 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF11  ---------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF11 __AT (0x4004086C);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF11  -------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF11
//    <name> [11] </name>
//    <i> [Bits 31..0] RW (@ 0x4004086C) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF11 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF11 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF12  ---------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF12 __AT (0x40040870);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF12  -------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF12
//    <name> [12] </name>
//    <i> [Bits 31..0] RW (@ 0x40040870) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF12 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF12 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF13  ---------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF13 __AT (0x40040874);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF13  -------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF13
//    <name> [13] </name>
//    <i> [Bits 31..0] RW (@ 0x40040874) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF13 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF13 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF14  ---------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF14 __AT (0x40040878);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF14  -------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF14
//    <name> [14] </name>
//    <i> [Bits 31..0] RW (@ 0x40040878) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF14 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF14 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------  Register Array Item Address: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF15  ---------------
// SVD Line: 10016

unsigned int USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF15 __AT (0x4004087C);



// ----------------  Register Array Item: USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF15  -------------------
// SVD Line: 10016

//  <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF15
//    <name> [15] </name>
//    <i> [Bits 31..0] RW (@ 0x4004087C) Device Each IN Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF15 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF15 = (USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Array ITree: USB_DEVICE_DIEPTXF  ----------------------------
// SVD Line: 10016

//  <itree> SFDITEM_REG__USB_DEVICE_DIEPTXF
//    <name> DIEPTXF </name>
//    <i> Device Each IN Endpoint Interrupt Registers </i>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF0 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF1 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF2 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF3 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF4 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF5 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF6 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF7 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF8 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF9 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF10 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF11 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF12 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF13 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF14 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF_DIEPTXF_DIEPTXF15 </item>
//  </itree>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK0  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK0 __AT (0x40040880);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK0  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK0
//    <name> [0] </name>
//    <i> [Bits 31..0] RW (@ 0x40040880) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK0 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK0 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK1  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK1 __AT (0x40040884);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK1  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK1
//    <name> [1] </name>
//    <i> [Bits 31..0] RW (@ 0x40040884) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK1 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK1 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK2  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK2 __AT (0x40040888);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK2  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK2
//    <name> [2] </name>
//    <i> [Bits 31..0] RW (@ 0x40040888) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK2 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK2 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK3  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK3 __AT (0x4004088C);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK3  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK3
//    <name> [3] </name>
//    <i> [Bits 31..0] RW (@ 0x4004088C) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK3 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK3 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK4  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK4 __AT (0x40040890);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK4  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK4
//    <name> [4] </name>
//    <i> [Bits 31..0] RW (@ 0x40040890) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK4 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK4 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK5  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK5 __AT (0x40040894);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK5  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK5
//    <name> [5] </name>
//    <i> [Bits 31..0] RW (@ 0x40040894) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK5 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK5 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK6  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK6 __AT (0x40040898);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK6  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK6
//    <name> [6] </name>
//    <i> [Bits 31..0] RW (@ 0x40040898) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK6 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK6 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK7  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK7 __AT (0x4004089C);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK7  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK7
//    <name> [7] </name>
//    <i> [Bits 31..0] RW (@ 0x4004089C) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK7 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK7 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK8  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK8 __AT (0x400408A0);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK8  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK8
//    <name> [8] </name>
//    <i> [Bits 31..0] RW (@ 0x400408A0) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK8 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK8 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK9  ----------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK9 __AT (0x400408A4);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK9  --------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK9
//    <name> [9] </name>
//    <i> [Bits 31..0] RW (@ 0x400408A4) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK9 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK9 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK10  ---------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK10 __AT (0x400408A8);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK10  -------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK10
//    <name> [10] </name>
//    <i> [Bits 31..0] RW (@ 0x400408A8) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK10 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK10 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK11  ---------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK11 __AT (0x400408AC);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK11  -------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK11
//    <name> [11] </name>
//    <i> [Bits 31..0] RW (@ 0x400408AC) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK11 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK11 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK12  ---------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK12 __AT (0x400408B0);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK12  -------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK12
//    <name> [12] </name>
//    <i> [Bits 31..0] RW (@ 0x400408B0) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK12 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK12 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK13  ---------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK13 __AT (0x400408B4);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK13  -------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK13
//    <name> [13] </name>
//    <i> [Bits 31..0] RW (@ 0x400408B4) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK13 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK13 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK14  ---------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK14 __AT (0x400408B8);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK14  -------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK14
//    <name> [14] </name>
//    <i> [Bits 31..0] RW (@ 0x400408B8) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK14 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK14 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------  Register Array Item Address: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK15  ---------
// SVD Line: 10029

unsigned int USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK15 __AT (0x400408BC);



// ----------  Register Array Item: USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK15  -------------
// SVD Line: 10029

//  <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK15
//    <name> [15] </name>
//    <i> [Bits 31..0] RW (@ 0x400408BC) Device Each OUT Endpoint Interrupt Registers </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK15 >> 0) & 0xFFFFFFFF), ((USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK15 = (USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Array ITree: USB_DEVICE_DOEPEACHMSK  --------------------------
// SVD Line: 10029

//  <itree> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK
//    <name> DOEPEACHMSK </name>
//    <i> Device Each OUT Endpoint Interrupt Registers </i>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK0 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK1 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK2 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK3 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK4 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK5 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK6 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK7 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK8 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK9 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK10 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK11 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK12 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK13 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK14 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK_DOEPEACHMSK_DOEPEACHMSK15 </item>
//  </itree>
//  


// -------------------------------  Peripheral View: USB_DEVICE  ----------------------------------
// SVD Line: 9866

//  <view> USB_DEVICE
//    <name> USB_DEVICE </name>
//    <item> SFDITEM_REG__USB_DEVICE_DCFG </item>
//    <item> SFDITEM_REG__USB_DEVICE_DCTL </item>
//    <item> SFDITEM_REG__USB_DEVICE_DSTS </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPMSK </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPMSK </item>
//    <item> SFDITEM_REG__USB_DEVICE_DAINT </item>
//    <item> SFDITEM_REG__USB_DEVICE_DAINTMSK </item>
//    <item> SFDITEM_REG__USB_DEVICE_DVBUSDIS </item>
//    <item> SFDITEM_REG__USB_DEVICE_DVBUSPULSE </item>
//    <item> SFDITEM_REG__USB_DEVICE_DTHRCTL </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPEMPMSK </item>
//    <item> SFDITEM_REG__USB_DEVICE_DEACHINT </item>
//    <item> SFDITEM_REG__USB_DEVICE_DEACHINTMSK0 </item>
//    <item> SFDITEM_REG__USB_DEVICE_DIEPTXF </item>
//    <item> SFDITEM_REG__USB_DEVICE_DOEPEACHMSK </item>
//  </view>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL0  ---------------------------
// SVD Line: 10064

unsigned int USB_IN_EP_DIEPCTL0 __AT (0x40040900);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL0  -------------------------------
// SVD Line: 10064

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL0
//    <name> DIEPCTL0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040900) Device Control IN Endpoint 0 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL0 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL0 = (USB_IN_EP_DIEPCTL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL1  ---------------------------
// SVD Line: 10072

unsigned int USB_IN_EP_DIEPCTL1 __AT (0x40040920);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL1  -------------------------------
// SVD Line: 10072

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL1
//    <name> DIEPCTL1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040920) Device Control IN Endpoint 1 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL1 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL1 = (USB_IN_EP_DIEPCTL1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL2  ---------------------------
// SVD Line: 10080

unsigned int USB_IN_EP_DIEPCTL2 __AT (0x40040940);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL2  -------------------------------
// SVD Line: 10080

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL2
//    <name> DIEPCTL2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040940) Device Control IN Endpoint 2 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL2 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL2 = (USB_IN_EP_DIEPCTL2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL3  ---------------------------
// SVD Line: 10088

unsigned int USB_IN_EP_DIEPCTL3 __AT (0x40040960);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL3  -------------------------------
// SVD Line: 10088

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL3
//    <name> DIEPCTL3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040960) Device Control IN Endpoint 3 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL3 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL3 = (USB_IN_EP_DIEPCTL3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL4  ---------------------------
// SVD Line: 10096

unsigned int USB_IN_EP_DIEPCTL4 __AT (0x40040980);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL4  -------------------------------
// SVD Line: 10096

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL4
//    <name> DIEPCTL4 </name>
//    <i> [Bits 31..0] RW (@ 0x40040980) Device Control IN Endpoint 4 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL4 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL4 = (USB_IN_EP_DIEPCTL4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL5  ---------------------------
// SVD Line: 10104

unsigned int USB_IN_EP_DIEPCTL5 __AT (0x400409A0);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL5  -------------------------------
// SVD Line: 10104

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL5
//    <name> DIEPCTL5 </name>
//    <i> [Bits 31..0] RW (@ 0x400409A0) Device Control IN Endpoint 5 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL5 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL5 = (USB_IN_EP_DIEPCTL5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL6  ---------------------------
// SVD Line: 10112

unsigned int USB_IN_EP_DIEPCTL6 __AT (0x400409C0);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL6  -------------------------------
// SVD Line: 10112

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL6
//    <name> DIEPCTL6 </name>
//    <i> [Bits 31..0] RW (@ 0x400409C0) Device Control IN Endpoint 6 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL6 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL6 = (USB_IN_EP_DIEPCTL6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL7  ---------------------------
// SVD Line: 10120

unsigned int USB_IN_EP_DIEPCTL7 __AT (0x400409E0);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL7  -------------------------------
// SVD Line: 10120

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL7
//    <name> DIEPCTL7 </name>
//    <i> [Bits 31..0] RW (@ 0x400409E0) Device Control IN Endpoint 7 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL7 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL7 = (USB_IN_EP_DIEPCTL7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL8  ---------------------------
// SVD Line: 10128

unsigned int USB_IN_EP_DIEPCTL8 __AT (0x40040A00);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL8  -------------------------------
// SVD Line: 10128

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL8
//    <name> DIEPCTL8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A00) Device Control IN Endpoint 8 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL8 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL8 = (USB_IN_EP_DIEPCTL8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPCTL9  ---------------------------
// SVD Line: 10136

unsigned int USB_IN_EP_DIEPCTL9 __AT (0x40040A20);



// ----------------------------  Register Item: USB_IN_EP_DIEPCTL9  -------------------------------
// SVD Line: 10136

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL9
//    <name> DIEPCTL9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A20) Device Control IN Endpoint 9 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL9 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL9 = (USB_IN_EP_DIEPCTL9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPCTL10  ---------------------------
// SVD Line: 10144

unsigned int USB_IN_EP_DIEPCTL10 __AT (0x40040A40);



// ---------------------------  Register Item: USB_IN_EP_DIEPCTL10  -------------------------------
// SVD Line: 10144

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL10
//    <name> DIEPCTL10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A40) Device Control IN Endpoint 10 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL10 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL10 = (USB_IN_EP_DIEPCTL10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPCTL11  ---------------------------
// SVD Line: 10152

unsigned int USB_IN_EP_DIEPCTL11 __AT (0x40040A60);



// ---------------------------  Register Item: USB_IN_EP_DIEPCTL11  -------------------------------
// SVD Line: 10152

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL11
//    <name> DIEPCTL11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A60) Device Control IN Endpoint 11 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL11 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL11 = (USB_IN_EP_DIEPCTL11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPCTL12  ---------------------------
// SVD Line: 10160

unsigned int USB_IN_EP_DIEPCTL12 __AT (0x40040A80);



// ---------------------------  Register Item: USB_IN_EP_DIEPCTL12  -------------------------------
// SVD Line: 10160

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL12
//    <name> DIEPCTL12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A80) Device Control IN Endpoint 12 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL12 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL12 = (USB_IN_EP_DIEPCTL12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPCTL13  ---------------------------
// SVD Line: 10168

unsigned int USB_IN_EP_DIEPCTL13 __AT (0x40040AA0);



// ---------------------------  Register Item: USB_IN_EP_DIEPCTL13  -------------------------------
// SVD Line: 10168

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL13
//    <name> DIEPCTL13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AA0) Device Control IN Endpoint 13 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL13 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL13 = (USB_IN_EP_DIEPCTL13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPCTL14  ---------------------------
// SVD Line: 10176

unsigned int USB_IN_EP_DIEPCTL14 __AT (0x40040AC0);



// ---------------------------  Register Item: USB_IN_EP_DIEPCTL14  -------------------------------
// SVD Line: 10176

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL14
//    <name> DIEPCTL14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AC0) Device Control IN Endpoint 14 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL14 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL14 = (USB_IN_EP_DIEPCTL14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPCTL15  ---------------------------
// SVD Line: 10184

unsigned int USB_IN_EP_DIEPCTL15 __AT (0x40040AE0);



// ---------------------------  Register Item: USB_IN_EP_DIEPCTL15  -------------------------------
// SVD Line: 10184

//  <item> SFDITEM_REG__USB_IN_EP_DIEPCTL15
//    <name> DIEPCTL15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AE0) Device Control IN Endpoint 15 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPCTL15 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPCTL15 = (USB_IN_EP_DIEPCTL15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT0  ---------------------------
// SVD Line: 10196

unsigned int USB_IN_EP_DIEPINT0 __AT (0x40040908);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT0  -------------------------------
// SVD Line: 10196

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT0
//    <name> DIEPINT0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040908) Device IN Endpoint 0 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT0 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT0 = (USB_IN_EP_DIEPINT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT1  ---------------------------
// SVD Line: 10204

unsigned int USB_IN_EP_DIEPINT1 __AT (0x40040928);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT1  -------------------------------
// SVD Line: 10204

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT1
//    <name> DIEPINT1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040928) Device IN Endpoint 1 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT1 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT1 = (USB_IN_EP_DIEPINT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT2  ---------------------------
// SVD Line: 10212

unsigned int USB_IN_EP_DIEPINT2 __AT (0x40040948);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT2  -------------------------------
// SVD Line: 10212

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT2
//    <name> DIEPINT2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040948) Device IN Endpoint 2 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT2 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT2 = (USB_IN_EP_DIEPINT2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT3  ---------------------------
// SVD Line: 10220

unsigned int USB_IN_EP_DIEPINT3 __AT (0x40040968);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT3  -------------------------------
// SVD Line: 10220

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT3
//    <name> DIEPINT3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040968) Device IN Endpoint 3 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT3 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT3 = (USB_IN_EP_DIEPINT3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT4  ---------------------------
// SVD Line: 10228

unsigned int USB_IN_EP_DIEPINT4 __AT (0x40040988);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT4  -------------------------------
// SVD Line: 10228

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT4
//    <name> DIEPINT4 </name>
//    <i> [Bits 31..0] RW (@ 0x40040988) Device IN Endpoint 4 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT4 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT4 = (USB_IN_EP_DIEPINT4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT5  ---------------------------
// SVD Line: 10236

unsigned int USB_IN_EP_DIEPINT5 __AT (0x400409A8);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT5  -------------------------------
// SVD Line: 10236

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT5
//    <name> DIEPINT5 </name>
//    <i> [Bits 31..0] RW (@ 0x400409A8) Device IN Endpoint 5 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT5 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT5 = (USB_IN_EP_DIEPINT5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT6  ---------------------------
// SVD Line: 10244

unsigned int USB_IN_EP_DIEPINT6 __AT (0x400409C8);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT6  -------------------------------
// SVD Line: 10244

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT6
//    <name> DIEPINT6 </name>
//    <i> [Bits 31..0] RW (@ 0x400409C8) Device IN Endpoint 6 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT6 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT6 = (USB_IN_EP_DIEPINT6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT7  ---------------------------
// SVD Line: 10252

unsigned int USB_IN_EP_DIEPINT7 __AT (0x400409E8);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT7  -------------------------------
// SVD Line: 10252

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT7
//    <name> DIEPINT7 </name>
//    <i> [Bits 31..0] RW (@ 0x400409E8) Device IN Endpoint 7 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT7 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT7 = (USB_IN_EP_DIEPINT7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT8  ---------------------------
// SVD Line: 10260

unsigned int USB_IN_EP_DIEPINT8 __AT (0x40040A08);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT8  -------------------------------
// SVD Line: 10260

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT8
//    <name> DIEPINT8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A08) Device IN Endpoint 8 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT8 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT8 = (USB_IN_EP_DIEPINT8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPINT9  ---------------------------
// SVD Line: 10268

unsigned int USB_IN_EP_DIEPINT9 __AT (0x40040A28);



// ----------------------------  Register Item: USB_IN_EP_DIEPINT9  -------------------------------
// SVD Line: 10268

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT9
//    <name> DIEPINT9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A28) Device IN Endpoint 9 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT9 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT9 = (USB_IN_EP_DIEPINT9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPINT10  ---------------------------
// SVD Line: 10276

unsigned int USB_IN_EP_DIEPINT10 __AT (0x40040A48);



// ---------------------------  Register Item: USB_IN_EP_DIEPINT10  -------------------------------
// SVD Line: 10276

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT10
//    <name> DIEPINT10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A48) Device IN Endpoint 10 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT10 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT10 = (USB_IN_EP_DIEPINT10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPINT11  ---------------------------
// SVD Line: 10284

unsigned int USB_IN_EP_DIEPINT11 __AT (0x40040A68);



// ---------------------------  Register Item: USB_IN_EP_DIEPINT11  -------------------------------
// SVD Line: 10284

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT11
//    <name> DIEPINT11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A68) Device IN Endpoint 11 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT11 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT11 = (USB_IN_EP_DIEPINT11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPINT12  ---------------------------
// SVD Line: 10292

unsigned int USB_IN_EP_DIEPINT12 __AT (0x40040A88);



// ---------------------------  Register Item: USB_IN_EP_DIEPINT12  -------------------------------
// SVD Line: 10292

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT12
//    <name> DIEPINT12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A88) Device IN Endpoint 12 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT12 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT12 = (USB_IN_EP_DIEPINT12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPINT13  ---------------------------
// SVD Line: 10300

unsigned int USB_IN_EP_DIEPINT13 __AT (0x40040AA8);



// ---------------------------  Register Item: USB_IN_EP_DIEPINT13  -------------------------------
// SVD Line: 10300

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT13
//    <name> DIEPINT13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AA8) Device IN Endpoint 13 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT13 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT13 = (USB_IN_EP_DIEPINT13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPINT14  ---------------------------
// SVD Line: 10308

unsigned int USB_IN_EP_DIEPINT14 __AT (0x40040AC8);



// ---------------------------  Register Item: USB_IN_EP_DIEPINT14  -------------------------------
// SVD Line: 10308

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT14
//    <name> DIEPINT14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AC8) Device IN Endpoint 14 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT14 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT14 = (USB_IN_EP_DIEPINT14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPINT15  ---------------------------
// SVD Line: 10316

unsigned int USB_IN_EP_DIEPINT15 __AT (0x40040AE8);



// ---------------------------  Register Item: USB_IN_EP_DIEPINT15  -------------------------------
// SVD Line: 10316

//  <item> SFDITEM_REG__USB_IN_EP_DIEPINT15
//    <name> DIEPINT15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AE8) Device IN Endpoint 15 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPINT15 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPINT15 = (USB_IN_EP_DIEPINT15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ0  ---------------------------
// SVD Line: 10326

unsigned int USB_IN_EP_DIEPTSIZ0 __AT (0x40040910);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ0  -------------------------------
// SVD Line: 10326

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ0
//    <name> DIEPTSIZ0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040910) Device IN Endpoint 0 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ0 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ0 = (USB_IN_EP_DIEPTSIZ0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ1  ---------------------------
// SVD Line: 10334

unsigned int USB_IN_EP_DIEPTSIZ1 __AT (0x40040930);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ1  -------------------------------
// SVD Line: 10334

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ1
//    <name> DIEPTSIZ1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040930) Device IN Endpoint 1 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ1 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ1 = (USB_IN_EP_DIEPTSIZ1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ2  ---------------------------
// SVD Line: 10342

unsigned int USB_IN_EP_DIEPTSIZ2 __AT (0x40040950);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ2  -------------------------------
// SVD Line: 10342

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ2
//    <name> DIEPTSIZ2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040950) Device IN Endpoint 2 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ2 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ2 = (USB_IN_EP_DIEPTSIZ2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ3  ---------------------------
// SVD Line: 10350

unsigned int USB_IN_EP_DIEPTSIZ3 __AT (0x40040970);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ3  -------------------------------
// SVD Line: 10350

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ3
//    <name> DIEPTSIZ3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040970) Device IN Endpoint 3 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ3 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ3 = (USB_IN_EP_DIEPTSIZ3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ4  ---------------------------
// SVD Line: 10358

unsigned int USB_IN_EP_DIEPTSIZ4 __AT (0x40040990);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ4  -------------------------------
// SVD Line: 10358

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ4
//    <name> DIEPTSIZ4 </name>
//    <i> [Bits 31..0] RW (@ 0x40040990) Device IN Endpoint 4 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ4 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ4 = (USB_IN_EP_DIEPTSIZ4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ5  ---------------------------
// SVD Line: 10366

unsigned int USB_IN_EP_DIEPTSIZ5 __AT (0x400409B0);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ5  -------------------------------
// SVD Line: 10366

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ5
//    <name> DIEPTSIZ5 </name>
//    <i> [Bits 31..0] RW (@ 0x400409B0) Device IN Endpoint 5 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ5 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ5 = (USB_IN_EP_DIEPTSIZ5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ6  ---------------------------
// SVD Line: 10374

unsigned int USB_IN_EP_DIEPTSIZ6 __AT (0x400409D0);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ6  -------------------------------
// SVD Line: 10374

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ6
//    <name> DIEPTSIZ6 </name>
//    <i> [Bits 31..0] RW (@ 0x400409D0) Device IN Endpoint 6 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ6 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ6 = (USB_IN_EP_DIEPTSIZ6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ7  ---------------------------
// SVD Line: 10382

unsigned int USB_IN_EP_DIEPTSIZ7 __AT (0x400409F0);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ7  -------------------------------
// SVD Line: 10382

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ7
//    <name> DIEPTSIZ7 </name>
//    <i> [Bits 31..0] RW (@ 0x400409F0) Device IN Endpoint 7 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ7 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ7 = (USB_IN_EP_DIEPTSIZ7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ8  ---------------------------
// SVD Line: 10390

unsigned int USB_IN_EP_DIEPTSIZ8 __AT (0x40040A10);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ8  -------------------------------
// SVD Line: 10390

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ8
//    <name> DIEPTSIZ8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A10) Device IN Endpoint 8 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ8 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ8 = (USB_IN_EP_DIEPTSIZ8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ9  ---------------------------
// SVD Line: 10398

unsigned int USB_IN_EP_DIEPTSIZ9 __AT (0x40040A30);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ9  -------------------------------
// SVD Line: 10398

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ9
//    <name> DIEPTSIZ9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A30) Device IN Endpoint 9 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ9 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ9 = (USB_IN_EP_DIEPTSIZ9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ10  --------------------------
// SVD Line: 10406

unsigned int USB_IN_EP_DIEPTSIZ10 __AT (0x40040A50);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ10  ------------------------------
// SVD Line: 10406

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ10
//    <name> DIEPTSIZ10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A50) Device IN Endpoint 10 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ10 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ10 = (USB_IN_EP_DIEPTSIZ10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ11  --------------------------
// SVD Line: 10414

unsigned int USB_IN_EP_DIEPTSIZ11 __AT (0x40040A70);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ11  ------------------------------
// SVD Line: 10414

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ11
//    <name> DIEPTSIZ11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A70) Device IN Endpoint 11 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ11 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ11 = (USB_IN_EP_DIEPTSIZ11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ12  --------------------------
// SVD Line: 10422

unsigned int USB_IN_EP_DIEPTSIZ12 __AT (0x40040A90);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ12  ------------------------------
// SVD Line: 10422

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ12
//    <name> DIEPTSIZ12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A90) Device IN Endpoint 12 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ12 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ12 = (USB_IN_EP_DIEPTSIZ12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ13  --------------------------
// SVD Line: 10430

unsigned int USB_IN_EP_DIEPTSIZ13 __AT (0x40040AB0);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ13  ------------------------------
// SVD Line: 10430

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ13
//    <name> DIEPTSIZ13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AB0) Device IN Endpoint 13 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ13 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ13 = (USB_IN_EP_DIEPTSIZ13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ14  --------------------------
// SVD Line: 10438

unsigned int USB_IN_EP_DIEPTSIZ14 __AT (0x40040AD0);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ14  ------------------------------
// SVD Line: 10438

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ14
//    <name> DIEPTSIZ14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AD0) Device IN Endpoint 14 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ14 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ14 = (USB_IN_EP_DIEPTSIZ14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPTSIZ15  --------------------------
// SVD Line: 10446

unsigned int USB_IN_EP_DIEPTSIZ15 __AT (0x40040AF0);



// ---------------------------  Register Item: USB_IN_EP_DIEPTSIZ15  ------------------------------
// SVD Line: 10446

//  <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ15
//    <name> DIEPTSIZ15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AF0) Device IN Endpoint 15 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPTSIZ15 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPTSIZ15 = (USB_IN_EP_DIEPTSIZ15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA0  ---------------------------
// SVD Line: 10456

unsigned int USB_IN_EP_DIEPDMA0 __AT (0x40040914);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA0  -------------------------------
// SVD Line: 10456

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA0
//    <name> DIEPDMA0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040914) Device IN Endpoint 0 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA0 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA0 = (USB_IN_EP_DIEPDMA0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA1  ---------------------------
// SVD Line: 10464

unsigned int USB_IN_EP_DIEPDMA1 __AT (0x40040934);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA1  -------------------------------
// SVD Line: 10464

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA1
//    <name> DIEPDMA1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040934) Device IN Endpoint 1 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA1 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA1 = (USB_IN_EP_DIEPDMA1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA2  ---------------------------
// SVD Line: 10472

unsigned int USB_IN_EP_DIEPDMA2 __AT (0x40040954);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA2  -------------------------------
// SVD Line: 10472

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA2
//    <name> DIEPDMA2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040954) Device IN Endpoint 2 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA2 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA2 = (USB_IN_EP_DIEPDMA2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA3  ---------------------------
// SVD Line: 10480

unsigned int USB_IN_EP_DIEPDMA3 __AT (0x40040974);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA3  -------------------------------
// SVD Line: 10480

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA3
//    <name> DIEPDMA3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040974) Device IN Endpoint 3 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA3 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA3 = (USB_IN_EP_DIEPDMA3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA4  ---------------------------
// SVD Line: 10488

unsigned int USB_IN_EP_DIEPDMA4 __AT (0x40040994);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA4  -------------------------------
// SVD Line: 10488

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA4
//    <name> DIEPDMA4 </name>
//    <i> [Bits 31..0] RW (@ 0x40040994) Device IN Endpoint 4 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA4 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA4 = (USB_IN_EP_DIEPDMA4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA5  ---------------------------
// SVD Line: 10496

unsigned int USB_IN_EP_DIEPDMA5 __AT (0x400409B4);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA5  -------------------------------
// SVD Line: 10496

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA5
//    <name> DIEPDMA5 </name>
//    <i> [Bits 31..0] RW (@ 0x400409B4) Device IN Endpoint 5 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA5 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA5 = (USB_IN_EP_DIEPDMA5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA6  ---------------------------
// SVD Line: 10504

unsigned int USB_IN_EP_DIEPDMA6 __AT (0x400409D4);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA6  -------------------------------
// SVD Line: 10504

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA6
//    <name> DIEPDMA6 </name>
//    <i> [Bits 31..0] RW (@ 0x400409D4) Device IN Endpoint 6 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA6 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA6 = (USB_IN_EP_DIEPDMA6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA7  ---------------------------
// SVD Line: 10512

unsigned int USB_IN_EP_DIEPDMA7 __AT (0x400409F4);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA7  -------------------------------
// SVD Line: 10512

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA7
//    <name> DIEPDMA7 </name>
//    <i> [Bits 31..0] RW (@ 0x400409F4) Device IN Endpoint 7 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA7 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA7 = (USB_IN_EP_DIEPDMA7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA8  ---------------------------
// SVD Line: 10520

unsigned int USB_IN_EP_DIEPDMA8 __AT (0x40040A14);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA8  -------------------------------
// SVD Line: 10520

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA8
//    <name> DIEPDMA8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A14) Device IN Endpoint 8 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA8 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA8 = (USB_IN_EP_DIEPDMA8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DIEPDMA9  ---------------------------
// SVD Line: 10528

unsigned int USB_IN_EP_DIEPDMA9 __AT (0x40040A34);



// ----------------------------  Register Item: USB_IN_EP_DIEPDMA9  -------------------------------
// SVD Line: 10528

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA9
//    <name> DIEPDMA9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A34) Device IN Endpoint 9 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA9 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA9 = (USB_IN_EP_DIEPDMA9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMA10  ---------------------------
// SVD Line: 10536

unsigned int USB_IN_EP_DIEPDMA10 __AT (0x40040A54);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMA10  -------------------------------
// SVD Line: 10536

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA10
//    <name> DIEPDMA10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A54) Device IN Endpoint 10 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA10 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA10 = (USB_IN_EP_DIEPDMA10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMA11  ---------------------------
// SVD Line: 10544

unsigned int USB_IN_EP_DIEPDMA11 __AT (0x40040A74);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMA11  -------------------------------
// SVD Line: 10544

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA11
//    <name> DIEPDMA11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A74) Device IN Endpoint 11 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA11 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA11 = (USB_IN_EP_DIEPDMA11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMA12  ---------------------------
// SVD Line: 10552

unsigned int USB_IN_EP_DIEPDMA12 __AT (0x40040A94);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMA12  -------------------------------
// SVD Line: 10552

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA12
//    <name> DIEPDMA12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A94) Device IN Endpoint 12 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA12 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA12 = (USB_IN_EP_DIEPDMA12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMA13  ---------------------------
// SVD Line: 10560

unsigned int USB_IN_EP_DIEPDMA13 __AT (0x40040AB4);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMA13  -------------------------------
// SVD Line: 10560

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA13
//    <name> DIEPDMA13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AB4) Device IN Endpoint 13 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA13 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA13 = (USB_IN_EP_DIEPDMA13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMA14  ---------------------------
// SVD Line: 10568

unsigned int USB_IN_EP_DIEPDMA14 __AT (0x40040AD4);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMA14  -------------------------------
// SVD Line: 10568

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA14
//    <name> DIEPDMA14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AD4) Device IN Endpoint 14 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA14 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA14 = (USB_IN_EP_DIEPDMA14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMA15  ---------------------------
// SVD Line: 10576

unsigned int USB_IN_EP_DIEPDMA15 __AT (0x40040AF4);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMA15  -------------------------------
// SVD Line: 10576

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMA15
//    <name> DIEPDMA15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AF4) Device IN Endpoint 15 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMA15 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMA15 = (USB_IN_EP_DIEPDMA15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS0  ---------------------------
// SVD Line: 10586

unsigned int USB_IN_EP_DTXFSTS0 __AT (0x40040918);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS0  -------------------------------
// SVD Line: 10586

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS0
//    <name> DTXFSTS0 </name>
//    <i> [Bits 31..0] RO (@ 0x40040918) Device IN Endpoint 0 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS0 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS0 = (USB_IN_EP_DTXFSTS0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS1  ---------------------------
// SVD Line: 10594

unsigned int USB_IN_EP_DTXFSTS1 __AT (0x40040938);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS1  -------------------------------
// SVD Line: 10594

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS1
//    <name> DTXFSTS1 </name>
//    <i> [Bits 31..0] RO (@ 0x40040938) Device IN Endpoint 1 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS1 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS1 = (USB_IN_EP_DTXFSTS1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS2  ---------------------------
// SVD Line: 10602

unsigned int USB_IN_EP_DTXFSTS2 __AT (0x40040958);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS2  -------------------------------
// SVD Line: 10602

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS2
//    <name> DTXFSTS2 </name>
//    <i> [Bits 31..0] RO (@ 0x40040958) Device IN Endpoint 2 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS2 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS2 = (USB_IN_EP_DTXFSTS2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS3  ---------------------------
// SVD Line: 10610

unsigned int USB_IN_EP_DTXFSTS3 __AT (0x40040978);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS3  -------------------------------
// SVD Line: 10610

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS3
//    <name> DTXFSTS3 </name>
//    <i> [Bits 31..0] RO (@ 0x40040978) Device IN Endpoint 3 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS3 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS3 = (USB_IN_EP_DTXFSTS3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS4  ---------------------------
// SVD Line: 10618

unsigned int USB_IN_EP_DTXFSTS4 __AT (0x40040998);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS4  -------------------------------
// SVD Line: 10618

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS4
//    <name> DTXFSTS4 </name>
//    <i> [Bits 31..0] RO (@ 0x40040998) Device IN Endpoint 4 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS4 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS4 = (USB_IN_EP_DTXFSTS4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS5  ---------------------------
// SVD Line: 10626

unsigned int USB_IN_EP_DTXFSTS5 __AT (0x400409B8);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS5  -------------------------------
// SVD Line: 10626

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS5
//    <name> DTXFSTS5 </name>
//    <i> [Bits 31..0] RO (@ 0x400409B8) Device IN Endpoint 5 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS5 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS5 = (USB_IN_EP_DTXFSTS5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS6  ---------------------------
// SVD Line: 10634

unsigned int USB_IN_EP_DTXFSTS6 __AT (0x400409D8);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS6  -------------------------------
// SVD Line: 10634

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS6
//    <name> DTXFSTS6 </name>
//    <i> [Bits 31..0] RO (@ 0x400409D8) Device IN Endpoint 6 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS6 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS6 = (USB_IN_EP_DTXFSTS6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS7  ---------------------------
// SVD Line: 10642

unsigned int USB_IN_EP_DTXFSTS7 __AT (0x400409F8);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS7  -------------------------------
// SVD Line: 10642

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS7
//    <name> DTXFSTS7 </name>
//    <i> [Bits 31..0] RO (@ 0x400409F8) Device IN Endpoint 7 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS7 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS7 = (USB_IN_EP_DTXFSTS7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS8  ---------------------------
// SVD Line: 10650

unsigned int USB_IN_EP_DTXFSTS8 __AT (0x40040A18);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS8  -------------------------------
// SVD Line: 10650

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS8
//    <name> DTXFSTS8 </name>
//    <i> [Bits 31..0] RO (@ 0x40040A18) Device IN Endpoint 8 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS8 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS8 = (USB_IN_EP_DTXFSTS8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: USB_IN_EP_DTXFSTS9  ---------------------------
// SVD Line: 10658

unsigned int USB_IN_EP_DTXFSTS9 __AT (0x40040A38);



// ----------------------------  Register Item: USB_IN_EP_DTXFSTS9  -------------------------------
// SVD Line: 10658

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS9
//    <name> DTXFSTS9 </name>
//    <i> [Bits 31..0] RO (@ 0x40040A38) Device IN Endpoint 9 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS9 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS9 = (USB_IN_EP_DTXFSTS9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DTXFSTS10  ---------------------------
// SVD Line: 10666

unsigned int USB_IN_EP_DTXFSTS10 __AT (0x40040A58);



// ---------------------------  Register Item: USB_IN_EP_DTXFSTS10  -------------------------------
// SVD Line: 10666

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS10
//    <name> DTXFSTS10 </name>
//    <i> [Bits 31..0] RO (@ 0x40040A58) Device IN Endpoint 10 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS10 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS10 = (USB_IN_EP_DTXFSTS10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DTXFSTS11  ---------------------------
// SVD Line: 10674

unsigned int USB_IN_EP_DTXFSTS11 __AT (0x40040A78);



// ---------------------------  Register Item: USB_IN_EP_DTXFSTS11  -------------------------------
// SVD Line: 10674

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS11
//    <name> DTXFSTS11 </name>
//    <i> [Bits 31..0] RO (@ 0x40040A78) Device IN Endpoint 11 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS11 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS11 = (USB_IN_EP_DTXFSTS11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DTXFSTS12  ---------------------------
// SVD Line: 10682

unsigned int USB_IN_EP_DTXFSTS12 __AT (0x40040A98);



// ---------------------------  Register Item: USB_IN_EP_DTXFSTS12  -------------------------------
// SVD Line: 10682

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS12
//    <name> DTXFSTS12 </name>
//    <i> [Bits 31..0] RO (@ 0x40040A98) Device IN Endpoint 12 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS12 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS12 = (USB_IN_EP_DTXFSTS12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DTXFSTS13  ---------------------------
// SVD Line: 10690

unsigned int USB_IN_EP_DTXFSTS13 __AT (0x40040AB8);



// ---------------------------  Register Item: USB_IN_EP_DTXFSTS13  -------------------------------
// SVD Line: 10690

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS13
//    <name> DTXFSTS13 </name>
//    <i> [Bits 31..0] RO (@ 0x40040AB8) Device IN Endpoint 13 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS13 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS13 = (USB_IN_EP_DTXFSTS13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DTXFSTS14  ---------------------------
// SVD Line: 10698

unsigned int USB_IN_EP_DTXFSTS14 __AT (0x40040AD8);



// ---------------------------  Register Item: USB_IN_EP_DTXFSTS14  -------------------------------
// SVD Line: 10698

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS14
//    <name> DTXFSTS14 </name>
//    <i> [Bits 31..0] RO (@ 0x40040AD8) Device IN Endpoint 14 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS14 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS14 = (USB_IN_EP_DTXFSTS14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DTXFSTS15  ---------------------------
// SVD Line: 10706

unsigned int USB_IN_EP_DTXFSTS15 __AT (0x40040AF8);



// ---------------------------  Register Item: USB_IN_EP_DTXFSTS15  -------------------------------
// SVD Line: 10706

//  <item> SFDITEM_REG__USB_IN_EP_DTXFSTS15
//    <name> DTXFSTS15 </name>
//    <i> [Bits 31..0] RO (@ 0x40040AF8) Device IN Endpoint 15 Transmit FIFO Status Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DTXFSTS15 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DTXFSTS15 = (USB_IN_EP_DTXFSTS15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB0  ---------------------------
// SVD Line: 10716

unsigned int USB_IN_EP_DIEPDMAB0 __AT (0x4004091C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB0  -------------------------------
// SVD Line: 10716

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB0
//    <name> DIEPDMAB0 </name>
//    <i> [Bits 31..0] RW (@ 0x4004091C) Device IN Endpoint 0 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB0 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB0 = (USB_IN_EP_DIEPDMAB0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB1  ---------------------------
// SVD Line: 10724

unsigned int USB_IN_EP_DIEPDMAB1 __AT (0x4004093C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB1  -------------------------------
// SVD Line: 10724

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB1
//    <name> DIEPDMAB1 </name>
//    <i> [Bits 31..0] RW (@ 0x4004093C) Device IN Endpoint 1 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB1 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB1 = (USB_IN_EP_DIEPDMAB1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB2  ---------------------------
// SVD Line: 10732

unsigned int USB_IN_EP_DIEPDMAB2 __AT (0x4004095C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB2  -------------------------------
// SVD Line: 10732

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB2
//    <name> DIEPDMAB2 </name>
//    <i> [Bits 31..0] RW (@ 0x4004095C) Device IN Endpoint 2 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB2 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB2 = (USB_IN_EP_DIEPDMAB2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB3  ---------------------------
// SVD Line: 10740

unsigned int USB_IN_EP_DIEPDMAB3 __AT (0x4004097C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB3  -------------------------------
// SVD Line: 10740

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB3
//    <name> DIEPDMAB3 </name>
//    <i> [Bits 31..0] RW (@ 0x4004097C) Device IN Endpoint 3 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB3 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB3 = (USB_IN_EP_DIEPDMAB3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB4  ---------------------------
// SVD Line: 10748

unsigned int USB_IN_EP_DIEPDMAB4 __AT (0x4004099C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB4  -------------------------------
// SVD Line: 10748

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB4
//    <name> DIEPDMAB4 </name>
//    <i> [Bits 31..0] RW (@ 0x4004099C) Device IN Endpoint 4 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB4 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB4 = (USB_IN_EP_DIEPDMAB4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB5  ---------------------------
// SVD Line: 10756

unsigned int USB_IN_EP_DIEPDMAB5 __AT (0x400409BC);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB5  -------------------------------
// SVD Line: 10756

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB5
//    <name> DIEPDMAB5 </name>
//    <i> [Bits 31..0] RW (@ 0x400409BC) Device IN Endpoint 5 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB5 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB5 = (USB_IN_EP_DIEPDMAB5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB6  ---------------------------
// SVD Line: 10764

unsigned int USB_IN_EP_DIEPDMAB6 __AT (0x400409DC);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB6  -------------------------------
// SVD Line: 10764

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB6
//    <name> DIEPDMAB6 </name>
//    <i> [Bits 31..0] RW (@ 0x400409DC) Device IN Endpoint 6 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB6 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB6 = (USB_IN_EP_DIEPDMAB6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB7  ---------------------------
// SVD Line: 10772

unsigned int USB_IN_EP_DIEPDMAB7 __AT (0x400409FC);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB7  -------------------------------
// SVD Line: 10772

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB7
//    <name> DIEPDMAB7 </name>
//    <i> [Bits 31..0] RW (@ 0x400409FC) Device IN Endpoint 7 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB7 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB7 = (USB_IN_EP_DIEPDMAB7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB8  ---------------------------
// SVD Line: 10780

unsigned int USB_IN_EP_DIEPDMAB8 __AT (0x40040A1C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB8  -------------------------------
// SVD Line: 10780

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB8
//    <name> DIEPDMAB8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A1C) Device IN Endpoint 8 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB8 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB8 = (USB_IN_EP_DIEPDMAB8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB9  ---------------------------
// SVD Line: 10788

unsigned int USB_IN_EP_DIEPDMAB9 __AT (0x40040A3C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB9  -------------------------------
// SVD Line: 10788

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB9
//    <name> DIEPDMAB9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A3C) Device IN Endpoint 9 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB9 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB9 = (USB_IN_EP_DIEPDMAB9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB10  --------------------------
// SVD Line: 10796

unsigned int USB_IN_EP_DIEPDMAB10 __AT (0x40040A5C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB10  ------------------------------
// SVD Line: 10796

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB10
//    <name> DIEPDMAB10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A5C) Device IN Endpoint 10 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB10 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB10 = (USB_IN_EP_DIEPDMAB10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB11  --------------------------
// SVD Line: 10804

unsigned int USB_IN_EP_DIEPDMAB11 __AT (0x40040A7C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB11  ------------------------------
// SVD Line: 10804

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB11
//    <name> DIEPDMAB11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A7C) Device IN Endpoint 11 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB11 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB11 = (USB_IN_EP_DIEPDMAB11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB12  --------------------------
// SVD Line: 10812

unsigned int USB_IN_EP_DIEPDMAB12 __AT (0x40040A9C);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB12  ------------------------------
// SVD Line: 10812

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB12
//    <name> DIEPDMAB12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040A9C) Device IN Endpoint 12 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB12 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB12 = (USB_IN_EP_DIEPDMAB12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB13  --------------------------
// SVD Line: 10820

unsigned int USB_IN_EP_DIEPDMAB13 __AT (0x40040ABC);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB13  ------------------------------
// SVD Line: 10820

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB13
//    <name> DIEPDMAB13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040ABC) Device IN Endpoint 13 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB13 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB13 = (USB_IN_EP_DIEPDMAB13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB14  --------------------------
// SVD Line: 10828

unsigned int USB_IN_EP_DIEPDMAB14 __AT (0x40040ADC);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB14  ------------------------------
// SVD Line: 10828

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB14
//    <name> DIEPDMAB14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040ADC) Device IN Endpoint 14 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB14 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB14 = (USB_IN_EP_DIEPDMAB14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_IN_EP_DIEPDMAB15  --------------------------
// SVD Line: 10836

unsigned int USB_IN_EP_DIEPDMAB15 __AT (0x40040AFC);



// ---------------------------  Register Item: USB_IN_EP_DIEPDMAB15  ------------------------------
// SVD Line: 10836

//  <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB15
//    <name> DIEPDMAB15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040AFC) Device IN Endpoint 15 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_IN_EP_DIEPDMAB15 >> 0) & 0xFFFFFFFF), ((USB_IN_EP_DIEPDMAB15 = (USB_IN_EP_DIEPDMAB15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Peripheral View: USB_IN_EP  -----------------------------------
// SVD Line: 10044

//  <view> USB_IN_EP
//    <name> USB_IN_EP </name>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL0 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL1 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL2 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL3 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL4 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL5 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL6 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL7 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL8 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL9 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL10 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL11 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL12 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL13 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL14 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPCTL15 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT0 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT1 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT2 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT3 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT4 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT5 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT6 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT7 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT8 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT9 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT10 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT11 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT12 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT13 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT14 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPINT15 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ0 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ1 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ2 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ3 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ4 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ5 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ6 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ7 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ8 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ9 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ10 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ11 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ12 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ13 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ14 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPTSIZ15 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA0 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA1 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA2 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA3 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA4 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA5 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA6 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA7 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA8 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA9 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA10 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA11 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA12 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA13 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA14 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMA15 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS0 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS1 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS2 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS3 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS4 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS5 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS6 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS7 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS8 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS9 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS10 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS11 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS12 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS13 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS14 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DTXFSTS15 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB0 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB1 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB2 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB3 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB4 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB5 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB6 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB7 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB8 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB9 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB10 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB11 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB12 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB13 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB14 </item>
//    <item> SFDITEM_REG__USB_IN_EP_DIEPDMAB15 </item>
//  </view>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL0  ---------------------------
// SVD Line: 10868

unsigned int USB_OUT_EP_DOEPCTL0 __AT (0x40040B00);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL0  -------------------------------
// SVD Line: 10868

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL0
//    <name> DOEPCTL0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B00) Device Control OUT Endpoint 0 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL0 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL0 = (USB_OUT_EP_DOEPCTL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT0  ---------------------------
// SVD Line: 10878

unsigned int USB_OUT_EP_DOEPINT0 __AT (0x40040B08);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT0  -------------------------------
// SVD Line: 10878

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT0
//    <name> DOEPINT0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B08) Device OUT Endpoint 0 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT0 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT0 = (USB_OUT_EP_DOEPINT0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ0  --------------------------
// SVD Line: 10887

unsigned int USB_OUT_EP_DOEPTSIZ0 __AT (0x40040B10);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ0  ------------------------------
// SVD Line: 10887

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ0
//    <name> DOEPTSIZ0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B10) Device OUT Endpoint 0 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ0 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ0 = (USB_OUT_EP_DOEPTSIZ0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA0  ---------------------------
// SVD Line: 10896

unsigned int USB_OUT_EP_DOEPDMA0 __AT (0x40040B14);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA0  -------------------------------
// SVD Line: 10896

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA0
//    <name> DOEPDMA0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B14) Device OUT Endpoint 0 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA0 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA0 = (USB_OUT_EP_DOEPDMA0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB0  --------------------------
// SVD Line: 10905

unsigned int USB_OUT_EP_DOEPDMAB0 __AT (0x40040B1C);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB0  ------------------------------
// SVD Line: 10905

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB0
//    <name> DOEPDMAB0 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B1C) Device OUT Endpoint 0 DMA Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB0 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB0 = (USB_OUT_EP_DOEPDMAB0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL1  ---------------------------
// SVD Line: 10915

unsigned int USB_OUT_EP_DOEPCTL1 __AT (0x40040B20);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL1  -------------------------------
// SVD Line: 10915

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL1
//    <name> DOEPCTL1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B20) Device Control OUT Endpoint 1 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL1 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL1 = (USB_OUT_EP_DOEPCTL1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL2  ---------------------------
// SVD Line: 10923

unsigned int USB_OUT_EP_DOEPCTL2 __AT (0x40040B40);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL2  -------------------------------
// SVD Line: 10923

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL2
//    <name> DOEPCTL2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B40) Device Control OUT Endpoint 2 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL2 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL2 = (USB_OUT_EP_DOEPCTL2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL3  ---------------------------
// SVD Line: 10931

unsigned int USB_OUT_EP_DOEPCTL3 __AT (0x40040B60);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL3  -------------------------------
// SVD Line: 10931

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL3
//    <name> DOEPCTL3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B60) Device Control OUT Endpoint 3 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL3 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL3 = (USB_OUT_EP_DOEPCTL3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL4  ---------------------------
// SVD Line: 10939

unsigned int USB_OUT_EP_DOEPCTL4 __AT (0x40040B80);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL4  -------------------------------
// SVD Line: 10939

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL4
//    <name> DOEPCTL4 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B80) Device Control OUT Endpoint 4 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL4 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL4 = (USB_OUT_EP_DOEPCTL4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL5  ---------------------------
// SVD Line: 10947

unsigned int USB_OUT_EP_DOEPCTL5 __AT (0x40040BA0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL5  -------------------------------
// SVD Line: 10947

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL5
//    <name> DOEPCTL5 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BA0) Device Control OUT Endpoint 5 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL5 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL5 = (USB_OUT_EP_DOEPCTL5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL6  ---------------------------
// SVD Line: 10955

unsigned int USB_OUT_EP_DOEPCTL6 __AT (0x40040BC0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL6  -------------------------------
// SVD Line: 10955

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL6
//    <name> DOEPCTL6 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BC0) Device Control OUT Endpoint 6 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL6 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL6 = (USB_OUT_EP_DOEPCTL6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL7  ---------------------------
// SVD Line: 10963

unsigned int USB_OUT_EP_DOEPCTL7 __AT (0x40040BE0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL7  -------------------------------
// SVD Line: 10963

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL7
//    <name> DOEPCTL7 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BE0) Device Control OUT Endpoint 7 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL7 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL7 = (USB_OUT_EP_DOEPCTL7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL8  ---------------------------
// SVD Line: 10971

unsigned int USB_OUT_EP_DOEPCTL8 __AT (0x40040C00);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL8  -------------------------------
// SVD Line: 10971

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL8
//    <name> DOEPCTL8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C00) Device Control OUT Endpoint 8 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL8 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL8 = (USB_OUT_EP_DOEPCTL8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL9  ---------------------------
// SVD Line: 10979

unsigned int USB_OUT_EP_DOEPCTL9 __AT (0x40040C20);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL9  -------------------------------
// SVD Line: 10979

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL9
//    <name> DOEPCTL9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C20) Device Control OUT Endpoint 9 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL9 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL9 = (USB_OUT_EP_DOEPCTL9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL10  --------------------------
// SVD Line: 10987

unsigned int USB_OUT_EP_DOEPCTL10 __AT (0x40040C40);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL10  ------------------------------
// SVD Line: 10987

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL10
//    <name> DOEPCTL10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C40) Device Control OUT Endpoint 10 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL10 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL10 = (USB_OUT_EP_DOEPCTL10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL11  --------------------------
// SVD Line: 10995

unsigned int USB_OUT_EP_DOEPCTL11 __AT (0x40040C60);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL11  ------------------------------
// SVD Line: 10995

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL11
//    <name> DOEPCTL11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C60) Device Control OUT Endpoint 11 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL11 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL11 = (USB_OUT_EP_DOEPCTL11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL12  --------------------------
// SVD Line: 11003

unsigned int USB_OUT_EP_DOEPCTL12 __AT (0x40040C80);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL12  ------------------------------
// SVD Line: 11003

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL12
//    <name> DOEPCTL12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C80) Device Control OUT Endpoint 12 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL12 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL12 = (USB_OUT_EP_DOEPCTL12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL13  --------------------------
// SVD Line: 11011

unsigned int USB_OUT_EP_DOEPCTL13 __AT (0x40040CA0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL13  ------------------------------
// SVD Line: 11011

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL13
//    <name> DOEPCTL13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CA0) Device Control OUT Endpoint 13 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL13 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL13 = (USB_OUT_EP_DOEPCTL13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL14  --------------------------
// SVD Line: 11019

unsigned int USB_OUT_EP_DOEPCTL14 __AT (0x40040CC0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL14  ------------------------------
// SVD Line: 11019

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL14
//    <name> DOEPCTL14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CC0) Device Control OUT Endpoint 14 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL14 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL14 = (USB_OUT_EP_DOEPCTL14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPCTL15  --------------------------
// SVD Line: 11027

unsigned int USB_OUT_EP_DOEPCTL15 __AT (0x40040CE0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPCTL15  ------------------------------
// SVD Line: 11027

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL15
//    <name> DOEPCTL15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CE0) Device Control OUT Endpoint 15 Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPCTL15 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPCTL15 = (USB_OUT_EP_DOEPCTL15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT1  ---------------------------
// SVD Line: 11037

unsigned int USB_OUT_EP_DOEPINT1 __AT (0x40040B28);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT1  -------------------------------
// SVD Line: 11037

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT1
//    <name> DOEPINT1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B28) Device OUT Endpoint 1 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT1 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT1 = (USB_OUT_EP_DOEPINT1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT2  ---------------------------
// SVD Line: 11045

unsigned int USB_OUT_EP_DOEPINT2 __AT (0x40040B48);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT2  -------------------------------
// SVD Line: 11045

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT2
//    <name> DOEPINT2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B48) Device OUT Endpoint 2 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT2 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT2 = (USB_OUT_EP_DOEPINT2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT3  ---------------------------
// SVD Line: 11053

unsigned int USB_OUT_EP_DOEPINT3 __AT (0x40040B68);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT3  -------------------------------
// SVD Line: 11053

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT3
//    <name> DOEPINT3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B68) Device OUT Endpoint 3 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT3 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT3 = (USB_OUT_EP_DOEPINT3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT4  ---------------------------
// SVD Line: 11061

unsigned int USB_OUT_EP_DOEPINT4 __AT (0x40040B88);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT4  -------------------------------
// SVD Line: 11061

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT4
//    <name> DOEPINT4 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B88) Device OUT Endpoint 4 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT4 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT4 = (USB_OUT_EP_DOEPINT4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT5  ---------------------------
// SVD Line: 11069

unsigned int USB_OUT_EP_DOEPINT5 __AT (0x40040BA8);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT5  -------------------------------
// SVD Line: 11069

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT5
//    <name> DOEPINT5 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BA8) Device OUT Endpoint 5 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT5 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT5 = (USB_OUT_EP_DOEPINT5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT6  ---------------------------
// SVD Line: 11077

unsigned int USB_OUT_EP_DOEPINT6 __AT (0x40040BC8);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT6  -------------------------------
// SVD Line: 11077

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT6
//    <name> DOEPINT6 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BC8) Device OUT Endpoint 6 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT6 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT6 = (USB_OUT_EP_DOEPINT6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT7  ---------------------------
// SVD Line: 11085

unsigned int USB_OUT_EP_DOEPINT7 __AT (0x40040BE8);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT7  -------------------------------
// SVD Line: 11085

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT7
//    <name> DOEPINT7 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BE8) Device OUT Endpoint 7 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT7 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT7 = (USB_OUT_EP_DOEPINT7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT8  ---------------------------
// SVD Line: 11093

unsigned int USB_OUT_EP_DOEPINT8 __AT (0x40040C08);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT8  -------------------------------
// SVD Line: 11093

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT8
//    <name> DOEPINT8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C08) Device OUT Endpoint 8 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT8 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT8 = (USB_OUT_EP_DOEPINT8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT9  ---------------------------
// SVD Line: 11101

unsigned int USB_OUT_EP_DOEPINT9 __AT (0x40040C28);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT9  -------------------------------
// SVD Line: 11101

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT9
//    <name> DOEPINT9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C28) Device OUT Endpoint 9 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT9 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT9 = (USB_OUT_EP_DOEPINT9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT10  --------------------------
// SVD Line: 11109

unsigned int USB_OUT_EP_DOEPINT10 __AT (0x40040C48);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT10  ------------------------------
// SVD Line: 11109

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT10
//    <name> DOEPINT10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C48) Device OUT Endpoint 10 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT10 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT10 = (USB_OUT_EP_DOEPINT10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT11  --------------------------
// SVD Line: 11117

unsigned int USB_OUT_EP_DOEPINT11 __AT (0x40040C68);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT11  ------------------------------
// SVD Line: 11117

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT11
//    <name> DOEPINT11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C68) Device OUT Endpoint 11 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT11 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT11 = (USB_OUT_EP_DOEPINT11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT12  --------------------------
// SVD Line: 11125

unsigned int USB_OUT_EP_DOEPINT12 __AT (0x40040C88);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT12  ------------------------------
// SVD Line: 11125

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT12
//    <name> DOEPINT12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C88) Device OUT Endpoint 12 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT12 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT12 = (USB_OUT_EP_DOEPINT12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT13  --------------------------
// SVD Line: 11133

unsigned int USB_OUT_EP_DOEPINT13 __AT (0x40040CA8);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT13  ------------------------------
// SVD Line: 11133

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT13
//    <name> DOEPINT13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CA8) Device OUT Endpoint 13 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT13 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT13 = (USB_OUT_EP_DOEPINT13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT14  --------------------------
// SVD Line: 11141

unsigned int USB_OUT_EP_DOEPINT14 __AT (0x40040CC8);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT14  ------------------------------
// SVD Line: 11141

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT14
//    <name> DOEPINT14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CC8) Device OUT Endpoint 14 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT14 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT14 = (USB_OUT_EP_DOEPINT14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPINT15  --------------------------
// SVD Line: 11149

unsigned int USB_OUT_EP_DOEPINT15 __AT (0x40040CE8);



// ---------------------------  Register Item: USB_OUT_EP_DOEPINT15  ------------------------------
// SVD Line: 11149

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPINT15
//    <name> DOEPINT15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CE8) Device OUT Endpoint 15 Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPINT15 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPINT15 = (USB_OUT_EP_DOEPINT15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ1  --------------------------
// SVD Line: 11159

unsigned int USB_OUT_EP_DOEPTSIZ1 __AT (0x40040B30);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ1  ------------------------------
// SVD Line: 11159

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ1
//    <name> DOEPTSIZ1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B30) Device OUT Endpoint 1 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ1 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ1 = (USB_OUT_EP_DOEPTSIZ1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ2  --------------------------
// SVD Line: 11167

unsigned int USB_OUT_EP_DOEPTSIZ2 __AT (0x40040B50);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ2  ------------------------------
// SVD Line: 11167

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ2
//    <name> DOEPTSIZ2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B50) Device OUT Endpoint 2 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ2 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ2 = (USB_OUT_EP_DOEPTSIZ2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ3  --------------------------
// SVD Line: 11175

unsigned int USB_OUT_EP_DOEPTSIZ3 __AT (0x40040B70);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ3  ------------------------------
// SVD Line: 11175

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ3
//    <name> DOEPTSIZ3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B70) Device OUT Endpoint 3 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ3 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ3 = (USB_OUT_EP_DOEPTSIZ3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ4  --------------------------
// SVD Line: 11183

unsigned int USB_OUT_EP_DOEPTSIZ4 __AT (0x40040B90);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ4  ------------------------------
// SVD Line: 11183

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ4
//    <name> DOEPTSIZ4 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B90) Device OUT Endpoint 4 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ4 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ4 = (USB_OUT_EP_DOEPTSIZ4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ5  --------------------------
// SVD Line: 11191

unsigned int USB_OUT_EP_DOEPTSIZ5 __AT (0x40040BB0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ5  ------------------------------
// SVD Line: 11191

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ5
//    <name> DOEPTSIZ5 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BB0) Device OUT Endpoint 5 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ5 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ5 = (USB_OUT_EP_DOEPTSIZ5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ6  --------------------------
// SVD Line: 11199

unsigned int USB_OUT_EP_DOEPTSIZ6 __AT (0x40040BD0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ6  ------------------------------
// SVD Line: 11199

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ6
//    <name> DOEPTSIZ6 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BD0) Device OUT Endpoint 6 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ6 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ6 = (USB_OUT_EP_DOEPTSIZ6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ7  --------------------------
// SVD Line: 11207

unsigned int USB_OUT_EP_DOEPTSIZ7 __AT (0x40040BF0);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ7  ------------------------------
// SVD Line: 11207

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ7
//    <name> DOEPTSIZ7 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BF0) Device OUT Endpoint 7 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ7 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ7 = (USB_OUT_EP_DOEPTSIZ7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ8  --------------------------
// SVD Line: 11215

unsigned int USB_OUT_EP_DOEPTSIZ8 __AT (0x40040C10);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ8  ------------------------------
// SVD Line: 11215

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ8
//    <name> DOEPTSIZ8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C10) Device OUT Endpoint 8 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ8 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ8 = (USB_OUT_EP_DOEPTSIZ8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ9  --------------------------
// SVD Line: 11223

unsigned int USB_OUT_EP_DOEPTSIZ9 __AT (0x40040C30);



// ---------------------------  Register Item: USB_OUT_EP_DOEPTSIZ9  ------------------------------
// SVD Line: 11223

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ9
//    <name> DOEPTSIZ9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C30) Device OUT Endpoint 9 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ9 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ9 = (USB_OUT_EP_DOEPTSIZ9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ10  --------------------------
// SVD Line: 11231

unsigned int USB_OUT_EP_DOEPTSIZ10 __AT (0x40040C50);



// --------------------------  Register Item: USB_OUT_EP_DOEPTSIZ10  ------------------------------
// SVD Line: 11231

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ10
//    <name> DOEPTSIZ10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C50) Device OUT Endpoint 10 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ10 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ10 = (USB_OUT_EP_DOEPTSIZ10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ11  --------------------------
// SVD Line: 11239

unsigned int USB_OUT_EP_DOEPTSIZ11 __AT (0x40040C70);



// --------------------------  Register Item: USB_OUT_EP_DOEPTSIZ11  ------------------------------
// SVD Line: 11239

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ11
//    <name> DOEPTSIZ11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C70) Device OUT Endpoint 11 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ11 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ11 = (USB_OUT_EP_DOEPTSIZ11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ12  --------------------------
// SVD Line: 11247

unsigned int USB_OUT_EP_DOEPTSIZ12 __AT (0x40040C90);



// --------------------------  Register Item: USB_OUT_EP_DOEPTSIZ12  ------------------------------
// SVD Line: 11247

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ12
//    <name> DOEPTSIZ12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C90) Device OUT Endpoint 12 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ12 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ12 = (USB_OUT_EP_DOEPTSIZ12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ13  --------------------------
// SVD Line: 11255

unsigned int USB_OUT_EP_DOEPTSIZ13 __AT (0x40040CB0);



// --------------------------  Register Item: USB_OUT_EP_DOEPTSIZ13  ------------------------------
// SVD Line: 11255

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ13
//    <name> DOEPTSIZ13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CB0) Device OUT Endpoint 13 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ13 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ13 = (USB_OUT_EP_DOEPTSIZ13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ14  --------------------------
// SVD Line: 11263

unsigned int USB_OUT_EP_DOEPTSIZ14 __AT (0x40040CD0);



// --------------------------  Register Item: USB_OUT_EP_DOEPTSIZ14  ------------------------------
// SVD Line: 11263

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ14
//    <name> DOEPTSIZ14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CD0) Device OUT Endpoint 14 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ14 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ14 = (USB_OUT_EP_DOEPTSIZ14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPTSIZ15  --------------------------
// SVD Line: 11271

unsigned int USB_OUT_EP_DOEPTSIZ15 __AT (0x40040CF0);



// --------------------------  Register Item: USB_OUT_EP_DOEPTSIZ15  ------------------------------
// SVD Line: 11271

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ15
//    <name> DOEPTSIZ15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CF0) Device OUT Endpoint 15 Transfer Size Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPTSIZ15 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPTSIZ15 = (USB_OUT_EP_DOEPTSIZ15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA1  ---------------------------
// SVD Line: 11281

unsigned int USB_OUT_EP_DOEPDMA1 __AT (0x40040B34);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA1  -------------------------------
// SVD Line: 11281

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA1
//    <name> DOEPDMA1 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B34) Device OUT Endpoint 1 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA1 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA1 = (USB_OUT_EP_DOEPDMA1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA2  ---------------------------
// SVD Line: 11289

unsigned int USB_OUT_EP_DOEPDMA2 __AT (0x40040B54);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA2  -------------------------------
// SVD Line: 11289

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA2
//    <name> DOEPDMA2 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B54) Device OUT Endpoint 2 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA2 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA2 = (USB_OUT_EP_DOEPDMA2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA3  ---------------------------
// SVD Line: 11297

unsigned int USB_OUT_EP_DOEPDMA3 __AT (0x40040B74);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA3  -------------------------------
// SVD Line: 11297

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA3
//    <name> DOEPDMA3 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B74) Device OUT Endpoint 3 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA3 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA3 = (USB_OUT_EP_DOEPDMA3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA4  ---------------------------
// SVD Line: 11305

unsigned int USB_OUT_EP_DOEPDMA4 __AT (0x40040B94);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA4  -------------------------------
// SVD Line: 11305

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA4
//    <name> DOEPDMA4 </name>
//    <i> [Bits 31..0] RW (@ 0x40040B94) Device OUT Endpoint 4 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA4 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA4 = (USB_OUT_EP_DOEPDMA4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA5  ---------------------------
// SVD Line: 11313

unsigned int USB_OUT_EP_DOEPDMA5 __AT (0x40040BB4);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA5  -------------------------------
// SVD Line: 11313

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA5
//    <name> DOEPDMA5 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BB4) Device OUT Endpoint 5 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA5 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA5 = (USB_OUT_EP_DOEPDMA5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA6  ---------------------------
// SVD Line: 11321

unsigned int USB_OUT_EP_DOEPDMA6 __AT (0x40040BD4);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA6  -------------------------------
// SVD Line: 11321

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA6
//    <name> DOEPDMA6 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BD4) Device OUT Endpoint 6 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA6 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA6 = (USB_OUT_EP_DOEPDMA6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA7  ---------------------------
// SVD Line: 11329

unsigned int USB_OUT_EP_DOEPDMA7 __AT (0x40040BF4);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA7  -------------------------------
// SVD Line: 11329

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA7
//    <name> DOEPDMA7 </name>
//    <i> [Bits 31..0] RW (@ 0x40040BF4) Device OUT Endpoint 7 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA7 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA7 = (USB_OUT_EP_DOEPDMA7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA8  ---------------------------
// SVD Line: 11337

unsigned int USB_OUT_EP_DOEPDMA8 __AT (0x40040C14);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA8  -------------------------------
// SVD Line: 11337

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA8
//    <name> DOEPDMA8 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C14) Device OUT Endpoint 8 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA8 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA8 = (USB_OUT_EP_DOEPDMA8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA9  ---------------------------
// SVD Line: 11345

unsigned int USB_OUT_EP_DOEPDMA9 __AT (0x40040C34);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA9  -------------------------------
// SVD Line: 11345

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA9
//    <name> DOEPDMA9 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C34) Device OUT Endpoint 9 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA9 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA9 = (USB_OUT_EP_DOEPDMA9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA10  --------------------------
// SVD Line: 11353

unsigned int USB_OUT_EP_DOEPDMA10 __AT (0x40040C54);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA10  ------------------------------
// SVD Line: 11353

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA10
//    <name> DOEPDMA10 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C54) Device OUT Endpoint 10 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA10 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA10 = (USB_OUT_EP_DOEPDMA10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA11  --------------------------
// SVD Line: 11361

unsigned int USB_OUT_EP_DOEPDMA11 __AT (0x40040C74);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA11  ------------------------------
// SVD Line: 11361

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA11
//    <name> DOEPDMA11 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C74) Device OUT Endpoint 11 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA11 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA11 = (USB_OUT_EP_DOEPDMA11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA12  --------------------------
// SVD Line: 11369

unsigned int USB_OUT_EP_DOEPDMA12 __AT (0x40040C94);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA12  ------------------------------
// SVD Line: 11369

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA12
//    <name> DOEPDMA12 </name>
//    <i> [Bits 31..0] RW (@ 0x40040C94) Device OUT Endpoint 12 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA12 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA12 = (USB_OUT_EP_DOEPDMA12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA13  --------------------------
// SVD Line: 11377

unsigned int USB_OUT_EP_DOEPDMA13 __AT (0x40040CB4);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA13  ------------------------------
// SVD Line: 11377

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA13
//    <name> DOEPDMA13 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CB4) Device OUT Endpoint 13 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA13 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA13 = (USB_OUT_EP_DOEPDMA13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA14  --------------------------
// SVD Line: 11385

unsigned int USB_OUT_EP_DOEPDMA14 __AT (0x40040CD4);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA14  ------------------------------
// SVD Line: 11385

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA14
//    <name> DOEPDMA14 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CD4) Device OUT Endpoint 14 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA14 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA14 = (USB_OUT_EP_DOEPDMA14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMA15  --------------------------
// SVD Line: 11393

unsigned int USB_OUT_EP_DOEPDMA15 __AT (0x40040CF4);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMA15  ------------------------------
// SVD Line: 11393

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA15
//    <name> DOEPDMA15 </name>
//    <i> [Bits 31..0] RW (@ 0x40040CF4) Device OUT Endpoint 15 DMA Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMA15 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMA15 = (USB_OUT_EP_DOEPDMA15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB1  --------------------------
// SVD Line: 11403

unsigned int USB_OUT_EP_DOEPDMAB1 __AT (0x40040B3C);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB1  ------------------------------
// SVD Line: 11403

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB1
//    <name> DOEPDMAB1 </name>
//    <i> [Bits 31..0] RO (@ 0x40040B3C) Device OUT Endpoint 1 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB1 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB1 = (USB_OUT_EP_DOEPDMAB1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB2  --------------------------
// SVD Line: 11411

unsigned int USB_OUT_EP_DOEPDMAB2 __AT (0x40040B5C);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB2  ------------------------------
// SVD Line: 11411

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB2
//    <name> DOEPDMAB2 </name>
//    <i> [Bits 31..0] RO (@ 0x40040B5C) Device OUT Endpoint 2 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB2 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB2 = (USB_OUT_EP_DOEPDMAB2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB3  --------------------------
// SVD Line: 11419

unsigned int USB_OUT_EP_DOEPDMAB3 __AT (0x40040B7C);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB3  ------------------------------
// SVD Line: 11419

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB3
//    <name> DOEPDMAB3 </name>
//    <i> [Bits 31..0] RO (@ 0x40040B7C) Device OUT Endpoint 3 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB3 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB3 = (USB_OUT_EP_DOEPDMAB3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB4  --------------------------
// SVD Line: 11427

unsigned int USB_OUT_EP_DOEPDMAB4 __AT (0x40040B9C);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB4  ------------------------------
// SVD Line: 11427

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB4
//    <name> DOEPDMAB4 </name>
//    <i> [Bits 31..0] RO (@ 0x40040B9C) Device OUT Endpoint 4 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB4 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB4 = (USB_OUT_EP_DOEPDMAB4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB5  --------------------------
// SVD Line: 11435

unsigned int USB_OUT_EP_DOEPDMAB5 __AT (0x40040BBC);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB5  ------------------------------
// SVD Line: 11435

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB5
//    <name> DOEPDMAB5 </name>
//    <i> [Bits 31..0] RO (@ 0x40040BBC) Device OUT Endpoint 5 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB5 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB5 = (USB_OUT_EP_DOEPDMAB5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB6  --------------------------
// SVD Line: 11443

unsigned int USB_OUT_EP_DOEPDMAB6 __AT (0x40040BDC);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB6  ------------------------------
// SVD Line: 11443

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB6
//    <name> DOEPDMAB6 </name>
//    <i> [Bits 31..0] RO (@ 0x40040BDC) Device OUT Endpoint 6 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB6 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB6 = (USB_OUT_EP_DOEPDMAB6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB7  --------------------------
// SVD Line: 11451

unsigned int USB_OUT_EP_DOEPDMAB7 __AT (0x40040BFC);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB7  ------------------------------
// SVD Line: 11451

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB7
//    <name> DOEPDMAB7 </name>
//    <i> [Bits 31..0] RO (@ 0x40040BFC) Device OUT Endpoint 7 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB7 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB7 = (USB_OUT_EP_DOEPDMAB7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB8  --------------------------
// SVD Line: 11459

unsigned int USB_OUT_EP_DOEPDMAB8 __AT (0x40040C1C);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB8  ------------------------------
// SVD Line: 11459

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB8
//    <name> DOEPDMAB8 </name>
//    <i> [Bits 31..0] RO (@ 0x40040C1C) Device OUT Endpoint 8 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB8 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB8 = (USB_OUT_EP_DOEPDMAB8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB9  --------------------------
// SVD Line: 11467

unsigned int USB_OUT_EP_DOEPDMAB9 __AT (0x40040C3C);



// ---------------------------  Register Item: USB_OUT_EP_DOEPDMAB9  ------------------------------
// SVD Line: 11467

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB9
//    <name> DOEPDMAB9 </name>
//    <i> [Bits 31..0] RO (@ 0x40040C3C) Device OUT Endpoint 9 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB9 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB9 = (USB_OUT_EP_DOEPDMAB9 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB10  --------------------------
// SVD Line: 11475

unsigned int USB_OUT_EP_DOEPDMAB10 __AT (0x40040C5C);



// --------------------------  Register Item: USB_OUT_EP_DOEPDMAB10  ------------------------------
// SVD Line: 11475

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB10
//    <name> DOEPDMAB10 </name>
//    <i> [Bits 31..0] RO (@ 0x40040C5C) Device OUT Endpoint 10 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB10 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB10 = (USB_OUT_EP_DOEPDMAB10 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB11  --------------------------
// SVD Line: 11483

unsigned int USB_OUT_EP_DOEPDMAB11 __AT (0x40040C7C);



// --------------------------  Register Item: USB_OUT_EP_DOEPDMAB11  ------------------------------
// SVD Line: 11483

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB11
//    <name> DOEPDMAB11 </name>
//    <i> [Bits 31..0] RO (@ 0x40040C7C) Device OUT Endpoint 11 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB11 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB11 = (USB_OUT_EP_DOEPDMAB11 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB12  --------------------------
// SVD Line: 11491

unsigned int USB_OUT_EP_DOEPDMAB12 __AT (0x40040C9C);



// --------------------------  Register Item: USB_OUT_EP_DOEPDMAB12  ------------------------------
// SVD Line: 11491

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB12
//    <name> DOEPDMAB12 </name>
//    <i> [Bits 31..0] RO (@ 0x40040C9C) Device OUT Endpoint 12 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB12 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB12 = (USB_OUT_EP_DOEPDMAB12 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB13  --------------------------
// SVD Line: 11499

unsigned int USB_OUT_EP_DOEPDMAB13 __AT (0x40040CBC);



// --------------------------  Register Item: USB_OUT_EP_DOEPDMAB13  ------------------------------
// SVD Line: 11499

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB13
//    <name> DOEPDMAB13 </name>
//    <i> [Bits 31..0] RO (@ 0x40040CBC) Device OUT Endpoint 13 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB13 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB13 = (USB_OUT_EP_DOEPDMAB13 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB14  --------------------------
// SVD Line: 11507

unsigned int USB_OUT_EP_DOEPDMAB14 __AT (0x40040CDC);



// --------------------------  Register Item: USB_OUT_EP_DOEPDMAB14  ------------------------------
// SVD Line: 11507

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB14
//    <name> DOEPDMAB14 </name>
//    <i> [Bits 31..0] RO (@ 0x40040CDC) Device OUT Endpoint 14 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB14 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB14 = (USB_OUT_EP_DOEPDMAB14 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------  Register Item Address: USB_OUT_EP_DOEPDMAB15  --------------------------
// SVD Line: 11515

unsigned int USB_OUT_EP_DOEPDMAB15 __AT (0x40040CFC);



// --------------------------  Register Item: USB_OUT_EP_DOEPDMAB15  ------------------------------
// SVD Line: 11515

//  <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB15
//    <name> DOEPDMAB15 </name>
//    <i> [Bits 31..0] RO (@ 0x40040CFC) Device OUT Endpoint 15 Buffer Address Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((USB_OUT_EP_DOEPDMAB15 >> 0) & 0xFFFFFFFF), ((USB_OUT_EP_DOEPDMAB15 = (USB_OUT_EP_DOEPDMAB15 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Peripheral View: USB_OUT_EP  ----------------------------------
// SVD Line: 10848

//  <view> USB_OUT_EP
//    <name> USB_OUT_EP </name>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL0 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT0 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ0 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA0 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB0 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL1 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL2 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL3 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL4 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL5 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL6 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL7 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL8 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL9 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL10 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL11 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL12 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL13 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL14 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPCTL15 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT1 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT2 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT3 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT4 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT5 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT6 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT7 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT8 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT9 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT10 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT11 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT12 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT13 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT14 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPINT15 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ1 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ2 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ3 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ4 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ5 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ6 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ7 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ8 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ9 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ10 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ11 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ12 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ13 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ14 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPTSIZ15 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA1 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA2 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA3 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA4 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA5 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA6 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA7 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA8 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA9 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA10 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA11 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA12 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA13 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA14 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMA15 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB1 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB2 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB3 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB4 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB5 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB6 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB7 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB8 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB9 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB10 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB11 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB12 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB13 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB14 </item>
//    <item> SFDITEM_REG__USB_OUT_EP_DOEPDMAB15 </item>
//  </view>
//  


// -----------------------  Register Item Address: SYSTEM_PERICLKPWRTOP  --------------------------
// SVD Line: 11546

unsigned int SYSTEM_PERICLKPWRTOP __AT (0x40100000);



// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_SOFTRST  ----------------------------
// SVD Line: 11551

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SOFTRST
//    <name> SOFTRST </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40100000) \nSoftware Reset (Write 1 to Clear)\n0 : DISABLE = Disable\n1 : ENABLE = Enable (write 1 to clear) </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.31..31> SOFTRST
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable (write 1 to clear)
//    </combo>
//  </item>
//  


// ---------------------  Field Item: SYSTEM_PERICLKPWRTOP_SOFTRST_GATING  ------------------------
// SVD Line: 11569

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SOFTRST_GATING
//    <name> SOFTRST_GATING </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40100000) \nSoftware Reset External Gating\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.30..30> SOFTRST_GATING
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_SYS_TOP  ----------------------------
// SVD Line: 11587

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SYS_TOP
//    <name> SYS_TOP </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40100000) \nSystem Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.21..21> SYS_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_USB_TOP  ----------------------------
// SVD Line: 11605

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_USB_TOP
//    <name> USB_TOP </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40100000) \nUSB Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.20..20> USB_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_APB_TOP  ----------------------------
// SVD Line: 11623

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_APB_TOP
//    <name> APB_TOP </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40100000) \nAPB Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.19..19> APB_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_I3C_TOP  ----------------------------
// SVD Line: 11641

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_I3C_TOP
//    <name> I3C_TOP </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40100000) \nI3C Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.18..18> I3C_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_SPIM_TOP  ---------------------------
// SVD Line: 11659

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SPIM_TOP
//    <name> SPIM_TOP </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40100000) \nSPI Master Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.17..17> SPIM_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_SPIS_TOP  ---------------------------
// SVD Line: 11677

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SPIS_TOP
//    <name> SPIS_TOP </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40100000) \nSPI Slave Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.16..16> SPIS_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_I2C_TOP  ----------------------------
// SVD Line: 11695

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_I2C_TOP
//    <name> I2C_TOP </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40100000) \nI2C Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.15..15> I2C_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWRTOP_STRIP_TOP  ---------------------------
// SVD Line: 11713

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_STRIP_TOP
//    <name> STRIP_TOP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40100000) \nStrip Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.14..14> STRIP_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_ADC_TOP  ----------------------------
// SVD Line: 11731

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_ADC_TOP
//    <name> ADC_TOP </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40100000) \nADC Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.13..13> ADC_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_UART_TOP  ---------------------------
// SVD Line: 11749

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_UART_TOP
//    <name> UART_TOP </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40100000) \nUART Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.12..12> UART_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWRTOP_MATRIX_TOP  --------------------------
// SVD Line: 11767

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_MATRIX_TOP
//    <name> MATRIX_TOP </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40100000) \nMatrix Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.11..11> MATRIX_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_CRC_TOP  ----------------------------
// SVD Line: 11785

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_CRC_TOP
//    <name> CRC_TOP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40100000) \nCRC Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.10..10> CRC_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_TMR_TOP  ----------------------------
// SVD Line: 11803

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_TMR_TOP
//    <name> TMR_TOP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40100000) \nTimer Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.9..9> TMR_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_PWM_TOP  ----------------------------
// SVD Line: 11821

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_PWM_TOP
//    <name> PWM_TOP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40100000) \nPWM Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.8..8> PWM_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_WDT_TOP  ----------------------------
// SVD Line: 11839

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_WDT_TOP
//    <name> WDT_TOP </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40100000) \nWatchdog Timer Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.7..7> WDT_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ----------------------  Field Item: SYSTEM_PERICLKPWRTOP_RC32KCAL_TOP  -------------------------
// SVD Line: 11857

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_RC32KCAL_TOP
//    <name> RC32KCAL_TOP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40100000) \nRC 32K Cal Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.6..6> RC32KCAL_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ----------------------  Field Item: SYSTEM_PERICLKPWRTOP_RC32KREF_TOP  -------------------------
// SVD Line: 11875

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_RC32KREF_TOP
//    <name> RC32KREF_TOP </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40100000) \nRC 32K Ref Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.5..5> RC32KREF_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWRTOP_TACHO_TOP  ---------------------------
// SVD Line: 11893

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_TACHO_TOP
//    <name> TACHO_TOP </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100000) \nTachometer Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.4..4> TACHO_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ----------------------  Field Item: SYSTEM_PERICLKPWRTOP_RC24MCAL_TOP  -------------------------
// SVD Line: 11911

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_RC24MCAL_TOP
//    <name> RC24MCAL_TOP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100000) \nRC 24M Cal Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.3..3> RC24MCAL_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ----------------------  Field Item: SYSTEM_PERICLKPWRTOP_RC24MREF_TOP  -------------------------
// SVD Line: 11929

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_RC24MREF_TOP
//    <name> RC24MREF_TOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100000) \nRC 24M Ref Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.2..2> RC24MREF_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWRTOP_GPIO_TOP  ---------------------------
// SVD Line: 11947

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_GPIO_TOP
//    <name> GPIO_TOP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100000) \nIO Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.1..1> GPIO_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ----------------------  Field Item: SYSTEM_PERICLKPWRTOP_USB_DPHY_TOP  -------------------------
// SVD Line: 11965

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_USB_DPHY_TOP
//    <name> USB_DPHY_TOP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100000) \nUSB DPHY Clock Power Control\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWRTOP ) </loc>
//      <o.0..0> USB_DPHY_TOP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: SYSTEM_PERICLKPWRTOP  ------------------------------
// SVD Line: 11546

//  <rtree> SFDITEM_REG__SYSTEM_PERICLKPWRTOP
//    <name> PERICLKPWRTOP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100000) Peripheral Power Clock Control Register 0 </i>
//    <loc> ( (unsigned int)((SYSTEM_PERICLKPWRTOP >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKPWRTOP = (SYSTEM_PERICLKPWRTOP & ~(0xC03FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xC03FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SOFTRST </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SOFTRST_GATING </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SYS_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_USB_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_APB_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_I3C_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SPIM_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_SPIS_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_I2C_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_STRIP_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_ADC_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_UART_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_MATRIX_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_CRC_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_TMR_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_PWM_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_WDT_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_RC32KCAL_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_RC32KREF_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_TACHO_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_RC24MCAL_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_RC24MREF_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_GPIO_TOP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWRTOP_USB_DPHY_TOP </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_PERICLKSEL0  ---------------------------
// SVD Line: 11985

unsigned int SYSTEM_PERICLKSEL0 __AT (0x40100004);



// ------------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_SYS_CTS2_ROOT  ----------------------
// SVD Line: 11990

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_SYS_CTS2_ROOT
//    <name> SEL_CLK_SYS_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 25..24] RW (@ 0x40100004) System Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 24) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_ASYNC_BUS_CTS2_ROOT  -------------------
// SVD Line: 11996

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_ASYNC_BUS_CTS2_ROOT
//    <name> SEL_CLK_ASYNC_BUS_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 23..22] RW (@ 0x40100004) Async Bus Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 22) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 22 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 22 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_LED_CTS2_ROOT  ----------------------
// SVD Line: 12002

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_LED_CTS2_ROOT
//    <name> SEL_CLK_LED_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x40100004) LED Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 20) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_SPI_M_CTS2_ROOT  ---------------------
// SVD Line: 12008

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_SPI_M_CTS2_ROOT
//    <name> SEL_CLK_SPI_M_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 19..18] RW (@ 0x40100004) SPI Master Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 18) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 18 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 18 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_SPI_S_CTS2_ROOT  ---------------------
// SVD Line: 12014

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_SPI_S_CTS2_ROOT
//    <name> SEL_CLK_SPI_S_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x40100004) SPI Slave Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 16) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_I2C_CTS2_ROOT  ----------------------
// SVD Line: 12020

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_I2C_CTS2_ROOT
//    <name> SEL_CLK_I2C_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 15..14] RW (@ 0x40100004) I2C Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 14) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 14 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 14 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_STRIP_CTS2_ROOT  ---------------------
// SVD Line: 12026

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_STRIP_CTS2_ROOT
//    <name> SEL_CLK_STRIP_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 13..12] RW (@ 0x40100004) STRIP Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 12) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_ADC_CTS2_ROOT  ----------------------
// SVD Line: 12032

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_ADC_CTS2_ROOT
//    <name> SEL_CLK_ADC_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 11..10] RW (@ 0x40100004) ADC Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 10) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 10 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 10 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_UART_CTS2_ROOT  ---------------------
// SVD Line: 12038

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_UART_CTS2_ROOT
//    <name> SEL_CLK_UART_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x40100004) UART Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 8) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_DOT_MATRIX_LED_CTS2_ROOT  ----------------
// SVD Line: 12044

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_DOT_MATRIX_LED_CTS2_ROOT
//    <name> SEL_CLK_DOT_MATRIX_LED_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x40100004) Dot Matrix LED Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 6) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 6 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 6 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_TURBO_MEM_COMP_CTS2_ROOT  ----------------
// SVD Line: 12050

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_TURBO_MEM_COMP_CTS2_ROOT
//    <name> SEL_CLK_TURBO_MEM_COMP_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40100004) Turbo Mem Comp Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 4) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_TMR_CTS2_ROOT  ----------------------
// SVD Line: 12056

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_TMR_CTS2_ROOT
//    <name> SEL_CLK_TMR_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x40100004) TMR Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 2) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 2 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 2 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------  Field Item: SYSTEM_PERICLKSEL0_SEL_CLK_TACH_CTS2_ROOT  ---------------------
// SVD Line: 12062

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_TACH_CTS2_ROOT
//    <name> SEL_CLK_TACH_CTS2_ROOT </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40100004) TACH Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL0 >> 0) & 0x3), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: SYSTEM_PERICLKSEL0  -------------------------------
// SVD Line: 11985

//  <rtree> SFDITEM_REG__SYSTEM_PERICLKSEL0
//    <name> PERICLKSEL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100004) PERICLKSEL0 register </i>
//    <loc> ( (unsigned int)((SYSTEM_PERICLKSEL0 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKSEL0 = (SYSTEM_PERICLKSEL0 & ~(0x3FFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_SYS_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_ASYNC_BUS_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_LED_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_SPI_M_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_SPI_S_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_I2C_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_STRIP_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_ADC_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_UART_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_DOT_MATRIX_LED_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_TURBO_MEM_COMP_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_TMR_CTS2_ROOT </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL0_SEL_CLK_TACH_CTS2_ROOT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_PERICLKPWR0  ---------------------------
// SVD Line: 12070

unsigned int SYSTEM_PERICLKPWR0 __AT (0x40100008);



// --------------------------  Field Item: SYSTEM_PERICLKPWR0_CPU_IP  -----------------------------
// SVD Line: 12075

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_CPU_IP
//    <name> CPU_IP </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40100008) \nCPU clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.21..21> CPU_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_PERICLKPWR0_DMA_IP  -----------------------------
// SVD Line: 12093

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_DMA_IP
//    <name> DMA_IP </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40100008) \nDMA clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.20..20> DMA_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR0_INTR_SPIC_IP  --------------------------
// SVD Line: 12111

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_INTR_SPIC_IP
//    <name> INTR_SPIC_IP </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40100008) \nINTR SPIC clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.19..19> INTR_SPIC_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR0_EXTR_SPIC_IP  --------------------------
// SVD Line: 12129

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_EXTR_SPIC_IP
//    <name> EXTR_SPIC_IP </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40100008) \nEXTR SPIC clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.18..18> EXTR_SPIC_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_PERICLKPWR0_USB_IP  -----------------------------
// SVD Line: 12147

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_USB_IP
//    <name> USB_IP </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40100008) \nUSB clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.17..17> USB_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_PERICLKPWR0_I3C_IP  -----------------------------
// SVD Line: 12165

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I3C_IP
//    <name> I3C_IP </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40100008) \nI3C clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.16..16> I3C_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR0_SPIM_IP  -----------------------------
// SVD Line: 12183

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_SPIM_IP
//    <name> SPIM_IP </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40100008) \nSPIM clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.15..15> SPIM_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR0_SPIS_IP  -----------------------------
// SVD Line: 12201

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_SPIS_IP
//    <name> SPIS_IP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40100008) \nSPIS clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.14..14> SPIS_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_PERICLKPWR0_SWD_IP  -----------------------------
// SVD Line: 12219

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_SWD_IP
//    <name> SWD_IP </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40100008) \nSWD clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.13..13> SWD_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_I2CDBG_IP  ----------------------------
// SVD Line: 12237

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I2CDBG_IP
//    <name> I2CDBG_IP </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40100008) \nI2C Debug clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.12..12> I2CDBG_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR0_I2C2_IP  -----------------------------
// SVD Line: 12255

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I2C2_IP
//    <name> I2C2_IP </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40100008) \nI2C2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.11..11> I2C2_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR0_I2C1_IP  -----------------------------
// SVD Line: 12273

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I2C1_IP
//    <name> I2C1_IP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40100008) \nI2C1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.10..10> I2C1_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR0_I2C0_IP  -----------------------------
// SVD Line: 12291

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I2C0_IP
//    <name> I2C0_IP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40100008) \nI2C0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.9..9> I2C0_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP8_IP  ----------------------------
// SVD Line: 12309

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP8_IP
//    <name> STRIP8_IP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40100008) \nSTRIP8 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.8..8> STRIP8_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP7_IP  ----------------------------
// SVD Line: 12327

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP7_IP
//    <name> STRIP7_IP </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40100008) \nSTRIP7 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.7..7> STRIP7_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP6_IP  ----------------------------
// SVD Line: 12345

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP6_IP
//    <name> STRIP6_IP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40100008) \nSTRIP6 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.6..6> STRIP6_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP5_IP  ----------------------------
// SVD Line: 12363

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP5_IP
//    <name> STRIP5_IP </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40100008) \nSTRIP5 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.5..5> STRIP5_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP4_IP  ----------------------------
// SVD Line: 12381

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP4_IP
//    <name> STRIP4_IP </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100008) \nSTRIP4 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.4..4> STRIP4_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP3_IP  ----------------------------
// SVD Line: 12399

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP3_IP
//    <name> STRIP3_IP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100008) \nSTRIP3 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.3..3> STRIP3_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP2_IP  ----------------------------
// SVD Line: 12417

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP2_IP
//    <name> STRIP2_IP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100008) \nSTRIP2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.2..2> STRIP2_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP1_IP  ----------------------------
// SVD Line: 12435

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP1_IP
//    <name> STRIP1_IP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100008) \nSTRIP1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.1..1> STRIP1_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR0_STRIP0_IP  ----------------------------
// SVD Line: 12453

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP0_IP
//    <name> STRIP0_IP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100008) \nSTRIP0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR0 ) </loc>
//      <o.0..0> STRIP0_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: SYSTEM_PERICLKPWR0  -------------------------------
// SVD Line: 12070

//  <rtree> SFDITEM_REG__SYSTEM_PERICLKPWR0
//    <name> PERICLKPWR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100008) Peripheral Clock Power Control Register 0 </i>
//    <loc> ( (unsigned int)((SYSTEM_PERICLKPWR0 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKPWR0 = (SYSTEM_PERICLKPWR0 & ~(0x3FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_CPU_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_DMA_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_INTR_SPIC_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_EXTR_SPIC_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_USB_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I3C_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_SPIM_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_SPIS_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_SWD_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I2CDBG_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I2C2_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I2C1_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_I2C0_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP8_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP7_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP6_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP5_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP4_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP3_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP2_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP1_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR0_STRIP0_IP </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_PERICLKPWR1  ---------------------------
// SVD Line: 12473

unsigned int SYSTEM_PERICLKPWR1 __AT (0x4010000C);



// -------------------------  Field Item: SYSTEM_PERICLKPWR1_EFUSE_IP  ----------------------------
// SVD Line: 12478

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_EFUSE_IP
//    <name> EFUSE_IP </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x4010000C) \nEFUSE clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.19..19> EFUSE_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_MATRIX_IP  ----------------------------
// SVD Line: 12496

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_MATRIX_IP
//    <name> MATRIX_IP </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4010000C) \nMATRIX clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.18..18> MATRIX_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_PERICLKPWR1_CRC_IP  -----------------------------
// SVD Line: 12514

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_CRC_IP
//    <name> CRC_IP </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4010000C) \nCRC clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.17..17> CRC_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_PERICLKPWR1_ADC_IP  -----------------------------
// SVD Line: 12532

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_ADC_IP
//    <name> ADC_IP </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4010000C) \nADC clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.16..16> ADC_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR1_UART_IP  -----------------------------
// SVD Line: 12550

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_UART_IP
//    <name> UART_IP </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4010000C) \nURAT clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.15..15> UART_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_PERICLKPWR1_WDT_IP  -----------------------------
// SVD Line: 12568

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_WDT_IP
//    <name> WDT_IP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4010000C) \nWDT clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.14..14> WDT_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR1_GPIO_IP  -----------------------------
// SVD Line: 12586

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_GPIO_IP
//    <name> GPIO_IP </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4010000C) \nIO clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.13..13> GPIO_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR1_USB_DPHY_IP  ---------------------------
// SVD Line: 12604

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_USB_DPHY_IP
//    <name> USB_DPHY_IP </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4010000C) \nUSB_DPHY clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.12..12> USB_DPHY_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR1_TMR3_IP  -----------------------------
// SVD Line: 12622

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TMR3_IP
//    <name> TMR3_IP </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4010000C) \nTMR3 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.11..11> TMR3_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR1_TMR2_IP  -----------------------------
// SVD Line: 12640

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TMR2_IP
//    <name> TMR2_IP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4010000C) \nTMR2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.10..10> TMR2_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR1_TMR1_IP  -----------------------------
// SVD Line: 12658

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TMR1_IP
//    <name> TMR1_IP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x4010000C) \nTMR1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.9..9> TMR1_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_PERICLKPWR1_TMR0_IP  -----------------------------
// SVD Line: 12676

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TMR0_IP
//    <name> TMR0_IP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x4010000C) \nTMR0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.8..8> TMR0_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_TACHO3_IP  ----------------------------
// SVD Line: 12694

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TACHO3_IP
//    <name> TACHO3_IP </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4010000C) \nTACHO3 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.7..7> TACHO3_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_TACHO2_IP  ----------------------------
// SVD Line: 12712

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TACHO2_IP
//    <name> TACHO2_IP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4010000C) \nTACHO2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.6..6> TACHO2_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_TACHO1_IP  ----------------------------
// SVD Line: 12730

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TACHO1_IP
//    <name> TACHO1_IP </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4010000C) \nTACHO1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.5..5> TACHO1_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_TACHO0_IP  ----------------------------
// SVD Line: 12748

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TACHO0_IP
//    <name> TACHO0_IP </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4010000C) \nTACHO0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.4..4> TACHO0_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_RC32CAL_IP  ---------------------------
// SVD Line: 12766

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_RC32CAL_IP
//    <name> RC32CAL_IP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4010000C) \nRC32CAL clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.3..3> RC32CAL_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_RC32REF_IP  ---------------------------
// SVD Line: 12784

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_RC32REF_IP
//    <name> RC32REF_IP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010000C) \nRC32REF clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.2..2> RC32REF_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_RC24CAL_IP  ---------------------------
// SVD Line: 12802

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_RC24CAL_IP
//    <name> RC24CAL_IP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010000C) \nRC24CAL clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.1..1> RC24CAL_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR1_RC24REF_IP  ---------------------------
// SVD Line: 12820

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_RC24REF_IP
//    <name> RC24REF_IP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010000C) \nRC24REF clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR1 ) </loc>
//      <o.0..0> RC24REF_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: SYSTEM_PERICLKPWR1  -------------------------------
// SVD Line: 12473

//  <rtree> SFDITEM_REG__SYSTEM_PERICLKPWR1
//    <name> PERICLKPWR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010000C) Peripheral Clock Power Control Register 1 </i>
//    <loc> ( (unsigned int)((SYSTEM_PERICLKPWR1 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKPWR1 = (SYSTEM_PERICLKPWR1 & ~(0xFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_EFUSE_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_MATRIX_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_CRC_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_ADC_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_UART_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_WDT_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_GPIO_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_USB_DPHY_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TMR3_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TMR2_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TMR1_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TMR0_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TACHO3_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TACHO2_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TACHO1_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_TACHO0_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_RC32CAL_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_RC32REF_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_RC24CAL_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR1_RC24REF_IP </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_PERICLKPWR2  ---------------------------
// SVD Line: 12840

unsigned int SYSTEM_PERICLKPWR2 __AT (0x40100010);



// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM31_IP  ---------------------------
// SVD Line: 12845

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM31_IP
//    <name> LEDPWM31_IP </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40100010) \nLEDPWM31 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.31..31> LEDPWM31_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM30_IP  ---------------------------
// SVD Line: 12863

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM30_IP
//    <name> LEDPWM30_IP </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40100010) \nLEDPWM30 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.30..30> LEDPWM30_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM29_IP  ---------------------------
// SVD Line: 12881

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM29_IP
//    <name> LEDPWM29_IP </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40100010) \nLEDPWM29 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.29..29> LEDPWM29_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM28_IP  ---------------------------
// SVD Line: 12899

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM28_IP
//    <name> LEDPWM28_IP </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40100010) \nLEDPWM28 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.28..28> LEDPWM28_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM27_IP  ---------------------------
// SVD Line: 12917

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM27_IP
//    <name> LEDPWM27_IP </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40100010) \nLEDPWM27 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.27..27> LEDPWM27_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM26_IP  ---------------------------
// SVD Line: 12935

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM26_IP
//    <name> LEDPWM26_IP </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40100010) \nLEDPWM26 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.26..26> LEDPWM26_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM25_IP  ---------------------------
// SVD Line: 12953

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM25_IP
//    <name> LEDPWM25_IP </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40100010) \nLEDPWM25 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.25..25> LEDPWM25_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM24_IP  ---------------------------
// SVD Line: 12971

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM24_IP
//    <name> LEDPWM24_IP </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40100010) \nLEDPWM24 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.24..24> LEDPWM24_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM23_IP  ---------------------------
// SVD Line: 12989

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM23_IP
//    <name> LEDPWM23_IP </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40100010) \nLEDPWM23 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.23..23> LEDPWM23_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM22_IP  ---------------------------
// SVD Line: 13007

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM22_IP
//    <name> LEDPWM22_IP </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40100010) \nLEDPWM22 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.22..22> LEDPWM22_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM21_IP  ---------------------------
// SVD Line: 13025

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM21_IP
//    <name> LEDPWM21_IP </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40100010) \nLEDPWM21 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.21..21> LEDPWM21_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM20_IP  ---------------------------
// SVD Line: 13043

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM20_IP
//    <name> LEDPWM20_IP </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40100010) \nLEDPWM20 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.20..20> LEDPWM20_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM19_IP  ---------------------------
// SVD Line: 13061

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM19_IP
//    <name> LEDPWM19_IP </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40100010) \nLEDPWM19 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.19..19> LEDPWM19_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM18_IP  ---------------------------
// SVD Line: 13079

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM18_IP
//    <name> LEDPWM18_IP </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40100010) \nLEDPWM18 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.18..18> LEDPWM18_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM17_IP  ---------------------------
// SVD Line: 13097

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM17_IP
//    <name> LEDPWM17_IP </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40100010) \nLEDPWM17 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.17..17> LEDPWM17_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM16_IP  ---------------------------
// SVD Line: 13115

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM16_IP
//    <name> LEDPWM16_IP </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40100010) \nLEDPWM16 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.16..16> LEDPWM16_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM15_IP  ---------------------------
// SVD Line: 13133

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM15_IP
//    <name> LEDPWM15_IP </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40100010) \nLEDPWM15 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.15..15> LEDPWM15_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM14_IP  ---------------------------
// SVD Line: 13151

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM14_IP
//    <name> LEDPWM14_IP </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40100010) \nLEDPWM14 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.14..14> LEDPWM14_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM13_IP  ---------------------------
// SVD Line: 13169

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM13_IP
//    <name> LEDPWM13_IP </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40100010) \nLEDPWM13 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.13..13> LEDPWM13_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM12_IP  ---------------------------
// SVD Line: 13187

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM12_IP
//    <name> LEDPWM12_IP </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40100010) \nLEDPWM12 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.12..12> LEDPWM12_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM11_IP  ---------------------------
// SVD Line: 13205

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM11_IP
//    <name> LEDPWM11_IP </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40100010) \nLEDPWM11 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.11..11> LEDPWM11_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM10_IP  ---------------------------
// SVD Line: 13223

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM10_IP
//    <name> LEDPWM10_IP </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40100010) \nLEDPWM10 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.10..10> LEDPWM10_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM9_IP  ---------------------------
// SVD Line: 13241

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM9_IP
//    <name> LEDPWM9_IP </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40100010) \nLEDPWM9 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.9..9> LEDPWM9_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM8_IP  ---------------------------
// SVD Line: 13259

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM8_IP
//    <name> LEDPWM8_IP </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40100010) \nLEDPWM8 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.8..8> LEDPWM8_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM7_IP  ---------------------------
// SVD Line: 13277

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM7_IP
//    <name> LEDPWM7_IP </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40100010) \nLEDPWM7 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.7..7> LEDPWM7_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM6_IP  ---------------------------
// SVD Line: 13295

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM6_IP
//    <name> LEDPWM6_IP </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40100010) \nLEDPWM6 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.6..6> LEDPWM6_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM5_IP  ---------------------------
// SVD Line: 13313

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM5_IP
//    <name> LEDPWM5_IP </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40100010) \nLEDPWM5 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.5..5> LEDPWM5_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM4_IP  ---------------------------
// SVD Line: 13331

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM4_IP
//    <name> LEDPWM4_IP </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100010) \nLEDPWM4 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.4..4> LEDPWM4_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM3_IP  ---------------------------
// SVD Line: 13349

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM3_IP
//    <name> LEDPWM3_IP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100010) \nLEDPWM3 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.3..3> LEDPWM3_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM2_IP  ---------------------------
// SVD Line: 13367

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM2_IP
//    <name> LEDPWM2_IP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100010) \nLEDPWM2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.2..2> LEDPWM2_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM1_IP  ---------------------------
// SVD Line: 13385

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM1_IP
//    <name> LEDPWM1_IP </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100010) \nLEDPWM1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.1..1> LEDPWM1_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_PERICLKPWR2_LEDPWM0_IP  ---------------------------
// SVD Line: 13403

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM0_IP
//    <name> LEDPWM0_IP </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100010) \nLEDPWM0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKPWR2 ) </loc>
//      <o.0..0> LEDPWM0_IP
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ---------------------------  Register RTree: SYSTEM_PERICLKPWR2  -------------------------------
// SVD Line: 12840

//  <rtree> SFDITEM_REG__SYSTEM_PERICLKPWR2
//    <name> PERICLKPWR2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100010) Peripheral Clock Power Control Register 2 </i>
//    <loc> ( (unsigned int)((SYSTEM_PERICLKPWR2 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKPWR2 = (SYSTEM_PERICLKPWR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM31_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM30_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM29_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM28_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM27_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM26_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM25_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM24_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM23_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM22_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM21_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM20_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM19_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM18_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM17_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM16_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM15_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM14_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM13_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM12_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM11_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM10_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM9_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM8_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM7_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM6_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM5_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM4_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM3_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM2_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM1_IP </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKPWR2_LEDPWM0_IP </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_APBCLKPWR0  ----------------------------
// SVD Line: 13423

unsigned int SYSTEM_APBCLKPWR0 __AT (0x40100014);



// --------------------------  Field Item: SYSTEM_APBCLKPWR0_USB_APB  -----------------------------
// SVD Line: 13428

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_USB_APB
//    <name> USB_APB </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40100014) \nUSB clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.29..29> USB_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_MATRIX_APB  ----------------------------
// SVD Line: 13446

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_MATRIX_APB
//    <name> MATRIX_APB </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40100014) \nMATRIX clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.28..28> MATRIX_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_APBCLKPWR0_CRC_APB  -----------------------------
// SVD Line: 13464

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_CRC_APB
//    <name> CRC_APB </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40100014) \nCRC clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.27..27> CRC_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_SPIM_APB  -----------------------------
// SVD Line: 13482

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_SPIM_APB
//    <name> SPIM_APB </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40100014) \nSPIM clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.26..26> SPIM_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_SPIS_APB  -----------------------------
// SVD Line: 13500

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_SPIS_APB
//    <name> SPIS_APB </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40100014) \nSPIS clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.25..25> SPIS_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_I2CDBG_APB  ----------------------------
// SVD Line: 13518

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_I2CDBG_APB
//    <name> I2CDBG_APB </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40100014) \nI2C Debug clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.24..24> I2CDBG_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_I2C2_APB  -----------------------------
// SVD Line: 13536

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_I2C2_APB
//    <name> I2C2_APB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40100014) \nI2C2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.23..23> I2C2_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_I2C1_APB  -----------------------------
// SVD Line: 13554

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_I2C1_APB
//    <name> I2C1_APB </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40100014) \nI2C1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.22..22> I2C1_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_I2C0_APB  -----------------------------
// SVD Line: 13572

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_I2C0_APB
//    <name> I2C0_APB </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40100014) \nI2C0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.21..21> I2C0_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP8_APB  ----------------------------
// SVD Line: 13590

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP8_APB
//    <name> STRIP8_APB </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40100014) \nSTRIP8 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.20..20> STRIP8_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP7_APB  ----------------------------
// SVD Line: 13608

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP7_APB
//    <name> STRIP7_APB </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40100014) \nSTRIP7 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.19..19> STRIP7_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP6_APB  ----------------------------
// SVD Line: 13626

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP6_APB
//    <name> STRIP6_APB </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40100014) \nSTRIP6 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.18..18> STRIP6_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP5_APB  ----------------------------
// SVD Line: 13644

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP5_APB
//    <name> STRIP5_APB </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40100014) \nSTRIP5 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.17..17> STRIP5_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP4_APB  ----------------------------
// SVD Line: 13662

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP4_APB
//    <name> STRIP4_APB </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40100014) \nSTRIP4 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.16..16> STRIP4_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP3_APB  ----------------------------
// SVD Line: 13680

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP3_APB
//    <name> STRIP3_APB </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40100014) \nSTRIP3 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.15..15> STRIP3_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP2_APB  ----------------------------
// SVD Line: 13698

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP2_APB
//    <name> STRIP2_APB </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40100014) \nSTRIP2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.14..14> STRIP2_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP1_APB  ----------------------------
// SVD Line: 13716

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP1_APB
//    <name> STRIP1_APB </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40100014) \nSTRIP1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.13..13> STRIP1_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_STRIP0_APB  ----------------------------
// SVD Line: 13734

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP0_APB
//    <name> STRIP0_APB </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40100014) \nSTRIP0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.12..12> STRIP0_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_APBCLKPWR0_ADC_APB  -----------------------------
// SVD Line: 13752

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_ADC_APB
//    <name> ADC_APB </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40100014) \nADC clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.11..11> ADC_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_UART_APB  -----------------------------
// SVD Line: 13770

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_UART_APB
//    <name> UART_APB </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40100014) \nUART clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.10..10> UART_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// --------------------------  Field Item: SYSTEM_APBCLKPWR0_WDT_APB  -----------------------------
// SVD Line: 13788

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_WDT_APB
//    <name> WDT_APB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40100014) \nWDT clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.9..9> WDT_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_GPIO_APB  -----------------------------
// SVD Line: 13806

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_GPIO_APB
//    <name> GPIO_APB </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40100014) \nIO clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.8..8> GPIO_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_TMR3_APB  -----------------------------
// SVD Line: 13824

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TMR3_APB
//    <name> TMR3_APB </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40100014) \nTMR3 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.7..7> TMR3_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_TMR2_APB  -----------------------------
// SVD Line: 13842

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TMR2_APB
//    <name> TMR2_APB </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40100014) \nTMR2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.6..6> TMR2_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_TMR1_APB  -----------------------------
// SVD Line: 13860

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TMR1_APB
//    <name> TMR1_APB </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40100014) \nTMR1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.5..5> TMR1_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SYSTEM_APBCLKPWR0_TMR0_APB  -----------------------------
// SVD Line: 13878

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TMR0_APB
//    <name> TMR0_APB </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100014) \nTMR0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.4..4> TMR0_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_TACHO3_APB  ----------------------------
// SVD Line: 13896

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TACHO3_APB
//    <name> TACHO3_APB </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100014) \nTACHO3 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.3..3> TACHO3_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_TACHO2_APB  ----------------------------
// SVD Line: 13914

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TACHO2_APB
//    <name> TACHO2_APB </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100014) \nTACHO2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.2..2> TACHO2_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_TACHO1_APB  ----------------------------
// SVD Line: 13932

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TACHO1_APB
//    <name> TACHO1_APB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100014) \nTACHO1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.1..1> TACHO1_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR0_TACHO0_APB  ----------------------------
// SVD Line: 13950

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TACHO0_APB
//    <name> TACHO0_APB </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100014) \nTACHO0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR0 ) </loc>
//      <o.0..0> TACHO0_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: SYSTEM_APBCLKPWR0  -------------------------------
// SVD Line: 13423

//  <rtree> SFDITEM_REG__SYSTEM_APBCLKPWR0
//    <name> APBCLKPWR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100014) APB Clock Power Control Register 0 </i>
//    <loc> ( (unsigned int)((SYSTEM_APBCLKPWR0 >> 0) & 0xFFFFFFFF), ((SYSTEM_APBCLKPWR0 = (SYSTEM_APBCLKPWR0 & ~(0x3FFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_USB_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_MATRIX_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_CRC_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_SPIM_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_SPIS_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_I2CDBG_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_I2C2_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_I2C1_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_I2C0_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP8_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP7_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP6_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP5_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP4_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP3_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP2_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP1_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_STRIP0_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_ADC_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_UART_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_WDT_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_GPIO_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TMR3_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TMR2_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TMR1_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TMR0_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TACHO3_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TACHO2_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TACHO1_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR0_TACHO0_APB </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_APBCLKPWR1  ----------------------------
// SVD Line: 13970

unsigned int SYSTEM_APBCLKPWR1 __AT (0x40100018);



// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM31_APB  ---------------------------
// SVD Line: 13975

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM31_APB
//    <name> LEDPWM31_APB </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40100018) \nLEDPWM31 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.31..31> LEDPWM31_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM30_APB  ---------------------------
// SVD Line: 13993

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM30_APB
//    <name> LEDPWM30_APB </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40100018) \nLEDPWM30 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.30..30> LEDPWM30_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM29_APB  ---------------------------
// SVD Line: 14011

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM29_APB
//    <name> LEDPWM29_APB </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40100018) \nLEDPWM29 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.29..29> LEDPWM29_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM28_APB  ---------------------------
// SVD Line: 14029

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM28_APB
//    <name> LEDPWM28_APB </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40100018) \nLEDPWM28 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.28..28> LEDPWM28_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM27_APB  ---------------------------
// SVD Line: 14047

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM27_APB
//    <name> LEDPWM27_APB </name>
//    <rw> 
//    <i> [Bit 27] RW (@ 0x40100018) \nLEDPWM27 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.27..27> LEDPWM27_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM26_APB  ---------------------------
// SVD Line: 14065

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM26_APB
//    <name> LEDPWM26_APB </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40100018) \nLEDPWM26 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.26..26> LEDPWM26_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM25_APB  ---------------------------
// SVD Line: 14083

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM25_APB
//    <name> LEDPWM25_APB </name>
//    <rw> 
//    <i> [Bit 25] RW (@ 0x40100018) \nLEDPWM25 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.25..25> LEDPWM25_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM24_APB  ---------------------------
// SVD Line: 14101

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM24_APB
//    <name> LEDPWM24_APB </name>
//    <rw> 
//    <i> [Bit 24] RW (@ 0x40100018) \nLEDPWM24 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.24..24> LEDPWM24_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM23_APB  ---------------------------
// SVD Line: 14119

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM23_APB
//    <name> LEDPWM23_APB </name>
//    <rw> 
//    <i> [Bit 23] RW (@ 0x40100018) \nLEDPWM23 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.23..23> LEDPWM23_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM22_APB  ---------------------------
// SVD Line: 14137

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM22_APB
//    <name> LEDPWM22_APB </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40100018) \nLEDPWM22 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.22..22> LEDPWM22_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM21_APB  ---------------------------
// SVD Line: 14155

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM21_APB
//    <name> LEDPWM21_APB </name>
//    <rw> 
//    <i> [Bit 21] RW (@ 0x40100018) \nLEDPWM21 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.21..21> LEDPWM21_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM20_APB  ---------------------------
// SVD Line: 14173

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM20_APB
//    <name> LEDPWM20_APB </name>
//    <rw> 
//    <i> [Bit 20] RW (@ 0x40100018) \nLEDPWM20 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.20..20> LEDPWM20_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM19_APB  ---------------------------
// SVD Line: 14191

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM19_APB
//    <name> LEDPWM19_APB </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40100018) \nLEDPWM19 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.19..19> LEDPWM19_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM18_APB  ---------------------------
// SVD Line: 14209

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM18_APB
//    <name> LEDPWM18_APB </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40100018) \nLEDPWM18 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.18..18> LEDPWM18_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM17_APB  ---------------------------
// SVD Line: 14227

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM17_APB
//    <name> LEDPWM17_APB </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40100018) \nLEDPWM17 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.17..17> LEDPWM17_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM16_APB  ---------------------------
// SVD Line: 14245

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM16_APB
//    <name> LEDPWM16_APB </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40100018) \nLEDPWM16 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.16..16> LEDPWM16_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM15_APB  ---------------------------
// SVD Line: 14263

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM15_APB
//    <name> LEDPWM15_APB </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40100018) \nLEDPWM15 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.15..15> LEDPWM15_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM14_APB  ---------------------------
// SVD Line: 14281

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM14_APB
//    <name> LEDPWM14_APB </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40100018) \nLEDPWM14 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.14..14> LEDPWM14_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM13_APB  ---------------------------
// SVD Line: 14299

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM13_APB
//    <name> LEDPWM13_APB </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40100018) \nLEDPWM13 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.13..13> LEDPWM13_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM12_APB  ---------------------------
// SVD Line: 14317

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM12_APB
//    <name> LEDPWM12_APB </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40100018) \nLEDPWM12 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.12..12> LEDPWM12_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM11_APB  ---------------------------
// SVD Line: 14335

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM11_APB
//    <name> LEDPWM11_APB </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40100018) \nLEDPWM11 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.11..11> LEDPWM11_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM10_APB  ---------------------------
// SVD Line: 14353

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM10_APB
//    <name> LEDPWM10_APB </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40100018) \nLEDPWM10 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.10..10> LEDPWM10_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM9_APB  ---------------------------
// SVD Line: 14371

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM9_APB
//    <name> LEDPWM9_APB </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40100018) \nLEDPWM9 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.9..9> LEDPWM9_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM8_APB  ---------------------------
// SVD Line: 14389

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM8_APB
//    <name> LEDPWM8_APB </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40100018) \nLEDPWM8 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.8..8> LEDPWM8_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM7_APB  ---------------------------
// SVD Line: 14407

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM7_APB
//    <name> LEDPWM7_APB </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40100018) \nLEDPWM7 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.7..7> LEDPWM7_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM6_APB  ---------------------------
// SVD Line: 14425

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM6_APB
//    <name> LEDPWM6_APB </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40100018) \nLEDPWM6 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.6..6> LEDPWM6_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM5_APB  ---------------------------
// SVD Line: 14443

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM5_APB
//    <name> LEDPWM5_APB </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40100018) \nLEDPWM5 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.5..5> LEDPWM5_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM4_APB  ---------------------------
// SVD Line: 14461

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM4_APB
//    <name> LEDPWM4_APB </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100018) \nLEDPWM4 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.4..4> LEDPWM4_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM3_APB  ---------------------------
// SVD Line: 14479

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM3_APB
//    <name> LEDPWM3_APB </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100018) \nLEDPWM3 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.3..3> LEDPWM3_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM2_APB  ---------------------------
// SVD Line: 14497

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM2_APB
//    <name> LEDPWM2_APB </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100018) \nLEDPWM2 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.2..2> LEDPWM2_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM1_APB  ---------------------------
// SVD Line: 14515

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM1_APB
//    <name> LEDPWM1_APB </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100018) \nLEDPWM1 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.1..1> LEDPWM1_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ------------------------  Field Item: SYSTEM_APBCLKPWR1_LEDPWM0_APB  ---------------------------
// SVD Line: 14533

//  <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM0_APB
//    <name> LEDPWM0_APB </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100018) \nLEDPWM0 clock enable: 0=Disable, 1=Enable\n0 : DISABLE = Disable\n1 : ENABLE = Enable </i>
//    <combo> 
//      <loc> ( (unsigned int) SYSTEM_APBCLKPWR1 ) </loc>
//      <o.0..0> LEDPWM0_APB
//        <0=> 0: DISABLE = Disable
//        <1=> 1: ENABLE = Enable
//    </combo>
//  </item>
//  


// ----------------------------  Register RTree: SYSTEM_APBCLKPWR1  -------------------------------
// SVD Line: 13970

//  <rtree> SFDITEM_REG__SYSTEM_APBCLKPWR1
//    <name> APBCLKPWR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100018) APB Clock Power Control Register 1 </i>
//    <loc> ( (unsigned int)((SYSTEM_APBCLKPWR1 >> 0) & 0xFFFFFFFF), ((SYSTEM_APBCLKPWR1 = (SYSTEM_APBCLKPWR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM31_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM30_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM29_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM28_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM27_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM26_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM25_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM24_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM23_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM22_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM21_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM20_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM19_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM18_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM17_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM16_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM15_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM14_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM13_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM12_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM11_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM10_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM9_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM8_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM7_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM6_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM5_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM4_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM3_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM2_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM1_APB </item>
//    <item> SFDITEM_FIELD__SYSTEM_APBCLKPWR1_LEDPWM0_APB </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_PERICLKSEL1  ---------------------------
// SVD Line: 14553

unsigned int SYSTEM_PERICLKSEL1 __AT (0x4010001C);



// ------------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_adc_async_bus  ----------------------
// SVD Line: 14558

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_adc_async_bus
//    <name> sel_clk_adc_async_bus </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x4010001C) ADC Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL1 ) </loc>
//      <o.30..30> sel_clk_adc_async_bus
//    </check>
//  </item>
//  


// ---------------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_adc_ctrl  ------------------------
// SVD Line: 14564

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_adc_ctrl
//    <name> sel_clk_adc_ctrl </name>
//    <rw> 
//    <i> [Bits 29..28] RW (@ 0x4010001C) ADC Control Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL1 >> 28) & 0x3), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x3UL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_dot_matrix_led_async_bus  ----------------
// SVD Line: 14570

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_dot_matrix_led_async_bus
//    <name> sel_clk_dot_matrix_led_async_bus </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x4010001C) Dot Matrix LED Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL1 ) </loc>
//      <o.26..26> sel_clk_dot_matrix_led_async_bus
//    </check>
//  </item>
//  


// ----------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_dot_matrix_led_ip  --------------------
// SVD Line: 14576

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_dot_matrix_led_ip
//    <name> sel_clk_dot_matrix_led_ip </name>
//    <rw> 
//    <i> [Bits 25..24] RW (@ 0x4010001C) Dot Matrix LED IP Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL1 >> 24) & 0x3), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x3UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_i2c_dbg_async_bus  --------------------
// SVD Line: 14582

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_dbg_async_bus
//    <name> sel_clk_i2c_dbg_async_bus </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x4010001C) I2C Debug Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL1 ) </loc>
//      <o.22..22> sel_clk_i2c_dbg_async_bus
//    </check>
//  </item>
//  


// ---------------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_i2c_dbg  -------------------------
// SVD Line: 14588

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_dbg
//    <name> sel_clk_i2c_dbg </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x4010001C) I2C Debug Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL1 >> 20) & 0x3), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_2_async_bus  -------------------
// SVD Line: 14594

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_2_async_bus
//    <name> sel_clk_i2c_ip_2_async_bus </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x4010001C) I2C IP 2 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL1 ) </loc>
//      <o.18..18> sel_clk_i2c_ip_2_async_bus
//    </check>
//  </item>
//  


// ---------------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_2  ------------------------
// SVD Line: 14600

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_2
//    <name> sel_clk_i2c_ip_2 </name>
//    <rw> 
//    <i> [Bits 17..16] RW (@ 0x4010001C) I2C IP 2 Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL1 >> 16) & 0x3), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x3UL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_1_async_bus  -------------------
// SVD Line: 14606

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_1_async_bus
//    <name> sel_clk_i2c_ip_1_async_bus </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4010001C) I2C IP 1 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL1 ) </loc>
//      <o.14..14> sel_clk_i2c_ip_1_async_bus
//    </check>
//  </item>
//  


// ---------------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_1  ------------------------
// SVD Line: 14612

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_1
//    <name> sel_clk_i2c_ip_1 </name>
//    <rw> 
//    <i> [Bits 13..12] RW (@ 0x4010001C) I2C IP 1 Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL1 >> 12) & 0x3), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x3UL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_0_async_bus  -------------------
// SVD Line: 14618

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_0_async_bus
//    <name> sel_clk_i2c_ip_0_async_bus </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x4010001C) I2C IP 0 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL1 ) </loc>
//      <o.10..10> sel_clk_i2c_ip_0_async_bus
//    </check>
//  </item>
//  


// ---------------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_0  ------------------------
// SVD Line: 14624

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_0
//    <name> sel_clk_i2c_ip_0 </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x4010001C) I2C IP 0 Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL1 >> 8) & 0x3), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x3UL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_spi_m_ip_0_async_bus  ------------------
// SVD Line: 14630

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_spi_m_ip_0_async_bus
//    <name> sel_clk_spi_m_ip_0_async_bus </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4010001C) SPI Master IP 0 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL1 ) </loc>
//      <o.6..6> sel_clk_spi_m_ip_0_async_bus
//    </check>
//  </item>
//  


// --------------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_spi_m_ip_0  -----------------------
// SVD Line: 14636

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_spi_m_ip_0
//    <name> sel_clk_spi_m_ip_0 </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x4010001C) SPI Master IP 0 Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL1 >> 4) & 0x3), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_spi_s_ip_0_async_bus  ------------------
// SVD Line: 14642

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_spi_s_ip_0_async_bus
//    <name> sel_clk_spi_s_ip_0_async_bus </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010001C) SPI Slave IP 0 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL1 ) </loc>
//      <o.2..2> sel_clk_spi_s_ip_0_async_bus
//    </check>
//  </item>
//  


// --------------------  Field Item: SYSTEM_PERICLKSEL1_sel_clk_spi_s_ip_0  -----------------------
// SVD Line: 14648

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_spi_s_ip_0
//    <name> sel_clk_spi_s_ip_0 </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x4010001C) SPI Slave IP 0 Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL1 >> 0) & 0x3), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: SYSTEM_PERICLKSEL1  -------------------------------
// SVD Line: 14553

//  <rtree> SFDITEM_REG__SYSTEM_PERICLKSEL1
//    <name> PERICLKSEL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010001C) Clock Source Select for CTS1 IP </i>
//    <loc> ( (unsigned int)((SYSTEM_PERICLKSEL1 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKSEL1 = (SYSTEM_PERICLKSEL1 & ~(0x77777777UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x77777777) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_adc_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_adc_ctrl </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_dot_matrix_led_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_dot_matrix_led_ip </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_dbg_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_dbg </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_2_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_2 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_1_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_1 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_0_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_i2c_ip_0 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_spi_m_ip_0_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_spi_m_ip_0 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_spi_s_ip_0_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL1_sel_clk_spi_s_ip_0 </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_PERICLKSEL2  ---------------------------
// SVD Line: 14656

unsigned int SYSTEM_PERICLKSEL2 __AT (0x40100020);



// ----------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_1_async_bus  -------------------
// SVD Line: 14661

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_1_async_bus
//    <name> sel_clk_tmr_ip_1_async_bus </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40100020) Timer IP 1 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.30..30> sel_clk_tmr_ip_1_async_bus
//    </check>
//  </item>
//  


// ---------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_1  ------------------------
// SVD Line: 14667

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_1
//    <name> sel_clk_tmr_ip_1 </name>
//    <rw> 
//    <i> [Bits 29..28] RW (@ 0x40100020) Timer IP 1 Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL2 >> 28) & 0x3), ((SYSTEM_PERICLKSEL2 = (SYSTEM_PERICLKSEL2 & ~(0x3UL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_0_async_bus  -------------------
// SVD Line: 14673

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_0_async_bus
//    <name> sel_clk_tmr_ip_0_async_bus </name>
//    <rw> 
//    <i> [Bit 26] RW (@ 0x40100020) Timer IP 0 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.26..26> sel_clk_tmr_ip_0_async_bus
//    </check>
//  </item>
//  


// ---------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_0  ------------------------
// SVD Line: 14679

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_0
//    <name> sel_clk_tmr_ip_0 </name>
//    <rw> 
//    <i> [Bits 25..24] RW (@ 0x40100020) Timer IP 0 Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL2 >> 24) & 0x3), ((SYSTEM_PERICLKSEL2 = (SYSTEM_PERICLKSEL2 & ~(0x3UL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_turbo_mem_comp_async_bus  ----------------
// SVD Line: 14685

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_turbo_mem_comp_async_bus
//    <name> sel_clk_turbo_mem_comp_async_bus </name>
//    <rw> 
//    <i> [Bit 22] RW (@ 0x40100020) Turbo Memory Comparator Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.22..22> sel_clk_turbo_mem_comp_async_bus
//    </check>
//  </item>
//  


// ----------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_turbo_mem_comp_ip  --------------------
// SVD Line: 14691

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_turbo_mem_comp_ip
//    <name> sel_clk_turbo_mem_comp_ip </name>
//    <rw> 
//    <i> [Bits 21..20] RW (@ 0x40100020) Turbo Memory Comparator IP Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL2 >> 20) & 0x3), ((SYSTEM_PERICLKSEL2 = (SYSTEM_PERICLKSEL2 & ~(0x3UL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tach_ip_3  ------------------------
// SVD Line: 14697

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_3
//    <name> sel_clk_tach_ip_3 </name>
//    <rw> 
//    <i> [Bit 19] RW (@ 0x40100020) TACH IP 3 Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.19..19> sel_clk_tach_ip_3
//    </check>
//  </item>
//  


// --------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tach_ip_2  ------------------------
// SVD Line: 14703

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_2
//    <name> sel_clk_tach_ip_2 </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x40100020) TACH IP 2 Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.18..18> sel_clk_tach_ip_2
//    </check>
//  </item>
//  


// --------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tach_ip_1  ------------------------
// SVD Line: 14709

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_1
//    <name> sel_clk_tach_ip_1 </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40100020) TACH IP 1 Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.17..17> sel_clk_tach_ip_1
//    </check>
//  </item>
//  


// --------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tach_ip_0  ------------------------
// SVD Line: 14715

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_0
//    <name> sel_clk_tach_ip_0 </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40100020) TACH IP 0 Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.16..16> sel_clk_tach_ip_0
//    </check>
//  </item>
//  


// ---------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tach_ip_3_async_bus  -------------------
// SVD Line: 14721

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_3_async_bus
//    <name> sel_clk_tach_ip_3_async_bus </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40100020) TACH IP 3 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.15..15> sel_clk_tach_ip_3_async_bus
//    </check>
//  </item>
//  


// ---------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tach_ip_2_async_bus  -------------------
// SVD Line: 14727

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_2_async_bus
//    <name> sel_clk_tach_ip_2_async_bus </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40100020) TACH IP 2 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.14..14> sel_clk_tach_ip_2_async_bus
//    </check>
//  </item>
//  


// ---------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tach_ip_1_async_bus  -------------------
// SVD Line: 14733

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_1_async_bus
//    <name> sel_clk_tach_ip_1_async_bus </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40100020) TACH IP 1 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.13..13> sel_clk_tach_ip_1_async_bus
//    </check>
//  </item>
//  


// ---------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_tach_ip_0_async_bus  -------------------
// SVD Line: 14739

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_0_async_bus
//    <name> sel_clk_tach_ip_0_async_bus </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40100020) TACH IP 0 Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.12..12> sel_clk_tach_ip_0_async_bus
//    </check>
//  </item>
//  


// ----------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_efuse  --------------------------
// SVD Line: 14745

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_efuse
//    <name> sel_clk_efuse </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40100020) eFuse Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.11..11> sel_clk_efuse
//    </check>
//  </item>
//  


// ------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_gpio_async_bus  ---------------------
// SVD Line: 14751

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_gpio_async_bus
//    <name> sel_clk_gpio_async_bus </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40100020) GPIO Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.10..10> sel_clk_gpio_async_bus
//    </check>
//  </item>
//  


// ------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_wdt_async_bus  ----------------------
// SVD Line: 14757

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_wdt_async_bus
//    <name> sel_clk_wdt_async_bus </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40100020) WDT Async Bus Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.9..9> sel_clk_wdt_async_bus
//    </check>
//  </item>
//  


// -------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_usb_dphy_ip  -----------------------
// SVD Line: 14763

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_usb_dphy_ip
//    <name> sel_clk_usb_dphy_ip </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40100020) USB DPHY IP Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.8..8> sel_clk_usb_dphy_ip
//    </check>
//  </item>
//  


// ----------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_i3c_ip  -------------------------
// SVD Line: 14769

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_i3c_ip
//    <name> sel_clk_i3c_ip </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x40100020) I3C IP Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL2 >> 6) & 0x3), ((SYSTEM_PERICLKSEL2 = (SYSTEM_PERICLKSEL2 & ~(0x3UL << 6 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 6 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_swd  ---------------------------
// SVD Line: 14775

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_swd
//    <name> sel_clk_swd </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40100020) SWD Clock Source Select </i>
//    <edit> 
//      <loc> ( (unsigned char)((SYSTEM_PERICLKSEL2 >> 4) & 0x3), ((SYSTEM_PERICLKSEL2 = (SYSTEM_PERICLKSEL2 & ~(0x3UL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_spic_extr  ------------------------
// SVD Line: 14781

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_spic_extr
//    <name> sel_clk_spic_extr </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100020) SPIC EXTR Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.3..3> sel_clk_spic_extr
//    </check>
//  </item>
//  


// --------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_spic_intr  ------------------------
// SVD Line: 14787

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_spic_intr
//    <name> sel_clk_spic_intr </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100020) SPIC INTR Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.2..2> sel_clk_spic_intr
//    </check>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_dma  ---------------------------
// SVD Line: 14793

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_dma
//    <name> sel_clk_dma </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100020) DMA Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.1..1> sel_clk_dma
//    </check>
//  </item>
//  


// -----------------------  Field Item: SYSTEM_PERICLKSEL2_sel_clk_cpu  ---------------------------
// SVD Line: 14799

//  <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_cpu
//    <name> sel_clk_cpu </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100020) CPU Clock Source Select </i>
//    <check> 
//      <loc> ( (unsigned int) SYSTEM_PERICLKSEL2 ) </loc>
//      <o.0..0> sel_clk_cpu
//    </check>
//  </item>
//  


// ---------------------------  Register RTree: SYSTEM_PERICLKSEL2  -------------------------------
// SVD Line: 14656

//  <rtree> SFDITEM_REG__SYSTEM_PERICLKSEL2
//    <name> PERICLKSEL2 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100020) Peripheral Clock Select Register 2 </i>
//    <loc> ( (unsigned int)((SYSTEM_PERICLKSEL2 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKSEL2 = (SYSTEM_PERICLKSEL2 & ~(0x777FFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x777FFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_1_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_1 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_0_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tmr_ip_0 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_turbo_mem_comp_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_turbo_mem_comp_ip </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_3 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_2 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_1 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_0 </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_3_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_2_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_1_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_tach_ip_0_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_efuse </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_gpio_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_wdt_async_bus </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_usb_dphy_ip </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_i3c_ip </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_swd </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_spic_extr </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_spic_intr </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_dma </item>
//    <item> SFDITEM_FIELD__SYSTEM_PERICLKSEL2_sel_clk_cpu </item>
//  </rtree>
//  


// ------------------------  Register Item Address: SYSTEM_APBCLKPWR2  ----------------------------
// SVD Line: 14809

unsigned int SYSTEM_APBCLKPWR2 __AT (0x40100024);



// ----------------------------  Register Item: SYSTEM_APBCLKPWR2  --------------------------------
// SVD Line: 14809

//  <item> SFDITEM_REG__SYSTEM_APBCLKPWR2
//    <name> APBCLKPWR2 </name>
//    <i> [Bits 31..0] RW (@ 0x40100024) APB CLOCK POWER REGISTER #2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_APBCLKPWR2 >> 0) & 0xFFFFFFFF), ((SYSTEM_APBCLKPWR2 = (SYSTEM_APBCLKPWR2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: SYSTEM_PERICLKCTRL3  ---------------------------
// SVD Line: 14818

unsigned int SYSTEM_PERICLKCTRL3 __AT (0x40100028);



// ---------------------------  Register Item: SYSTEM_PERICLKCTRL3  -------------------------------
// SVD Line: 14818

//  <item> SFDITEM_REG__SYSTEM_PERICLKCTRL3
//    <name> PERICLKCTRL3 </name>
//    <i> [Bits 31..0] RW (@ 0x40100028) PERIPHERAL CLOCK CONTROL REGISTER #3 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERICLKCTRL3 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKCTRL3 = (SYSTEM_PERICLKCTRL3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: SYSTEM_PERICLKCTRL4  ---------------------------
// SVD Line: 14827

unsigned int SYSTEM_PERICLKCTRL4 __AT (0x4010002C);



// ---------------------------  Register Item: SYSTEM_PERICLKCTRL4  -------------------------------
// SVD Line: 14827

//  <item> SFDITEM_REG__SYSTEM_PERICLKCTRL4
//    <name> PERICLKCTRL4 </name>
//    <i> [Bits 31..0] RW (@ 0x4010002C) PERIPHERAL CLOCK CONTROL REGISTER #4 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERICLKCTRL4 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERICLKCTRL4 = (SYSTEM_PERICLKCTRL4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST0  -----------------------------
// SVD Line: 14836

unsigned int SYSTEM_PERIRST0 __AT (0x40100030);



// -----------------------------  Register Item: SYSTEM_PERIRST0  ---------------------------------
// SVD Line: 14836

//  <item> SFDITEM_REG__SYSTEM_PERIRST0
//    <name> PERIRST0 </name>
//    <i> [Bits 31..0] RW (@ 0x40100030) PERIPHERAL RESET CONTROL REGISTER #0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST0 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST0 = (SYSTEM_PERIRST0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST1  -----------------------------
// SVD Line: 14845

unsigned int SYSTEM_PERIRST1 __AT (0x40100034);



// -----------------------------  Register Item: SYSTEM_PERIRST1  ---------------------------------
// SVD Line: 14845

//  <item> SFDITEM_REG__SYSTEM_PERIRST1
//    <name> PERIRST1 </name>
//    <i> [Bits 31..0] RW (@ 0x40100034) PERIPHERAL RESET CONTROL REGISTER #1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST1 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST1 = (SYSTEM_PERIRST1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST2  -----------------------------
// SVD Line: 14854

unsigned int SYSTEM_PERIRST2 __AT (0x40100038);



// -----------------------------  Register Item: SYSTEM_PERIRST2  ---------------------------------
// SVD Line: 14854

//  <item> SFDITEM_REG__SYSTEM_PERIRST2
//    <name> PERIRST2 </name>
//    <i> [Bits 31..0] RW (@ 0x40100038) PERIPHERAL RESET CONTROL REGISTER #2 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST2 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST2 = (SYSTEM_PERIRST2 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST3  -----------------------------
// SVD Line: 14863

unsigned int SYSTEM_PERIRST3 __AT (0x4010003C);



// -----------------------------  Register Item: SYSTEM_PERIRST3  ---------------------------------
// SVD Line: 14863

//  <item> SFDITEM_REG__SYSTEM_PERIRST3
//    <name> PERIRST3 </name>
//    <i> [Bits 31..0] RW (@ 0x4010003C) PERIPHERAL RESET CONTROL REGISTER #3 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST3 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST3 = (SYSTEM_PERIRST3 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST4  -----------------------------
// SVD Line: 14872

unsigned int SYSTEM_PERIRST4 __AT (0x40100040);



// -----------------------------  Register Item: SYSTEM_PERIRST4  ---------------------------------
// SVD Line: 14872

//  <item> SFDITEM_REG__SYSTEM_PERIRST4
//    <name> PERIRST4 </name>
//    <i> [Bits 31..0] RW (@ 0x40100040) PERIPHERAL RESET CONTROL REGISTER #4 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST4 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST4 = (SYSTEM_PERIRST4 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST5  -----------------------------
// SVD Line: 14881

unsigned int SYSTEM_PERIRST5 __AT (0x40100044);



// -----------------------------  Register Item: SYSTEM_PERIRST5  ---------------------------------
// SVD Line: 14881

//  <item> SFDITEM_REG__SYSTEM_PERIRST5
//    <name> PERIRST5 </name>
//    <i> [Bits 31..0] RW (@ 0x40100044) PERIPHERAL RESET CONTROL REGISTER #5 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST5 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST5 = (SYSTEM_PERIRST5 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST6  -----------------------------
// SVD Line: 14890

unsigned int SYSTEM_PERIRST6 __AT (0x40100048);



// -----------------------------  Register Item: SYSTEM_PERIRST6  ---------------------------------
// SVD Line: 14890

//  <item> SFDITEM_REG__SYSTEM_PERIRST6
//    <name> PERIRST6 </name>
//    <i> [Bits 31..0] RW (@ 0x40100048) PERIPHERAL RESET CONTROL REGISTER #6 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST6 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST6 = (SYSTEM_PERIRST6 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST7  -----------------------------
// SVD Line: 14899

unsigned int SYSTEM_PERIRST7 __AT (0x4010004C);



// -----------------------------  Register Item: SYSTEM_PERIRST7  ---------------------------------
// SVD Line: 14899

//  <item> SFDITEM_REG__SYSTEM_PERIRST7
//    <name> PERIRST7 </name>
//    <i> [Bits 31..0] RW (@ 0x4010004C) PERIPHERAL RESET CONTROL REGISTER #7 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST7 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST7 = (SYSTEM_PERIRST7 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_PERIRST8  -----------------------------
// SVD Line: 14908

unsigned int SYSTEM_PERIRST8 __AT (0x40100050);



// -----------------------------  Register Item: SYSTEM_PERIRST8  ---------------------------------
// SVD Line: 14908

//  <item> SFDITEM_REG__SYSTEM_PERIRST8
//    <name> PERIRST8 </name>
//    <i> [Bits 31..0] RW (@ 0x40100050) PERIPHERAL RESET CONTROL REGISTER #8 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_PERIRST8 >> 0) & 0xFFFFFFFF), ((SYSTEM_PERIRST8 = (SYSTEM_PERIRST8 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: SYSTEM_CPUINITADDR0  ---------------------------
// SVD Line: 14917

unsigned int SYSTEM_CPUINITADDR0 __AT (0x40100054);



// ---------------------------  Register Item: SYSTEM_CPUINITADDR0  -------------------------------
// SVD Line: 14917

//  <item> SFDITEM_REG__SYSTEM_CPUINITADDR0
//    <name> CPUINITADDR0 </name>
//    <i> [Bits 31..0] RW (@ 0x40100054) CPU INITIAL ADDRESS REGISTER #0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_CPUINITADDR0 >> 0) & 0xFFFFFFFF), ((SYSTEM_CPUINITADDR0 = (SYSTEM_CPUINITADDR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: SYSTEM_CPUINITADDR1  ---------------------------
// SVD Line: 14926

unsigned int SYSTEM_CPUINITADDR1 __AT (0x40100058);



// ---------------------------  Register Item: SYSTEM_CPUINITADDR1  -------------------------------
// SVD Line: 14926

//  <item> SFDITEM_REG__SYSTEM_CPUINITADDR1
//    <name> CPUINITADDR1 </name>
//    <i> [Bits 31..0] RW (@ 0x40100058) CPU INITIAL ADDRESS REGISTER #1 </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_CPUINITADDR1 >> 0) & 0xFFFFFFFF), ((SYSTEM_CPUINITADDR1 = (SYSTEM_CPUINITADDR1 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SYSTEM_SLEEPCTRL  ----------------------------
// SVD Line: 14935

unsigned int SYSTEM_SLEEPCTRL __AT (0x4010005C);



// -----------------------------  Register Item: SYSTEM_SLEEPCTRL  --------------------------------
// SVD Line: 14935

//  <item> SFDITEM_REG__SYSTEM_SLEEPCTRL
//    <name> SLEEPCTRL </name>
//    <i> [Bits 31..0] RW (@ 0x4010005C) SLEEP CONTROL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_SLEEPCTRL >> 0) & 0xFFFFFFFF), ((SYSTEM_SLEEPCTRL = (SYSTEM_SLEEPCTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: SYSTEM_ADCCLKCTRL  ----------------------------
// SVD Line: 14944

unsigned int SYSTEM_ADCCLKCTRL __AT (0x40100060);



// ----------------------------  Register Item: SYSTEM_ADCCLKCTRL  --------------------------------
// SVD Line: 14944

//  <item> SFDITEM_REG__SYSTEM_ADCCLKCTRL
//    <name> ADCCLKCTRL </name>
//    <i> [Bits 31..0] RW (@ 0x40100060) ADC CLOCK CONTROL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_ADCCLKCTRL >> 0) & 0xFFFFFFFF), ((SYSTEM_ADCCLKCTRL = (SYSTEM_ADCCLKCTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: SYSTEM_USBCTRL  -----------------------------
// SVD Line: 14953

unsigned int SYSTEM_USBCTRL __AT (0x40100064);



// ------------------------------  Register Item: SYSTEM_USBCTRL  ---------------------------------
// SVD Line: 14953

//  <item> SFDITEM_REG__SYSTEM_USBCTRL
//    <name> USBCTRL </name>
//    <i> [Bits 31..0] RW (@ 0x40100064) FPGA USB CONTROL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((SYSTEM_USBCTRL >> 0) & 0xFFFFFFFF), ((SYSTEM_USBCTRL = (SYSTEM_USBCTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Peripheral View: SYSTEM  ------------------------------------
// SVD Line: 11527

//  <view> SYSTEM
//    <name> SYSTEM </name>
//    <item> SFDITEM_REG__SYSTEM_PERICLKPWRTOP </item>
//    <item> SFDITEM_REG__SYSTEM_PERICLKSEL0 </item>
//    <item> SFDITEM_REG__SYSTEM_PERICLKPWR0 </item>
//    <item> SFDITEM_REG__SYSTEM_PERICLKPWR1 </item>
//    <item> SFDITEM_REG__SYSTEM_PERICLKPWR2 </item>
//    <item> SFDITEM_REG__SYSTEM_APBCLKPWR0 </item>
//    <item> SFDITEM_REG__SYSTEM_APBCLKPWR1 </item>
//    <item> SFDITEM_REG__SYSTEM_PERICLKSEL1 </item>
//    <item> SFDITEM_REG__SYSTEM_PERICLKSEL2 </item>
//    <item> SFDITEM_REG__SYSTEM_APBCLKPWR2 </item>
//    <item> SFDITEM_REG__SYSTEM_PERICLKCTRL3 </item>
//    <item> SFDITEM_REG__SYSTEM_PERICLKCTRL4 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST0 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST1 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST2 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST3 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST4 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST5 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST6 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST7 </item>
//    <item> SFDITEM_REG__SYSTEM_PERIRST8 </item>
//    <item> SFDITEM_REG__SYSTEM_CPUINITADDR0 </item>
//    <item> SFDITEM_REG__SYSTEM_CPUINITADDR1 </item>
//    <item> SFDITEM_REG__SYSTEM_SLEEPCTRL </item>
//    <item> SFDITEM_REG__SYSTEM_ADCCLKCTRL </item>
//    <item> SFDITEM_REG__SYSTEM_USBCTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: RCCAL_CTRLR0  ------------------------------
// SVD Line: 14985

unsigned int RCCAL_CTRLR0 __AT (0x40100100);



// -------------------------------  Register Item: RCCAL_CTRLR0  ----------------------------------
// SVD Line: 14985

//  <item> SFDITEM_REG__RCCAL_CTRLR0
//    <name> CTRLR0 </name>
//    <i> [Bits 31..0] RW (@ 0x40100100) Control Register 0 </i>
//    <edit> 
//      <loc> ( (unsigned int)((RCCAL_CTRLR0 >> 0) & 0xFFFFFFFF), ((RCCAL_CTRLR0 = (RCCAL_CTRLR0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: RCCAL_RC25RESULT  ----------------------------
// SVD Line: 14994

unsigned int RCCAL_RC25RESULT __AT (0x40100104);



// -----------------------------  Register Item: RCCAL_RC25RESULT  --------------------------------
// SVD Line: 14994

//  <item> SFDITEM_REG__RCCAL_RC25RESULT
//    <name> RC25RESULT </name>
//    <i> [Bits 31..0] RW (@ 0x40100104) RC25M Result Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((RCCAL_RC25RESULT >> 0) & 0xFFFFFFFF), ((RCCAL_RC25RESULT = (RCCAL_RC25RESULT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: RCCAL_RC32RESULT  ----------------------------
// SVD Line: 15003

unsigned int RCCAL_RC32RESULT __AT (0x40100108);



// -----------------------------  Register Item: RCCAL_RC32RESULT  --------------------------------
// SVD Line: 15003

//  <item> SFDITEM_REG__RCCAL_RC32RESULT
//    <name> RC32RESULT </name>
//    <i> [Bits 31..0] RW (@ 0x40100108) RC32K Result Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((RCCAL_RC32RESULT >> 0) & 0xFFFFFFFF), ((RCCAL_RC32RESULT = (RCCAL_RC32RESULT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: RCCAL_RCDIFF  ------------------------------
// SVD Line: 15012

unsigned int RCCAL_RCDIFF __AT (0x4010010C);



// -------------------------------  Register Item: RCCAL_RCDIFF  ----------------------------------
// SVD Line: 15012

//  <item> SFDITEM_REG__RCCAL_RCDIFF
//    <name> RCDIFF </name>
//    <i> [Bits 31..0] RW (@ 0x4010010C) RC25M/RC32K Diff Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((RCCAL_RCDIFF >> 0) & 0xFFFFFFFF), ((RCCAL_RCDIFF = (RCCAL_RCDIFF & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: RCCAL_RC25CTRL  -----------------------------
// SVD Line: 15021

unsigned int RCCAL_RC25CTRL __AT (0x40100110);



// ------------------------------  Register Item: RCCAL_RC25CTRL  ---------------------------------
// SVD Line: 15021

//  <item> SFDITEM_REG__RCCAL_RC25CTRL
//    <name> RC25CTRL </name>
//    <i> [Bits 31..0] RW (@ 0x40100110) RC25M Analog Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((RCCAL_RC25CTRL >> 0) & 0xFFFFFFFF), ((RCCAL_RC25CTRL = (RCCAL_RC25CTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: RCCAL_RC32CTRL  -----------------------------
// SVD Line: 15030

unsigned int RCCAL_RC32CTRL __AT (0x40100114);



// ------------------------------  Register Item: RCCAL_RC32CTRL  ---------------------------------
// SVD Line: 15030

//  <item> SFDITEM_REG__RCCAL_RC32CTRL
//    <name> RC32CTRL </name>
//    <i> [Bits 31..0] RW (@ 0x40100114) RC32K Analog Control Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((RCCAL_RC32CTRL >> 0) & 0xFFFFFFFF), ((RCCAL_RC32CTRL = (RCCAL_RC32CTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Peripheral View: RCCAL  -------------------------------------
// SVD Line: 14965

//  <view> RCCAL
//    <name> RCCAL </name>
//    <item> SFDITEM_REG__RCCAL_CTRLR0 </item>
//    <item> SFDITEM_REG__RCCAL_RC25RESULT </item>
//    <item> SFDITEM_REG__RCCAL_RC32RESULT </item>
//    <item> SFDITEM_REG__RCCAL_RCDIFF </item>
//    <item> SFDITEM_REG__RCCAL_RC25CTRL </item>
//    <item> SFDITEM_REG__RCCAL_RC32CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: SPIM_CTRLR0  -------------------------------
// SVD Line: 15069

unsigned int SPIM_CTRLR0 __AT (0x40100300);



// -------------------------------  Field Item: SPIM_CTRLR0_DFS  ----------------------------------
// SVD Line: 15079

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_DFS
//    <name> DFS </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40100300) \nData Frame Size. Determines the size of the data transfer in serial frames.\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : FRAME_04BITS = 4-bit serial data transfer\n4 : FRAME_05BITS = 5-bit serial data transfer\n5 : FRAME_06BITS = 6-bit serial data transfer\n6 : FRAME_07BITS = 7-bit serial data transfer\n7 : FRAME_08BITS = 8-bit serial data transfer\n8 : FRAME_09BITS = 9-bit serial data transfer\n9 : FRAME_10BITS = 10-bit serial data transfer\n10 : FRAME_11BITS = 11-bit serial data transfer\n11 : FRAME_12BITS = 12-bit serial data transfer\n12 : FRAME_13BITS = 13-bit serial data transfer\n13 : FRAME_14BITS = 14-bit serial data transfer\n14 : FRAME_15BITS = 15-bit serial data transfer\n15 : FRAME_16BITS = 16-bit serial data transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.3..0> DFS
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: FRAME_04BITS = 4-bit serial data transfer
//        <4=> 4: FRAME_05BITS = 5-bit serial data transfer
//        <5=> 5: FRAME_06BITS = 6-bit serial data transfer
//        <6=> 6: FRAME_07BITS = 7-bit serial data transfer
//        <7=> 7: FRAME_08BITS = 8-bit serial data transfer
//        <8=> 8: FRAME_09BITS = 9-bit serial data transfer
//        <9=> 9: FRAME_10BITS = 10-bit serial data transfer
//        <10=> 10: FRAME_11BITS = 11-bit serial data transfer
//        <11=> 11: FRAME_12BITS = 12-bit serial data transfer
//        <12=> 12: FRAME_13BITS = 13-bit serial data transfer
//        <13=> 13: FRAME_14BITS = 14-bit serial data transfer
//        <14=> 14: FRAME_15BITS = 15-bit serial data transfer
//        <15=> 15: FRAME_16BITS = 16-bit serial data transfer
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: SPIM_CTRLR0_SCPH  ----------------------------------
// SVD Line: 15155

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_SCPH
//    <name> SCPH </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40100300) \nSerial Clock Phase. Determines the capture edge of the serial clock in relation to the slave select signal.\n0 : SCPH_MIDDLE = Serial clock toggles in middle of first data bit\n1 : SCPH_SECOND_EDGE = Data are captured on the second edge of the serial clock </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.6..6> SCPH
//        <0=> 0: SCPH_MIDDLE = Serial clock toggles in middle of first data bit
//        <1=> 1: SCPH_SECOND_EDGE = Data are captured on the second edge of the serial clock
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_CTRLR0_SCP  ----------------------------------
// SVD Line: 15177

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_SCP
//    <name> SCP </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40100300) \nUsed to select the polarity of the inactive serial clock.\n0 : SCLK_LOW = Inactive state of serial clock is low\n1 : SCLK_HIGH = Inactive state of serial clock is high </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.7..7> SCP
//        <0=> 0: SCLK_LOW = Inactive state of serial clock is low
//        <1=> 1: SCLK_HIGH = Inactive state of serial clock is high
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_CTRLR0_TM  -----------------------------------
// SVD Line: 15199

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_TM
//    <name> TM </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x40100300) \nTransmit Mode\n0 : TX_AND_RX = Transmit and receive\n1 : TX_ONLY = Transmit only mode or Write (SPI_FRF != 2'b00)\n2 : Reserved - do not use\n3 : EEPROM_READ = EEPROM Read mode </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.9..8> TM
//        <0=> 0: TX_AND_RX = Transmit and receive
//        <1=> 1: TX_ONLY = Transmit only mode or Write (SPI_FRF != 2'b00)
//        <2=> 2: 
//        <3=> 3: EEPROM_READ = EEPROM Read mode
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: SPIM_CTRLR0_SLV_OE  ---------------------------------
// SVD Line: 15224

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_SLV_OE
//    <name> SLV_OE </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40100300) \nSlave Output Enable\n0 : ENABLED = Enabled\n1 : DISABLED = Disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.10..10> SLV_OE
//        <0=> 0: ENABLED = Enabled
//        <1=> 1: DISABLED = Disabled
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_CTRLR0_SRL  ----------------------------------
// SVD Line: 15244

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_SRL
//    <name> SRL </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40100300) \nShift Register Loop\n0 : NORMAL_MODE = Normal mode operation\n1 : TESTING_MODE = Test mode: Tx and Rx shift reg connected </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.11..11> SRL
//        <0=> 0: NORMAL_MODE = Normal mode operation
//        <1=> 1: TESTING_MODE = Test mode: Tx and Rx shift reg connected
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_CTRLR0_CFS  ----------------------------------
// SVD Line: 15264

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_CFS
//    <name> CFS </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40100300) \nControl Frame Size\n0 : SIZE_01_BIT = 1-bit Control Word\n1 : SIZE_02_BIT = 2-bit Control Word\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : SIZE_16_BIT = 16-bit Control Word </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.15..12> CFS
//        <0=> 0: SIZE_01_BIT = 1-bit Control Word
//        <1=> 1: SIZE_02_BIT = 2-bit Control Word
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: SIZE_16_BIT = 16-bit Control Word
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: SPIM_CTRLR0_DFS_32  ---------------------------------
// SVD Line: 15290

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_DFS_32
//    <name> DFS_32 </name>
//    <rw> 
//    <i> [Bits 20..16] RW (@ 0x40100300) \nVaries Data Frame Size up to 32 bits.\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : FRAME_04BITS = 4-bit serial data transfer\n4 : FRAME_05BITS = 5-bit serial data transfer\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : FRAME_32BITS = 32-bit serial data transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.20..16> DFS_32
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: FRAME_04BITS = 4-bit serial data transfer
//        <4=> 4: FRAME_05BITS = 5-bit serial data transfer
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: FRAME_32BITS = 32-bit serial data transfer
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: SPIM_CTRLR0_SPI_FRF  --------------------------------
// SVD Line: 15317

//  <item> SFDITEM_FIELD__SPIM_CTRLR0_SPI_FRF
//    <name> SPI_FRF </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x40100300) \nSelects the serial protocol frame format.  Valid when the frame format is set to Motorola SPI.\n0 : MOTOROLA_SPI = Motorola SPI Frame Format\n1 : DUAL_SPI_FRF = Dual SPI Frame Format\n2 : QUAD_SPI_FRF = Quad SPI Frame Format\n3 : OCTAL_SPI_FRF = Octal SPI Frame Format </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_CTRLR0 ) </loc>
//      <o.22..21> SPI_FRF
//        <0=> 0: MOTOROLA_SPI = Motorola SPI Frame Format
//        <1=> 1: DUAL_SPI_FRF = Dual SPI Frame Format
//        <2=> 2: QUAD_SPI_FRF = Quad SPI Frame Format
//        <3=> 3: OCTAL_SPI_FRF = Octal SPI Frame Format
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPIM_CTRLR0  ----------------------------------
// SVD Line: 15069

//  <rtree> SFDITEM_REG__SPIM_CTRLR0
//    <name> CTRLR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100300) Control Register 0 </i>
//    <loc> ( (unsigned int)((SPIM_CTRLR0 >> 0) & 0xFFFFFFFF), ((SPIM_CTRLR0 = (SPIM_CTRLR0 & ~(0x7FFFCFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFCF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_DFS </item>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_SCPH </item>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_SCP </item>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_TM </item>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_SLV_OE </item>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_SRL </item>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_CFS </item>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_DFS_32 </item>
//    <item> SFDITEM_FIELD__SPIM_CTRLR0_SPI_FRF </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIM_CTRLR1  -------------------------------
// SVD Line: 15353

unsigned int SPIM_CTRLR1 __AT (0x40100304);



// -------------------------------  Field Item: SPIM_CTRLR1_NDF  ----------------------------------
// SVD Line: 15362

//  <item> SFDITEM_FIELD__SPIM_CTRLR1_NDF
//    <name> NDF </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40100304) Number of Data Frames. Represents the total number of data frames for the transaction. </i>
//    <edit> 
//      <loc> ( (unsigned short)((SPIM_CTRLR1 >> 0) & 0xFFFF), ((SPIM_CTRLR1 = (SPIM_CTRLR1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: SPIM_CTRLR1  ----------------------------------
// SVD Line: 15353

//  <rtree> SFDITEM_REG__SPIM_CTRLR1
//    <name> CTRLR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100304) Control Register 1 </i>
//    <loc> ( (unsigned int)((SPIM_CTRLR1 >> 0) & 0xFFFFFFFF), ((SPIM_CTRLR1 = (SPIM_CTRLR1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIM_CTRLR1_NDF </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIM_SSIENR  -------------------------------
// SVD Line: 15374

unsigned int SPIM_SSIENR __AT (0x40100308);



// -----------------------------  Field Item: SPIM_SSIENR_SSI_EN  ---------------------------------
// SVD Line: 15384

//  <item> SFDITEM_FIELD__SPIM_SSIENR_SSI_EN
//    <name> SSI_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100308) \nSSI Enable.\n0 : DISABLE = Disables Serial Transfer\n1 : ENABLE = Enables Serial Transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SSIENR ) </loc>
//      <o.0..0> SSI_EN
//        <0=> 0: DISABLE = Disables Serial Transfer
//        <1=> 1: ENABLE = Enables Serial Transfer
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPIM_SSIENR  ----------------------------------
// SVD Line: 15374

//  <rtree> SFDITEM_REG__SPIM_SSIENR
//    <name> SSIENR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100308) SSI Enable Register </i>
//    <loc> ( (unsigned int)((SPIM_SSIENR >> 0) & 0xFFFFFFFF), ((SPIM_SSIENR = (SPIM_SSIENR & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIM_SSIENR_SSI_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: SPIM_MWCR  --------------------------------
// SVD Line: 15408

unsigned int SPIM_MWCR __AT (0x4010030C);



// --------------------------------  Field Item: SPIM_MWCR_MHS  -----------------------------------
// SVD Line: 15417

//  <item> SFDITEM_FIELD__SPIM_MWCR_MHS
//    <name> MHS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010030C) \nMicrowire Handshaking. Controls the handshaking interface of the Microwire.\n0 : DISABLE = Handshaking interface is disabled\n1 : ENABLE = Handshaking interface is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_MWCR ) </loc>
//      <o.2..2> MHS
//        <0=> 0: DISABLE = Handshaking interface is disabled
//        <1=> 1: ENABLE = Handshaking interface is enabled
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: SPIM_MWCR_MDD  -----------------------------------
// SVD Line: 15439

//  <item> SFDITEM_FIELD__SPIM_MWCR_MDD
//    <name> MDD </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010030C) \nMicrowire Control. Specifies the direction of data flow for SSI.\n0 : RECEIVE = SSI receives data\n1 : TRANSMIT = SSI transmits data </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_MWCR ) </loc>
//      <o.1..1> MDD
//        <0=> 0: RECEIVE = SSI receives data
//        <1=> 1: TRANSMIT = SSI transmits data
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_MWCR_MWMOD  ----------------------------------
// SVD Line: 15461

//  <item> SFDITEM_FIELD__SPIM_MWCR_MWMOD
//    <name> MWMOD </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010030C) \nMicrowire Transfer Mode. Configures the transfer mode of the Microwire.\n0 : NON_SEQUENTIAL = Non-Sequential Microwire Transfer\n1 : SEQUENTIAL = Sequential Microwire Transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_MWCR ) </loc>
//      <o.0..0> MWMOD
//        <0=> 0: NON_SEQUENTIAL = Non-Sequential Microwire Transfer
//        <1=> 1: SEQUENTIAL = Sequential Microwire Transfer
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: SPIM_MWCR  -----------------------------------
// SVD Line: 15408

//  <rtree> SFDITEM_REG__SPIM_MWCR
//    <name> MWCR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010030C) Microwire Control Register </i>
//    <loc> ( (unsigned int)((SPIM_MWCR >> 0) & 0xFFFFFFFF), ((SPIM_MWCR = (SPIM_MWCR & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIM_MWCR_MHS </item>
//    <item> SFDITEM_FIELD__SPIM_MWCR_MDD </item>
//    <item> SFDITEM_FIELD__SPIM_MWCR_MWMOD </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: SPIM_SER  --------------------------------
// SVD Line: 15485

unsigned int SPIM_SER __AT (0x40100310);



// ---------------------------------  Register Item: SPIM_SER  ------------------------------------
// SVD Line: 15485

//  <item> SFDITEM_REG__SPIM_SER
//    <name> SER </name>
//    <i> [Bits 31..0] RW (@ 0x40100310) Slave Enable Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_SER >> 0) & 0xFFFFFFFF), ((SPIM_SER = (SPIM_SER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPIM_BAUDR  -------------------------------
// SVD Line: 15495

unsigned int SPIM_BAUDR __AT (0x40100314);



// ------------------------------  Field Item: SPIM_BAUDR_SCKDV  ----------------------------------
// SVD Line: 15504

//  <item> SFDITEM_FIELD__SPIM_BAUDR_SCKDV
//    <name> SCKDV </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40100314) SSI Clock Divider. Determines the output serial clock frequency.  The formula for the output clock: Fsclk_out = Fssi_clk / SCKDV. </i>
//    <edit> 
//      <loc> ( (unsigned short)((SPIM_BAUDR >> 0) & 0xFFFF), ((SPIM_BAUDR = (SPIM_BAUDR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: SPIM_BAUDR  -----------------------------------
// SVD Line: 15495

//  <rtree> SFDITEM_REG__SPIM_BAUDR
//    <name> BAUDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100314) Baud Rate Register </i>
//    <loc> ( (unsigned int)((SPIM_BAUDR >> 0) & 0xFFFFFFFF), ((SPIM_BAUDR = (SPIM_BAUDR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIM_BAUDR_SCKDV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIM_TXFTLR  -------------------------------
// SVD Line: 15517

unsigned int SPIM_TXFTLR __AT (0x40100318);



// -------------------------------  Register Item: SPIM_TXFTLR  -----------------------------------
// SVD Line: 15517

//  <item> SFDITEM_REG__SPIM_TXFTLR
//    <name> TXFTLR </name>
//    <i> [Bits 31..0] RW (@ 0x40100318) Transmit FIFO Threshold Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_TXFTLR >> 0) & 0xFFFFFFFF), ((SPIM_TXFTLR = (SPIM_TXFTLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIM_RXFTLR  -------------------------------
// SVD Line: 15527

unsigned int SPIM_RXFTLR __AT (0x4010031C);



// -------------------------------  Register Item: SPIM_RXFTLR  -----------------------------------
// SVD Line: 15527

//  <item> SFDITEM_REG__SPIM_RXFTLR
//    <name> RXFTLR </name>
//    <i> [Bits 31..0] RW (@ 0x4010031C) Receive FIFO Threshold Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_RXFTLR >> 0) & 0xFFFFFFFF), ((SPIM_RXFTLR = (SPIM_RXFTLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPIM_TXFLR  -------------------------------
// SVD Line: 15537

unsigned int SPIM_TXFLR __AT (0x40100320);



// --------------------------------  Register Item: SPIM_TXFLR  -----------------------------------
// SVD Line: 15537

//  <item> SFDITEM_REG__SPIM_TXFLR
//    <name> TXFLR </name>
//    <i> [Bits 31..0] RO (@ 0x40100320) Transmit FIFO Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_TXFLR >> 0) & 0xFFFFFFFF), ((SPIM_TXFLR = (SPIM_TXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPIM_RXFLR  -------------------------------
// SVD Line: 15547

unsigned int SPIM_RXFLR __AT (0x40100324);



// --------------------------------  Register Item: SPIM_RXFLR  -----------------------------------
// SVD Line: 15547

//  <item> SFDITEM_REG__SPIM_RXFLR
//    <name> RXFLR </name>
//    <i> [Bits 31..0] RO (@ 0x40100324) Receive FIFO Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_RXFLR >> 0) & 0xFFFFFFFF), ((SPIM_RXFLR = (SPIM_RXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: SPIM_SR  ---------------------------------
// SVD Line: 15557

unsigned int SPIM_SR __AT (0x40100328);



// --------------------------------  Field Item: SPIM_SR_DCOL  ------------------------------------
// SVD Line: 15566

//  <item> SFDITEM_FIELD__SPIM_SR_DCOL
//    <name> DCOL </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40100328) \nData Collision Error. Indicates a collision occurred during transmission.\n0 : NO_ERROR_CONDITION = No Error\n1 : TX_COLLISION_ERROR = Transmit Data Collision Error </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SR ) </loc>
//      <o.6..6> DCOL
//        <0=> 0: NO_ERROR_CONDITION = No Error
//        <1=> 1: TX_COLLISION_ERROR = Transmit Data Collision Error
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: SPIM_SR_TXE  ------------------------------------
// SVD Line: 15588

//  <item> SFDITEM_FIELD__SPIM_SR_TXE
//    <name> TXE </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40100328) \nTransmission Error. Indicates an error occurred during transmission.\n0 : NO_ERROR = No Error\n1 : TX_ERROR = Transmission Error </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SR ) </loc>
//      <o.5..5> TXE
//        <0=> 0: NO_ERROR = No Error
//        <1=> 1: TX_ERROR = Transmission Error
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: SPIM_SR_RFF  ------------------------------------
// SVD Line: 15610

//  <item> SFDITEM_FIELD__SPIM_SR_RFF
//    <name> RFF </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40100328) \nReceive FIFO Full. Indicates the status of the receive FIFO.\n0 : NOT_FULL = Receive FIFO is not full\n1 : FULL = Receive FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SR ) </loc>
//      <o.4..4> RFF
//        <0=> 0: NOT_FULL = Receive FIFO is not full
//        <1=> 1: FULL = Receive FIFO is full
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: SPIM_SR_RFNE  ------------------------------------
// SVD Line: 15632

//  <item> SFDITEM_FIELD__SPIM_SR_RFNE
//    <name> RFNE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40100328) \nReceive FIFO Not Empty. Indicates if the receive FIFO contains data.\n0 : EMPTY = Receive FIFO is empty\n1 : NOT_EMPTY = Receive FIFO is not empty </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SR ) </loc>
//      <o.3..3> RFNE
//        <0=> 0: EMPTY = Receive FIFO is empty
//        <1=> 1: NOT_EMPTY = Receive FIFO is not empty
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: SPIM_SR_TFE  ------------------------------------
// SVD Line: 15654

//  <item> SFDITEM_FIELD__SPIM_SR_TFE
//    <name> TFE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40100328) \nTransmit FIFO Empty. Indicates if the transmit FIFO is empty.\n0 : NOT_EMPTY = Transmit FIFO is not empty\n1 : EMPTY = Transmit FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SR ) </loc>
//      <o.2..2> TFE
//        <0=> 0: NOT_EMPTY = Transmit FIFO is not empty
//        <1=> 1: EMPTY = Transmit FIFO is empty
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: SPIM_SR_TFNF  ------------------------------------
// SVD Line: 15676

//  <item> SFDITEM_FIELD__SPIM_SR_TFNF
//    <name> TFNF </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100328) \nTransmit FIFO Not Full. Indicates if the transmit FIFO is not full.\n0 : FULL = Transmit FIFO is full\n1 : NOT_FULL = Transmit FIFO is not full </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SR ) </loc>
//      <o.1..1> TFNF
//        <0=> 0: FULL = Transmit FIFO is full
//        <1=> 1: NOT_FULL = Transmit FIFO is not full
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: SPIM_SR_BUSY  ------------------------------------
// SVD Line: 15698

//  <item> SFDITEM_FIELD__SPIM_SR_BUSY
//    <name> BUSY </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40100328) \nSSI Busy Flag. Indicates if the SSI is actively transferring data.\n0 : INACTIVE = DW_apb_ssi is idle or disabled\n1 : ACTIVE = DW_apb_ssi is actively transferring data </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SR ) </loc>
//      <o.0..0> BUSY
//        <0=> 0: INACTIVE = DW_apb_ssi is idle or disabled
//        <1=> 1: ACTIVE = DW_apb_ssi is actively transferring data
//    </combo>
//  </item>
//  


// ---------------------------------  Register RTree: SPIM_SR  ------------------------------------
// SVD Line: 15557

//  <rtree> SFDITEM_REG__SPIM_SR
//    <name> SR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100328) Status Register </i>
//    <loc> ( (unsigned int)((SPIM_SR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__SPIM_SR_DCOL </item>
//    <item> SFDITEM_FIELD__SPIM_SR_TXE </item>
//    <item> SFDITEM_FIELD__SPIM_SR_RFF </item>
//    <item> SFDITEM_FIELD__SPIM_SR_RFNE </item>
//    <item> SFDITEM_FIELD__SPIM_SR_TFE </item>
//    <item> SFDITEM_FIELD__SPIM_SR_TFNF </item>
//    <item> SFDITEM_FIELD__SPIM_SR_BUSY </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: SPIM_IMR  --------------------------------
// SVD Line: 15723

unsigned int SPIM_IMR __AT (0x4010032C);



// -------------------------------  Field Item: SPIM_IMR_MSTIM  -----------------------------------
// SVD Line: 15732

//  <item> SFDITEM_FIELD__SPIM_IMR_MSTIM
//    <name> MSTIM </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4010032C) \nMulti-Master Contention Interrupt Mask. Controls the masking of the ssi_mst_intr interrupt.\n0 : MASKED = ssi_mst_intr interrupt is masked\n1 : UNMASKED = ssi_mst_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_IMR ) </loc>
//      <o.5..5> MSTIM
//        <0=> 0: MASKED = ssi_mst_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_mst_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_IMR_RXFIM  -----------------------------------
// SVD Line: 15754

//  <item> SFDITEM_FIELD__SPIM_IMR_RXFIM
//    <name> RXFIM </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4010032C) \nReceive FIFO Full Interrupt Mask. Controls the masking of the ssi_rxf_intr interrupt.\n0 : MASKED = ssi_rxf_intr interrupt is masked\n1 : UNMASKED = ssi_rxf_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_IMR ) </loc>
//      <o.4..4> RXFIM
//        <0=> 0: MASKED = ssi_rxf_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_rxf_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_IMR_RXOIM  -----------------------------------
// SVD Line: 15776

//  <item> SFDITEM_FIELD__SPIM_IMR_RXOIM
//    <name> RXOIM </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4010032C) \nReceive FIFO Overflow Interrupt Mask. Controls the masking of the ssi_rxo_intr interrupt.\n0 : MASKED = ssi_rxo_intr interrupt is masked\n1 : UNMASKED = ssi_rxo_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_IMR ) </loc>
//      <o.3..3> RXOIM
//        <0=> 0: MASKED = ssi_rxo_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_rxo_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_IMR_RXUIM  -----------------------------------
// SVD Line: 15798

//  <item> SFDITEM_FIELD__SPIM_IMR_RXUIM
//    <name> RXUIM </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010032C) \nReceive FIFO Underflow Interrupt Mask. Controls the masking of the ssi_rxu_intr interrupt.\n0 : MASKED = ssi_rxu_intr interrupt is masked\n1 : UNMASKED = ssi_rxu_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_IMR ) </loc>
//      <o.2..2> RXUIM
//        <0=> 0: MASKED = ssi_rxu_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_rxu_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_IMR_TXOIM  -----------------------------------
// SVD Line: 15820

//  <item> SFDITEM_FIELD__SPIM_IMR_TXOIM
//    <name> TXOIM </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010032C) \nTransmit FIFO Overflow Interrupt Mask. Controls the masking of the ssi_txo_intr interrupt.\n0 : MASKED = ssi_txo_intr interrupt is masked\n1 : UNMASKED = ssi_txo_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_IMR ) </loc>
//      <o.1..1> TXOIM
//        <0=> 0: MASKED = ssi_txo_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_txo_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_IMR_TXEIM  -----------------------------------
// SVD Line: 15842

//  <item> SFDITEM_FIELD__SPIM_IMR_TXEIM
//    <name> TXEIM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010032C) \nTransmit FIFO Empty Interrupt Mask. Controls the masking of the ssi_txe_intr interrupt.\n0 : MASKED = ssi_txe_intr interrupt is masked\n1 : UNMASKED = ssi_txe_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_IMR ) </loc>
//      <o.0..0> TXEIM
//        <0=> 0: MASKED = ssi_txe_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_txe_intr interrupt is not masked
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: SPIM_IMR  ------------------------------------
// SVD Line: 15723

//  <rtree> SFDITEM_REG__SPIM_IMR
//    <name> IMR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010032C) Interrupt Mask Register </i>
//    <loc> ( (unsigned int)((SPIM_IMR >> 0) & 0xFFFFFFFF), ((SPIM_IMR = (SPIM_IMR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIM_IMR_MSTIM </item>
//    <item> SFDITEM_FIELD__SPIM_IMR_RXFIM </item>
//    <item> SFDITEM_FIELD__SPIM_IMR_RXOIM </item>
//    <item> SFDITEM_FIELD__SPIM_IMR_RXUIM </item>
//    <item> SFDITEM_FIELD__SPIM_IMR_TXOIM </item>
//    <item> SFDITEM_FIELD__SPIM_IMR_TXEIM </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: SPIM_ISR  --------------------------------
// SVD Line: 15866

unsigned int SPIM_ISR __AT (0x40100330);



// -------------------------------  Field Item: SPIM_ISR_MSTIS  -----------------------------------
// SVD Line: 15876

//  <item> SFDITEM_FIELD__SPIM_ISR_MSTIS
//    <name> MSTIS </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40100330) \nMulti-Master Contention Interrupt Status. Indicates the status of the ssi_mst_intr interrupt after masking.\n0 : INACTIVE = ssi_mst_intr interrupt not active after masking\n1 : ACTIVE = ssi_mst_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_ISR ) </loc>
//      <o.5..5> MSTIS
//        <0=> 0: INACTIVE = ssi_mst_intr interrupt not active after masking
//        <1=> 1: ACTIVE = ssi_mst_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_ISR_RXFIS  -----------------------------------
// SVD Line: 15898

//  <item> SFDITEM_FIELD__SPIM_ISR_RXFIS
//    <name> RXFIS </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40100330) \nReceive FIFO Full Interrupt Status. Indicates the status of the ssi_rxf_intr interrupt after masking.\n0 : INACTIVE = ssi_rxf_intr interrupt is not active after masking\n1 : ACTIVE = ssi_rxf_intr interrupt is full after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_ISR ) </loc>
//      <o.4..4> RXFIS
//        <0=> 0: INACTIVE = ssi_rxf_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_rxf_intr interrupt is full after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_ISR_RXOIS  -----------------------------------
// SVD Line: 15920

//  <item> SFDITEM_FIELD__SPIM_ISR_RXOIS
//    <name> RXOIS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40100330) \nReceive FIFO Overflow Interrupt Status. Indicates the status of the ssi_rxo_intr interrupt after masking.\n0 : INACTIVE = ssi_rxo_intr interrupt is not active after masking\n1 : ACTIVE = ssi_rxo_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_ISR ) </loc>
//      <o.3..3> RXOIS
//        <0=> 0: INACTIVE = ssi_rxo_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_rxo_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_ISR_RXUIS  -----------------------------------
// SVD Line: 15942

//  <item> SFDITEM_FIELD__SPIM_ISR_RXUIS
//    <name> RXUIS </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40100330) \nReceive FIFO Underflow Interrupt Status. Indicates the status of the ssi_rxu_intr interrupt after masking.\n0 : INACTIVE = ssi_rxu_intr interrupt is not active after masking\n1 : ACTIVE = ssi_rxu_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_ISR ) </loc>
//      <o.2..2> RXUIS
//        <0=> 0: INACTIVE = ssi_rxu_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_rxu_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_ISR_TXOIS  -----------------------------------
// SVD Line: 15964

//  <item> SFDITEM_FIELD__SPIM_ISR_TXOIS
//    <name> TXOIS </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100330) \nTransmit FIFO Overflow Interrupt Status. Indicates the status of the ssi_txo_intr interrupt after masking.\n0 : INACTIVE = ssi_txo_intr interrupt is not active after masking\n1 : ACTIVE = ssi_txo_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_ISR ) </loc>
//      <o.1..1> TXOIS
//        <0=> 0: INACTIVE = ssi_txo_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_txo_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_ISR_TXEIS  -----------------------------------
// SVD Line: 15986

//  <item> SFDITEM_FIELD__SPIM_ISR_TXEIS
//    <name> TXEIS </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40100330) \nTransmit FIFO Empty Interrupt Status. Indicates the status of the ssi_txe_intr interrupt after masking.\n0 : INACTIVE = ssi_txe_intr interrupt is not active after masking\n1 : ACTIVE = ssi_txe_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_ISR ) </loc>
//      <o.0..0> TXEIS
//        <0=> 0: INACTIVE = ssi_txe_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_txe_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: SPIM_ISR  ------------------------------------
// SVD Line: 15866

//  <rtree> SFDITEM_REG__SPIM_ISR
//    <name> ISR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100330) Interrupt Status Register </i>
//    <loc> ( (unsigned int)((SPIM_ISR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__SPIM_ISR_MSTIS </item>
//    <item> SFDITEM_FIELD__SPIM_ISR_RXFIS </item>
//    <item> SFDITEM_FIELD__SPIM_ISR_RXOIS </item>
//    <item> SFDITEM_FIELD__SPIM_ISR_RXUIS </item>
//    <item> SFDITEM_FIELD__SPIM_ISR_TXOIS </item>
//    <item> SFDITEM_FIELD__SPIM_ISR_TXEIS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: SPIM_RISR  --------------------------------
// SVD Line: 16010

unsigned int SPIM_RISR __AT (0x40100334);



// -------------------------------  Field Item: SPIM_RISR_MSTIR  ----------------------------------
// SVD Line: 16020

//  <item> SFDITEM_FIELD__SPIM_RISR_MSTIR
//    <name> MSTIR </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40100334) \nMulti-Master Contention Raw Interrupt Status. Indicates the status of the ssi_mst_intr interrupt prior to masking.\n0 : INACTIVE = ssi_mst_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_mst_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_RISR ) </loc>
//      <o.5..5> MSTIR
//        <0=> 0: INACTIVE = ssi_mst_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_mst_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_RISR_RXFIR  ----------------------------------
// SVD Line: 16042

//  <item> SFDITEM_FIELD__SPIM_RISR_RXFIR
//    <name> RXFIR </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40100334) \nReceive FIFO Full Raw Interrupt Status. Indicates the status of the ssi_rxf_intr interrupt prior to masking.\n0 : INACTIVE = ssi_rxf_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_rxf_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_RISR ) </loc>
//      <o.4..4> RXFIR
//        <0=> 0: INACTIVE = ssi_rxf_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_rxf_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_RISR_RXOIR  ----------------------------------
// SVD Line: 16064

//  <item> SFDITEM_FIELD__SPIM_RISR_RXOIR
//    <name> RXOIR </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40100334) \nReceive FIFO Overflow Raw Interrupt Status. Indicates the status of the ssi_rxo_intr interrupt prior to masking.\n0 : INACTIVE = ssi_rxo_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_rxo_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_RISR ) </loc>
//      <o.3..3> RXOIR
//        <0=> 0: INACTIVE = ssi_rxo_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_rxo_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_RISR_RXUIR  ----------------------------------
// SVD Line: 16086

//  <item> SFDITEM_FIELD__SPIM_RISR_RXUIR
//    <name> RXUIR </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40100334) \nReceive FIFO Underflow Raw Interrupt Status. Indicates the status of the ssi_rxu_intr interrupt prior to masking.\n0 : INACTIVE = ssi_rxu_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_rxu_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_RISR ) </loc>
//      <o.2..2> RXUIR
//        <0=> 0: INACTIVE = ssi_rxu_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_rxu_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_RISR_TXOIR  ----------------------------------
// SVD Line: 16108

//  <item> SFDITEM_FIELD__SPIM_RISR_TXOIR
//    <name> TXOIR </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100334) \nTransmit FIFO Overflow Raw Interrupt Status. Indicates the status of the ssi_txo_intr interrupt prior to masking.\n0 : INACTIVE = ssi_txo_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_txo_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_RISR ) </loc>
//      <o.1..1> TXOIR
//        <0=> 0: INACTIVE = ssi_txo_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_txo_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIM_RISR_TXEIR  ----------------------------------
// SVD Line: 16130

//  <item> SFDITEM_FIELD__SPIM_RISR_TXEIR
//    <name> TXEIR </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40100334) \nTransmit FIFO Empty Raw Interrupt Status. Indicates the status of the ssi_txe_intr interrupt prior to masking.\n0 : INACTIVE = ssi_txe_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_txe_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_RISR ) </loc>
//      <o.0..0> TXEIR
//        <0=> 0: INACTIVE = ssi_txe_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_txe_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: SPIM_RISR  -----------------------------------
// SVD Line: 16010

//  <rtree> SFDITEM_REG__SPIM_RISR
//    <name> RISR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100334) Raw Interrupt Status Register </i>
//    <loc> ( (unsigned int)((SPIM_RISR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__SPIM_RISR_MSTIR </item>
//    <item> SFDITEM_FIELD__SPIM_RISR_RXFIR </item>
//    <item> SFDITEM_FIELD__SPIM_RISR_RXOIR </item>
//    <item> SFDITEM_FIELD__SPIM_RISR_RXUIR </item>
//    <item> SFDITEM_FIELD__SPIM_RISR_TXOIR </item>
//    <item> SFDITEM_FIELD__SPIM_RISR_TXEIR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIM_TXOICR  -------------------------------
// SVD Line: 16155

unsigned int SPIM_TXOICR __AT (0x40100338);



// -------------------------------  Register Item: SPIM_TXOICR  -----------------------------------
// SVD Line: 16155

//  <item> SFDITEM_REG__SPIM_TXOICR
//    <name> TXOICR </name>
//    <i> [Bits 31..0] WO (@ 0x40100338) Transmit FIFO Overflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_TXOICR >> 0) & 0xFFFFFFFF), ((SPIM_TXOICR = (SPIM_TXOICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIM_RXOICR  -------------------------------
// SVD Line: 16165

unsigned int SPIM_RXOICR __AT (0x4010033C);



// -------------------------------  Register Item: SPIM_RXOICR  -----------------------------------
// SVD Line: 16165

//  <item> SFDITEM_REG__SPIM_RXOICR
//    <name> RXOICR </name>
//    <i> [Bits 31..0] WO (@ 0x4010033C) Receive FIFO Overflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_RXOICR >> 0) & 0xFFFFFFFF), ((SPIM_RXOICR = (SPIM_RXOICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIM_RXUICR  -------------------------------
// SVD Line: 16175

unsigned int SPIM_RXUICR __AT (0x40100340);



// -------------------------------  Register Item: SPIM_RXUICR  -----------------------------------
// SVD Line: 16175

//  <item> SFDITEM_REG__SPIM_RXUICR
//    <name> RXUICR </name>
//    <i> [Bits 31..0] WO (@ 0x40100340) Receive FIFO Underflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_RXUICR >> 0) & 0xFFFFFFFF), ((SPIM_RXUICR = (SPIM_RXUICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIM_MSTICR  -------------------------------
// SVD Line: 16185

unsigned int SPIM_MSTICR __AT (0x40100344);



// -------------------------------  Register Item: SPIM_MSTICR  -----------------------------------
// SVD Line: 16185

//  <item> SFDITEM_REG__SPIM_MSTICR
//    <name> MSTICR </name>
//    <i> [Bits 31..0] WO (@ 0x40100344) Multi-Master Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_MSTICR >> 0) & 0xFFFFFFFF), ((SPIM_MSTICR = (SPIM_MSTICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: SPIM_ICR  --------------------------------
// SVD Line: 16195

unsigned int SPIM_ICR __AT (0x40100348);



// ---------------------------------  Register Item: SPIM_ICR  ------------------------------------
// SVD Line: 16195

//  <item> SFDITEM_REG__SPIM_ICR
//    <name> ICR </name>
//    <i> [Bits 31..0] WO (@ 0x40100348) Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_ICR >> 0) & 0xFFFFFFFF), ((SPIM_ICR = (SPIM_ICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPIM_DMACR  -------------------------------
// SVD Line: 16205

unsigned int SPIM_DMACR __AT (0x4010034C);



// ------------------------------  Field Item: SPIM_DMACR_TDMAE  ----------------------------------
// SVD Line: 16215

//  <item> SFDITEM_FIELD__SPIM_DMACR_TDMAE
//    <name> TDMAE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010034C) \nTransmit DMA Enable. Controls the enable status of the transmit DMA operation.\n0 : DISABLE = Transmit DMA disabled\n1 : ENABLE = Transmit DMA enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_DMACR ) </loc>
//      <o.1..1> TDMAE
//        <0=> 0: DISABLE = Transmit DMA disabled
//        <1=> 1: ENABLE = Transmit DMA enabled
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: SPIM_DMACR_RDMAE  ----------------------------------
// SVD Line: 16237

//  <item> SFDITEM_FIELD__SPIM_DMACR_RDMAE
//    <name> RDMAE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010034C) \nReceive DMA Enable. Controls the enable status of the receive DMA operation.\n0 : DISABLE = Receive DMA disabled\n1 : ENABLE = Receive DMA enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_DMACR ) </loc>
//      <o.0..0> RDMAE
//        <0=> 0: DISABLE = Receive DMA disabled
//        <1=> 1: ENABLE = Receive DMA enabled
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPIM_DMACR  -----------------------------------
// SVD Line: 16205

//  <rtree> SFDITEM_REG__SPIM_DMACR
//    <name> DMACR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010034C) DMA Control Register </i>
//    <loc> ( (unsigned int)((SPIM_DMACR >> 0) & 0xFFFFFFFF), ((SPIM_DMACR = (SPIM_DMACR & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIM_DMACR_TDMAE </item>
//    <item> SFDITEM_FIELD__SPIM_DMACR_RDMAE </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIM_DMATDLR  ------------------------------
// SVD Line: 16261

unsigned int SPIM_DMATDLR __AT (0x40100350);



// -------------------------------  Register Item: SPIM_DMATDLR  ----------------------------------
// SVD Line: 16261

//  <item> SFDITEM_REG__SPIM_DMATDLR
//    <name> DMATDLR </name>
//    <i> [Bits 31..0] RW (@ 0x40100350) DMA Transmit Data Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_DMATDLR >> 0) & 0xFFFFFFFF), ((SPIM_DMATDLR = (SPIM_DMATDLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIM_DMARDLR  ------------------------------
// SVD Line: 16271

unsigned int SPIM_DMARDLR __AT (0x40100354);



// -------------------------------  Register Item: SPIM_DMARDLR  ----------------------------------
// SVD Line: 16271

//  <item> SFDITEM_REG__SPIM_DMARDLR
//    <name> DMARDLR </name>
//    <i> [Bits 31..0] RW (@ 0x40100354) DMA Receive Data Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_DMARDLR >> 0) & 0xFFFFFFFF), ((SPIM_DMARDLR = (SPIM_DMARDLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: SPIM_IDR  --------------------------------
// SVD Line: 16281

unsigned int SPIM_IDR __AT (0x40100358);



// ---------------------------------  Register Item: SPIM_IDR  ------------------------------------
// SVD Line: 16281

//  <item> SFDITEM_REG__SPIM_IDR
//    <name> IDR </name>
//    <i> [Bits 31..0] RO (@ 0x40100358) Identification Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_IDR >> 0) & 0xFFFFFFFF), ((SPIM_IDR = (SPIM_IDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: SPIM_SSI_VERSION_ID  ---------------------------
// SVD Line: 16291

unsigned int SPIM_SSI_VERSION_ID __AT (0x4010035C);



// ---------------------------  Register Item: SPIM_SSI_VERSION_ID  -------------------------------
// SVD Line: 16291

//  <item> SFDITEM_REG__SPIM_SSI_VERSION_ID
//    <name> SSI_VERSION_ID </name>
//    <i> [Bits 31..0] RO (@ 0x4010035C) SSI Version ID Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_SSI_VERSION_ID >> 0) & 0xFFFFFFFF), ((SPIM_SSI_VERSION_ID = (SPIM_SSI_VERSION_ID & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: SPIM_DR  ---------------------------------
// SVD Line: 16301

unsigned int SPIM_DR __AT (0x40100360);



// ---------------------------------  Register Item: SPIM_DR  -------------------------------------
// SVD Line: 16301

//  <item> SFDITEM_REG__SPIM_DR
//    <name> DR </name>
//    <i> [Bits 31..0] RW (@ 0x40100360) Data Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_DR >> 0) & 0xFFFFFFFF), ((SPIM_DR = (SPIM_DR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: SPIM_RX_SAMPLE_DLY  ---------------------------
// SVD Line: 16311

unsigned int SPIM_RX_SAMPLE_DLY __AT (0x401003F0);



// ----------------------------  Register Item: SPIM_RX_SAMPLE_DLY  -------------------------------
// SVD Line: 16311

//  <item> SFDITEM_REG__SPIM_RX_SAMPLE_DLY
//    <name> RX_SAMPLE_DLY </name>
//    <i> [Bits 31..0] RW (@ 0x401003F0) Receive Sample Delay Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_RX_SAMPLE_DLY >> 0) & 0xFFFFFFFF), ((SPIM_RX_SAMPLE_DLY = (SPIM_RX_SAMPLE_DLY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SPIM_SPI_CTRLR0  -----------------------------
// SVD Line: 16321

unsigned int SPIM_SPI_CTRLR0 __AT (0x401003F4);



// -------------------------  Field Item: SPIM_SPI_CTRLR0_SPI_RXDS_EN  ----------------------------
// SVD Line: 16330

//  <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_SPI_RXDS_EN
//    <name> SPI_RXDS_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x401003F4) Read data strobe enable bit. </i>
//    <check> 
//      <loc> ( (unsigned int) SPIM_SPI_CTRLR0 ) </loc>
//      <o.18..18> SPI_RXDS_EN
//    </check>
//  </item>
//  


// -------------------------  Field Item: SPIM_SPI_CTRLR0_INST_DDR_EN  ----------------------------
// SVD Line: 16338

//  <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_INST_DDR_EN
//    <name> INST_DDR_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401003F4) Instruction DDR Enable bit. </i>
//    <check> 
//      <loc> ( (unsigned int) SPIM_SPI_CTRLR0 ) </loc>
//      <o.17..17> INST_DDR_EN
//    </check>
//  </item>
//  


// -------------------------  Field Item: SPIM_SPI_CTRLR0_SPI_DDR_EN  -----------------------------
// SVD Line: 16346

//  <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_SPI_DDR_EN
//    <name> SPI_DDR_EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401003F4) SPI DDR Enable bit. </i>
//    <check> 
//      <loc> ( (unsigned int) SPIM_SPI_CTRLR0 ) </loc>
//      <o.16..16> SPI_DDR_EN
//    </check>
//  </item>
//  


// -------------------------  Field Item: SPIM_SPI_CTRLR0_WAIT_CYCLES  ----------------------------
// SVD Line: 16354

//  <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_WAIT_CYCLES
//    <name> WAIT_CYCLES </name>
//    <rw> 
//    <i> [Bits 15..11] RW (@ 0x401003F4) Wait cycles. </i>
//    <edit> 
//      <loc> ( (unsigned char)((SPIM_SPI_CTRLR0 >> 11) & 0x1F), ((SPIM_SPI_CTRLR0 = (SPIM_SPI_CTRLR0 & ~(0x1FUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: SPIM_SPI_CTRLR0_INST_L  -------------------------------
// SVD Line: 16362

//  <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_INST_L
//    <name> INST_L </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x401003F4) \nInstruction Length.\n0 : INST_L_0 = 0-bit (No Instruction)\n1 : INST_L_1 = 4-bit Instruction\n2 : INST_L_2 = 8-bit Instruction\n3 : INST_L_3 = 16-bit Instruction </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SPI_CTRLR0 ) </loc>
//      <o.9..8> INST_L
//        <0=> 0: INST_L_0 = 0-bit (No Instruction)
//        <1=> 1: INST_L_1 = 4-bit Instruction
//        <2=> 2: INST_L_2 = 8-bit Instruction
//        <3=> 3: INST_L_3 = 16-bit Instruction
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: SPIM_SPI_CTRLR0_ADDR_L  -------------------------------
// SVD Line: 16392

//  <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_ADDR_L
//    <name> ADDR_L </name>
//    <rw> 
//    <i> [Bits 5..2] RW (@ 0x401003F4) \nAddress Length.\n0 : ADDR_L_0 = 0-bit Address Width\n1 : ADDR_L_1 = 4-bit Address Width\n2 : ADDR_L_2 = 8-bit Address Width\n3 : ADDR_L_3 = 12-bit Address Width\n4 : ADDR_L_4 = 16-bit Address Width\n5 : ADDR_L_5 = 20-bit Address Width\n6 : ADDR_L_6 = 24-bit Address Width\n7 : ADDR_L_7 = 28-bit Address Width\n8 : ADDR_L_8 = 32-bit Address Width\n9 : ADDR_L_9 = 36-bit Address Width\n10 : ADDR_L_10 = 40-bit Address Width\n11 : ADDR_L_11 = 44-bit Address Width\n12 : ADDR_L_12 = 48-bit Address Width\n13 : ADDR_L_13 = 52-bit Address Width\n14 : ADDR_L_14 = 56-bit Address Width\n15 : ADDR_L_15 = 60-bit Address Width </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SPI_CTRLR0 ) </loc>
//      <o.5..2> ADDR_L
//        <0=> 0: ADDR_L_0 = 0-bit Address Width
//        <1=> 1: ADDR_L_1 = 4-bit Address Width
//        <2=> 2: ADDR_L_2 = 8-bit Address Width
//        <3=> 3: ADDR_L_3 = 12-bit Address Width
//        <4=> 4: ADDR_L_4 = 16-bit Address Width
//        <5=> 5: ADDR_L_5 = 20-bit Address Width
//        <6=> 6: ADDR_L_6 = 24-bit Address Width
//        <7=> 7: ADDR_L_7 = 28-bit Address Width
//        <8=> 8: ADDR_L_8 = 32-bit Address Width
//        <9=> 9: ADDR_L_9 = 36-bit Address Width
//        <10=> 10: ADDR_L_10 = 40-bit Address Width
//        <11=> 11: ADDR_L_11 = 44-bit Address Width
//        <12=> 12: ADDR_L_12 = 48-bit Address Width
//        <13=> 13: ADDR_L_13 = 52-bit Address Width
//        <14=> 14: ADDR_L_14 = 56-bit Address Width
//        <15=> 15: ADDR_L_15 = 60-bit Address Width
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SPIM_SPI_CTRLR0_TRANS_TYPE  -----------------------------
// SVD Line: 16483

//  <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_TRANS_TYPE
//    <name> TRANS_TYPE </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401003F4) \nAddress and instruction transfer format.\n0 : STANDARD_SPI = Instruction and Address will be sent in Standard SPI Mode.\n1 : ADDR_SPECIFIED_MODE = Instruction sent in Standard SPI Mode, Address sent in mode specified by CTRLR0.SPI_FRF.\n2 : BOTH_SPECIFIED_MODE = Both Instruction and Address sent in the mode specified by SPI_FRF.\n3 : NO_USED = NO_USED. </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIM_SPI_CTRLR0 ) </loc>
//      <o.1..0> TRANS_TYPE
//        <0=> 0: STANDARD_SPI = Instruction and Address will be sent in Standard SPI Mode.
//        <1=> 1: ADDR_SPECIFIED_MODE = Instruction sent in Standard SPI Mode, Address sent in mode specified by CTRLR0.SPI_FRF.
//        <2=> 2: BOTH_SPECIFIED_MODE = Both Instruction and Address sent in the mode specified by SPI_FRF.
//        <3=> 3: NO_USED = NO_USED.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: SPIM_SPI_CTRLR0  --------------------------------
// SVD Line: 16321

//  <rtree> SFDITEM_REG__SPIM_SPI_CTRLR0
//    <name> SPI_CTRLR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401003F4) SPI Control Register </i>
//    <loc> ( (unsigned int)((SPIM_SPI_CTRLR0 >> 0) & 0xFFFFFFFF), ((SPIM_SPI_CTRLR0 = (SPIM_SPI_CTRLR0 & ~(0x7FB3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FB3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_SPI_RXDS_EN </item>
//    <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_INST_DDR_EN </item>
//    <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_SPI_DDR_EN </item>
//    <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_WAIT_CYCLES </item>
//    <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_INST_L </item>
//    <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_ADDR_L </item>
//    <item> SFDITEM_FIELD__SPIM_SPI_CTRLR0_TRANS_TYPE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: SPIM_TXD_DRIVE_EDGE  ---------------------------
// SVD Line: 16515

unsigned int SPIM_TXD_DRIVE_EDGE __AT (0x401003F8);



// ---------------------------  Register Item: SPIM_TXD_DRIVE_EDGE  -------------------------------
// SVD Line: 16515

//  <item> SFDITEM_REG__SPIM_TXD_DRIVE_EDGE
//    <name> TXD_DRIVE_EDGE </name>
//    <i> [Bits 31..0] RW (@ 0x401003F8) Transmit Drive Edge Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIM_TXD_DRIVE_EDGE >> 0) & 0xFFFFFFFF), ((SPIM_TXD_DRIVE_EDGE = (SPIM_TXD_DRIVE_EDGE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------------  Peripheral View: SPIM  -------------------------------------
// SVD Line: 15042

//  <view> SPIM
//    <name> SPIM </name>
//    <item> SFDITEM_REG__SPIM_CTRLR0 </item>
//    <item> SFDITEM_REG__SPIM_CTRLR1 </item>
//    <item> SFDITEM_REG__SPIM_SSIENR </item>
//    <item> SFDITEM_REG__SPIM_MWCR </item>
//    <item> SFDITEM_REG__SPIM_SER </item>
//    <item> SFDITEM_REG__SPIM_BAUDR </item>
//    <item> SFDITEM_REG__SPIM_TXFTLR </item>
//    <item> SFDITEM_REG__SPIM_RXFTLR </item>
//    <item> SFDITEM_REG__SPIM_TXFLR </item>
//    <item> SFDITEM_REG__SPIM_RXFLR </item>
//    <item> SFDITEM_REG__SPIM_SR </item>
//    <item> SFDITEM_REG__SPIM_IMR </item>
//    <item> SFDITEM_REG__SPIM_ISR </item>
//    <item> SFDITEM_REG__SPIM_RISR </item>
//    <item> SFDITEM_REG__SPIM_TXOICR </item>
//    <item> SFDITEM_REG__SPIM_RXOICR </item>
//    <item> SFDITEM_REG__SPIM_RXUICR </item>
//    <item> SFDITEM_REG__SPIM_MSTICR </item>
//    <item> SFDITEM_REG__SPIM_ICR </item>
//    <item> SFDITEM_REG__SPIM_DMACR </item>
//    <item> SFDITEM_REG__SPIM_DMATDLR </item>
//    <item> SFDITEM_REG__SPIM_DMARDLR </item>
//    <item> SFDITEM_REG__SPIM_IDR </item>
//    <item> SFDITEM_REG__SPIM_SSI_VERSION_ID </item>
//    <item> SFDITEM_REG__SPIM_DR </item>
//    <item> SFDITEM_REG__SPIM_RX_SAMPLE_DLY </item>
//    <item> SFDITEM_REG__SPIM_SPI_CTRLR0 </item>
//    <item> SFDITEM_REG__SPIM_TXD_DRIVE_EDGE </item>
//  </view>
//  


// ---------------------------  Register Item Address: SPIS_CTRLR0  -------------------------------
// SVD Line: 15069

unsigned int SPIS_CTRLR0 __AT (0x40100400);



// -------------------------------  Field Item: SPIS_CTRLR0_DFS  ----------------------------------
// SVD Line: 15079

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_DFS
//    <name> DFS </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40100400) \nData Frame Size. Determines the size of the data transfer in serial frames.\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : FRAME_04BITS = 4-bit serial data transfer\n4 : FRAME_05BITS = 5-bit serial data transfer\n5 : FRAME_06BITS = 6-bit serial data transfer\n6 : FRAME_07BITS = 7-bit serial data transfer\n7 : FRAME_08BITS = 8-bit serial data transfer\n8 : FRAME_09BITS = 9-bit serial data transfer\n9 : FRAME_10BITS = 10-bit serial data transfer\n10 : FRAME_11BITS = 11-bit serial data transfer\n11 : FRAME_12BITS = 12-bit serial data transfer\n12 : FRAME_13BITS = 13-bit serial data transfer\n13 : FRAME_14BITS = 14-bit serial data transfer\n14 : FRAME_15BITS = 15-bit serial data transfer\n15 : FRAME_16BITS = 16-bit serial data transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.3..0> DFS
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: FRAME_04BITS = 4-bit serial data transfer
//        <4=> 4: FRAME_05BITS = 5-bit serial data transfer
//        <5=> 5: FRAME_06BITS = 6-bit serial data transfer
//        <6=> 6: FRAME_07BITS = 7-bit serial data transfer
//        <7=> 7: FRAME_08BITS = 8-bit serial data transfer
//        <8=> 8: FRAME_09BITS = 9-bit serial data transfer
//        <9=> 9: FRAME_10BITS = 10-bit serial data transfer
//        <10=> 10: FRAME_11BITS = 11-bit serial data transfer
//        <11=> 11: FRAME_12BITS = 12-bit serial data transfer
//        <12=> 12: FRAME_13BITS = 13-bit serial data transfer
//        <13=> 13: FRAME_14BITS = 14-bit serial data transfer
//        <14=> 14: FRAME_15BITS = 15-bit serial data transfer
//        <15=> 15: FRAME_16BITS = 16-bit serial data transfer
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: SPIS_CTRLR0_SCPH  ----------------------------------
// SVD Line: 15155

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_SCPH
//    <name> SCPH </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40100400) \nSerial Clock Phase. Determines the capture edge of the serial clock in relation to the slave select signal.\n0 : SCPH_MIDDLE = Serial clock toggles in middle of first data bit\n1 : SCPH_SECOND_EDGE = Data are captured on the second edge of the serial clock </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.6..6> SCPH
//        <0=> 0: SCPH_MIDDLE = Serial clock toggles in middle of first data bit
//        <1=> 1: SCPH_SECOND_EDGE = Data are captured on the second edge of the serial clock
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_CTRLR0_SCP  ----------------------------------
// SVD Line: 15177

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_SCP
//    <name> SCP </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40100400) \nUsed to select the polarity of the inactive serial clock.\n0 : SCLK_LOW = Inactive state of serial clock is low\n1 : SCLK_HIGH = Inactive state of serial clock is high </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.7..7> SCP
//        <0=> 0: SCLK_LOW = Inactive state of serial clock is low
//        <1=> 1: SCLK_HIGH = Inactive state of serial clock is high
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_CTRLR0_TM  -----------------------------------
// SVD Line: 15199

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_TM
//    <name> TM </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x40100400) \nTransmit Mode\n0 : TX_AND_RX = Transmit and receive\n1 : TX_ONLY = Transmit only mode or Write (SPI_FRF != 2'b00)\n2 : Reserved - do not use\n3 : EEPROM_READ = EEPROM Read mode </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.9..8> TM
//        <0=> 0: TX_AND_RX = Transmit and receive
//        <1=> 1: TX_ONLY = Transmit only mode or Write (SPI_FRF != 2'b00)
//        <2=> 2: 
//        <3=> 3: EEPROM_READ = EEPROM Read mode
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: SPIS_CTRLR0_SLV_OE  ---------------------------------
// SVD Line: 15224

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_SLV_OE
//    <name> SLV_OE </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40100400) \nSlave Output Enable\n0 : ENABLED = Enabled\n1 : DISABLED = Disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.10..10> SLV_OE
//        <0=> 0: ENABLED = Enabled
//        <1=> 1: DISABLED = Disabled
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_CTRLR0_SRL  ----------------------------------
// SVD Line: 15244

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_SRL
//    <name> SRL </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40100400) \nShift Register Loop\n0 : NORMAL_MODE = Normal mode operation\n1 : TESTING_MODE = Test mode: Tx and Rx shift reg connected </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.11..11> SRL
//        <0=> 0: NORMAL_MODE = Normal mode operation
//        <1=> 1: TESTING_MODE = Test mode: Tx and Rx shift reg connected
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_CTRLR0_CFS  ----------------------------------
// SVD Line: 15264

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_CFS
//    <name> CFS </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40100400) \nControl Frame Size\n0 : SIZE_01_BIT = 1-bit Control Word\n1 : SIZE_02_BIT = 2-bit Control Word\n2 : Reserved - do not use\n3 : Reserved - do not use\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : SIZE_16_BIT = 16-bit Control Word </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.15..12> CFS
//        <0=> 0: SIZE_01_BIT = 1-bit Control Word
//        <1=> 1: SIZE_02_BIT = 2-bit Control Word
//        <2=> 2: 
//        <3=> 3: 
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: SIZE_16_BIT = 16-bit Control Word
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: SPIS_CTRLR0_DFS_32  ---------------------------------
// SVD Line: 15290

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_DFS_32
//    <name> DFS_32 </name>
//    <rw> 
//    <i> [Bits 20..16] RW (@ 0x40100400) \nVaries Data Frame Size up to 32 bits.\n0 : Reserved - do not use\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : FRAME_04BITS = 4-bit serial data transfer\n4 : FRAME_05BITS = 5-bit serial data transfer\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : Reserved - do not use\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use\n16 : Reserved - do not use\n17 : Reserved - do not use\n18 : Reserved - do not use\n19 : Reserved - do not use\n20 : Reserved - do not use\n21 : Reserved - do not use\n22 : Reserved - do not use\n23 : Reserved - do not use\n24 : Reserved - do not use\n25 : Reserved - do not use\n26 : Reserved - do not use\n27 : Reserved - do not use\n28 : Reserved - do not use\n29 : Reserved - do not use\n30 : Reserved - do not use\n31 : FRAME_32BITS = 32-bit serial data transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.20..16> DFS_32
//        <0=> 0: 
//        <1=> 1: 
//        <2=> 2: 
//        <3=> 3: FRAME_04BITS = 4-bit serial data transfer
//        <4=> 4: FRAME_05BITS = 5-bit serial data transfer
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//        <8=> 8: 
//        <9=> 9: 
//        <10=> 10: 
//        <11=> 11: 
//        <12=> 12: 
//        <13=> 13: 
//        <14=> 14: 
//        <15=> 15: 
//        <16=> 16: 
//        <17=> 17: 
//        <18=> 18: 
//        <19=> 19: 
//        <20=> 20: 
//        <21=> 21: 
//        <22=> 22: 
//        <23=> 23: 
//        <24=> 24: 
//        <25=> 25: 
//        <26=> 26: 
//        <27=> 27: 
//        <28=> 28: 
//        <29=> 29: 
//        <30=> 30: 
//        <31=> 31: FRAME_32BITS = 32-bit serial data transfer
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: SPIS_CTRLR0_SPI_FRF  --------------------------------
// SVD Line: 15317

//  <item> SFDITEM_FIELD__SPIS_CTRLR0_SPI_FRF
//    <name> SPI_FRF </name>
//    <rw> 
//    <i> [Bits 22..21] RW (@ 0x40100400) \nSelects the serial protocol frame format.  Valid when the frame format is set to Motorola SPI.\n0 : MOTOROLA_SPI = Motorola SPI Frame Format\n1 : DUAL_SPI_FRF = Dual SPI Frame Format\n2 : QUAD_SPI_FRF = Quad SPI Frame Format\n3 : OCTAL_SPI_FRF = Octal SPI Frame Format </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_CTRLR0 ) </loc>
//      <o.22..21> SPI_FRF
//        <0=> 0: MOTOROLA_SPI = Motorola SPI Frame Format
//        <1=> 1: DUAL_SPI_FRF = Dual SPI Frame Format
//        <2=> 2: QUAD_SPI_FRF = Quad SPI Frame Format
//        <3=> 3: OCTAL_SPI_FRF = Octal SPI Frame Format
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPIS_CTRLR0  ----------------------------------
// SVD Line: 15069

//  <rtree> SFDITEM_REG__SPIS_CTRLR0
//    <name> CTRLR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100400) Control Register 0 </i>
//    <loc> ( (unsigned int)((SPIS_CTRLR0 >> 0) & 0xFFFFFFFF), ((SPIS_CTRLR0 = (SPIS_CTRLR0 & ~(0x7FFFCFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FFFCF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_DFS </item>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_SCPH </item>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_SCP </item>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_TM </item>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_SLV_OE </item>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_SRL </item>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_CFS </item>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_DFS_32 </item>
//    <item> SFDITEM_FIELD__SPIS_CTRLR0_SPI_FRF </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIS_CTRLR1  -------------------------------
// SVD Line: 15353

unsigned int SPIS_CTRLR1 __AT (0x40100404);



// -------------------------------  Field Item: SPIS_CTRLR1_NDF  ----------------------------------
// SVD Line: 15362

//  <item> SFDITEM_FIELD__SPIS_CTRLR1_NDF
//    <name> NDF </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40100404) Number of Data Frames. Represents the total number of data frames for the transaction. </i>
//    <edit> 
//      <loc> ( (unsigned short)((SPIS_CTRLR1 >> 0) & 0xFFFF), ((SPIS_CTRLR1 = (SPIS_CTRLR1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: SPIS_CTRLR1  ----------------------------------
// SVD Line: 15353

//  <rtree> SFDITEM_REG__SPIS_CTRLR1
//    <name> CTRLR1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100404) Control Register 1 </i>
//    <loc> ( (unsigned int)((SPIS_CTRLR1 >> 0) & 0xFFFFFFFF), ((SPIS_CTRLR1 = (SPIS_CTRLR1 & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIS_CTRLR1_NDF </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIS_SSIENR  -------------------------------
// SVD Line: 15374

unsigned int SPIS_SSIENR __AT (0x40100408);



// -----------------------------  Field Item: SPIS_SSIENR_SSI_EN  ---------------------------------
// SVD Line: 15384

//  <item> SFDITEM_FIELD__SPIS_SSIENR_SSI_EN
//    <name> SSI_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100408) \nSSI Enable.\n0 : DISABLE = Disables Serial Transfer\n1 : ENABLE = Enables Serial Transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SSIENR ) </loc>
//      <o.0..0> SSI_EN
//        <0=> 0: DISABLE = Disables Serial Transfer
//        <1=> 1: ENABLE = Enables Serial Transfer
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPIS_SSIENR  ----------------------------------
// SVD Line: 15374

//  <rtree> SFDITEM_REG__SPIS_SSIENR
//    <name> SSIENR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100408) SSI Enable Register </i>
//    <loc> ( (unsigned int)((SPIS_SSIENR >> 0) & 0xFFFFFFFF), ((SPIS_SSIENR = (SPIS_SSIENR & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIS_SSIENR_SSI_EN </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: SPIS_MWCR  --------------------------------
// SVD Line: 15408

unsigned int SPIS_MWCR __AT (0x4010040C);



// --------------------------------  Field Item: SPIS_MWCR_MHS  -----------------------------------
// SVD Line: 15417

//  <item> SFDITEM_FIELD__SPIS_MWCR_MHS
//    <name> MHS </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010040C) \nMicrowire Handshaking. Controls the handshaking interface of the Microwire.\n0 : DISABLE = Handshaking interface is disabled\n1 : ENABLE = Handshaking interface is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_MWCR ) </loc>
//      <o.2..2> MHS
//        <0=> 0: DISABLE = Handshaking interface is disabled
//        <1=> 1: ENABLE = Handshaking interface is enabled
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: SPIS_MWCR_MDD  -----------------------------------
// SVD Line: 15439

//  <item> SFDITEM_FIELD__SPIS_MWCR_MDD
//    <name> MDD </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010040C) \nMicrowire Control. Specifies the direction of data flow for SSI.\n0 : RECEIVE = SSI receives data\n1 : TRANSMIT = SSI transmits data </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_MWCR ) </loc>
//      <o.1..1> MDD
//        <0=> 0: RECEIVE = SSI receives data
//        <1=> 1: TRANSMIT = SSI transmits data
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_MWCR_MWMOD  ----------------------------------
// SVD Line: 15461

//  <item> SFDITEM_FIELD__SPIS_MWCR_MWMOD
//    <name> MWMOD </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010040C) \nMicrowire Transfer Mode. Configures the transfer mode of the Microwire.\n0 : NON_SEQUENTIAL = Non-Sequential Microwire Transfer\n1 : SEQUENTIAL = Sequential Microwire Transfer </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_MWCR ) </loc>
//      <o.0..0> MWMOD
//        <0=> 0: NON_SEQUENTIAL = Non-Sequential Microwire Transfer
//        <1=> 1: SEQUENTIAL = Sequential Microwire Transfer
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: SPIS_MWCR  -----------------------------------
// SVD Line: 15408

//  <rtree> SFDITEM_REG__SPIS_MWCR
//    <name> MWCR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010040C) Microwire Control Register </i>
//    <loc> ( (unsigned int)((SPIS_MWCR >> 0) & 0xFFFFFFFF), ((SPIS_MWCR = (SPIS_MWCR & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIS_MWCR_MHS </item>
//    <item> SFDITEM_FIELD__SPIS_MWCR_MDD </item>
//    <item> SFDITEM_FIELD__SPIS_MWCR_MWMOD </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: SPIS_SER  --------------------------------
// SVD Line: 15485

unsigned int SPIS_SER __AT (0x40100410);



// ---------------------------------  Register Item: SPIS_SER  ------------------------------------
// SVD Line: 15485

//  <item> SFDITEM_REG__SPIS_SER
//    <name> SER </name>
//    <i> [Bits 31..0] RW (@ 0x40100410) Slave Enable Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_SER >> 0) & 0xFFFFFFFF), ((SPIS_SER = (SPIS_SER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPIS_BAUDR  -------------------------------
// SVD Line: 15495

unsigned int SPIS_BAUDR __AT (0x40100414);



// ------------------------------  Field Item: SPIS_BAUDR_SCKDV  ----------------------------------
// SVD Line: 15504

//  <item> SFDITEM_FIELD__SPIS_BAUDR_SCKDV
//    <name> SCKDV </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40100414) SSI Clock Divider. Determines the output serial clock frequency.  The formula for the output clock: Fsclk_out = Fssi_clk / SCKDV. </i>
//    <edit> 
//      <loc> ( (unsigned short)((SPIS_BAUDR >> 0) & 0xFFFF), ((SPIS_BAUDR = (SPIS_BAUDR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: SPIS_BAUDR  -----------------------------------
// SVD Line: 15495

//  <rtree> SFDITEM_REG__SPIS_BAUDR
//    <name> BAUDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100414) Baud Rate Register </i>
//    <loc> ( (unsigned int)((SPIS_BAUDR >> 0) & 0xFFFFFFFF), ((SPIS_BAUDR = (SPIS_BAUDR & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIS_BAUDR_SCKDV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIS_TXFTLR  -------------------------------
// SVD Line: 15517

unsigned int SPIS_TXFTLR __AT (0x40100418);



// -------------------------------  Register Item: SPIS_TXFTLR  -----------------------------------
// SVD Line: 15517

//  <item> SFDITEM_REG__SPIS_TXFTLR
//    <name> TXFTLR </name>
//    <i> [Bits 31..0] RW (@ 0x40100418) Transmit FIFO Threshold Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_TXFTLR >> 0) & 0xFFFFFFFF), ((SPIS_TXFTLR = (SPIS_TXFTLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIS_RXFTLR  -------------------------------
// SVD Line: 15527

unsigned int SPIS_RXFTLR __AT (0x4010041C);



// -------------------------------  Register Item: SPIS_RXFTLR  -----------------------------------
// SVD Line: 15527

//  <item> SFDITEM_REG__SPIS_RXFTLR
//    <name> RXFTLR </name>
//    <i> [Bits 31..0] RW (@ 0x4010041C) Receive FIFO Threshold Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_RXFTLR >> 0) & 0xFFFFFFFF), ((SPIS_RXFTLR = (SPIS_RXFTLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPIS_TXFLR  -------------------------------
// SVD Line: 15537

unsigned int SPIS_TXFLR __AT (0x40100420);



// --------------------------------  Register Item: SPIS_TXFLR  -----------------------------------
// SVD Line: 15537

//  <item> SFDITEM_REG__SPIS_TXFLR
//    <name> TXFLR </name>
//    <i> [Bits 31..0] RO (@ 0x40100420) Transmit FIFO Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_TXFLR >> 0) & 0xFFFFFFFF), ((SPIS_TXFLR = (SPIS_TXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPIS_RXFLR  -------------------------------
// SVD Line: 15547

unsigned int SPIS_RXFLR __AT (0x40100424);



// --------------------------------  Register Item: SPIS_RXFLR  -----------------------------------
// SVD Line: 15547

//  <item> SFDITEM_REG__SPIS_RXFLR
//    <name> RXFLR </name>
//    <i> [Bits 31..0] RO (@ 0x40100424) Receive FIFO Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_RXFLR >> 0) & 0xFFFFFFFF), ((SPIS_RXFLR = (SPIS_RXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: SPIS_SR  ---------------------------------
// SVD Line: 15557

unsigned int SPIS_SR __AT (0x40100428);



// --------------------------------  Field Item: SPIS_SR_DCOL  ------------------------------------
// SVD Line: 15566

//  <item> SFDITEM_FIELD__SPIS_SR_DCOL
//    <name> DCOL </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40100428) \nData Collision Error. Indicates a collision occurred during transmission.\n0 : NO_ERROR_CONDITION = No Error\n1 : TX_COLLISION_ERROR = Transmit Data Collision Error </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SR ) </loc>
//      <o.6..6> DCOL
//        <0=> 0: NO_ERROR_CONDITION = No Error
//        <1=> 1: TX_COLLISION_ERROR = Transmit Data Collision Error
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: SPIS_SR_TXE  ------------------------------------
// SVD Line: 15588

//  <item> SFDITEM_FIELD__SPIS_SR_TXE
//    <name> TXE </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40100428) \nTransmission Error. Indicates an error occurred during transmission.\n0 : NO_ERROR = No Error\n1 : TX_ERROR = Transmission Error </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SR ) </loc>
//      <o.5..5> TXE
//        <0=> 0: NO_ERROR = No Error
//        <1=> 1: TX_ERROR = Transmission Error
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: SPIS_SR_RFF  ------------------------------------
// SVD Line: 15610

//  <item> SFDITEM_FIELD__SPIS_SR_RFF
//    <name> RFF </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40100428) \nReceive FIFO Full. Indicates the status of the receive FIFO.\n0 : NOT_FULL = Receive FIFO is not full\n1 : FULL = Receive FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SR ) </loc>
//      <o.4..4> RFF
//        <0=> 0: NOT_FULL = Receive FIFO is not full
//        <1=> 1: FULL = Receive FIFO is full
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: SPIS_SR_RFNE  ------------------------------------
// SVD Line: 15632

//  <item> SFDITEM_FIELD__SPIS_SR_RFNE
//    <name> RFNE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40100428) \nReceive FIFO Not Empty. Indicates if the receive FIFO contains data.\n0 : EMPTY = Receive FIFO is empty\n1 : NOT_EMPTY = Receive FIFO is not empty </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SR ) </loc>
//      <o.3..3> RFNE
//        <0=> 0: EMPTY = Receive FIFO is empty
//        <1=> 1: NOT_EMPTY = Receive FIFO is not empty
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: SPIS_SR_TFE  ------------------------------------
// SVD Line: 15654

//  <item> SFDITEM_FIELD__SPIS_SR_TFE
//    <name> TFE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40100428) \nTransmit FIFO Empty. Indicates if the transmit FIFO is empty.\n0 : NOT_EMPTY = Transmit FIFO is not empty\n1 : EMPTY = Transmit FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SR ) </loc>
//      <o.2..2> TFE
//        <0=> 0: NOT_EMPTY = Transmit FIFO is not empty
//        <1=> 1: EMPTY = Transmit FIFO is empty
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: SPIS_SR_TFNF  ------------------------------------
// SVD Line: 15676

//  <item> SFDITEM_FIELD__SPIS_SR_TFNF
//    <name> TFNF </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100428) \nTransmit FIFO Not Full. Indicates if the transmit FIFO is not full.\n0 : FULL = Transmit FIFO is full\n1 : NOT_FULL = Transmit FIFO is not full </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SR ) </loc>
//      <o.1..1> TFNF
//        <0=> 0: FULL = Transmit FIFO is full
//        <1=> 1: NOT_FULL = Transmit FIFO is not full
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: SPIS_SR_BUSY  ------------------------------------
// SVD Line: 15698

//  <item> SFDITEM_FIELD__SPIS_SR_BUSY
//    <name> BUSY </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40100428) \nSSI Busy Flag. Indicates if the SSI is actively transferring data.\n0 : INACTIVE = DW_apb_ssi is idle or disabled\n1 : ACTIVE = DW_apb_ssi is actively transferring data </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SR ) </loc>
//      <o.0..0> BUSY
//        <0=> 0: INACTIVE = DW_apb_ssi is idle or disabled
//        <1=> 1: ACTIVE = DW_apb_ssi is actively transferring data
//    </combo>
//  </item>
//  


// ---------------------------------  Register RTree: SPIS_SR  ------------------------------------
// SVD Line: 15557

//  <rtree> SFDITEM_REG__SPIS_SR
//    <name> SR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100428) Status Register </i>
//    <loc> ( (unsigned int)((SPIS_SR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__SPIS_SR_DCOL </item>
//    <item> SFDITEM_FIELD__SPIS_SR_TXE </item>
//    <item> SFDITEM_FIELD__SPIS_SR_RFF </item>
//    <item> SFDITEM_FIELD__SPIS_SR_RFNE </item>
//    <item> SFDITEM_FIELD__SPIS_SR_TFE </item>
//    <item> SFDITEM_FIELD__SPIS_SR_TFNF </item>
//    <item> SFDITEM_FIELD__SPIS_SR_BUSY </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: SPIS_IMR  --------------------------------
// SVD Line: 15723

unsigned int SPIS_IMR __AT (0x4010042C);



// -------------------------------  Field Item: SPIS_IMR_MSTIM  -----------------------------------
// SVD Line: 15732

//  <item> SFDITEM_FIELD__SPIS_IMR_MSTIM
//    <name> MSTIM </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4010042C) \nMulti-Master Contention Interrupt Mask. Controls the masking of the ssi_mst_intr interrupt.\n0 : MASKED = ssi_mst_intr interrupt is masked\n1 : UNMASKED = ssi_mst_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_IMR ) </loc>
//      <o.5..5> MSTIM
//        <0=> 0: MASKED = ssi_mst_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_mst_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_IMR_RXFIM  -----------------------------------
// SVD Line: 15754

//  <item> SFDITEM_FIELD__SPIS_IMR_RXFIM
//    <name> RXFIM </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4010042C) \nReceive FIFO Full Interrupt Mask. Controls the masking of the ssi_rxf_intr interrupt.\n0 : MASKED = ssi_rxf_intr interrupt is masked\n1 : UNMASKED = ssi_rxf_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_IMR ) </loc>
//      <o.4..4> RXFIM
//        <0=> 0: MASKED = ssi_rxf_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_rxf_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_IMR_RXOIM  -----------------------------------
// SVD Line: 15776

//  <item> SFDITEM_FIELD__SPIS_IMR_RXOIM
//    <name> RXOIM </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4010042C) \nReceive FIFO Overflow Interrupt Mask. Controls the masking of the ssi_rxo_intr interrupt.\n0 : MASKED = ssi_rxo_intr interrupt is masked\n1 : UNMASKED = ssi_rxo_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_IMR ) </loc>
//      <o.3..3> RXOIM
//        <0=> 0: MASKED = ssi_rxo_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_rxo_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_IMR_RXUIM  -----------------------------------
// SVD Line: 15798

//  <item> SFDITEM_FIELD__SPIS_IMR_RXUIM
//    <name> RXUIM </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010042C) \nReceive FIFO Underflow Interrupt Mask. Controls the masking of the ssi_rxu_intr interrupt.\n0 : MASKED = ssi_rxu_intr interrupt is masked\n1 : UNMASKED = ssi_rxu_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_IMR ) </loc>
//      <o.2..2> RXUIM
//        <0=> 0: MASKED = ssi_rxu_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_rxu_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_IMR_TXOIM  -----------------------------------
// SVD Line: 15820

//  <item> SFDITEM_FIELD__SPIS_IMR_TXOIM
//    <name> TXOIM </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010042C) \nTransmit FIFO Overflow Interrupt Mask. Controls the masking of the ssi_txo_intr interrupt.\n0 : MASKED = ssi_txo_intr interrupt is masked\n1 : UNMASKED = ssi_txo_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_IMR ) </loc>
//      <o.1..1> TXOIM
//        <0=> 0: MASKED = ssi_txo_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_txo_intr interrupt is not masked
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_IMR_TXEIM  -----------------------------------
// SVD Line: 15842

//  <item> SFDITEM_FIELD__SPIS_IMR_TXEIM
//    <name> TXEIM </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010042C) \nTransmit FIFO Empty Interrupt Mask. Controls the masking of the ssi_txe_intr interrupt.\n0 : MASKED = ssi_txe_intr interrupt is masked\n1 : UNMASKED = ssi_txe_intr interrupt is not masked </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_IMR ) </loc>
//      <o.0..0> TXEIM
//        <0=> 0: MASKED = ssi_txe_intr interrupt is masked
//        <1=> 1: UNMASKED = ssi_txe_intr interrupt is not masked
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: SPIS_IMR  ------------------------------------
// SVD Line: 15723

//  <rtree> SFDITEM_REG__SPIS_IMR
//    <name> IMR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010042C) Interrupt Mask Register </i>
//    <loc> ( (unsigned int)((SPIS_IMR >> 0) & 0xFFFFFFFF), ((SPIS_IMR = (SPIS_IMR & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIS_IMR_MSTIM </item>
//    <item> SFDITEM_FIELD__SPIS_IMR_RXFIM </item>
//    <item> SFDITEM_FIELD__SPIS_IMR_RXOIM </item>
//    <item> SFDITEM_FIELD__SPIS_IMR_RXUIM </item>
//    <item> SFDITEM_FIELD__SPIS_IMR_TXOIM </item>
//    <item> SFDITEM_FIELD__SPIS_IMR_TXEIM </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: SPIS_ISR  --------------------------------
// SVD Line: 15866

unsigned int SPIS_ISR __AT (0x40100430);



// -------------------------------  Field Item: SPIS_ISR_MSTIS  -----------------------------------
// SVD Line: 15876

//  <item> SFDITEM_FIELD__SPIS_ISR_MSTIS
//    <name> MSTIS </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40100430) \nMulti-Master Contention Interrupt Status. Indicates the status of the ssi_mst_intr interrupt after masking.\n0 : INACTIVE = ssi_mst_intr interrupt not active after masking\n1 : ACTIVE = ssi_mst_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_ISR ) </loc>
//      <o.5..5> MSTIS
//        <0=> 0: INACTIVE = ssi_mst_intr interrupt not active after masking
//        <1=> 1: ACTIVE = ssi_mst_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_ISR_RXFIS  -----------------------------------
// SVD Line: 15898

//  <item> SFDITEM_FIELD__SPIS_ISR_RXFIS
//    <name> RXFIS </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40100430) \nReceive FIFO Full Interrupt Status. Indicates the status of the ssi_rxf_intr interrupt after masking.\n0 : INACTIVE = ssi_rxf_intr interrupt is not active after masking\n1 : ACTIVE = ssi_rxf_intr interrupt is full after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_ISR ) </loc>
//      <o.4..4> RXFIS
//        <0=> 0: INACTIVE = ssi_rxf_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_rxf_intr interrupt is full after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_ISR_RXOIS  -----------------------------------
// SVD Line: 15920

//  <item> SFDITEM_FIELD__SPIS_ISR_RXOIS
//    <name> RXOIS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40100430) \nReceive FIFO Overflow Interrupt Status. Indicates the status of the ssi_rxo_intr interrupt after masking.\n0 : INACTIVE = ssi_rxo_intr interrupt is not active after masking\n1 : ACTIVE = ssi_rxo_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_ISR ) </loc>
//      <o.3..3> RXOIS
//        <0=> 0: INACTIVE = ssi_rxo_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_rxo_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_ISR_RXUIS  -----------------------------------
// SVD Line: 15942

//  <item> SFDITEM_FIELD__SPIS_ISR_RXUIS
//    <name> RXUIS </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40100430) \nReceive FIFO Underflow Interrupt Status. Indicates the status of the ssi_rxu_intr interrupt after masking.\n0 : INACTIVE = ssi_rxu_intr interrupt is not active after masking\n1 : ACTIVE = ssi_rxu_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_ISR ) </loc>
//      <o.2..2> RXUIS
//        <0=> 0: INACTIVE = ssi_rxu_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_rxu_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_ISR_TXOIS  -----------------------------------
// SVD Line: 15964

//  <item> SFDITEM_FIELD__SPIS_ISR_TXOIS
//    <name> TXOIS </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100430) \nTransmit FIFO Overflow Interrupt Status. Indicates the status of the ssi_txo_intr interrupt after masking.\n0 : INACTIVE = ssi_txo_intr interrupt is not active after masking\n1 : ACTIVE = ssi_txo_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_ISR ) </loc>
//      <o.1..1> TXOIS
//        <0=> 0: INACTIVE = ssi_txo_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_txo_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_ISR_TXEIS  -----------------------------------
// SVD Line: 15986

//  <item> SFDITEM_FIELD__SPIS_ISR_TXEIS
//    <name> TXEIS </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40100430) \nTransmit FIFO Empty Interrupt Status. Indicates the status of the ssi_txe_intr interrupt after masking.\n0 : INACTIVE = ssi_txe_intr interrupt is not active after masking\n1 : ACTIVE = ssi_txe_intr interrupt is active after masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_ISR ) </loc>
//      <o.0..0> TXEIS
//        <0=> 0: INACTIVE = ssi_txe_intr interrupt is not active after masking
//        <1=> 1: ACTIVE = ssi_txe_intr interrupt is active after masking
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: SPIS_ISR  ------------------------------------
// SVD Line: 15866

//  <rtree> SFDITEM_REG__SPIS_ISR
//    <name> ISR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100430) Interrupt Status Register </i>
//    <loc> ( (unsigned int)((SPIS_ISR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__SPIS_ISR_MSTIS </item>
//    <item> SFDITEM_FIELD__SPIS_ISR_RXFIS </item>
//    <item> SFDITEM_FIELD__SPIS_ISR_RXOIS </item>
//    <item> SFDITEM_FIELD__SPIS_ISR_RXUIS </item>
//    <item> SFDITEM_FIELD__SPIS_ISR_TXOIS </item>
//    <item> SFDITEM_FIELD__SPIS_ISR_TXEIS </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: SPIS_RISR  --------------------------------
// SVD Line: 16010

unsigned int SPIS_RISR __AT (0x40100434);



// -------------------------------  Field Item: SPIS_RISR_MSTIR  ----------------------------------
// SVD Line: 16020

//  <item> SFDITEM_FIELD__SPIS_RISR_MSTIR
//    <name> MSTIR </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40100434) \nMulti-Master Contention Raw Interrupt Status. Indicates the status of the ssi_mst_intr interrupt prior to masking.\n0 : INACTIVE = ssi_mst_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_mst_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_RISR ) </loc>
//      <o.5..5> MSTIR
//        <0=> 0: INACTIVE = ssi_mst_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_mst_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_RISR_RXFIR  ----------------------------------
// SVD Line: 16042

//  <item> SFDITEM_FIELD__SPIS_RISR_RXFIR
//    <name> RXFIR </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40100434) \nReceive FIFO Full Raw Interrupt Status. Indicates the status of the ssi_rxf_intr interrupt prior to masking.\n0 : INACTIVE = ssi_rxf_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_rxf_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_RISR ) </loc>
//      <o.4..4> RXFIR
//        <0=> 0: INACTIVE = ssi_rxf_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_rxf_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_RISR_RXOIR  ----------------------------------
// SVD Line: 16064

//  <item> SFDITEM_FIELD__SPIS_RISR_RXOIR
//    <name> RXOIR </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40100434) \nReceive FIFO Overflow Raw Interrupt Status. Indicates the status of the ssi_rxo_intr interrupt prior to masking.\n0 : INACTIVE = ssi_rxo_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_rxo_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_RISR ) </loc>
//      <o.3..3> RXOIR
//        <0=> 0: INACTIVE = ssi_rxo_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_rxo_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_RISR_RXUIR  ----------------------------------
// SVD Line: 16086

//  <item> SFDITEM_FIELD__SPIS_RISR_RXUIR
//    <name> RXUIR </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40100434) \nReceive FIFO Underflow Raw Interrupt Status. Indicates the status of the ssi_rxu_intr interrupt prior to masking.\n0 : INACTIVE = ssi_rxu_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_rxu_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_RISR ) </loc>
//      <o.2..2> RXUIR
//        <0=> 0: INACTIVE = ssi_rxu_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_rxu_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_RISR_TXOIR  ----------------------------------
// SVD Line: 16108

//  <item> SFDITEM_FIELD__SPIS_RISR_TXOIR
//    <name> TXOIR </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100434) \nTransmit FIFO Overflow Raw Interrupt Status. Indicates the status of the ssi_txo_intr interrupt prior to masking.\n0 : INACTIVE = ssi_txo_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_txo_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_RISR ) </loc>
//      <o.1..1> TXOIR
//        <0=> 0: INACTIVE = ssi_txo_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_txo_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: SPIS_RISR_TXEIR  ----------------------------------
// SVD Line: 16130

//  <item> SFDITEM_FIELD__SPIS_RISR_TXEIR
//    <name> TXEIR </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40100434) \nTransmit FIFO Empty Raw Interrupt Status. Indicates the status of the ssi_txe_intr interrupt prior to masking.\n0 : INACTIVE = ssi_txe_intr interrupt is not active prior to masking\n1 : ACTIVE = ssi_txe_intr interrupt is active prior to masking </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_RISR ) </loc>
//      <o.0..0> TXEIR
//        <0=> 0: INACTIVE = ssi_txe_intr interrupt is not active prior to masking
//        <1=> 1: ACTIVE = ssi_txe_intr interrupt is active prior to masking
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: SPIS_RISR  -----------------------------------
// SVD Line: 16010

//  <rtree> SFDITEM_REG__SPIS_RISR
//    <name> RISR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100434) Raw Interrupt Status Register </i>
//    <loc> ( (unsigned int)((SPIS_RISR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__SPIS_RISR_MSTIR </item>
//    <item> SFDITEM_FIELD__SPIS_RISR_RXFIR </item>
//    <item> SFDITEM_FIELD__SPIS_RISR_RXOIR </item>
//    <item> SFDITEM_FIELD__SPIS_RISR_RXUIR </item>
//    <item> SFDITEM_FIELD__SPIS_RISR_TXOIR </item>
//    <item> SFDITEM_FIELD__SPIS_RISR_TXEIR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIS_TXOICR  -------------------------------
// SVD Line: 16155

unsigned int SPIS_TXOICR __AT (0x40100438);



// -------------------------------  Register Item: SPIS_TXOICR  -----------------------------------
// SVD Line: 16155

//  <item> SFDITEM_REG__SPIS_TXOICR
//    <name> TXOICR </name>
//    <i> [Bits 31..0] WO (@ 0x40100438) Transmit FIFO Overflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_TXOICR >> 0) & 0xFFFFFFFF), ((SPIS_TXOICR = (SPIS_TXOICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIS_RXOICR  -------------------------------
// SVD Line: 16165

unsigned int SPIS_RXOICR __AT (0x4010043C);



// -------------------------------  Register Item: SPIS_RXOICR  -----------------------------------
// SVD Line: 16165

//  <item> SFDITEM_REG__SPIS_RXOICR
//    <name> RXOICR </name>
//    <i> [Bits 31..0] WO (@ 0x4010043C) Receive FIFO Overflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_RXOICR >> 0) & 0xFFFFFFFF), ((SPIS_RXOICR = (SPIS_RXOICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIS_RXUICR  -------------------------------
// SVD Line: 16175

unsigned int SPIS_RXUICR __AT (0x40100440);



// -------------------------------  Register Item: SPIS_RXUICR  -----------------------------------
// SVD Line: 16175

//  <item> SFDITEM_REG__SPIS_RXUICR
//    <name> RXUICR </name>
//    <i> [Bits 31..0] WO (@ 0x40100440) Receive FIFO Underflow Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_RXUICR >> 0) & 0xFFFFFFFF), ((SPIS_RXUICR = (SPIS_RXUICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIS_MSTICR  -------------------------------
// SVD Line: 16185

unsigned int SPIS_MSTICR __AT (0x40100444);



// -------------------------------  Register Item: SPIS_MSTICR  -----------------------------------
// SVD Line: 16185

//  <item> SFDITEM_REG__SPIS_MSTICR
//    <name> MSTICR </name>
//    <i> [Bits 31..0] WO (@ 0x40100444) Multi-Master Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_MSTICR >> 0) & 0xFFFFFFFF), ((SPIS_MSTICR = (SPIS_MSTICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: SPIS_ICR  --------------------------------
// SVD Line: 16195

unsigned int SPIS_ICR __AT (0x40100448);



// ---------------------------------  Register Item: SPIS_ICR  ------------------------------------
// SVD Line: 16195

//  <item> SFDITEM_REG__SPIS_ICR
//    <name> ICR </name>
//    <i> [Bits 31..0] WO (@ 0x40100448) Interrupt Clear Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_ICR >> 0) & 0xFFFFFFFF), ((SPIS_ICR = (SPIS_ICR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: SPIS_DMACR  -------------------------------
// SVD Line: 16205

unsigned int SPIS_DMACR __AT (0x4010044C);



// ------------------------------  Field Item: SPIS_DMACR_TDMAE  ----------------------------------
// SVD Line: 16215

//  <item> SFDITEM_FIELD__SPIS_DMACR_TDMAE
//    <name> TDMAE </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010044C) \nTransmit DMA Enable. Controls the enable status of the transmit DMA operation.\n0 : DISABLE = Transmit DMA disabled\n1 : ENABLE = Transmit DMA enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_DMACR ) </loc>
//      <o.1..1> TDMAE
//        <0=> 0: DISABLE = Transmit DMA disabled
//        <1=> 1: ENABLE = Transmit DMA enabled
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: SPIS_DMACR_RDMAE  ----------------------------------
// SVD Line: 16237

//  <item> SFDITEM_FIELD__SPIS_DMACR_RDMAE
//    <name> RDMAE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010044C) \nReceive DMA Enable. Controls the enable status of the receive DMA operation.\n0 : DISABLE = Receive DMA disabled\n1 : ENABLE = Receive DMA enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_DMACR ) </loc>
//      <o.0..0> RDMAE
//        <0=> 0: DISABLE = Receive DMA disabled
//        <1=> 1: ENABLE = Receive DMA enabled
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: SPIS_DMACR  -----------------------------------
// SVD Line: 16205

//  <rtree> SFDITEM_REG__SPIS_DMACR
//    <name> DMACR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010044C) DMA Control Register </i>
//    <loc> ( (unsigned int)((SPIS_DMACR >> 0) & 0xFFFFFFFF), ((SPIS_DMACR = (SPIS_DMACR & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIS_DMACR_TDMAE </item>
//    <item> SFDITEM_FIELD__SPIS_DMACR_RDMAE </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: SPIS_DMATDLR  ------------------------------
// SVD Line: 16261

unsigned int SPIS_DMATDLR __AT (0x40100450);



// -------------------------------  Register Item: SPIS_DMATDLR  ----------------------------------
// SVD Line: 16261

//  <item> SFDITEM_REG__SPIS_DMATDLR
//    <name> DMATDLR </name>
//    <i> [Bits 31..0] RW (@ 0x40100450) DMA Transmit Data Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_DMATDLR >> 0) & 0xFFFFFFFF), ((SPIS_DMATDLR = (SPIS_DMATDLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: SPIS_DMARDLR  ------------------------------
// SVD Line: 16271

unsigned int SPIS_DMARDLR __AT (0x40100454);



// -------------------------------  Register Item: SPIS_DMARDLR  ----------------------------------
// SVD Line: 16271

//  <item> SFDITEM_REG__SPIS_DMARDLR
//    <name> DMARDLR </name>
//    <i> [Bits 31..0] RW (@ 0x40100454) DMA Receive Data Level Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_DMARDLR >> 0) & 0xFFFFFFFF), ((SPIS_DMARDLR = (SPIS_DMARDLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: SPIS_IDR  --------------------------------
// SVD Line: 16281

unsigned int SPIS_IDR __AT (0x40100458);



// ---------------------------------  Register Item: SPIS_IDR  ------------------------------------
// SVD Line: 16281

//  <item> SFDITEM_REG__SPIS_IDR
//    <name> IDR </name>
//    <i> [Bits 31..0] RO (@ 0x40100458) Identification Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_IDR >> 0) & 0xFFFFFFFF), ((SPIS_IDR = (SPIS_IDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: SPIS_SSI_VERSION_ID  ---------------------------
// SVD Line: 16291

unsigned int SPIS_SSI_VERSION_ID __AT (0x4010045C);



// ---------------------------  Register Item: SPIS_SSI_VERSION_ID  -------------------------------
// SVD Line: 16291

//  <item> SFDITEM_REG__SPIS_SSI_VERSION_ID
//    <name> SSI_VERSION_ID </name>
//    <i> [Bits 31..0] RO (@ 0x4010045C) SSI Version ID Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_SSI_VERSION_ID >> 0) & 0xFFFFFFFF), ((SPIS_SSI_VERSION_ID = (SPIS_SSI_VERSION_ID & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: SPIS_DR  ---------------------------------
// SVD Line: 16301

unsigned int SPIS_DR __AT (0x40100460);



// ---------------------------------  Register Item: SPIS_DR  -------------------------------------
// SVD Line: 16301

//  <item> SFDITEM_REG__SPIS_DR
//    <name> DR </name>
//    <i> [Bits 31..0] RW (@ 0x40100460) Data Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_DR >> 0) & 0xFFFFFFFF), ((SPIS_DR = (SPIS_DR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------  Register Item Address: SPIS_RX_SAMPLE_DLY  ---------------------------
// SVD Line: 16311

unsigned int SPIS_RX_SAMPLE_DLY __AT (0x401004F0);



// ----------------------------  Register Item: SPIS_RX_SAMPLE_DLY  -------------------------------
// SVD Line: 16311

//  <item> SFDITEM_REG__SPIS_RX_SAMPLE_DLY
//    <name> RX_SAMPLE_DLY </name>
//    <i> [Bits 31..0] RW (@ 0x401004F0) Receive Sample Delay Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_RX_SAMPLE_DLY >> 0) & 0xFFFFFFFF), ((SPIS_RX_SAMPLE_DLY = (SPIS_RX_SAMPLE_DLY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: SPIS_SPI_CTRLR0  -----------------------------
// SVD Line: 16321

unsigned int SPIS_SPI_CTRLR0 __AT (0x401004F4);



// -------------------------  Field Item: SPIS_SPI_CTRLR0_SPI_RXDS_EN  ----------------------------
// SVD Line: 16330

//  <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_SPI_RXDS_EN
//    <name> SPI_RXDS_EN </name>
//    <rw> 
//    <i> [Bit 18] RW (@ 0x401004F4) Read data strobe enable bit. </i>
//    <check> 
//      <loc> ( (unsigned int) SPIS_SPI_CTRLR0 ) </loc>
//      <o.18..18> SPI_RXDS_EN
//    </check>
//  </item>
//  


// -------------------------  Field Item: SPIS_SPI_CTRLR0_INST_DDR_EN  ----------------------------
// SVD Line: 16338

//  <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_INST_DDR_EN
//    <name> INST_DDR_EN </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401004F4) Instruction DDR Enable bit. </i>
//    <check> 
//      <loc> ( (unsigned int) SPIS_SPI_CTRLR0 ) </loc>
//      <o.17..17> INST_DDR_EN
//    </check>
//  </item>
//  


// -------------------------  Field Item: SPIS_SPI_CTRLR0_SPI_DDR_EN  -----------------------------
// SVD Line: 16346

//  <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_SPI_DDR_EN
//    <name> SPI_DDR_EN </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401004F4) SPI DDR Enable bit. </i>
//    <check> 
//      <loc> ( (unsigned int) SPIS_SPI_CTRLR0 ) </loc>
//      <o.16..16> SPI_DDR_EN
//    </check>
//  </item>
//  


// -------------------------  Field Item: SPIS_SPI_CTRLR0_WAIT_CYCLES  ----------------------------
// SVD Line: 16354

//  <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_WAIT_CYCLES
//    <name> WAIT_CYCLES </name>
//    <rw> 
//    <i> [Bits 15..11] RW (@ 0x401004F4) Wait cycles. </i>
//    <edit> 
//      <loc> ( (unsigned char)((SPIS_SPI_CTRLR0 >> 11) & 0x1F), ((SPIS_SPI_CTRLR0 = (SPIS_SPI_CTRLR0 & ~(0x1FUL << 11 )) | ((unsigned long)(Gui_u8:GuiVal & 0x1F) << 11 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: SPIS_SPI_CTRLR0_INST_L  -------------------------------
// SVD Line: 16362

//  <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_INST_L
//    <name> INST_L </name>
//    <rw> 
//    <i> [Bits 9..8] RW (@ 0x401004F4) \nInstruction Length.\n0 : INST_L_0 = 0-bit (No Instruction)\n1 : INST_L_1 = 4-bit Instruction\n2 : INST_L_2 = 8-bit Instruction\n3 : INST_L_3 = 16-bit Instruction </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SPI_CTRLR0 ) </loc>
//      <o.9..8> INST_L
//        <0=> 0: INST_L_0 = 0-bit (No Instruction)
//        <1=> 1: INST_L_1 = 4-bit Instruction
//        <2=> 2: INST_L_2 = 8-bit Instruction
//        <3=> 3: INST_L_3 = 16-bit Instruction
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: SPIS_SPI_CTRLR0_ADDR_L  -------------------------------
// SVD Line: 16392

//  <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_ADDR_L
//    <name> ADDR_L </name>
//    <rw> 
//    <i> [Bits 5..2] RW (@ 0x401004F4) \nAddress Length.\n0 : ADDR_L_0 = 0-bit Address Width\n1 : ADDR_L_1 = 4-bit Address Width\n2 : ADDR_L_2 = 8-bit Address Width\n3 : ADDR_L_3 = 12-bit Address Width\n4 : ADDR_L_4 = 16-bit Address Width\n5 : ADDR_L_5 = 20-bit Address Width\n6 : ADDR_L_6 = 24-bit Address Width\n7 : ADDR_L_7 = 28-bit Address Width\n8 : ADDR_L_8 = 32-bit Address Width\n9 : ADDR_L_9 = 36-bit Address Width\n10 : ADDR_L_10 = 40-bit Address Width\n11 : ADDR_L_11 = 44-bit Address Width\n12 : ADDR_L_12 = 48-bit Address Width\n13 : ADDR_L_13 = 52-bit Address Width\n14 : ADDR_L_14 = 56-bit Address Width\n15 : ADDR_L_15 = 60-bit Address Width </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SPI_CTRLR0 ) </loc>
//      <o.5..2> ADDR_L
//        <0=> 0: ADDR_L_0 = 0-bit Address Width
//        <1=> 1: ADDR_L_1 = 4-bit Address Width
//        <2=> 2: ADDR_L_2 = 8-bit Address Width
//        <3=> 3: ADDR_L_3 = 12-bit Address Width
//        <4=> 4: ADDR_L_4 = 16-bit Address Width
//        <5=> 5: ADDR_L_5 = 20-bit Address Width
//        <6=> 6: ADDR_L_6 = 24-bit Address Width
//        <7=> 7: ADDR_L_7 = 28-bit Address Width
//        <8=> 8: ADDR_L_8 = 32-bit Address Width
//        <9=> 9: ADDR_L_9 = 36-bit Address Width
//        <10=> 10: ADDR_L_10 = 40-bit Address Width
//        <11=> 11: ADDR_L_11 = 44-bit Address Width
//        <12=> 12: ADDR_L_12 = 48-bit Address Width
//        <13=> 13: ADDR_L_13 = 52-bit Address Width
//        <14=> 14: ADDR_L_14 = 56-bit Address Width
//        <15=> 15: ADDR_L_15 = 60-bit Address Width
//    </combo>
//  </item>
//  


// -------------------------  Field Item: SPIS_SPI_CTRLR0_TRANS_TYPE  -----------------------------
// SVD Line: 16483

//  <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_TRANS_TYPE
//    <name> TRANS_TYPE </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401004F4) \nAddress and instruction transfer format.\n0 : STANDARD_SPI = Instruction and Address will be sent in Standard SPI Mode.\n1 : ADDR_SPECIFIED_MODE = Instruction sent in Standard SPI Mode, Address sent in mode specified by CTRLR0.SPI_FRF.\n2 : BOTH_SPECIFIED_MODE = Both Instruction and Address sent in the mode specified by SPI_FRF.\n3 : NO_USED = NO_USED. </i>
//    <combo> 
//      <loc> ( (unsigned int) SPIS_SPI_CTRLR0 ) </loc>
//      <o.1..0> TRANS_TYPE
//        <0=> 0: STANDARD_SPI = Instruction and Address will be sent in Standard SPI Mode.
//        <1=> 1: ADDR_SPECIFIED_MODE = Instruction sent in Standard SPI Mode, Address sent in mode specified by CTRLR0.SPI_FRF.
//        <2=> 2: BOTH_SPECIFIED_MODE = Both Instruction and Address sent in the mode specified by SPI_FRF.
//        <3=> 3: NO_USED = NO_USED.
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: SPIS_SPI_CTRLR0  --------------------------------
// SVD Line: 16321

//  <rtree> SFDITEM_REG__SPIS_SPI_CTRLR0
//    <name> SPI_CTRLR0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401004F4) SPI Control Register </i>
//    <loc> ( (unsigned int)((SPIS_SPI_CTRLR0 >> 0) & 0xFFFFFFFF), ((SPIS_SPI_CTRLR0 = (SPIS_SPI_CTRLR0 & ~(0x7FB3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FB3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_SPI_RXDS_EN </item>
//    <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_INST_DDR_EN </item>
//    <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_SPI_DDR_EN </item>
//    <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_WAIT_CYCLES </item>
//    <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_INST_L </item>
//    <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_ADDR_L </item>
//    <item> SFDITEM_FIELD__SPIS_SPI_CTRLR0_TRANS_TYPE </item>
//  </rtree>
//  


// -----------------------  Register Item Address: SPIS_TXD_DRIVE_EDGE  ---------------------------
// SVD Line: 16515

unsigned int SPIS_TXD_DRIVE_EDGE __AT (0x401004F8);



// ---------------------------  Register Item: SPIS_TXD_DRIVE_EDGE  -------------------------------
// SVD Line: 16515

//  <item> SFDITEM_REG__SPIS_TXD_DRIVE_EDGE
//    <name> TXD_DRIVE_EDGE </name>
//    <i> [Bits 31..0] RW (@ 0x401004F8) Transmit Drive Edge Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((SPIS_TXD_DRIVE_EDGE >> 0) & 0xFFFFFFFF), ((SPIS_TXD_DRIVE_EDGE = (SPIS_TXD_DRIVE_EDGE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------------  Peripheral View: SPIS  -------------------------------------
// SVD Line: 16527

//  <view> SPIS
//    <name> SPIS </name>
//    <item> SFDITEM_REG__SPIS_CTRLR0 </item>
//    <item> SFDITEM_REG__SPIS_CTRLR1 </item>
//    <item> SFDITEM_REG__SPIS_SSIENR </item>
//    <item> SFDITEM_REG__SPIS_MWCR </item>
//    <item> SFDITEM_REG__SPIS_SER </item>
//    <item> SFDITEM_REG__SPIS_BAUDR </item>
//    <item> SFDITEM_REG__SPIS_TXFTLR </item>
//    <item> SFDITEM_REG__SPIS_RXFTLR </item>
//    <item> SFDITEM_REG__SPIS_TXFLR </item>
//    <item> SFDITEM_REG__SPIS_RXFLR </item>
//    <item> SFDITEM_REG__SPIS_SR </item>
//    <item> SFDITEM_REG__SPIS_IMR </item>
//    <item> SFDITEM_REG__SPIS_ISR </item>
//    <item> SFDITEM_REG__SPIS_RISR </item>
//    <item> SFDITEM_REG__SPIS_TXOICR </item>
//    <item> SFDITEM_REG__SPIS_RXOICR </item>
//    <item> SFDITEM_REG__SPIS_RXUICR </item>
//    <item> SFDITEM_REG__SPIS_MSTICR </item>
//    <item> SFDITEM_REG__SPIS_ICR </item>
//    <item> SFDITEM_REG__SPIS_DMACR </item>
//    <item> SFDITEM_REG__SPIS_DMATDLR </item>
//    <item> SFDITEM_REG__SPIS_DMARDLR </item>
//    <item> SFDITEM_REG__SPIS_IDR </item>
//    <item> SFDITEM_REG__SPIS_SSI_VERSION_ID </item>
//    <item> SFDITEM_REG__SPIS_DR </item>
//    <item> SFDITEM_REG__SPIS_RX_SAMPLE_DLY </item>
//    <item> SFDITEM_REG__SPIS_SPI_CTRLR0 </item>
//    <item> SFDITEM_REG__SPIS_TXD_DRIVE_EDGE </item>
//  </view>
//  


// -----------------------------  Register Item Address: UART_RBR  --------------------------------
// SVD Line: 16568

unsigned int UART_RBR __AT (0x40100700);



// ---------------------------------  Register Item: UART_RBR  ------------------------------------
// SVD Line: 16568

//  <item> SFDITEM_REG__UART_RBR
//    <name> RBR </name>
//    <i> [Bits 31..0] RO (@ 0x40100700) RECEIVE BUFFER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((UART_RBR >> 0) & 0xFFFFFFFF), ((UART_RBR = (UART_RBR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: UART_THR  --------------------------------
// SVD Line: 16578

unsigned int UART_THR __AT (0x40100700);



// ---------------------------------  Register Item: UART_THR  ------------------------------------
// SVD Line: 16578

//  <item> SFDITEM_REG__UART_THR
//    <name> THR </name>
//    <i> [Bits 31..0] RW (@ 0x40100700) TRANSMIT HOLDING REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((UART_THR >> 0) & 0xFFFFFFFF), ((UART_THR = (UART_THR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: UART_DLL  --------------------------------
// SVD Line: 16589

unsigned int UART_DLL __AT (0x40100700);



// ---------------------------------  Register Item: UART_DLL  ------------------------------------
// SVD Line: 16589

//  <item> SFDITEM_REG__UART_DLL
//    <name> DLL </name>
//    <i> [Bits 31..0] RW (@ 0x40100700) DIVISOR LATCH LOW REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((UART_DLL >> 0) & 0xFFFFFFFF), ((UART_DLL = (UART_DLL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: UART_DLH  --------------------------------
// SVD Line: 16600

unsigned int UART_DLH __AT (0x40100704);



// ---------------------------------  Register Item: UART_DLH  ------------------------------------
// SVD Line: 16600

//  <item> SFDITEM_REG__UART_DLH
//    <name> DLH </name>
//    <i> [Bits 31..0] RW (@ 0x40100704) DIVISOR LATCH HIGH REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((UART_DLH >> 0) & 0xFFFFFFFF), ((UART_DLH = (UART_DLH & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: UART_IER  --------------------------------
// SVD Line: 16610

unsigned int UART_IER __AT (0x40100704);



// -------------------------------  Field Item: UART_IER_ERBFI  -----------------------------------
// SVD Line: 16621

//  <item> SFDITEM_FIELD__UART_IER_ERBFI
//    <name> ERBFI </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100704) \nEnable Received Data Available Interrupt\n0 : DISABLE = Disable received data available interrupt\n1 : ENABLE = Enable received data available interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_IER ) </loc>
//      <o.0..0> ERBFI
//        <0=> 0: DISABLE = Disable received data available interrupt
//        <1=> 1: ENABLE = Enable received data available interrupt
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART_IER_ETBEI  -----------------------------------
// SVD Line: 16640

//  <item> SFDITEM_FIELD__UART_IER_ETBEI
//    <name> ETBEI </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100704) \nEnable Transmit Holding Register Empty Interrupt\n0 : DISABLE = Disable transmit holding register empty interrupt\n1 : ENABLE = Enable transmit holding register empty interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_IER ) </loc>
//      <o.1..1> ETBEI
//        <0=> 0: DISABLE = Disable transmit holding register empty interrupt
//        <1=> 1: ENABLE = Enable transmit holding register empty interrupt
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_IER_ELSI  -----------------------------------
// SVD Line: 16659

//  <item> SFDITEM_FIELD__UART_IER_ELSI
//    <name> ELSI </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100704) \nEnable Receiver Line Status Interrupt\n0 : DISABLE = Disable receiver line status interrupt\n1 : ENABLE = Enable receiver line status interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_IER ) </loc>
//      <o.2..2> ELSI
//        <0=> 0: DISABLE = Disable receiver line status interrupt
//        <1=> 1: ENABLE = Enable receiver line status interrupt
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART_IER_EDSSI  -----------------------------------
// SVD Line: 16678

//  <item> SFDITEM_FIELD__UART_IER_EDSSI
//    <name> EDSSI </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100704) \nEnable Modem Status Interrupt\n0 : DISABLE = Disable modem status interrupt\n1 : ENABLE = Enable modem status interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_IER ) </loc>
//      <o.3..3> EDSSI
//        <0=> 0: DISABLE = Disable modem status interrupt
//        <1=> 1: ENABLE = Enable modem status interrupt
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART_IER_PTIME  -----------------------------------
// SVD Line: 16697

//  <item> SFDITEM_FIELD__UART_IER_PTIME
//    <name> PTIME </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40100704) \nProgrammable THRE Interrupt Mode Enable\n0 : DISABLE = Disable programmable THRE interrupt mode\n1 : ENABLE = Enable programmable THRE interrupt mode </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_IER ) </loc>
//      <o.7..7> PTIME
//        <0=> 0: DISABLE = Disable programmable THRE interrupt mode
//        <1=> 1: ENABLE = Enable programmable THRE interrupt mode
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART_IER  ------------------------------------
// SVD Line: 16610

//  <rtree> SFDITEM_REG__UART_IER
//    <name> IER </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100704) INTRRRUPT ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((UART_IER >> 0) & 0xFFFFFFFF), ((UART_IER = (UART_IER & ~(0x8FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x8F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_IER_ERBFI </item>
//    <item> SFDITEM_FIELD__UART_IER_ETBEI </item>
//    <item> SFDITEM_FIELD__UART_IER_ELSI </item>
//    <item> SFDITEM_FIELD__UART_IER_EDSSI </item>
//    <item> SFDITEM_FIELD__UART_IER_PTIME </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART_IIR  --------------------------------
// SVD Line: 16718

unsigned int UART_IIR __AT (0x40100708);



// --------------------------------  Field Item: UART_IIR_IID  ------------------------------------
// SVD Line: 16728

//  <item> SFDITEM_FIELD__UART_IIR_IID
//    <name> IID </name>
//    <r> 
//    <i> [Bits 3..0] RO (@ 0x40100708) \nInterrupt ID\n0 : NOT_USED = Reserved values. Do not use.\n1 : HAVE_NO_INT = No interrupt pending\n2 : THR_EMPTY = THR empty\n3 : Reserved - do not use\n4 : RX_AVL = Received data available\n5 : Reserved - do not use\n6 : LINE_AVL = Receiver line status\n7 : BUSY_DET = Busy detect\n8 : Reserved - do not use\n9 : Reserved - do not use\n10 : Reserved - do not use\n11 : Reserved - do not use\n12 : CHAR_TO = Character Timeout\n13 : Reserved - do not use\n14 : Reserved - do not use\n15 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_IIR ) </loc>
//      <o.3..0> IID
//        <0=> 0: MODEM = Modem status
//        <1=> 1: HAVE_NO_INT = No interrupt pending
//        <2=> 2: THR_EMPTY = THR empty
//        <3=> 3: NOT_USED = Reserved values. Do not use.
//        <4=> 4: RX_AVL = Received data available
//        <5=> 5: NOT_USED = Reserved values. Do not use.
//        <6=> 6: LINE_AVL = Receiver line status
//        <7=> 7: BUSY_DET = Busy detect
//        <8=> 8: NOT_USED = Reserved values. Do not use.
//        <9=> 9: NOT_USED = Reserved values. Do not use.
//        <10=> 10: NOT_USED = Reserved values. Do not use.
//        <11=> 11: NOT_USED = Reserved values. Do not use.
//        <12=> 12: CHAR_TO = Character Timeout
//        <13=> 13: NOT_USED = Reserved values. Do not use.
//        <14=> 14: NOT_USED = Reserved values. Do not use.
//        <15=> 15: NOT_USED = Reserved values. Do not use.
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART_IIR_FIFOSE  ----------------------------------
// SVD Line: 16777

//  <item> SFDITEM_FIELD__UART_IIR_FIFOSE
//    <name> FIFOSE </name>
//    <r> 
//    <i> [Bits 7..6] RO (@ 0x40100708) \nFIFOs Enabled\n0 : NOT_USED = Reserved values. Do not use.\n1 : Reserved - do not use\n2 : Reserved - do not use\n3 : ENABLE = FIFOs is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_IIR ) </loc>
//      <o.7..6> FIFOSE
//        <0=> 0: DISABLE = FIFOs is disabled
//        <1=> 1: NOT_USED = Reserved values. Do not use.
//        <2=> 2: NOT_USED = Reserved values. Do not use.
//        <3=> 3: ENABLE = FIFOs is enabled
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART_IIR  ------------------------------------
// SVD Line: 16718

//  <rtree> SFDITEM_REG__UART_IIR
//    <name> IIR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100708) INTERRUPT IDENTIFICATION </i>
//    <loc> ( (unsigned int)((UART_IIR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__UART_IIR_IID </item>
//    <item> SFDITEM_FIELD__UART_IIR_FIFOSE </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART_FCR  --------------------------------
// SVD Line: 16803

unsigned int UART_FCR __AT (0x40100708);



// -------------------------------  Field Item: UART_FCR_FIFOE  -----------------------------------
// SVD Line: 16814

//  <item> SFDITEM_FIELD__UART_FCR_FIFOE
//    <name> FIFOE </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100708) \nFIFO Enabled\n0 : DISABLE = Disable FIFOs\n1 : ENABLE = Enable FIFOs </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_FCR ) </loc>
//      <o.0..0> FIFOE
//        <0=> 0: DISABLE = Disable FIFOs
//        <1=> 1: ENABLE = Enable FIFOs
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART_FCR_RFIFOR  ----------------------------------
// SVD Line: 16832

//  <item> SFDITEM_FIELD__UART_FCR_RFIFOR
//    <name> RFIFOR </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100708) \nRx FIFO Reset\n0 : NO_EFFECT = No effect\n1 : RESET = Reset </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_FCR ) </loc>
//      <o.1..1> RFIFOR
//        <0=> 0: NO_EFFECT = No effect
//        <1=> 1: RESET = Reset
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: UART_FCR_XFIFOR  ----------------------------------
// SVD Line: 16850

//  <item> SFDITEM_FIELD__UART_FCR_XFIFOR
//    <name> XFIFOR </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100708) \nTx FIFO Reset\n0 : NO_EFFECT = No effect\n1 : RESET = Reset </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_FCR ) </loc>
//      <o.2..2> XFIFOR
//        <0=> 0: NO_EFFECT = No effect
//        <1=> 1: RESET = Reset
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_FCR_DMAM  -----------------------------------
// SVD Line: 16868

//  <item> SFDITEM_FIELD__UART_FCR_DMAM
//    <name> DMAM </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100708) \nDMA Mode\n0 : MODE0 = Mode0\n1 : MODE1 = Mode1 </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_FCR ) </loc>
//      <o.3..3> DMAM
//        <0=> 0: MODE0 = Mode0
//        <1=> 1: MODE1 = Mode1
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_FCR_TET  ------------------------------------
// SVD Line: 16886

//  <item> SFDITEM_FIELD__UART_FCR_TET
//    <name> TET </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40100708) \nTX Empty Trigger Level\n0 : EMPTY = FIFO Empty\n1 : 2xCHAR = 2xCHAR in FIFO\n2 : 1/4 = 1/4 full\n3 : 1/2 = 1/2 full </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_FCR ) </loc>
//      <o.5..4> TET
//        <0=> 0: EMPTY = FIFO Empty
//        <1=> 1: 2xCHAR = 2xCHAR in FIFO
//        <2=> 2: 1/4 = 1/4 full
//        <3=> 3: 1/2 = 1/2 full
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_FCR_RCVR  -----------------------------------
// SVD Line: 16914

//  <item> SFDITEM_FIELD__UART_FCR_RCVR
//    <name> RCVR </name>
//    <rw> 
//    <i> [Bits 7..6] RW (@ 0x40100708) \nRx Trigger Level\n0 : 1xCHAR = 1xCHAR in FIFO\n1 : 1/4 = 1/4 full\n2 : 1/2 = 1/2 full\n3 : 2less = 2 less than full </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_FCR ) </loc>
//      <o.7..6> RCVR
//        <0=> 0: 1xCHAR = 1xCHAR in FIFO
//        <1=> 1: 1/4 = 1/4 full
//        <2=> 2: 1/2 = 1/2 full
//        <3=> 3: 2less = 2 less than full
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART_FCR  ------------------------------------
// SVD Line: 16803

//  <rtree> SFDITEM_REG__UART_FCR
//    <name> FCR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100708) FIFO CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((UART_FCR >> 0) & 0xFFFFFFFF), ((UART_FCR = (UART_FCR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_FCR_FIFOE </item>
//    <item> SFDITEM_FIELD__UART_FCR_RFIFOR </item>
//    <item> SFDITEM_FIELD__UART_FCR_XFIFOR </item>
//    <item> SFDITEM_FIELD__UART_FCR_DMAM </item>
//    <item> SFDITEM_FIELD__UART_FCR_TET </item>
//    <item> SFDITEM_FIELD__UART_FCR_RCVR </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART_LCR  --------------------------------
// SVD Line: 16944

unsigned int UART_LCR __AT (0x4010070C);



// --------------------------------  Field Item: UART_LCR_DLS  ------------------------------------
// SVD Line: 16954

//  <item> SFDITEM_FIELD__UART_LCR_DLS
//    <name> DLS </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x4010070C) \nData Length Select\n0 : 5_BIT = Data Length is 5-bit\n1 : 6_BIT = Data Length is 6-bit\n2 : 7_BIT = Data Length is 7-bit\n3 : 8_BIT = Data Length is 8-bit </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LCR ) </loc>
//      <o.1..0> DLS
//        <0=> 0: 5_BIT = Data Length is 5-bit
//        <1=> 1: 6_BIT = Data Length is 6-bit
//        <2=> 2: 7_BIT = Data Length is 7-bit
//        <3=> 3: 8_BIT = Data Length is 8-bit
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_LCR_STOP  -----------------------------------
// SVD Line: 16983

//  <item> SFDITEM_FIELD__UART_LCR_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010070C) \nNumber of Stop Bits\n0 : 1_BIT = 1 stop bit\n1 : 1_5_BIT = 1.5 stop bits when DLS (LCR[1:0]) is 0, else 2 stop bit </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LCR ) </loc>
//      <o.2..2> STOP
//        <0=> 0: 1_BIT = 1 stop bit
//        <1=> 1: 1_5_BIT = 1.5 stop bits when DLS (LCR[1:0]) is 0, else 2 stop bit
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_LCR_PEN  ------------------------------------
// SVD Line: 17002

//  <item> SFDITEM_FIELD__UART_LCR_PEN
//    <name> PEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4010070C) \nParity Enable\n0 : DISABLE = Disable parity\n1 : ENABLE = Enable parity </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LCR ) </loc>
//      <o.3..3> PEN
//        <0=> 0: DISABLE = Disable parity
//        <1=> 1: ENABLE = Enable parity
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_LCR_EPS  ------------------------------------
// SVD Line: 17021

//  <item> SFDITEM_FIELD__UART_LCR_EPS
//    <name> EPS </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x4010070C) \nEven Parity Select\n0 : ODD = Odd parity\n1 : EVEN = Even parity </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LCR ) </loc>
//      <o.4..4> EPS
//        <0=> 0: ODD = Odd parity
//        <1=> 1: EVEN = Even parity
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_LCR_STP  ------------------------------------
// SVD Line: 17040

//  <item> SFDITEM_FIELD__UART_LCR_STP
//    <name> STP </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x4010070C) \nStick Parity\n0 : DISABLE = Disable stick parity\n1 : ENABLE = Enable stick parity </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LCR ) </loc>
//      <o.5..5> STP
//        <0=> 0: DISABLE = Disable stick parity
//        <1=> 1: ENABLE = Enable stick parity
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: UART_LCR_BC  ------------------------------------
// SVD Line: 17059

//  <item> SFDITEM_FIELD__UART_LCR_BC
//    <name> BC </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x4010070C) \nBreak Control Bit\n0 : DISABLE = Disable break control\n1 : ENABLE = Enable break control </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LCR ) </loc>
//      <o.6..6> BC
//        <0=> 0: DISABLE = Disable break control
//        <1=> 1: ENABLE = Enable break control
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_LCR_DLAB  -----------------------------------
// SVD Line: 17078

//  <item> SFDITEM_FIELD__UART_LCR_DLAB
//    <name> DLAB </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x4010070C) \nDivisor Latch Access Bit\n0 : DISABLE = Disable divisor latch access\n1 : ENABLE = Enable divisor latch access </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LCR ) </loc>
//      <o.7..7> DLAB
//        <0=> 0: DISABLE = Disable divisor latch access
//        <1=> 1: ENABLE = Enable divisor latch access
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART_LCR  ------------------------------------
// SVD Line: 16944

//  <rtree> SFDITEM_REG__UART_LCR
//    <name> LCR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010070C) LINE CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((UART_LCR >> 0) & 0xFFFFFFFF), ((UART_LCR = (UART_LCR & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_LCR_DLS </item>
//    <item> SFDITEM_FIELD__UART_LCR_STOP </item>
//    <item> SFDITEM_FIELD__UART_LCR_PEN </item>
//    <item> SFDITEM_FIELD__UART_LCR_EPS </item>
//    <item> SFDITEM_FIELD__UART_LCR_STP </item>
//    <item> SFDITEM_FIELD__UART_LCR_BC </item>
//    <item> SFDITEM_FIELD__UART_LCR_DLAB </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART_LSR  --------------------------------
// SVD Line: 17099

unsigned int UART_LSR __AT (0x40100714);



// ---------------------------------  Field Item: UART_LSR_DR  ------------------------------------
// SVD Line: 17109

//  <item> SFDITEM_FIELD__UART_LSR_DR
//    <name> DR </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40100714) \nData Ready Bit\n0 : NOT_READY = No data ready\n1 : READY = Data ready </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LSR ) </loc>
//      <o.0..0> DR
//        <0=> 0: NOT_READY = No data ready
//        <1=> 1: READY = Data ready
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: UART_LSR_OE  ------------------------------------
// SVD Line: 17128

//  <item> SFDITEM_FIELD__UART_LSR_OE
//    <name> OE </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100714) \nOverrun Error bit\n0 : NO_ERR = No oerrun error\n1 : ERR = Overrun error </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LSR ) </loc>
//      <o.1..1> OE
//        <0=> 0: NO_ERR = No oerrun error
//        <1=> 1: ERR = Overrun error
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: UART_LSR_PE  ------------------------------------
// SVD Line: 17147

//  <item> SFDITEM_FIELD__UART_LSR_PE
//    <name> PE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40100714) \nParity Error bit\n0 : NO_ERR = No parity error\n1 : ERR = Parity error </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LSR ) </loc>
//      <o.2..2> PE
//        <0=> 0: NO_ERR = No parity error
//        <1=> 1: ERR = Parity error
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: UART_LSR_FE  ------------------------------------
// SVD Line: 17166

//  <item> SFDITEM_FIELD__UART_LSR_FE
//    <name> FE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40100714) \nFraming Error bit\n0 : NO_ERR = No framing error\n1 : ERR = framing error occrred </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LSR ) </loc>
//      <o.3..3> FE
//        <0=> 0: NO_ERR = No framing error
//        <1=> 1: ERR = framing error occrred
//    </combo>
//  </item>
//  


// ---------------------------------  Field Item: UART_LSR_BI  ------------------------------------
// SVD Line: 17185

//  <item> SFDITEM_FIELD__UART_LSR_BI
//    <name> BI </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40100714) \nBreak Interrupt bit\n0 : NO_ERR = No break interrupt\n1 : ERR = Break interrupt occrred </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LSR ) </loc>
//      <o.4..4> BI
//        <0=> 0: NO_ERR = No break interrupt
//        <1=> 1: ERR = Break interrupt occrred
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_LSR_THRE  -----------------------------------
// SVD Line: 17204

//  <item> SFDITEM_FIELD__UART_LSR_THRE
//    <name> THRE </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40100714) \nTransmit Holding Register Empty bit\n0 : NOT_EMPTY = Transmit Holding Register is not empty\n1 : EMPTY = Transmit Holding Register is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LSR ) </loc>
//      <o.5..5> THRE
//        <0=> 0: NOT_EMPTY = Transmit Holding Register is not empty
//        <1=> 1: EMPTY = Transmit Holding Register is empty
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_LSR_TEMT  -----------------------------------
// SVD Line: 17223

//  <item> SFDITEM_FIELD__UART_LSR_TEMT
//    <name> TEMT </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40100714) \nTransmitter Empty Bit\n0 : NOT_EMPTY = No transmitter empty\n1 : EMPTY = Transmitter empty </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LSR ) </loc>
//      <o.6..6> TEMT
//        <0=> 0: NOT_EMPTY = No transmitter empty
//        <1=> 1: EMPTY = Transmitter empty
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_LSR_RFE  ------------------------------------
// SVD Line: 17242

//  <item> SFDITEM_FIELD__UART_LSR_RFE
//    <name> RFE </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40100714) \nReceiver FIFO Error\n0 : NO_ERR = No receiver FIFO error\n1 : ERR = Receiver FIFO error occrred </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_LSR ) </loc>
//      <o.7..7> RFE
//        <0=> 0: NO_ERR = No receiver FIFO error
//        <1=> 1: ERR = Receiver FIFO error occrred
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART_LSR  ------------------------------------
// SVD Line: 17099

//  <rtree> SFDITEM_REG__UART_LSR
//    <name> LSR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100714) LINE STATUS REGISTER </i>
//    <loc> ( (unsigned int)((UART_LSR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__UART_LSR_DR </item>
//    <item> SFDITEM_FIELD__UART_LSR_OE </item>
//    <item> SFDITEM_FIELD__UART_LSR_PE </item>
//    <item> SFDITEM_FIELD__UART_LSR_FE </item>
//    <item> SFDITEM_FIELD__UART_LSR_BI </item>
//    <item> SFDITEM_FIELD__UART_LSR_THRE </item>
//    <item> SFDITEM_FIELD__UART_LSR_TEMT </item>
//    <item> SFDITEM_FIELD__UART_LSR_RFE </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART_USR  --------------------------------
// SVD Line: 17263

unsigned int UART_USR __AT (0x4010077C);



// --------------------------------  Field Item: UART_USR_BUSY  -----------------------------------
// SVD Line: 17273

//  <item> SFDITEM_FIELD__UART_USR_BUSY
//    <name> BUSY </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x4010077C) \nUART Busy\n0 : IDLE = UART idle or inactive\n1 : BUSY = UART is busy </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_USR ) </loc>
//      <o.0..0> BUSY
//        <0=> 0: IDLE = UART idle or inactive
//        <1=> 1: BUSY = UART is busy
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_USR_TFNF  -----------------------------------
// SVD Line: 17292

//  <item> SFDITEM_FIELD__UART_USR_TFNF
//    <name> TFNF </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x4010077C) \nTransmit FIFO Not Full\n0 : FULL = Transmit FIFO is full\n1 : NOT_FULL = Transmit FIFO is not full </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_USR ) </loc>
//      <o.1..1> TFNF
//        <0=> 0: FULL = Transmit FIFO is full
//        <1=> 1: NOT_FULL = Transmit FIFO is not full
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_USR_TFE  ------------------------------------
// SVD Line: 17311

//  <item> SFDITEM_FIELD__UART_USR_TFE
//    <name> TFE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x4010077C) \nTransmit FIFO Empty\n0 : NOT_EMPTY = Transmit FIFO is not empty\n1 : EMPTY = Transmit FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_USR ) </loc>
//      <o.2..2> TFE
//        <0=> 0: NOT_EMPTY = Transmit FIFO is not empty
//        <1=> 1: EMPTY = Transmit FIFO is empty
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_USR_RFNE  -----------------------------------
// SVD Line: 17330

//  <item> SFDITEM_FIELD__UART_USR_RFNE
//    <name> RFNE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4010077C) \nReceive FIFO Not Empty\n0 : EMPTY = Receive FIFO is empty\n1 : NOT_EMPTY = Receive FIFO is not empty </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_USR ) </loc>
//      <o.3..3> RFNE
//        <0=> 0: EMPTY = Receive FIFO is empty
//        <1=> 1: NOT_EMPTY = Receive FIFO is not empty
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_USR_RFF  ------------------------------------
// SVD Line: 17349

//  <item> SFDITEM_FIELD__UART_USR_RFF
//    <name> RFF </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x4010077C) \nReceive FIFO Full\n0 : NOT_FULL = Receive FIFO not full\n1 : FULL = Receive FIFO Full </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_USR ) </loc>
//      <o.4..4> RFF
//        <0=> 0: NOT_FULL = Receive FIFO not full
//        <1=> 1: FULL = Receive FIFO Full
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART_USR  ------------------------------------
// SVD Line: 17263

//  <rtree> SFDITEM_REG__UART_USR
//    <name> USR </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4010077C) UART Status Register </i>
//    <loc> ( (unsigned int)((UART_USR >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__UART_USR_BUSY </item>
//    <item> SFDITEM_FIELD__UART_USR_TFNF </item>
//    <item> SFDITEM_FIELD__UART_USR_TFE </item>
//    <item> SFDITEM_FIELD__UART_USR_RFNE </item>
//    <item> SFDITEM_FIELD__UART_USR_RFF </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: UART_TFL  --------------------------------
// SVD Line: 17370

unsigned int UART_TFL __AT (0x40100780);



// ---------------------------------  Register Item: UART_TFL  ------------------------------------
// SVD Line: 17370

//  <item> SFDITEM_REG__UART_TFL
//    <name> TFL </name>
//    <i> [Bits 31..0] RO (@ 0x40100780) UART TRANSMIT FIFO LEVEL </i>
//    <edit> 
//      <loc> ( (unsigned int)((UART_TFL >> 0) & 0xFFFFFFFF), ((UART_TFL = (UART_TFL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: UART_RFL  --------------------------------
// SVD Line: 17380

unsigned int UART_RFL __AT (0x40100784);



// ---------------------------------  Register Item: UART_RFL  ------------------------------------
// SVD Line: 17380

//  <item> SFDITEM_REG__UART_RFL
//    <name> RFL </name>
//    <i> [Bits 31..0] RO (@ 0x40100784) UART RECEIVE FIFO LEVEL </i>
//    <edit> 
//      <loc> ( (unsigned int)((UART_RFL >> 0) & 0xFFFFFFFF), ((UART_RFL = (UART_RFL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: UART_SRR  --------------------------------
// SVD Line: 17390

unsigned int UART_SRR __AT (0x40100788);



// ---------------------------------  Field Item: UART_SRR_UR  ------------------------------------
// SVD Line: 17400

//  <item> SFDITEM_FIELD__UART_SRR_UR
//    <name> UR </name>
//    <w> 
//    <i> [Bit 0] WO (@ 0x40100788) \nUART Reset\n0 : NO_EFFECT = No effect\n1 : RESET = Reset </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_SRR ) </loc>
//      <o.0..0> UR
//        <0=> 0: NO_EFFECT = No effect
//        <1=> 1: RESET = Reset
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_SRR_RFR  ------------------------------------
// SVD Line: 17419

//  <item> SFDITEM_FIELD__UART_SRR_RFR
//    <name> RFR </name>
//    <w> 
//    <i> [Bit 1] WO (@ 0x40100788) \nRCVR FIFO Reset\n0 : NO_EFFECT = No effect\n1 : RESET = Reset </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_SRR ) </loc>
//      <o.1..1> RFR
//        <0=> 0: NO_EFFECT = No effect
//        <1=> 1: RESET = Reset
//    </combo>
//  </item>
//  


// --------------------------------  Field Item: UART_SRR_XFR  ------------------------------------
// SVD Line: 17438

//  <item> SFDITEM_FIELD__UART_SRR_XFR
//    <name> XFR </name>
//    <w> 
//    <i> [Bit 2] WO (@ 0x40100788) \nXMIT FIFO Reset\n0 : NO_EFFECT = No effect\n1 : RESET = Reset </i>
//    <combo> 
//      <loc> ( (unsigned int) UART_SRR ) </loc>
//      <o.2..2> XFR
//        <0=> 0: NO_EFFECT = No effect
//        <1=> 1: RESET = Reset
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: UART_SRR  ------------------------------------
// SVD Line: 17390

//  <rtree> SFDITEM_REG__UART_SRR
//    <name> SRR </name>
//    <w> 
//    <i> [Bits 31..0] WO (@ 0x40100788) UART SOFTWARE RESET REGISTER </i>
//    <loc> ( (unsigned int)((UART_SRR >> 0) & 0xFFFFFFFF), ((UART_SRR = (UART_SRR & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__UART_SRR_UR </item>
//    <item> SFDITEM_FIELD__UART_SRR_RFR </item>
//    <item> SFDITEM_FIELD__UART_SRR_XFR </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: UART  -------------------------------------
// SVD Line: 16540

//  <view> UART
//    <name> UART </name>
//    <item> SFDITEM_REG__UART_RBR </item>
//    <item> SFDITEM_REG__UART_THR </item>
//    <item> SFDITEM_REG__UART_DLL </item>
//    <item> SFDITEM_REG__UART_DLH </item>
//    <item> SFDITEM_REG__UART_IER </item>
//    <item> SFDITEM_REG__UART_IIR </item>
//    <item> SFDITEM_REG__UART_FCR </item>
//    <item> SFDITEM_REG__UART_LCR </item>
//    <item> SFDITEM_REG__UART_LSR </item>
//    <item> SFDITEM_REG__UART_USR </item>
//    <item> SFDITEM_REG__UART_TFL </item>
//    <item> SFDITEM_REG__UART_RFL </item>
//    <item> SFDITEM_REG__UART_SRR </item>
//  </view>
//  


// ---------------------------  Register Item Address: TACHO0_CTRL  -------------------------------
// SVD Line: 17489

unsigned int TACHO0_CTRL __AT (0x40100900);



// -------------------------------  Field Item: TACHO0_CTRL_EN  -----------------------------------
// SVD Line: 17499

//  <item> SFDITEM_FIELD__TACHO0_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100900) \nEnable Tachometer Controller\n0 : DISABLE = Disable tachometer controller\n1 : ENABLE = Enabled tachometer controller </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable tachometer controller
//        <1=> 1: ENABLE = Enabled tachometer controller
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO0_CTRL_FILTEREN  --------------------------------
// SVD Line: 17518

//  <item> SFDITEM_FIELD__TACHO0_CTRL_FILTEREN
//    <name> FILTEREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100900) \nEnable Filter of Tachometer\n0 : DISABLE = Disabled filter\n1 : ENABLE = Enabled filter </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_CTRL ) </loc>
//      <o.1..1> FILTEREN
//        <0=> 0: DISABLE = Disabled filter
//        <1=> 1: ENABLE = Enabled filter
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO0_CTRL_SELEDGE  --------------------------------
// SVD Line: 17537

//  <item> SFDITEM_FIELD__TACHO0_CTRL_SELEDGE
//    <name> SELEDGE </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x40100900) \nSelect Edges of Tachometer\n0 : x2 = x2 edges (1/2 TACH period)\n1 : x3 = x3 edges (1/2 TACH period)\n2 : x5 = x5 edges (2 TACH period)\n3 : x9 = x9 edges (4 TACH period) </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_CTRL ) </loc>
//      <o.3..2> SELEDGE
//        <0=> 0: x2 = x2 edges (1/2 TACH period)
//        <1=> 1: x3 = x3 edges (1/2 TACH period)
//        <2=> 2: x5 = x5 edges (2 TACH period)
//        <3=> 3: x9 = x9 edges (4 TACH period)
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO0_CTRL_READMODE  --------------------------------
// SVD Line: 17566

//  <item> SFDITEM_FIELD__TACHO0_CTRL_READMODE
//    <name> READMODE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100900) \nSelect Reading Mode of Tachometer\n0 : LOW_TO_HIGH = Counter is incremented when input transitions from low-to-high\n1 : RISING_EDGE = Counter is incremented on the rising edge of the 100KHz input </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_CTRL ) </loc>
//      <o.4..4> READMODE
//        <0=> 0: LOW_TO_HIGH = Counter is incremented when input transitions from low-to-high
//        <1=> 1: RISING_EDGE = Counter is incremented on the rising edge of the 100KHz input
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO0_CTRL_CNT  ----------------------------------
// SVD Line: 17585

//  <item> SFDITEM_FIELD__TACHO0_CTRL_CNT
//    <name> CNT </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x40100900) Counter of Tachometer </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO0_CTRL >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: TACHO0_CTRL  ----------------------------------
// SVD Line: 17489

//  <rtree> SFDITEM_REG__TACHO0_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100900) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((TACHO0_CTRL >> 0) & 0xFFFFFFFF), ((TACHO0_CTRL = (TACHO0_CTRL & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO0_CTRL_EN </item>
//    <item> SFDITEM_FIELD__TACHO0_CTRL_FILTEREN </item>
//    <item> SFDITEM_FIELD__TACHO0_CTRL_SELEDGE </item>
//    <item> SFDITEM_FIELD__TACHO0_CTRL_READMODE </item>
//    <item> SFDITEM_FIELD__TACHO0_CTRL_CNT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: TACHO0_STS  -------------------------------
// SVD Line: 17594

unsigned int TACHO0_STS __AT (0x40100904);



// ------------------------------  Field Item: TACHO0_STS_LIMIT  ----------------------------------
// SVD Line: 17604

//  <item> SFDITEM_FIELD__TACHO0_STS_LIMIT
//    <name> LIMIT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100904) \nLimit status of Tachometer\n0 : WITHIN = Counter is within limit\n1 : OUTSIDE = Counter is outside of limit </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_STS ) </loc>
//      <o.0..0> LIMIT
//        <0=> 0: WITHIN = Counter is within limit
//        <1=> 1: OUTSIDE = Counter is outside of limit
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO0_STS_PIN  -----------------------------------
// SVD Line: 17623

//  <item> SFDITEM_FIELD__TACHO0_STS_PIN
//    <name> PIN </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100904) \nPin Status of Tachometer\n0 : LOW = Tachometer input pin is low\n1 : HIGH = Tachometer input pin is high </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_STS ) </loc>
//      <o.1..1> PIN
//        <0=> 0: LOW = Tachometer input pin is low
//        <1=> 1: HIGH = Tachometer input pin is high
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO0_STS_CHG  -----------------------------------
// SVD Line: 17642

//  <item> SFDITEM_FIELD__TACHO0_STS_CHG
//    <name> CHG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100904) \nTachometer Input Changes Its Status\n0 : STABLE = Tachometer input status is stable\n1 : CHANGED = Tachometer input status is changed </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_STS ) </loc>
//      <o.2..2> CHG
//        <0=> 0: STABLE = Tachometer input status is stable
//        <1=> 1: CHANGED = Tachometer input status is changed
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: TACHO0_STS_CNTRDY  ---------------------------------
// SVD Line: 17661

//  <item> SFDITEM_FIELD__TACHO0_STS_CNTRDY
//    <name> CNTRDY </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100904) \nStatus of Count Ready\n0 : NOT_READY = Tachometer is not ready to count\n1 : READY = Tachometer is ready to count </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_STS ) </loc>
//      <o.3..3> CNTRDY
//        <0=> 0: NOT_READY = Tachometer is not ready to count
//        <1=> 1: READY = Tachometer is ready to count
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO0_STS_FAIL  ----------------------------------
// SVD Line: 17680

//  <item> SFDITEM_FIELD__TACHO0_STS_FAIL
//    <name> FAIL </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100904) \nStatus of Count Ready\n0 : NO_FAIL = Tachometer is not fail\n1 : FAIL = Tachometer is fail </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_STS ) </loc>
//      <o.4..4> FAIL
//        <0=> 0: NO_FAIL = Tachometer is not fail
//        <1=> 1: FAIL = Tachometer is fail
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TACHO0_STS  -----------------------------------
// SVD Line: 17594

//  <rtree> SFDITEM_REG__TACHO0_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100904) STATUS REGISTER </i>
//    <loc> ( (unsigned int)((TACHO0_STS >> 0) & 0xFFFFFFFF), ((TACHO0_STS = (TACHO0_STS & ~(0x1DUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1D) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO0_STS_LIMIT </item>
//    <item> SFDITEM_FIELD__TACHO0_STS_PIN </item>
//    <item> SFDITEM_FIELD__TACHO0_STS_CHG </item>
//    <item> SFDITEM_FIELD__TACHO0_STS_CNTRDY </item>
//    <item> SFDITEM_FIELD__TACHO0_STS_FAIL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: TACHO0_LIMITH  ------------------------------
// SVD Line: 17701

unsigned int TACHO0_LIMITH __AT (0x40100908);



// ------------------------------  Field Item: TACHO0_LIMITH_VAL  ---------------------------------
// SVD Line: 17711

//  <item> SFDITEM_FIELD__TACHO0_LIMITH_VAL
//    <name> VAL </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40100908) High limit value </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO0_LIMITH >> 0) & 0xFFFF), ((TACHO0_LIMITH = (TACHO0_LIMITH & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TACHO0_LIMITH  ---------------------------------
// SVD Line: 17701

//  <rtree> SFDITEM_REG__TACHO0_LIMITH
//    <name> LIMITH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100908) HIGH-LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((TACHO0_LIMITH >> 0) & 0xFFFFFFFF), ((TACHO0_LIMITH = (TACHO0_LIMITH & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO0_LIMITH_VAL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: TACHO0_LIMITL  ------------------------------
// SVD Line: 17720

unsigned int TACHO0_LIMITL __AT (0x4010090C);



// ------------------------------  Field Item: TACHO0_LIMITL_VAL  ---------------------------------
// SVD Line: 17730

//  <item> SFDITEM_FIELD__TACHO0_LIMITL_VAL
//    <name> VAL </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010090C) Low limit value </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO0_LIMITL >> 0) & 0xFFFF), ((TACHO0_LIMITL = (TACHO0_LIMITL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TACHO0_LIMITL  ---------------------------------
// SVD Line: 17720

//  <rtree> SFDITEM_REG__TACHO0_LIMITL
//    <name> LIMITL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010090C) LOW-LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((TACHO0_LIMITL >> 0) & 0xFFFFFFFF), ((TACHO0_LIMITL = (TACHO0_LIMITL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO0_LIMITL_VAL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TACHO0_INTEN  ------------------------------
// SVD Line: 17739

unsigned int TACHO0_INTEN __AT (0x40100910);



// ----------------------------  Field Item: TACHO0_INTEN_LIMITEN  --------------------------------
// SVD Line: 17749

//  <item> SFDITEM_FIELD__TACHO0_INTEN_LIMITEN
//    <name> LIMITEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100910) \nLimit Interrupt Enable\n0 : DISABLE = Disabled limit interrupt\n1 : ENABLE = Enabled limit interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_INTEN ) </loc>
//      <o.0..0> LIMITEN
//        <0=> 0: DISABLE = Disabled limit interrupt
//        <1=> 1: ENABLE = Enabled limit interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO0_INTEN_CNTRDYEN  -------------------------------
// SVD Line: 17768

//  <item> SFDITEM_FIELD__TACHO0_INTEN_CNTRDYEN
//    <name> CNTRDYEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100910) \nReady to count Interrupt Enable\n0 : DISABLE = Disabled ready to count interrupt\n1 : ENABLE = Enabled ready to count interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_INTEN ) </loc>
//      <o.1..1> CNTRDYEN
//        <0=> 0: DISABLE = Disabled ready to count interrupt
//        <1=> 1: ENABLE = Enabled ready to count interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO0_INTEN_CHGEN  ---------------------------------
// SVD Line: 17787

//  <item> SFDITEM_FIELD__TACHO0_INTEN_CHGEN
//    <name> CHGEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100910) \nInput Change Interrupt Enable\n0 : DISABLE = Disabled input change interrupt\n1 : ENABLE = Enabled input change interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_INTEN ) </loc>
//      <o.2..2> CHGEN
//        <0=> 0: DISABLE = Disabled input change interrupt
//        <1=> 1: ENABLE = Enabled input change interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO0_INTEN_FAILEN  --------------------------------
// SVD Line: 17806

//  <item> SFDITEM_FIELD__TACHO0_INTEN_FAILEN
//    <name> FAILEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100910) \nFail Interrupt Enable\n0 : DISABLE = Disabled fail interrupt\n1 : ENABLE = Enabled fail interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO0_INTEN ) </loc>
//      <o.3..3> FAILEN
//        <0=> 0: DISABLE = Disabled fail interrupt
//        <1=> 1: ENABLE = Enabled fail interrupt
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: TACHO0_INTEN  ----------------------------------
// SVD Line: 17739

//  <rtree> SFDITEM_REG__TACHO0_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100910) INTERRUPT ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((TACHO0_INTEN >> 0) & 0xFFFFFFFF), ((TACHO0_INTEN = (TACHO0_INTEN & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO0_INTEN_LIMITEN </item>
//    <item> SFDITEM_FIELD__TACHO0_INTEN_CNTRDYEN </item>
//    <item> SFDITEM_FIELD__TACHO0_INTEN_CHGEN </item>
//    <item> SFDITEM_FIELD__TACHO0_INTEN_FAILEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: TACHO0_THRESHOLD  ----------------------------
// SVD Line: 17827

unsigned int TACHO0_THRESHOLD __AT (0x40100914);



// -----------------------------  Register Item: TACHO0_THRESHOLD  --------------------------------
// SVD Line: 17827

//  <item> SFDITEM_REG__TACHO0_THRESHOLD
//    <name> THRESHOLD </name>
//    <i> [Bits 31..0] RW (@ 0x40100914) THRESHOLD REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TACHO0_THRESHOLD >> 0) & 0xFFFFFFFF), ((TACHO0_THRESHOLD = (TACHO0_THRESHOLD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: TACHO0_TIMEOUT  -----------------------------
// SVD Line: 17837

unsigned int TACHO0_TIMEOUT __AT (0x40100918);



// ------------------------------  Register Item: TACHO0_TIMEOUT  ---------------------------------
// SVD Line: 17837

//  <item> SFDITEM_REG__TACHO0_TIMEOUT
//    <name> TIMEOUT </name>
//    <i> [Bits 31..0] RW (@ 0x40100918) TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TACHO0_TIMEOUT >> 0) & 0xFFFFFFFF), ((TACHO0_TIMEOUT = (TACHO0_TIMEOUT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Peripheral View: TACHO0  ------------------------------------
// SVD Line: 17461

//  <view> TACHO0
//    <name> TACHO0 </name>
//    <item> SFDITEM_REG__TACHO0_CTRL </item>
//    <item> SFDITEM_REG__TACHO0_STS </item>
//    <item> SFDITEM_REG__TACHO0_LIMITH </item>
//    <item> SFDITEM_REG__TACHO0_LIMITL </item>
//    <item> SFDITEM_REG__TACHO0_INTEN </item>
//    <item> SFDITEM_REG__TACHO0_THRESHOLD </item>
//    <item> SFDITEM_REG__TACHO0_TIMEOUT </item>
//  </view>
//  


// ---------------------------  Register Item Address: TACHO1_CTRL  -------------------------------
// SVD Line: 17489

unsigned int TACHO1_CTRL __AT (0x40100920);



// -------------------------------  Field Item: TACHO1_CTRL_EN  -----------------------------------
// SVD Line: 17499

//  <item> SFDITEM_FIELD__TACHO1_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100920) \nEnable Tachometer Controller\n0 : DISABLE = Disable tachometer controller\n1 : ENABLE = Enabled tachometer controller </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable tachometer controller
//        <1=> 1: ENABLE = Enabled tachometer controller
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO1_CTRL_FILTEREN  --------------------------------
// SVD Line: 17518

//  <item> SFDITEM_FIELD__TACHO1_CTRL_FILTEREN
//    <name> FILTEREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100920) \nEnable Filter of Tachometer\n0 : DISABLE = Disabled filter\n1 : ENABLE = Enabled filter </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_CTRL ) </loc>
//      <o.1..1> FILTEREN
//        <0=> 0: DISABLE = Disabled filter
//        <1=> 1: ENABLE = Enabled filter
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO1_CTRL_SELEDGE  --------------------------------
// SVD Line: 17537

//  <item> SFDITEM_FIELD__TACHO1_CTRL_SELEDGE
//    <name> SELEDGE </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x40100920) \nSelect Edges of Tachometer\n0 : x2 = x2 edges (1/2 TACH period)\n1 : x3 = x3 edges (1/2 TACH period)\n2 : x5 = x5 edges (2 TACH period)\n3 : x9 = x9 edges (4 TACH period) </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_CTRL ) </loc>
//      <o.3..2> SELEDGE
//        <0=> 0: x2 = x2 edges (1/2 TACH period)
//        <1=> 1: x3 = x3 edges (1/2 TACH period)
//        <2=> 2: x5 = x5 edges (2 TACH period)
//        <3=> 3: x9 = x9 edges (4 TACH period)
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO1_CTRL_READMODE  --------------------------------
// SVD Line: 17566

//  <item> SFDITEM_FIELD__TACHO1_CTRL_READMODE
//    <name> READMODE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100920) \nSelect Reading Mode of Tachometer\n0 : LOW_TO_HIGH = Counter is incremented when input transitions from low-to-high\n1 : RISING_EDGE = Counter is incremented on the rising edge of the 100KHz input </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_CTRL ) </loc>
//      <o.4..4> READMODE
//        <0=> 0: LOW_TO_HIGH = Counter is incremented when input transitions from low-to-high
//        <1=> 1: RISING_EDGE = Counter is incremented on the rising edge of the 100KHz input
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO1_CTRL_CNT  ----------------------------------
// SVD Line: 17585

//  <item> SFDITEM_FIELD__TACHO1_CTRL_CNT
//    <name> CNT </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x40100920) Counter of Tachometer </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO1_CTRL >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: TACHO1_CTRL  ----------------------------------
// SVD Line: 17489

//  <rtree> SFDITEM_REG__TACHO1_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100920) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((TACHO1_CTRL >> 0) & 0xFFFFFFFF), ((TACHO1_CTRL = (TACHO1_CTRL & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO1_CTRL_EN </item>
//    <item> SFDITEM_FIELD__TACHO1_CTRL_FILTEREN </item>
//    <item> SFDITEM_FIELD__TACHO1_CTRL_SELEDGE </item>
//    <item> SFDITEM_FIELD__TACHO1_CTRL_READMODE </item>
//    <item> SFDITEM_FIELD__TACHO1_CTRL_CNT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: TACHO1_STS  -------------------------------
// SVD Line: 17594

unsigned int TACHO1_STS __AT (0x40100924);



// ------------------------------  Field Item: TACHO1_STS_LIMIT  ----------------------------------
// SVD Line: 17604

//  <item> SFDITEM_FIELD__TACHO1_STS_LIMIT
//    <name> LIMIT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100924) \nLimit status of Tachometer\n0 : WITHIN = Counter is within limit\n1 : OUTSIDE = Counter is outside of limit </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_STS ) </loc>
//      <o.0..0> LIMIT
//        <0=> 0: WITHIN = Counter is within limit
//        <1=> 1: OUTSIDE = Counter is outside of limit
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO1_STS_PIN  -----------------------------------
// SVD Line: 17623

//  <item> SFDITEM_FIELD__TACHO1_STS_PIN
//    <name> PIN </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100924) \nPin Status of Tachometer\n0 : LOW = Tachometer input pin is low\n1 : HIGH = Tachometer input pin is high </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_STS ) </loc>
//      <o.1..1> PIN
//        <0=> 0: LOW = Tachometer input pin is low
//        <1=> 1: HIGH = Tachometer input pin is high
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO1_STS_CHG  -----------------------------------
// SVD Line: 17642

//  <item> SFDITEM_FIELD__TACHO1_STS_CHG
//    <name> CHG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100924) \nTachometer Input Changes Its Status\n0 : STABLE = Tachometer input status is stable\n1 : CHANGED = Tachometer input status is changed </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_STS ) </loc>
//      <o.2..2> CHG
//        <0=> 0: STABLE = Tachometer input status is stable
//        <1=> 1: CHANGED = Tachometer input status is changed
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: TACHO1_STS_CNTRDY  ---------------------------------
// SVD Line: 17661

//  <item> SFDITEM_FIELD__TACHO1_STS_CNTRDY
//    <name> CNTRDY </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100924) \nStatus of Count Ready\n0 : NOT_READY = Tachometer is not ready to count\n1 : READY = Tachometer is ready to count </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_STS ) </loc>
//      <o.3..3> CNTRDY
//        <0=> 0: NOT_READY = Tachometer is not ready to count
//        <1=> 1: READY = Tachometer is ready to count
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO1_STS_FAIL  ----------------------------------
// SVD Line: 17680

//  <item> SFDITEM_FIELD__TACHO1_STS_FAIL
//    <name> FAIL </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100924) \nStatus of Count Ready\n0 : NO_FAIL = Tachometer is not fail\n1 : FAIL = Tachometer is fail </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_STS ) </loc>
//      <o.4..4> FAIL
//        <0=> 0: NO_FAIL = Tachometer is not fail
//        <1=> 1: FAIL = Tachometer is fail
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TACHO1_STS  -----------------------------------
// SVD Line: 17594

//  <rtree> SFDITEM_REG__TACHO1_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100924) STATUS REGISTER </i>
//    <loc> ( (unsigned int)((TACHO1_STS >> 0) & 0xFFFFFFFF), ((TACHO1_STS = (TACHO1_STS & ~(0x1DUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1D) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO1_STS_LIMIT </item>
//    <item> SFDITEM_FIELD__TACHO1_STS_PIN </item>
//    <item> SFDITEM_FIELD__TACHO1_STS_CHG </item>
//    <item> SFDITEM_FIELD__TACHO1_STS_CNTRDY </item>
//    <item> SFDITEM_FIELD__TACHO1_STS_FAIL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: TACHO1_LIMITH  ------------------------------
// SVD Line: 17701

unsigned int TACHO1_LIMITH __AT (0x40100928);



// ------------------------------  Field Item: TACHO1_LIMITH_VAL  ---------------------------------
// SVD Line: 17711

//  <item> SFDITEM_FIELD__TACHO1_LIMITH_VAL
//    <name> VAL </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40100928) High limit value </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO1_LIMITH >> 0) & 0xFFFF), ((TACHO1_LIMITH = (TACHO1_LIMITH & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TACHO1_LIMITH  ---------------------------------
// SVD Line: 17701

//  <rtree> SFDITEM_REG__TACHO1_LIMITH
//    <name> LIMITH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100928) HIGH-LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((TACHO1_LIMITH >> 0) & 0xFFFFFFFF), ((TACHO1_LIMITH = (TACHO1_LIMITH & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO1_LIMITH_VAL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: TACHO1_LIMITL  ------------------------------
// SVD Line: 17720

unsigned int TACHO1_LIMITL __AT (0x4010092C);



// ------------------------------  Field Item: TACHO1_LIMITL_VAL  ---------------------------------
// SVD Line: 17730

//  <item> SFDITEM_FIELD__TACHO1_LIMITL_VAL
//    <name> VAL </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010092C) Low limit value </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO1_LIMITL >> 0) & 0xFFFF), ((TACHO1_LIMITL = (TACHO1_LIMITL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TACHO1_LIMITL  ---------------------------------
// SVD Line: 17720

//  <rtree> SFDITEM_REG__TACHO1_LIMITL
//    <name> LIMITL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010092C) LOW-LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((TACHO1_LIMITL >> 0) & 0xFFFFFFFF), ((TACHO1_LIMITL = (TACHO1_LIMITL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO1_LIMITL_VAL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TACHO1_INTEN  ------------------------------
// SVD Line: 17739

unsigned int TACHO1_INTEN __AT (0x40100930);



// ----------------------------  Field Item: TACHO1_INTEN_LIMITEN  --------------------------------
// SVD Line: 17749

//  <item> SFDITEM_FIELD__TACHO1_INTEN_LIMITEN
//    <name> LIMITEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100930) \nLimit Interrupt Enable\n0 : DISABLE = Disabled limit interrupt\n1 : ENABLE = Enabled limit interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_INTEN ) </loc>
//      <o.0..0> LIMITEN
//        <0=> 0: DISABLE = Disabled limit interrupt
//        <1=> 1: ENABLE = Enabled limit interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO1_INTEN_CNTRDYEN  -------------------------------
// SVD Line: 17768

//  <item> SFDITEM_FIELD__TACHO1_INTEN_CNTRDYEN
//    <name> CNTRDYEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100930) \nReady to count Interrupt Enable\n0 : DISABLE = Disabled ready to count interrupt\n1 : ENABLE = Enabled ready to count interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_INTEN ) </loc>
//      <o.1..1> CNTRDYEN
//        <0=> 0: DISABLE = Disabled ready to count interrupt
//        <1=> 1: ENABLE = Enabled ready to count interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO1_INTEN_CHGEN  ---------------------------------
// SVD Line: 17787

//  <item> SFDITEM_FIELD__TACHO1_INTEN_CHGEN
//    <name> CHGEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100930) \nInput Change Interrupt Enable\n0 : DISABLE = Disabled input change interrupt\n1 : ENABLE = Enabled input change interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_INTEN ) </loc>
//      <o.2..2> CHGEN
//        <0=> 0: DISABLE = Disabled input change interrupt
//        <1=> 1: ENABLE = Enabled input change interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO1_INTEN_FAILEN  --------------------------------
// SVD Line: 17806

//  <item> SFDITEM_FIELD__TACHO1_INTEN_FAILEN
//    <name> FAILEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100930) \nFail Interrupt Enable\n0 : DISABLE = Disabled fail interrupt\n1 : ENABLE = Enabled fail interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO1_INTEN ) </loc>
//      <o.3..3> FAILEN
//        <0=> 0: DISABLE = Disabled fail interrupt
//        <1=> 1: ENABLE = Enabled fail interrupt
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: TACHO1_INTEN  ----------------------------------
// SVD Line: 17739

//  <rtree> SFDITEM_REG__TACHO1_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100930) INTERRUPT ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((TACHO1_INTEN >> 0) & 0xFFFFFFFF), ((TACHO1_INTEN = (TACHO1_INTEN & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO1_INTEN_LIMITEN </item>
//    <item> SFDITEM_FIELD__TACHO1_INTEN_CNTRDYEN </item>
//    <item> SFDITEM_FIELD__TACHO1_INTEN_CHGEN </item>
//    <item> SFDITEM_FIELD__TACHO1_INTEN_FAILEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: TACHO1_THRESHOLD  ----------------------------
// SVD Line: 17827

unsigned int TACHO1_THRESHOLD __AT (0x40100934);



// -----------------------------  Register Item: TACHO1_THRESHOLD  --------------------------------
// SVD Line: 17827

//  <item> SFDITEM_REG__TACHO1_THRESHOLD
//    <name> THRESHOLD </name>
//    <i> [Bits 31..0] RW (@ 0x40100934) THRESHOLD REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TACHO1_THRESHOLD >> 0) & 0xFFFFFFFF), ((TACHO1_THRESHOLD = (TACHO1_THRESHOLD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: TACHO1_TIMEOUT  -----------------------------
// SVD Line: 17837

unsigned int TACHO1_TIMEOUT __AT (0x40100938);



// ------------------------------  Register Item: TACHO1_TIMEOUT  ---------------------------------
// SVD Line: 17837

//  <item> SFDITEM_REG__TACHO1_TIMEOUT
//    <name> TIMEOUT </name>
//    <i> [Bits 31..0] RW (@ 0x40100938) TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TACHO1_TIMEOUT >> 0) & 0xFFFFFFFF), ((TACHO1_TIMEOUT = (TACHO1_TIMEOUT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Peripheral View: TACHO1  ------------------------------------
// SVD Line: 17848

//  <view> TACHO1
//    <name> TACHO1 </name>
//    <item> SFDITEM_REG__TACHO1_CTRL </item>
//    <item> SFDITEM_REG__TACHO1_STS </item>
//    <item> SFDITEM_REG__TACHO1_LIMITH </item>
//    <item> SFDITEM_REG__TACHO1_LIMITL </item>
//    <item> SFDITEM_REG__TACHO1_INTEN </item>
//    <item> SFDITEM_REG__TACHO1_THRESHOLD </item>
//    <item> SFDITEM_REG__TACHO1_TIMEOUT </item>
//  </view>
//  


// ---------------------------  Register Item Address: TACHO2_CTRL  -------------------------------
// SVD Line: 17489

unsigned int TACHO2_CTRL __AT (0x40100940);



// -------------------------------  Field Item: TACHO2_CTRL_EN  -----------------------------------
// SVD Line: 17499

//  <item> SFDITEM_FIELD__TACHO2_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100940) \nEnable Tachometer Controller\n0 : DISABLE = Disable tachometer controller\n1 : ENABLE = Enabled tachometer controller </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable tachometer controller
//        <1=> 1: ENABLE = Enabled tachometer controller
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO2_CTRL_FILTEREN  --------------------------------
// SVD Line: 17518

//  <item> SFDITEM_FIELD__TACHO2_CTRL_FILTEREN
//    <name> FILTEREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100940) \nEnable Filter of Tachometer\n0 : DISABLE = Disabled filter\n1 : ENABLE = Enabled filter </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_CTRL ) </loc>
//      <o.1..1> FILTEREN
//        <0=> 0: DISABLE = Disabled filter
//        <1=> 1: ENABLE = Enabled filter
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO2_CTRL_SELEDGE  --------------------------------
// SVD Line: 17537

//  <item> SFDITEM_FIELD__TACHO2_CTRL_SELEDGE
//    <name> SELEDGE </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x40100940) \nSelect Edges of Tachometer\n0 : x2 = x2 edges (1/2 TACH period)\n1 : x3 = x3 edges (1/2 TACH period)\n2 : x5 = x5 edges (2 TACH period)\n3 : x9 = x9 edges (4 TACH period) </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_CTRL ) </loc>
//      <o.3..2> SELEDGE
//        <0=> 0: x2 = x2 edges (1/2 TACH period)
//        <1=> 1: x3 = x3 edges (1/2 TACH period)
//        <2=> 2: x5 = x5 edges (2 TACH period)
//        <3=> 3: x9 = x9 edges (4 TACH period)
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO2_CTRL_READMODE  --------------------------------
// SVD Line: 17566

//  <item> SFDITEM_FIELD__TACHO2_CTRL_READMODE
//    <name> READMODE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100940) \nSelect Reading Mode of Tachometer\n0 : LOW_TO_HIGH = Counter is incremented when input transitions from low-to-high\n1 : RISING_EDGE = Counter is incremented on the rising edge of the 100KHz input </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_CTRL ) </loc>
//      <o.4..4> READMODE
//        <0=> 0: LOW_TO_HIGH = Counter is incremented when input transitions from low-to-high
//        <1=> 1: RISING_EDGE = Counter is incremented on the rising edge of the 100KHz input
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO2_CTRL_CNT  ----------------------------------
// SVD Line: 17585

//  <item> SFDITEM_FIELD__TACHO2_CTRL_CNT
//    <name> CNT </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x40100940) Counter of Tachometer </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO2_CTRL >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: TACHO2_CTRL  ----------------------------------
// SVD Line: 17489

//  <rtree> SFDITEM_REG__TACHO2_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100940) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((TACHO2_CTRL >> 0) & 0xFFFFFFFF), ((TACHO2_CTRL = (TACHO2_CTRL & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO2_CTRL_EN </item>
//    <item> SFDITEM_FIELD__TACHO2_CTRL_FILTEREN </item>
//    <item> SFDITEM_FIELD__TACHO2_CTRL_SELEDGE </item>
//    <item> SFDITEM_FIELD__TACHO2_CTRL_READMODE </item>
//    <item> SFDITEM_FIELD__TACHO2_CTRL_CNT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: TACHO2_STS  -------------------------------
// SVD Line: 17594

unsigned int TACHO2_STS __AT (0x40100944);



// ------------------------------  Field Item: TACHO2_STS_LIMIT  ----------------------------------
// SVD Line: 17604

//  <item> SFDITEM_FIELD__TACHO2_STS_LIMIT
//    <name> LIMIT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100944) \nLimit status of Tachometer\n0 : WITHIN = Counter is within limit\n1 : OUTSIDE = Counter is outside of limit </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_STS ) </loc>
//      <o.0..0> LIMIT
//        <0=> 0: WITHIN = Counter is within limit
//        <1=> 1: OUTSIDE = Counter is outside of limit
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO2_STS_PIN  -----------------------------------
// SVD Line: 17623

//  <item> SFDITEM_FIELD__TACHO2_STS_PIN
//    <name> PIN </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100944) \nPin Status of Tachometer\n0 : LOW = Tachometer input pin is low\n1 : HIGH = Tachometer input pin is high </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_STS ) </loc>
//      <o.1..1> PIN
//        <0=> 0: LOW = Tachometer input pin is low
//        <1=> 1: HIGH = Tachometer input pin is high
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO2_STS_CHG  -----------------------------------
// SVD Line: 17642

//  <item> SFDITEM_FIELD__TACHO2_STS_CHG
//    <name> CHG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100944) \nTachometer Input Changes Its Status\n0 : STABLE = Tachometer input status is stable\n1 : CHANGED = Tachometer input status is changed </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_STS ) </loc>
//      <o.2..2> CHG
//        <0=> 0: STABLE = Tachometer input status is stable
//        <1=> 1: CHANGED = Tachometer input status is changed
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: TACHO2_STS_CNTRDY  ---------------------------------
// SVD Line: 17661

//  <item> SFDITEM_FIELD__TACHO2_STS_CNTRDY
//    <name> CNTRDY </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100944) \nStatus of Count Ready\n0 : NOT_READY = Tachometer is not ready to count\n1 : READY = Tachometer is ready to count </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_STS ) </loc>
//      <o.3..3> CNTRDY
//        <0=> 0: NOT_READY = Tachometer is not ready to count
//        <1=> 1: READY = Tachometer is ready to count
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO2_STS_FAIL  ----------------------------------
// SVD Line: 17680

//  <item> SFDITEM_FIELD__TACHO2_STS_FAIL
//    <name> FAIL </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100944) \nStatus of Count Ready\n0 : NO_FAIL = Tachometer is not fail\n1 : FAIL = Tachometer is fail </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_STS ) </loc>
//      <o.4..4> FAIL
//        <0=> 0: NO_FAIL = Tachometer is not fail
//        <1=> 1: FAIL = Tachometer is fail
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TACHO2_STS  -----------------------------------
// SVD Line: 17594

//  <rtree> SFDITEM_REG__TACHO2_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100944) STATUS REGISTER </i>
//    <loc> ( (unsigned int)((TACHO2_STS >> 0) & 0xFFFFFFFF), ((TACHO2_STS = (TACHO2_STS & ~(0x1DUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1D) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO2_STS_LIMIT </item>
//    <item> SFDITEM_FIELD__TACHO2_STS_PIN </item>
//    <item> SFDITEM_FIELD__TACHO2_STS_CHG </item>
//    <item> SFDITEM_FIELD__TACHO2_STS_CNTRDY </item>
//    <item> SFDITEM_FIELD__TACHO2_STS_FAIL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: TACHO2_LIMITH  ------------------------------
// SVD Line: 17701

unsigned int TACHO2_LIMITH __AT (0x40100948);



// ------------------------------  Field Item: TACHO2_LIMITH_VAL  ---------------------------------
// SVD Line: 17711

//  <item> SFDITEM_FIELD__TACHO2_LIMITH_VAL
//    <name> VAL </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40100948) High limit value </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO2_LIMITH >> 0) & 0xFFFF), ((TACHO2_LIMITH = (TACHO2_LIMITH & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TACHO2_LIMITH  ---------------------------------
// SVD Line: 17701

//  <rtree> SFDITEM_REG__TACHO2_LIMITH
//    <name> LIMITH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100948) HIGH-LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((TACHO2_LIMITH >> 0) & 0xFFFFFFFF), ((TACHO2_LIMITH = (TACHO2_LIMITH & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO2_LIMITH_VAL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: TACHO2_LIMITL  ------------------------------
// SVD Line: 17720

unsigned int TACHO2_LIMITL __AT (0x4010094C);



// ------------------------------  Field Item: TACHO2_LIMITL_VAL  ---------------------------------
// SVD Line: 17730

//  <item> SFDITEM_FIELD__TACHO2_LIMITL_VAL
//    <name> VAL </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010094C) Low limit value </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO2_LIMITL >> 0) & 0xFFFF), ((TACHO2_LIMITL = (TACHO2_LIMITL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TACHO2_LIMITL  ---------------------------------
// SVD Line: 17720

//  <rtree> SFDITEM_REG__TACHO2_LIMITL
//    <name> LIMITL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010094C) LOW-LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((TACHO2_LIMITL >> 0) & 0xFFFFFFFF), ((TACHO2_LIMITL = (TACHO2_LIMITL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO2_LIMITL_VAL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TACHO2_INTEN  ------------------------------
// SVD Line: 17739

unsigned int TACHO2_INTEN __AT (0x40100950);



// ----------------------------  Field Item: TACHO2_INTEN_LIMITEN  --------------------------------
// SVD Line: 17749

//  <item> SFDITEM_FIELD__TACHO2_INTEN_LIMITEN
//    <name> LIMITEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100950) \nLimit Interrupt Enable\n0 : DISABLE = Disabled limit interrupt\n1 : ENABLE = Enabled limit interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_INTEN ) </loc>
//      <o.0..0> LIMITEN
//        <0=> 0: DISABLE = Disabled limit interrupt
//        <1=> 1: ENABLE = Enabled limit interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO2_INTEN_CNTRDYEN  -------------------------------
// SVD Line: 17768

//  <item> SFDITEM_FIELD__TACHO2_INTEN_CNTRDYEN
//    <name> CNTRDYEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100950) \nReady to count Interrupt Enable\n0 : DISABLE = Disabled ready to count interrupt\n1 : ENABLE = Enabled ready to count interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_INTEN ) </loc>
//      <o.1..1> CNTRDYEN
//        <0=> 0: DISABLE = Disabled ready to count interrupt
//        <1=> 1: ENABLE = Enabled ready to count interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO2_INTEN_CHGEN  ---------------------------------
// SVD Line: 17787

//  <item> SFDITEM_FIELD__TACHO2_INTEN_CHGEN
//    <name> CHGEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100950) \nInput Change Interrupt Enable\n0 : DISABLE = Disabled input change interrupt\n1 : ENABLE = Enabled input change interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_INTEN ) </loc>
//      <o.2..2> CHGEN
//        <0=> 0: DISABLE = Disabled input change interrupt
//        <1=> 1: ENABLE = Enabled input change interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO2_INTEN_FAILEN  --------------------------------
// SVD Line: 17806

//  <item> SFDITEM_FIELD__TACHO2_INTEN_FAILEN
//    <name> FAILEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100950) \nFail Interrupt Enable\n0 : DISABLE = Disabled fail interrupt\n1 : ENABLE = Enabled fail interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO2_INTEN ) </loc>
//      <o.3..3> FAILEN
//        <0=> 0: DISABLE = Disabled fail interrupt
//        <1=> 1: ENABLE = Enabled fail interrupt
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: TACHO2_INTEN  ----------------------------------
// SVD Line: 17739

//  <rtree> SFDITEM_REG__TACHO2_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100950) INTERRUPT ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((TACHO2_INTEN >> 0) & 0xFFFFFFFF), ((TACHO2_INTEN = (TACHO2_INTEN & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO2_INTEN_LIMITEN </item>
//    <item> SFDITEM_FIELD__TACHO2_INTEN_CNTRDYEN </item>
//    <item> SFDITEM_FIELD__TACHO2_INTEN_CHGEN </item>
//    <item> SFDITEM_FIELD__TACHO2_INTEN_FAILEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: TACHO2_THRESHOLD  ----------------------------
// SVD Line: 17827

unsigned int TACHO2_THRESHOLD __AT (0x40100954);



// -----------------------------  Register Item: TACHO2_THRESHOLD  --------------------------------
// SVD Line: 17827

//  <item> SFDITEM_REG__TACHO2_THRESHOLD
//    <name> THRESHOLD </name>
//    <i> [Bits 31..0] RW (@ 0x40100954) THRESHOLD REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TACHO2_THRESHOLD >> 0) & 0xFFFFFFFF), ((TACHO2_THRESHOLD = (TACHO2_THRESHOLD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: TACHO2_TIMEOUT  -----------------------------
// SVD Line: 17837

unsigned int TACHO2_TIMEOUT __AT (0x40100958);



// ------------------------------  Register Item: TACHO2_TIMEOUT  ---------------------------------
// SVD Line: 17837

//  <item> SFDITEM_REG__TACHO2_TIMEOUT
//    <name> TIMEOUT </name>
//    <i> [Bits 31..0] RW (@ 0x40100958) TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TACHO2_TIMEOUT >> 0) & 0xFFFFFFFF), ((TACHO2_TIMEOUT = (TACHO2_TIMEOUT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Peripheral View: TACHO2  ------------------------------------
// SVD Line: 17858

//  <view> TACHO2
//    <name> TACHO2 </name>
//    <item> SFDITEM_REG__TACHO2_CTRL </item>
//    <item> SFDITEM_REG__TACHO2_STS </item>
//    <item> SFDITEM_REG__TACHO2_LIMITH </item>
//    <item> SFDITEM_REG__TACHO2_LIMITL </item>
//    <item> SFDITEM_REG__TACHO2_INTEN </item>
//    <item> SFDITEM_REG__TACHO2_THRESHOLD </item>
//    <item> SFDITEM_REG__TACHO2_TIMEOUT </item>
//  </view>
//  


// ---------------------------  Register Item Address: TACHO3_CTRL  -------------------------------
// SVD Line: 17489

unsigned int TACHO3_CTRL __AT (0x40100960);



// -------------------------------  Field Item: TACHO3_CTRL_EN  -----------------------------------
// SVD Line: 17499

//  <item> SFDITEM_FIELD__TACHO3_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100960) \nEnable Tachometer Controller\n0 : DISABLE = Disable tachometer controller\n1 : ENABLE = Enabled tachometer controller </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable tachometer controller
//        <1=> 1: ENABLE = Enabled tachometer controller
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO3_CTRL_FILTEREN  --------------------------------
// SVD Line: 17518

//  <item> SFDITEM_FIELD__TACHO3_CTRL_FILTEREN
//    <name> FILTEREN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100960) \nEnable Filter of Tachometer\n0 : DISABLE = Disabled filter\n1 : ENABLE = Enabled filter </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_CTRL ) </loc>
//      <o.1..1> FILTEREN
//        <0=> 0: DISABLE = Disabled filter
//        <1=> 1: ENABLE = Enabled filter
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO3_CTRL_SELEDGE  --------------------------------
// SVD Line: 17537

//  <item> SFDITEM_FIELD__TACHO3_CTRL_SELEDGE
//    <name> SELEDGE </name>
//    <rw> 
//    <i> [Bits 3..2] RW (@ 0x40100960) \nSelect Edges of Tachometer\n0 : x2 = x2 edges (1/2 TACH period)\n1 : x3 = x3 edges (1/2 TACH period)\n2 : x5 = x5 edges (2 TACH period)\n3 : x9 = x9 edges (4 TACH period) </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_CTRL ) </loc>
//      <o.3..2> SELEDGE
//        <0=> 0: x2 = x2 edges (1/2 TACH period)
//        <1=> 1: x3 = x3 edges (1/2 TACH period)
//        <2=> 2: x5 = x5 edges (2 TACH period)
//        <3=> 3: x9 = x9 edges (4 TACH period)
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO3_CTRL_READMODE  --------------------------------
// SVD Line: 17566

//  <item> SFDITEM_FIELD__TACHO3_CTRL_READMODE
//    <name> READMODE </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100960) \nSelect Reading Mode of Tachometer\n0 : LOW_TO_HIGH = Counter is incremented when input transitions from low-to-high\n1 : RISING_EDGE = Counter is incremented on the rising edge of the 100KHz input </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_CTRL ) </loc>
//      <o.4..4> READMODE
//        <0=> 0: LOW_TO_HIGH = Counter is incremented when input transitions from low-to-high
//        <1=> 1: RISING_EDGE = Counter is incremented on the rising edge of the 100KHz input
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO3_CTRL_CNT  ----------------------------------
// SVD Line: 17585

//  <item> SFDITEM_FIELD__TACHO3_CTRL_CNT
//    <name> CNT </name>
//    <r> 
//    <i> [Bits 31..16] RO (@ 0x40100960) Counter of Tachometer </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO3_CTRL >> 16) & 0xFFFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: TACHO3_CTRL  ----------------------------------
// SVD Line: 17489

//  <rtree> SFDITEM_REG__TACHO3_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100960) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((TACHO3_CTRL >> 0) & 0xFFFFFFFF), ((TACHO3_CTRL = (TACHO3_CTRL & ~(0x1FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO3_CTRL_EN </item>
//    <item> SFDITEM_FIELD__TACHO3_CTRL_FILTEREN </item>
//    <item> SFDITEM_FIELD__TACHO3_CTRL_SELEDGE </item>
//    <item> SFDITEM_FIELD__TACHO3_CTRL_READMODE </item>
//    <item> SFDITEM_FIELD__TACHO3_CTRL_CNT </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: TACHO3_STS  -------------------------------
// SVD Line: 17594

unsigned int TACHO3_STS __AT (0x40100964);



// ------------------------------  Field Item: TACHO3_STS_LIMIT  ----------------------------------
// SVD Line: 17604

//  <item> SFDITEM_FIELD__TACHO3_STS_LIMIT
//    <name> LIMIT </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100964) \nLimit status of Tachometer\n0 : WITHIN = Counter is within limit\n1 : OUTSIDE = Counter is outside of limit </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_STS ) </loc>
//      <o.0..0> LIMIT
//        <0=> 0: WITHIN = Counter is within limit
//        <1=> 1: OUTSIDE = Counter is outside of limit
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO3_STS_PIN  -----------------------------------
// SVD Line: 17623

//  <item> SFDITEM_FIELD__TACHO3_STS_PIN
//    <name> PIN </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40100964) \nPin Status of Tachometer\n0 : LOW = Tachometer input pin is low\n1 : HIGH = Tachometer input pin is high </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_STS ) </loc>
//      <o.1..1> PIN
//        <0=> 0: LOW = Tachometer input pin is low
//        <1=> 1: HIGH = Tachometer input pin is high
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO3_STS_CHG  -----------------------------------
// SVD Line: 17642

//  <item> SFDITEM_FIELD__TACHO3_STS_CHG
//    <name> CHG </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100964) \nTachometer Input Changes Its Status\n0 : STABLE = Tachometer input status is stable\n1 : CHANGED = Tachometer input status is changed </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_STS ) </loc>
//      <o.2..2> CHG
//        <0=> 0: STABLE = Tachometer input status is stable
//        <1=> 1: CHANGED = Tachometer input status is changed
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: TACHO3_STS_CNTRDY  ---------------------------------
// SVD Line: 17661

//  <item> SFDITEM_FIELD__TACHO3_STS_CNTRDY
//    <name> CNTRDY </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100964) \nStatus of Count Ready\n0 : NOT_READY = Tachometer is not ready to count\n1 : READY = Tachometer is ready to count </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_STS ) </loc>
//      <o.3..3> CNTRDY
//        <0=> 0: NOT_READY = Tachometer is not ready to count
//        <1=> 1: READY = Tachometer is ready to count
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TACHO3_STS_FAIL  ----------------------------------
// SVD Line: 17680

//  <item> SFDITEM_FIELD__TACHO3_STS_FAIL
//    <name> FAIL </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40100964) \nStatus of Count Ready\n0 : NO_FAIL = Tachometer is not fail\n1 : FAIL = Tachometer is fail </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_STS ) </loc>
//      <o.4..4> FAIL
//        <0=> 0: NO_FAIL = Tachometer is not fail
//        <1=> 1: FAIL = Tachometer is fail
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TACHO3_STS  -----------------------------------
// SVD Line: 17594

//  <rtree> SFDITEM_REG__TACHO3_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100964) STATUS REGISTER </i>
//    <loc> ( (unsigned int)((TACHO3_STS >> 0) & 0xFFFFFFFF), ((TACHO3_STS = (TACHO3_STS & ~(0x1DUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1D) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO3_STS_LIMIT </item>
//    <item> SFDITEM_FIELD__TACHO3_STS_PIN </item>
//    <item> SFDITEM_FIELD__TACHO3_STS_CHG </item>
//    <item> SFDITEM_FIELD__TACHO3_STS_CNTRDY </item>
//    <item> SFDITEM_FIELD__TACHO3_STS_FAIL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: TACHO3_LIMITH  ------------------------------
// SVD Line: 17701

unsigned int TACHO3_LIMITH __AT (0x40100968);



// ------------------------------  Field Item: TACHO3_LIMITH_VAL  ---------------------------------
// SVD Line: 17711

//  <item> SFDITEM_FIELD__TACHO3_LIMITH_VAL
//    <name> VAL </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40100968) High limit value </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO3_LIMITH >> 0) & 0xFFFF), ((TACHO3_LIMITH = (TACHO3_LIMITH & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TACHO3_LIMITH  ---------------------------------
// SVD Line: 17701

//  <rtree> SFDITEM_REG__TACHO3_LIMITH
//    <name> LIMITH </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100968) HIGH-LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((TACHO3_LIMITH >> 0) & 0xFFFFFFFF), ((TACHO3_LIMITH = (TACHO3_LIMITH & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO3_LIMITH_VAL </item>
//  </rtree>
//  


// --------------------------  Register Item Address: TACHO3_LIMITL  ------------------------------
// SVD Line: 17720

unsigned int TACHO3_LIMITL __AT (0x4010096C);



// ------------------------------  Field Item: TACHO3_LIMITL_VAL  ---------------------------------
// SVD Line: 17730

//  <item> SFDITEM_FIELD__TACHO3_LIMITL_VAL
//    <name> VAL </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010096C) Low limit value </i>
//    <edit> 
//      <loc> ( (unsigned short)((TACHO3_LIMITL >> 0) & 0xFFFF), ((TACHO3_LIMITL = (TACHO3_LIMITL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: TACHO3_LIMITL  ---------------------------------
// SVD Line: 17720

//  <rtree> SFDITEM_REG__TACHO3_LIMITL
//    <name> LIMITL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010096C) LOW-LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((TACHO3_LIMITL >> 0) & 0xFFFFFFFF), ((TACHO3_LIMITL = (TACHO3_LIMITL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO3_LIMITL_VAL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TACHO3_INTEN  ------------------------------
// SVD Line: 17739

unsigned int TACHO3_INTEN __AT (0x40100970);



// ----------------------------  Field Item: TACHO3_INTEN_LIMITEN  --------------------------------
// SVD Line: 17749

//  <item> SFDITEM_FIELD__TACHO3_INTEN_LIMITEN
//    <name> LIMITEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100970) \nLimit Interrupt Enable\n0 : DISABLE = Disabled limit interrupt\n1 : ENABLE = Enabled limit interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_INTEN ) </loc>
//      <o.0..0> LIMITEN
//        <0=> 0: DISABLE = Disabled limit interrupt
//        <1=> 1: ENABLE = Enabled limit interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: TACHO3_INTEN_CNTRDYEN  -------------------------------
// SVD Line: 17768

//  <item> SFDITEM_FIELD__TACHO3_INTEN_CNTRDYEN
//    <name> CNTRDYEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100970) \nReady to count Interrupt Enable\n0 : DISABLE = Disabled ready to count interrupt\n1 : ENABLE = Enabled ready to count interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_INTEN ) </loc>
//      <o.1..1> CNTRDYEN
//        <0=> 0: DISABLE = Disabled ready to count interrupt
//        <1=> 1: ENABLE = Enabled ready to count interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO3_INTEN_CHGEN  ---------------------------------
// SVD Line: 17787

//  <item> SFDITEM_FIELD__TACHO3_INTEN_CHGEN
//    <name> CHGEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100970) \nInput Change Interrupt Enable\n0 : DISABLE = Disabled input change interrupt\n1 : ENABLE = Enabled input change interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_INTEN ) </loc>
//      <o.2..2> CHGEN
//        <0=> 0: DISABLE = Disabled input change interrupt
//        <1=> 1: ENABLE = Enabled input change interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: TACHO3_INTEN_FAILEN  --------------------------------
// SVD Line: 17806

//  <item> SFDITEM_FIELD__TACHO3_INTEN_FAILEN
//    <name> FAILEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100970) \nFail Interrupt Enable\n0 : DISABLE = Disabled fail interrupt\n1 : ENABLE = Enabled fail interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TACHO3_INTEN ) </loc>
//      <o.3..3> FAILEN
//        <0=> 0: DISABLE = Disabled fail interrupt
//        <1=> 1: ENABLE = Enabled fail interrupt
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: TACHO3_INTEN  ----------------------------------
// SVD Line: 17739

//  <rtree> SFDITEM_REG__TACHO3_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100970) INTERRUPT ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((TACHO3_INTEN >> 0) & 0xFFFFFFFF), ((TACHO3_INTEN = (TACHO3_INTEN & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TACHO3_INTEN_LIMITEN </item>
//    <item> SFDITEM_FIELD__TACHO3_INTEN_CNTRDYEN </item>
//    <item> SFDITEM_FIELD__TACHO3_INTEN_CHGEN </item>
//    <item> SFDITEM_FIELD__TACHO3_INTEN_FAILEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: TACHO3_THRESHOLD  ----------------------------
// SVD Line: 17827

unsigned int TACHO3_THRESHOLD __AT (0x40100974);



// -----------------------------  Register Item: TACHO3_THRESHOLD  --------------------------------
// SVD Line: 17827

//  <item> SFDITEM_REG__TACHO3_THRESHOLD
//    <name> THRESHOLD </name>
//    <i> [Bits 31..0] RW (@ 0x40100974) THRESHOLD REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TACHO3_THRESHOLD >> 0) & 0xFFFFFFFF), ((TACHO3_THRESHOLD = (TACHO3_THRESHOLD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: TACHO3_TIMEOUT  -----------------------------
// SVD Line: 17837

unsigned int TACHO3_TIMEOUT __AT (0x40100978);



// ------------------------------  Register Item: TACHO3_TIMEOUT  ---------------------------------
// SVD Line: 17837

//  <item> SFDITEM_REG__TACHO3_TIMEOUT
//    <name> TIMEOUT </name>
//    <i> [Bits 31..0] RW (@ 0x40100978) TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TACHO3_TIMEOUT >> 0) & 0xFFFFFFFF), ((TACHO3_TIMEOUT = (TACHO3_TIMEOUT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Peripheral View: TACHO3  ------------------------------------
// SVD Line: 17868

//  <view> TACHO3
//    <name> TACHO3 </name>
//    <item> SFDITEM_REG__TACHO3_CTRL </item>
//    <item> SFDITEM_REG__TACHO3_STS </item>
//    <item> SFDITEM_REG__TACHO3_LIMITH </item>
//    <item> SFDITEM_REG__TACHO3_LIMITL </item>
//    <item> SFDITEM_REG__TACHO3_INTEN </item>
//    <item> SFDITEM_REG__TACHO3_THRESHOLD </item>
//    <item> SFDITEM_REG__TACHO3_TIMEOUT </item>
//  </view>
//  


// -----------------------------  Register Item Address: WDT_CTRL  --------------------------------
// SVD Line: 17907

unsigned int WDT_CTRL __AT (0x40100980);



// ---------------------------------  Field Item: WDT_CTRL_EN  ------------------------------------
// SVD Line: 17917

//  <item> SFDITEM_FIELD__WDT_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100980) \nEnable WDT\n0 : DISABLE = Disable WDT\n1 : ENABLE = Enable WDT </i>
//    <combo> 
//      <loc> ( (unsigned int) WDT_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable WDT
//        <1=> 1: ENABLE = Enable WDT
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: WDT_CTRL_RSTEN  -----------------------------------
// SVD Line: 17936

//  <item> SFDITEM_FIELD__WDT_CTRL_RSTEN
//    <name> RSTEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40100980) \nEnable WDT to Reset System\n0 : DISABLE = Disable WDT to reset system\n1 : ENABLE = Enable WDT to reset system </i>
//    <combo> 
//      <loc> ( (unsigned int) WDT_CTRL ) </loc>
//      <o.1..1> RSTEN
//        <0=> 0: DISABLE = Disable WDT to reset system
//        <1=> 1: ENABLE = Enable WDT to reset system
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: WDT_CTRL_RELOAD  ----------------------------------
// SVD Line: 17955

//  <item> SFDITEM_FIELD__WDT_CTRL_RELOAD
//    <name> RELOAD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40100980) \nReload WDT Counter\n0 : DO_NOTHING = Do nothing\n1 : RELOAD = Reload WDT counter </i>
//    <combo> 
//      <loc> ( (unsigned int) WDT_CTRL ) </loc>
//      <o.2..2> RELOAD
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RELOAD = Reload WDT counter
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: WDT_CTRL_CLRRSTFLAG  --------------------------------
// SVD Line: 17974

//  <item> SFDITEM_FIELD__WDT_CTRL_CLRRSTFLAG
//    <name> CLRRSTFLAG </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40100980) \nClear WDT reset flag\n0 : DO_NOTHING = Do nothing\n1 : CLR = Clear WDT reset flag </i>
//    <combo> 
//      <loc> ( (unsigned int) WDT_CTRL ) </loc>
//      <o.3..3> CLRRSTFLAG
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: CLR = Clear WDT reset flag
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: WDT_CTRL  ------------------------------------
// SVD Line: 17907

//  <rtree> SFDITEM_REG__WDT_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100980) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((WDT_CTRL >> 0) & 0xFFFFFFFF), ((WDT_CTRL = (WDT_CTRL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_CTRL_EN </item>
//    <item> SFDITEM_FIELD__WDT_CTRL_RSTEN </item>
//    <item> SFDITEM_FIELD__WDT_CTRL_RELOAD </item>
//    <item> SFDITEM_FIELD__WDT_CTRL_CLRRSTFLAG </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: WDT_STS  ---------------------------------
// SVD Line: 17996

unsigned int WDT_STS __AT (0x40100984);



// -------------------------------  Field Item: WDT_STS_RSTFLAG  ----------------------------------
// SVD Line: 18006

//  <item> SFDITEM_FIELD__WDT_STS_RSTFLAG
//    <name> RSTFLAG </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40100984) \nReset Flag\n0 : NOT_OCCURRED = WDT reset is not occurred\n1 : OCCURRED = WDT reset is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) WDT_STS ) </loc>
//      <o.0..0> RSTFLAG
//        <0=> 0: NOT_OCCURRED = WDT reset is not occurred
//        <1=> 1: OCCURRED = WDT reset is occurred
//    </combo>
//  </item>
//  


// ---------------------------------  Register RTree: WDT_STS  ------------------------------------
// SVD Line: 17996

//  <rtree> SFDITEM_REG__WDT_STS
//    <name> STS </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40100984) STATUS REGISTER </i>
//    <loc> ( (unsigned int)((WDT_STS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__WDT_STS_RSTFLAG </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: WDT_CNT  ---------------------------------
// SVD Line: 18027

unsigned int WDT_CNT __AT (0x40100988);



// ---------------------------------  Register Item: WDT_CNT  -------------------------------------
// SVD Line: 18027

//  <item> SFDITEM_REG__WDT_CNT
//    <name> CNT </name>
//    <i> [Bits 31..0] RW (@ 0x40100988) INITIAL COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((WDT_CNT >> 0) & 0xFFFFFFFF), ((WDT_CNT = (WDT_CNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: WDT_DIV  ---------------------------------
// SVD Line: 18037

unsigned int WDT_DIV __AT (0x4010098C);



// ---------------------------------  Register Item: WDT_DIV  -------------------------------------
// SVD Line: 18037

//  <item> SFDITEM_REG__WDT_DIV
//    <name> DIV </name>
//    <i> [Bits 31..0] RW (@ 0x4010098C) DIVIDER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((WDT_DIV >> 0) & 0xFFFFFFFF), ((WDT_DIV = (WDT_DIV & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: WDT_INTEN  --------------------------------
// SVD Line: 18047

unsigned int WDT_INTEN __AT (0x40100990);



// -----------------------------  Field Item: WDT_INTEN_WDTINTEN  ---------------------------------
// SVD Line: 18057

//  <item> SFDITEM_FIELD__WDT_INTEN_WDTINTEN
//    <name> WDTINTEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40100990) \nEnable WDT Interrupt\n0 : DISBLE = Disable WDT interrupt\n1 : ENABLE = Enable WDT interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) WDT_INTEN ) </loc>
//      <o.0..0> WDTINTEN
//        <0=> 0: DISBLE = Disable WDT interrupt
//        <1=> 1: ENABLE = Enable WDT interrupt
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: WDT_INTEN  -----------------------------------
// SVD Line: 18047

//  <rtree> SFDITEM_REG__WDT_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40100990) INTERRUPT ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((WDT_INTEN >> 0) & 0xFFFFFFFF), ((WDT_INTEN = (WDT_INTEN & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__WDT_INTEN_WDTINTEN </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: WDT  --------------------------------------
// SVD Line: 17879

//  <view> WDT
//    <name> WDT </name>
//    <item> SFDITEM_REG__WDT_CTRL </item>
//    <item> SFDITEM_REG__WDT_STS </item>
//    <item> SFDITEM_REG__WDT_CNT </item>
//    <item> SFDITEM_REG__WDT_DIV </item>
//    <item> SFDITEM_REG__WDT_INTEN </item>
//  </view>
//  


// -----------------------------  Register Item Address: I2C0_CON  --------------------------------
// SVD Line: 18108

unsigned int I2C0_CON __AT (0x40101000);



// -------------------------------  Field Item: I2C0_CON_MATSER  ----------------------------------
// SVD Line: 18118

//  <item> SFDITEM_FIELD__I2C0_CON_MATSER
//    <name> MATSER </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101000) \nEnable/Disable Master Mode\n0 : DISABLE = Master mode is disabled\n1 : ENABLE = Master mode is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.0..0> MATSER
//        <0=> 0: DISABLE = Master mode is disabled
//        <1=> 1: ENABLE = Master mode is enabled
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C0_CON_SPEED  -----------------------------------
// SVD Line: 18137

//  <item> SFDITEM_FIELD__I2C0_CON_SPEED
//    <name> SPEED </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40101000) \nSpeed Mode\n0 : NONE = Not defined\n1 : STANDARD = Standard speed\n2 : FAST = Fast speed\n3 : HIGH = High speed </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.2..1> SPEED
//        <0=> 0: NONE = Not defined
//        <1=> 1: STANDARD = Standard speed
//        <2=> 2: FAST = Fast speed
//        <3=> 3: HIGH = High speed
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_CON_SLV10BIT  ---------------------------------
// SVD Line: 18166

//  <item> SFDITEM_FIELD__I2C0_CON_SLV10BIT
//    <name> SLV10BIT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101000) \nSlave Responds To 7-bit Or 10-bit Addresses\n0 : 7_BIT = Slave 7-bit addressing\n1 : 10_BIT = Slave 10-bit addressing </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.3..3> SLV10BIT
//        <0=> 0: 7_BIT = Slave 7-bit addressing
//        <1=> 1: 10_BIT = Slave 10-bit addressing
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_CON_MST10BIT  ---------------------------------
// SVD Line: 18185

//  <item> SFDITEM_FIELD__I2C0_CON_MST10BIT
//    <name> MST10BIT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40101000) \nMaster Is 7-bit Or 10-bit Addressing Mode\n0 : 7_BIT = Master 7-bit addressing\n1 : 10_BIT = Master 10-bit addressing </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.4..4> MST10BIT
//        <0=> 0: 7_BIT = Master 7-bit addressing
//        <1=> 1: 10_BIT = Master 10-bit addressing
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_CON_RESTREN  ----------------------------------
// SVD Line: 18204

//  <item> SFDITEM_FIELD__I2C0_CON_RESTREN
//    <name> RESTREN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40101000) \nEnable/Disable Master Restart\n0 : DISABLE = Master restart disabled\n1 : ENABLE = Master restart enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.5..5> RESTREN
//        <0=> 0: DISABLE = Master restart disabled
//        <1=> 1: ENABLE = Master restart enabled
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_CON_SLVDISABLE  --------------------------------
// SVD Line: 18223

//  <item> SFDITEM_FIELD__I2C0_CON_SLVDISABLE
//    <name> SLVDISABLE </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101000) \nEnable/Disable Slave Mode\n0 : Enable = Enable slave mode\n1 : Disable = Disable slave mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.6..6> SLVDISABLE
//        <0=> 0: Enable = Enable slave mode
//        <1=> 1: Disable = Disable slave mode
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C0_CON_STPDET  ----------------------------------
// SVD Line: 18242

//  <item> SFDITEM_FIELD__I2C0_CON_STPDET
//    <name> STPDET </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101000) \nHow Slave Issues Stop Detection Interrupt\n0 : ALWAYS = Slave issues stop detection interrupt always\n1 : ADDRESSED = Slave issues stop detection interrupt only if addressed </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.7..7> STPDET
//        <0=> 0: ALWAYS = Slave issues stop detection interrupt always
//        <1=> 1: ADDRESSED = Slave issues stop detection interrupt only if addressed
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_CON_TXEMPTYCTRL  --------------------------------
// SVD Line: 18261

//  <item> SFDITEM_FIELD__I2C0_CON_TXEMPTYCTRL
//    <name> TXEMPTYCTRL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101000) \nControls the Generation Of The Tx Empty Interrupt\n0 : DISABLE = Default behaviour of tx empty interrupt\n1 : ENABLE = Controlled generation of tx empty interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.8..8> TXEMPTYCTRL
//        <0=> 0: DISABLE = Default behaviour of tx empty interrupt
//        <1=> 1: ENABLE = Controlled generation of tx empty interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_CON_RXFULLHLDC  --------------------------------
// SVD Line: 18280

//  <item> SFDITEM_FIELD__I2C0_CON_RXFULLHLDC
//    <name> RXFULLHLDC </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40101000) \nHold the Bus When The Rx FIFO Is Full Or Not\n0 : DISABLE = Overflow when RX FIFO is full\n1 : ENABLE = Hold bus when RX FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.9..9> RXFULLHLDC
//        <0=> 0: DISABLE = Overflow when RX FIFO is full
//        <1=> 1: ENABLE = Hold bus when RX FIFO is full
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_CON_STPMSTACTIVE  -------------------------------
// SVD Line: 18299

//  <item> SFDITEM_FIELD__I2C0_CON_STPMSTACTIVE
//    <name> STPMSTACTIVE </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101000) \nHow I2c Controller Issues The Stop Detection Interrupt\n0 : DISABLE = Master issues the stop detection interrupt irrespective of whether master is active or not\n1 : ENABLE = Master issues the stop detection interrupt only when master is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.10..10> STPMSTACTIVE
//        <0=> 0: DISABLE = Master issues the stop detection interrupt irrespective of whether master is active or not
//        <1=> 1: ENABLE = Master issues the stop detection interrupt only when master is active
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_CON_BUSCLREN  ---------------------------------
// SVD Line: 18318

//  <item> SFDITEM_FIELD__I2C0_CON_BUSCLREN
//    <name> BUSCLREN </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101000) \nEnables the Bus Clear Feature\n0 : DISABLE = Bus Clear Feature is enabled\n1 : ENABLE = Bus Clear Feature is disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_CON ) </loc>
//      <o.11..11> BUSCLREN
//        <0=> 0: DISABLE = Bus Clear Feature is enabled
//        <1=> 1: ENABLE = Bus Clear Feature is disabled
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: I2C0_CON  ------------------------------------
// SVD Line: 18108

//  <rtree> SFDITEM_REG__I2C0_CON
//    <name> CON </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101000) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_CON >> 0) & 0xFFFFFFFF), ((I2C0_CON = (I2C0_CON & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_CON_MATSER </item>
//    <item> SFDITEM_FIELD__I2C0_CON_SPEED </item>
//    <item> SFDITEM_FIELD__I2C0_CON_SLV10BIT </item>
//    <item> SFDITEM_FIELD__I2C0_CON_MST10BIT </item>
//    <item> SFDITEM_FIELD__I2C0_CON_RESTREN </item>
//    <item> SFDITEM_FIELD__I2C0_CON_SLVDISABLE </item>
//    <item> SFDITEM_FIELD__I2C0_CON_STPDET </item>
//    <item> SFDITEM_FIELD__I2C0_CON_TXEMPTYCTRL </item>
//    <item> SFDITEM_FIELD__I2C0_CON_RXFULLHLDC </item>
//    <item> SFDITEM_FIELD__I2C0_CON_STPMSTACTIVE </item>
//    <item> SFDITEM_FIELD__I2C0_CON_BUSCLREN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: I2C0_TAR  --------------------------------
// SVD Line: 18339

unsigned int I2C0_TAR __AT (0x40101004);



// --------------------------------  Field Item: I2C0_TAR_TAR  ------------------------------------
// SVD Line: 18349

//  <item> SFDITEM_FIELD__I2C0_TAR_TAR
//    <name> TAR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x40101004) Target Address For Any Master Transaction </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C0_TAR >> 0) & 0x3FF), ((I2C0_TAR = (I2C0_TAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: I2C0_TAR_GCORSTR  ----------------------------------
// SVD Line: 18356

//  <item> SFDITEM_FIELD__I2C0_TAR_GCORSTR
//    <name> GCORSTR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101004) \nIndicates Whether A General Call Or Start Byte Command\n0 : GEN_CALL = General Call byte transmission\n1 : START = START byte transmission </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TAR ) </loc>
//      <o.10..10> GCORSTR
//        <0=> 0: GEN_CALL = General Call byte transmission
//        <1=> 1: START = START byte transmission
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_TAR_SPECIAL  ----------------------------------
// SVD Line: 18375

//  <item> SFDITEM_FIELD__I2C0_TAR_SPECIAL
//    <name> SPECIAL </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101004) \nIndicates Whether Software Performs A Device-id Or General Call Or Start Byte Command\n0 : DISABLE = Disables programming of GENERAL_CALL or START_BYTE transmission\n1 : ENABLE = Enables programming of GENERAL_CALL or START_BYTE transmission </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TAR ) </loc>
//      <o.11..11> SPECIAL
//        <0=> 0: DISABLE = Disables programming of GENERAL_CALL or START_BYTE transmission
//        <1=> 1: ENABLE = Enables programming of GENERAL_CALL or START_BYTE transmission
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: I2C0_TAR  ------------------------------------
// SVD Line: 18339

//  <rtree> SFDITEM_REG__I2C0_TAR
//    <name> TAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101004) TARGET ADDRESS REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_TAR >> 0) & 0xFFFFFFFF), ((I2C0_TAR = (I2C0_TAR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_TAR_TAR </item>
//    <item> SFDITEM_FIELD__I2C0_TAR_GCORSTR </item>
//    <item> SFDITEM_FIELD__I2C0_TAR_SPECIAL </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: I2C0_SAR  --------------------------------
// SVD Line: 18396

unsigned int I2C0_SAR __AT (0x40101008);



// --------------------------------  Field Item: I2C0_SAR_SAR  ------------------------------------
// SVD Line: 18406

//  <item> SFDITEM_FIELD__I2C0_SAR_SAR
//    <name> SAR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x40101008) Holds The Slave Address When The I2c Is Operating As A Slave </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C0_SAR >> 0) & 0x3FF), ((I2C0_SAR = (I2C0_SAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C0_SAR  ------------------------------------
// SVD Line: 18396

//  <rtree> SFDITEM_REG__I2C0_SAR
//    <name> SAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101008) SLAVE ADDRESS REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_SAR >> 0) & 0xFFFFFFFF), ((I2C0_SAR = (I2C0_SAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_SAR_SAR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C0_DATACMD  ------------------------------
// SVD Line: 18415

unsigned int I2C0_DATACMD __AT (0x40101010);



// ------------------------------  Field Item: I2C0_DATACMD_DATA  ---------------------------------
// SVD Line: 18425

//  <item> SFDITEM_FIELD__I2C0_DATACMD_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101010) The Data To Be Transmitted Or Received On The I2C Bus </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C0_DATACMD >> 0) & 0xFF), ((I2C0_DATACMD = (I2C0_DATACMD & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: I2C0_DATACMD_CMD  ----------------------------------
// SVD Line: 18432

//  <item> SFDITEM_FIELD__I2C0_DATACMD_CMD
//    <name> CMD </name>
//    <w> 
//    <i> [Bit 8] WO (@ 0x40101010) \nControls Whether A Read Or A Write Is Performed\n0 : WRITE = Master write command\n1 : read-only = Master read command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_DATACMD ) </loc>
//      <o.8..8> CMD
//        <0=> 0: WRITE = Master write command
//        <1=> 1: read-only = Master read command
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_DATACMD_STOP  ---------------------------------
// SVD Line: 18451

//  <item> SFDITEM_FIELD__I2C0_DATACMD_STOP
//    <name> STOP </name>
//    <w> 
//    <i> [Bit 9] WO (@ 0x40101010) \nControls Whether A Stop Is Issued After The Byte Is Sent Or Received\n0 : DISABLE = Do not issue STOP after this command\n1 : ENABLE = Issue STOP after this command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_DATACMD ) </loc>
//      <o.9..9> STOP
//        <0=> 0: DISABLE = Do not issue STOP after this command
//        <1=> 1: ENABLE = Issue STOP after this command
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_DATACMD_RESTART  --------------------------------
// SVD Line: 18470

//  <item> SFDITEM_FIELD__I2C0_DATACMD_RESTART
//    <name> RESTART </name>
//    <w> 
//    <i> [Bit 10] WO (@ 0x40101010) \nControls Whether a RESTART Is Issued Before The Byte Is Sent Or Received\n0 : DISABLE = Do not Issue RESTART before this command\n1 : ENABLE = Issue RESTART before this command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_DATACMD ) </loc>
//      <o.10..10> RESTART
//        <0=> 0: DISABLE = Do not Issue RESTART before this command
//        <1=> 1: ENABLE = Issue RESTART before this command
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_DATACMD_FIRSTDATA  -------------------------------
// SVD Line: 18489

//  <item> SFDITEM_FIELD__I2C0_DATACMD_FIRSTDATA
//    <name> FIRSTDATA </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101010) \nIndicates The First Data Byte Received After The Address Phase\n0 : INACTIVE = Non sequential data byte received\n1 : ACTIVE = Sequential data byte received </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_DATACMD ) </loc>
//      <o.11..11> FIRSTDATA
//        <0=> 0: INACTIVE = Non sequential data byte received
//        <1=> 1: ACTIVE = Sequential data byte received
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C0_DATACMD  ----------------------------------
// SVD Line: 18415

//  <rtree> SFDITEM_REG__I2C0_DATACMD
//    <name> DATACMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101010) DATA BUFFER AND COMMAND REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_DATACMD >> 0) & 0xFFFFFFFF), ((I2C0_DATACMD = (I2C0_DATACMD & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_DATACMD_DATA </item>
//    <item> SFDITEM_FIELD__I2C0_DATACMD_CMD </item>
//    <item> SFDITEM_FIELD__I2C0_DATACMD_STOP </item>
//    <item> SFDITEM_FIELD__I2C0_DATACMD_RESTART </item>
//    <item> SFDITEM_FIELD__I2C0_DATACMD_FIRSTDATA </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C0_SCLHCNT  ------------------------------
// SVD Line: 18510

unsigned int I2C0_SCLHCNT __AT (0x40101014);



// ------------------------------  Field Item: I2C0_SCLHCNT_HCNT  ---------------------------------
// SVD Line: 18520

//  <item> SFDITEM_FIELD__I2C0_SCLHCNT_HCNT
//    <name> HCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101014) Sets the SCL Clock High-period Count For Standard Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C0_SCLHCNT >> 0) & 0xFFFF), ((I2C0_SCLHCNT = (I2C0_SCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C0_SCLHCNT  ----------------------------------
// SVD Line: 18510

//  <rtree> SFDITEM_REG__I2C0_SCLHCNT
//    <name> SCLHCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101014) STANDARD SPEED I2C CLOCK SCL HIGH COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_SCLHCNT >> 0) & 0xFFFFFFFF), ((I2C0_SCLHCNT = (I2C0_SCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_SCLHCNT_HCNT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C0_SCLLCNT  ------------------------------
// SVD Line: 18529

unsigned int I2C0_SCLLCNT __AT (0x40101018);



// ------------------------------  Field Item: I2C0_SCLLCNT_LCNT  ---------------------------------
// SVD Line: 18539

//  <item> SFDITEM_FIELD__I2C0_SCLLCNT_LCNT
//    <name> LCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101018) Sets the SCL Clock Low-period Count For Standard Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C0_SCLLCNT >> 0) & 0xFFFF), ((I2C0_SCLLCNT = (I2C0_SCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C0_SCLLCNT  ----------------------------------
// SVD Line: 18529

//  <rtree> SFDITEM_REG__I2C0_SCLLCNT
//    <name> SCLLCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101018) STANDARD SPEED I2C CLOCK SCL LOW COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_SCLLCNT >> 0) & 0xFFFFFFFF), ((I2C0_SCLLCNT = (I2C0_SCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_SCLLCNT_LCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C0_FSSCLHCNT  -----------------------------
// SVD Line: 18548

unsigned int I2C0_FSSCLHCNT __AT (0x4010101C);



// -----------------------------  Field Item: I2C0_FSSCLHCNT_HCNT  --------------------------------
// SVD Line: 18558

//  <item> SFDITEM_FIELD__I2C0_FSSCLHCNT_HCNT
//    <name> HCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010101C) Sets the SCL Clock High-period Count For Fast Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C0_FSSCLHCNT >> 0) & 0xFFFF), ((I2C0_FSSCLHCNT = (I2C0_FSSCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C0_FSSCLHCNT  ---------------------------------
// SVD Line: 18548

//  <rtree> SFDITEM_REG__I2C0_FSSCLHCNT
//    <name> FSSCLHCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010101C) FAST MODE SCL HIGH COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_FSSCLHCNT >> 0) & 0xFFFFFFFF), ((I2C0_FSSCLHCNT = (I2C0_FSSCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_FSSCLHCNT_HCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C0_FSSCLLCNT  -----------------------------
// SVD Line: 18567

unsigned int I2C0_FSSCLLCNT __AT (0x40101020);



// -----------------------------  Field Item: I2C0_FSSCLLCNT_LCNT  --------------------------------
// SVD Line: 18577

//  <item> SFDITEM_FIELD__I2C0_FSSCLLCNT_LCNT
//    <name> LCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101020) Sets the SCL Clock Low-period Count For Fast Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C0_FSSCLLCNT >> 0) & 0xFFFF), ((I2C0_FSSCLLCNT = (I2C0_FSSCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C0_FSSCLLCNT  ---------------------------------
// SVD Line: 18567

//  <rtree> SFDITEM_REG__I2C0_FSSCLLCNT
//    <name> FSSCLLCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101020) FAST MODE SCL LOW COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_FSSCLLCNT >> 0) & 0xFFFFFFFF), ((I2C0_FSSCLLCNT = (I2C0_FSSCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_FSSCLLCNT_LCNT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C0_INTSTAT  ------------------------------
// SVD Line: 18586

unsigned int I2C0_INTSTAT __AT (0x4010102C);



// ----------------------------  Field Item: I2C0_INTSTAT_RXUNDER  --------------------------------
// SVD Line: 18596

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_RXUNDER
//    <name> RXUNDER </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x4010102C) \nRX_UNDER Interrupt\n0 : INACTIVE = RX_UNDER interrupt is inactive\n1 : ACTIVE = RX_UNDER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.0..0> RXUNDER
//        <0=> 0: INACTIVE = RX_UNDER interrupt is inactive
//        <1=> 1: ACTIVE = RX_UNDER interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_INTSTAT_RXOVER  --------------------------------
// SVD Line: 18615

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_RXOVER
//    <name> RXOVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x4010102C) \nRX_OVER Interrupt\n0 : INACTIVE = RX_OVER interrupt is inactive\n1 : ACTIVE = RX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.1..1> RXOVER
//        <0=> 0: INACTIVE = RX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = RX_OVER interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_INTSTAT_RXFULL  --------------------------------
// SVD Line: 18634

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_RXFULL
//    <name> RXFULL </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x4010102C) \nRX_FULL Interrupt\n0 : INACTIVE = RX_FULL interrupt is inactive\n1 : ACTIVE = RX_FULL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.2..2> RXFULL
//        <0=> 0: INACTIVE = RX_FULL interrupt is inactive
//        <1=> 1: ACTIVE = RX_FULL interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_INTSTAT_TXOVER  --------------------------------
// SVD Line: 18653

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_TXOVER
//    <name> TXOVER </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4010102C) \nTX_OVER Interrupt\n0 : INACTIVE = TX_OVER interrupt is inactive\n1 : ACTIVE = TX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.3..3> TXOVER
//        <0=> 0: INACTIVE = TX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = TX_OVER interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_INTSTAT_TXEMPTY  --------------------------------
// SVD Line: 18672

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_TXEMPTY
//    <name> TXEMPTY </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x4010102C) \nTX_EMPTY Interrupt\n0 : INACTIVE = TX_EMPTY interrupt is inactive\n1 : ACTIVE = TX_EMPTY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.4..4> TXEMPTY
//        <0=> 0: INACTIVE = TX_EMPTY interrupt is inactive
//        <1=> 1: ACTIVE = TX_EMPTY interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_INTSTAT_RDREQ  ---------------------------------
// SVD Line: 18691

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_RDREQ
//    <name> RDREQ </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x4010102C) \nRD_REQ interrupt\n0 : INACTIVE = RD_REQ interrupt is inactive\n1 : ACTIVE = RD_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.5..5> RDREQ
//        <0=> 0: INACTIVE = RD_REQ interrupt is inactive
//        <1=> 1: ACTIVE = RD_REQ interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_INTSTAT_TXABRT  --------------------------------
// SVD Line: 18710

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_TXABRT
//    <name> TXABRT </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x4010102C) \nTX_ABRT Interrupt\n0 : INACTIVE = TX_ABRT interrupt is inactive\n1 : ACTIVE = TX_ABRT interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.6..6> TXABRT
//        <0=> 0: INACTIVE = TX_ABRT interrupt is inactive
//        <1=> 1: ACTIVE = TX_ABRT interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_INTSTAT_RXDONE  --------------------------------
// SVD Line: 18729

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_RXDONE
//    <name> RXDONE </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x4010102C) \nRX_DONE Interrupt\n0 : INACTIVE = RX_DONE interrupt is inactive\n1 : ACTIVE = RX_DONE interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.7..7> RXDONE
//        <0=> 0: INACTIVE = RX_DONE interrupt is inactive
//        <1=> 1: ACTIVE = RX_DONE interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_INTSTAT_ACTIVITY  -------------------------------
// SVD Line: 18748

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_ACTIVITY
//    <name> ACTIVITY </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x4010102C) \nACTIVITY Interrupt\n0 : INACTIVE = ACTIVITY interrupt is inactive\n1 : ACTIVE = ACTIVITY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.8..8> ACTIVITY
//        <0=> 0: INACTIVE = ACTIVITY interrupt is inactive
//        <1=> 1: ACTIVE = ACTIVITY interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_INTSTAT_STOPDET  --------------------------------
// SVD Line: 18767

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_STOPDET
//    <name> STOPDET </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x4010102C) \nSTOP_DET Interrupt\n0 : INACTIVE = STOP_DET interrupt is inactive\n1 : ACTIVE = STOP_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.9..9> STOPDET
//        <0=> 0: INACTIVE = STOP_DET interrupt is inactive
//        <1=> 1: ACTIVE = STOP_DET interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_INTSTAT_STARTDET  -------------------------------
// SVD Line: 18786

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_STARTDET
//    <name> STARTDET </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x4010102C) \nSTART_DET Interrupt\n0 : INACTIVE = START_DET interrupt is inactive\n1 : ACTIVE = START_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.10..10> STARTDET
//        <0=> 0: INACTIVE = START_DET interrupt is inactive
//        <1=> 1: ACTIVE = START_DET interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_INTSTAT_GENCALL  --------------------------------
// SVD Line: 18805

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_GENCALL
//    <name> GENCALL </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x4010102C) \nGEN_CALL Interrupt\n0 : INACTIVE = GEN-CALL interrupt is inactive\n1 : ACTIVE = GEN-CALL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.11..11> GENCALL
//        <0=> 0: INACTIVE = GEN-CALL interrupt is inactive
//        <1=> 1: ACTIVE = GEN-CALL interrupt is active
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTSTAT_RESTARTDET  ------------------------------
// SVD Line: 18824

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_RESTARTDET
//    <name> RESTARTDET </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x4010102C) \nRESTART_DET Interrupt\n0 : INACTIVE = RESTART_DET interrupt is inactive\n1 : ACTIVE = RESTART_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.12..12> RESTARTDET
//        <0=> 0: INACTIVE = RESTART_DET interrupt is inactive
//        <1=> 1: ACTIVE = RESTART_DET interrupt is active
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTSTAT_MSTONHOLD  -------------------------------
// SVD Line: 18843

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_MSTONHOLD
//    <name> MSTONHOLD </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x4010102C) \nMASTER_ON_HOLD Interrupt\n0 : INACTIVE = MASTER_ON_HOLD interrupt is inactive\n1 : ACTIVE = MASTER_ON_HOLD interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.13..13> MSTONHOLD
//        <0=> 0: INACTIVE = MASTER_ON_HOLD interrupt is inactive
//        <1=> 1: ACTIVE = MASTER_ON_HOLD interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_INTSTAT_SCLSTUCKLOW  ------------------------------
// SVD Line: 18862

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_SCLSTUCKLOW
//    <name> SCLSTUCKLOW </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x4010102C) \nSCL_STUCK_AT_LOW Interrupt\n0 : INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive\n1 : ACTIVE = SCL_STUCK_AT_LOW interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.14..14> SCLSTUCKLOW
//        <0=> 0: INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive
//        <1=> 1: ACTIVE = SCL_STUCK_AT_LOW interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C0_INTSTAT_WRREQ  ---------------------------------
// SVD Line: 18881

//  <item> SFDITEM_FIELD__I2C0_INTSTAT_WRREQ
//    <name> WRREQ </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x4010102C) \nWR_REQ Interrupt\n0 : INACTIVE = WR_REQ interrupt is inactive\n1 : ACTIVE = WR_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTSTAT ) </loc>
//      <o.15..15> WRREQ
//        <0=> 0: INACTIVE = WR_REQ interrupt is inactive
//        <1=> 1: ACTIVE = WR_REQ interrupt is active
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C0_INTSTAT  ----------------------------------
// SVD Line: 18586

//  <rtree> SFDITEM_REG__I2C0_INTSTAT
//    <name> INTSTAT </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4010102C) I2C INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_INTSTAT >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_RXUNDER </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_RXOVER </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_RXFULL </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_TXOVER </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_TXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_RDREQ </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_TXABRT </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_RXDONE </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_ACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_STOPDET </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_STARTDET </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_GENCALL </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_RESTARTDET </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_MSTONHOLD </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_SCLSTUCKLOW </item>
//    <item> SFDITEM_FIELD__I2C0_INTSTAT_WRREQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C0_INTMASK  ------------------------------
// SVD Line: 18902

unsigned int I2C0_INTMASK __AT (0x40101030);



// ---------------------------  Field Item: I2C0_INTMASK_RXUNDERMSK  ------------------------------
// SVD Line: 18912

//  <item> SFDITEM_FIELD__I2C0_INTMASK_RXUNDERMSK
//    <name> RXUNDERMSK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101030) \nRX_UNDER Interrupt Mask\n0 : MASKED = RX_UNDER interrupt is masked\n1 : UNMASKED = RX_UNDER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.0..0> RXUNDERMSK
//        <0=> 0: MASKED = RX_UNDER interrupt is masked
//        <1=> 1: UNMASKED = RX_UNDER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTMASK_RXOVERMSK  -------------------------------
// SVD Line: 18931

//  <item> SFDITEM_FIELD__I2C0_INTMASK_RXOVERMSK
//    <name> RXOVERMSK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101030) \nRX_OVER Interrupt Mask\n0 : MASKED = RX_OVER interrupt is masked\n1 : UNMASKED = RX_OVER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.1..1> RXOVERMSK
//        <0=> 0: MASKED = RX_OVER interrupt is masked
//        <1=> 1: UNMASKED = RX_OVER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTMASK_RXFULLMSK  -------------------------------
// SVD Line: 18950

//  <item> SFDITEM_FIELD__I2C0_INTMASK_RXFULLMSK
//    <name> RXFULLMSK </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101030) \nRX_FULL Interrupt Mask\n0 : MASKED = RX_FULL interrupt is masked\n1 : UNMASKED = RX_FULL interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.2..2> RXFULLMSK
//        <0=> 0: MASKED = RX_FULL interrupt is masked
//        <1=> 1: UNMASKED = RX_FULL interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTMASK_TXOVERMSK  -------------------------------
// SVD Line: 18969

//  <item> SFDITEM_FIELD__I2C0_INTMASK_TXOVERMSK
//    <name> TXOVERMSK </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101030) \nTX_OVER Interrupt Mask\n0 : MASKED = TX_OVER interrupt is masked\n1 : UNMASKED = TX_OVER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.3..3> TXOVERMSK
//        <0=> 0: MASKED = TX_OVER interrupt is masked
//        <1=> 1: UNMASKED = TX_OVER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTMASK_TXEMPTYMSK  ------------------------------
// SVD Line: 18988

//  <item> SFDITEM_FIELD__I2C0_INTMASK_TXEMPTYMSK
//    <name> TXEMPTYMSK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40101030) \nTX_EMPTY Interrupt Mask\n0 : MASKED = TX_EMPTY interrupt is masked\n1 : UNMASKED = TX_EMPTY interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.4..4> TXEMPTYMSK
//        <0=> 0: MASKED = TX_EMPTY interrupt is masked
//        <1=> 1: UNMASKED = TX_EMPTY interrupt is unmasked
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_INTMASK_RDREQMSK  -------------------------------
// SVD Line: 19007

//  <item> SFDITEM_FIELD__I2C0_INTMASK_RDREQMSK
//    <name> RDREQMSK </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40101030) \nRD_REQ Interrupt Mask\n0 : MASKED = RD_REQ interrupt is masked\n1 : UNMASKED = RD_REQ interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.5..5> RDREQMSK
//        <0=> 0: MASKED = RD_REQ interrupt is masked
//        <1=> 1: UNMASKED = RD_REQ interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTMASK_TXABRTMSK  -------------------------------
// SVD Line: 19026

//  <item> SFDITEM_FIELD__I2C0_INTMASK_TXABRTMSK
//    <name> TXABRTMSK </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101030) \nTX_ABRT Interrupt Mask\n0 : MASKED = TX_ABRT interrupt is masked\n1 : UNMASKED = TX_ABRT interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.6..6> TXABRTMSK
//        <0=> 0: MASKED = TX_ABRT interrupt is masked
//        <1=> 1: UNMASKED = TX_ABRT interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTMASK_RXDONEMSK  -------------------------------
// SVD Line: 19045

//  <item> SFDITEM_FIELD__I2C0_INTMASK_RXDONEMSK
//    <name> RXDONEMSK </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101030) \nRX_DONE Interrupt Mask\n0 : MASKED = RX_DONE interrupt is masked\n1 : UNMASKED = RX_DONE interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.7..7> RXDONEMSK
//        <0=> 0: MASKED = RX_DONE interrupt is masked
//        <1=> 1: UNMASKED = RX_DONE interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_INTMASK_ACTIVITYMSK  ------------------------------
// SVD Line: 19064

//  <item> SFDITEM_FIELD__I2C0_INTMASK_ACTIVITYMSK
//    <name> ACTIVITYMSK </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101030) \nACTIVITY Interrupt Mask\n0 : MASKED = ACTIVITY interrupt is masked\n1 : UNMASKED = ACTIVITY interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.8..8> ACTIVITYMSK
//        <0=> 0: MASKED = ACTIVITY interrupt is masked
//        <1=> 1: UNMASKED = ACTIVITY interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTMASK_STOPDETMSK  ------------------------------
// SVD Line: 19083

//  <item> SFDITEM_FIELD__I2C0_INTMASK_STOPDETMSK
//    <name> STOPDETMSK </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40101030) \nSTOP_DET Interrupt Mask\n0 : MASKED = STOP_DET interrupt is masked\n1 : UNMASKED = STOP_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.9..9> STOPDETMSK
//        <0=> 0: MASKED = STOP_DET interrupt is masked
//        <1=> 1: UNMASKED = STOP_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_INTMASK_STARTDETMSK  ------------------------------
// SVD Line: 19102

//  <item> SFDITEM_FIELD__I2C0_INTMASK_STARTDETMSK
//    <name> STARTDETMSK </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101030) \nSTART_DET Interrupt Mask\n0 : MASKED = START_DET interrupt is masked\n1 : UNMASKED = START_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.10..10> STARTDETMSK
//        <0=> 0: MASKED = START_DET interrupt is masked
//        <1=> 1: UNMASKED = START_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_INTMASK_GENCALLMSK  ------------------------------
// SVD Line: 19121

//  <item> SFDITEM_FIELD__I2C0_INTMASK_GENCALLMSK
//    <name> GENCALLMSK </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101030) \nGEN_CALL Interrupt Mask\n0 : MASKED = GEN-CALL interrupt is masked\n1 : UNMASKED = GEN-CALL interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.11..11> GENCALLMSK
//        <0=> 0: MASKED = GEN-CALL interrupt is masked
//        <1=> 1: UNMASKED = GEN-CALL interrupt is unmasked
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_INTMASK_RESTARTDETMSK  -----------------------------
// SVD Line: 19140

//  <item> SFDITEM_FIELD__I2C0_INTMASK_RESTARTDETMSK
//    <name> RESTARTDETMSK </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40101030) \nRESTART_DET Interrupt Mask\n0 : MASKED = RESTART_DET interrupt is masked\n1 : UNMASKED = RESTART_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.12..12> RESTARTDETMSK
//        <0=> 0: MASKED = RESTART_DET interrupt is masked
//        <1=> 1: UNMASKED = RESTART_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_INTMASK_MSTONHOLDMSK  -----------------------------
// SVD Line: 19159

//  <item> SFDITEM_FIELD__I2C0_INTMASK_MSTONHOLDMSK
//    <name> MSTONHOLDMSK </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40101030) \nMASTER_ON_HOLD Interrupt Mask\n0 : MASKED = MASTER_ON_HOLD interrupt is masked\n1 : UNMASKED = MASTER_ON_HOLD interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.13..13> MSTONHOLDMSK
//        <0=> 0: MASKED = MASTER_ON_HOLD interrupt is masked
//        <1=> 1: UNMASKED = MASTER_ON_HOLD interrupt is unmasked
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_INTMASK_SCLSTUCKLOWMSK  ----------------------------
// SVD Line: 19178

//  <item> SFDITEM_FIELD__I2C0_INTMASK_SCLSTUCKLOWMSK
//    <name> SCLSTUCKLOWMSK </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40101030) \nSCL_STUCK_AT_LOW Interrupt Mask\n0 : MASKED = SCL_STUCK_AT_LOW interrupt is masked\n1 : UNMASKED = SCL_STUCK_AT_LOW interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.14..14> SCLSTUCKLOWMSK
//        <0=> 0: MASKED = SCL_STUCK_AT_LOW interrupt is masked
//        <1=> 1: UNMASKED = SCL_STUCK_AT_LOW interrupt is unmasked
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_INTMASK_WRREQMSK  -------------------------------
// SVD Line: 19197

//  <item> SFDITEM_FIELD__I2C0_INTMASK_WRREQMSK
//    <name> WRREQMSK </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40101030) \nWR_REQ Interrupt Mask\n0 : MASKED = WR_REQ interrupt is masked\n1 : UNMASKED = WR_REQ interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_INTMASK ) </loc>
//      <o.15..15> WRREQMSK
//        <0=> 0: MASKED = WR_REQ interrupt is masked
//        <1=> 1: UNMASKED = WR_REQ interrupt is unmasked
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C0_INTMASK  ----------------------------------
// SVD Line: 18902

//  <rtree> SFDITEM_REG__I2C0_INTMASK
//    <name> INTMASK </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101030) INTERRUPT MASK REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_INTMASK >> 0) & 0xFFFFFFFF), ((I2C0_INTMASK = (I2C0_INTMASK & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_RXUNDERMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_RXOVERMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_RXFULLMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_TXOVERMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_TXEMPTYMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_RDREQMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_TXABRTMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_RXDONEMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_ACTIVITYMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_STOPDETMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_STARTDETMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_GENCALLMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_RESTARTDETMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_MSTONHOLDMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_SCLSTUCKLOWMSK </item>
//    <item> SFDITEM_FIELD__I2C0_INTMASK_WRREQMSK </item>
//  </rtree>
//  


// -------------------------  Register Item Address: I2C0_RAWINTSTAT  -----------------------------
// SVD Line: 19218

unsigned int I2C0_RAWINTSTAT __AT (0x40101034);



// -------------------------  Field Item: I2C0_RAWINTSTAT_RXUNDERRAW  -----------------------------
// SVD Line: 19228

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RXUNDERRAW
//    <name> RXUNDERRAW </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101034) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_UNDER interrupt is inactive\n1 : ACTIVE = RX_UNDER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.0..0> RXUNDERRAW
//        <0=> 0: INACTIVE = RX_UNDER interrupt is inactive
//        <1=> 1: ACTIVE = RX_UNDER interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_RAWINTSTAT_RXOVERRAW  -----------------------------
// SVD Line: 19247

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RXOVERRAW
//    <name> RXOVERRAW </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101034) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_OVER interrupt is inactive\n1 : ACTIVE = RX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.1..1> RXOVERRAW
//        <0=> 0: INACTIVE = RX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = RX_OVER interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_RAWINTSTAT_RXFULLRAW  -----------------------------
// SVD Line: 19266

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RXFULLRAW
//    <name> RXFULLRAW </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101034) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_FULL interrupt is inactive\n1 : ACTIVE = RX_FULL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.2..2> RXFULLRAW
//        <0=> 0: INACTIVE = RX_FULL interrupt is inactive
//        <1=> 1: ACTIVE = RX_FULL interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_RAWINTSTAT_TXOVERRAW  -----------------------------
// SVD Line: 19285

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_TXOVERRAW
//    <name> TXOVERRAW </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101034) \nTX_OVER Interrupt Status\n0 : INACTIVE = TX_OVER interrupt is inactive\n1 : ACTIVE = TX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.3..3> TXOVERRAW
//        <0=> 0: INACTIVE = TX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = TX_OVER interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_RAWINTSTAT_TXEMPTYRAW  -----------------------------
// SVD Line: 19304

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_TXEMPTYRAW
//    <name> TXEMPTYRAW </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101034) \nTX_EMPTY Interrupt Status\n0 : INACTIVE = TX_EMPTY interrupt is inactive\n1 : ACTIVE = TX_EMPTY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.4..4> TXEMPTYRAW
//        <0=> 0: INACTIVE = TX_EMPTY interrupt is inactive
//        <1=> 1: ACTIVE = TX_EMPTY interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_RAWINTSTAT_RDREQRAW  ------------------------------
// SVD Line: 19323

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RDREQRAW
//    <name> RDREQRAW </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101034) \nRD_REQ Interrupt Status\n0 : INACTIVE = RD_REQ interrupt is inactive\n1 : ACTIVE = RD_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.5..5> RDREQRAW
//        <0=> 0: INACTIVE = RD_REQ interrupt is inactive
//        <1=> 1: ACTIVE = RD_REQ interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_RAWINTSTAT_TXABRTRAW  -----------------------------
// SVD Line: 19342

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_TXABRTRAW
//    <name> TXABRTRAW </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101034) \nTX_ABRT Interrupt Status\n0 : INACTIVE = TX_ABRT interrupt is inactive\n1 : ACTIVE = TX_ABRT interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.6..6> TXABRTRAW
//        <0=> 0: INACTIVE = TX_ABRT interrupt is inactive
//        <1=> 1: ACTIVE = TX_ABRT interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_RAWINTSTAT_RXDONERAW  -----------------------------
// SVD Line: 19361

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RXDONERAW
//    <name> RXDONERAW </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101034) \nRX_DONE Interrupt Status\n0 : INACTIVE = RX_DONE interrupt is inactive\n1 : ACTIVE = RX_DONE interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.7..7> RXDONERAW
//        <0=> 0: INACTIVE = RX_DONE interrupt is inactive
//        <1=> 1: ACTIVE = RX_DONE interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_RAWINTSTAT_ACTIVITYRAW  ----------------------------
// SVD Line: 19380

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_ACTIVITYRAW
//    <name> ACTIVITYRAW </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101034) \nI2C Controller Activity\n0 : INACTIVE = RAW_INTR_ACTIVITY interrupt is inactive\n1 : ACTIVE = RAW_INTR_ACTIVITY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.8..8> ACTIVITYRAW
//        <0=> 0: INACTIVE = RAW_INTR_ACTIVITY interrupt is inactive
//        <1=> 1: ACTIVE = RAW_INTR_ACTIVITY interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_RAWINTSTAT_STOPDETRAW  -----------------------------
// SVD Line: 19399

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_STOPDETRAW
//    <name> STOPDETRAW </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101034) \nSTOP_DET Interrupt Status\n0 : INACTIVE = STOP_DET interrupt is inactive\n1 : ACTIVE = STOP_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.9..9> STOPDETRAW
//        <0=> 0: INACTIVE = STOP_DET interrupt is inactive
//        <1=> 1: ACTIVE = STOP_DET interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_RAWINTSTAT_STARTDETRAW  ----------------------------
// SVD Line: 19418

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_STARTDETRAW
//    <name> STARTDETRAW </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101034) \nSTART_DET Interrupt Status\n0 : INACTIVE = START_DET interrupt is inactive\n1 : ACTIVE = START_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.10..10> STARTDETRAW
//        <0=> 0: INACTIVE = START_DET interrupt is inactive
//        <1=> 1: ACTIVE = START_DET interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_RAWINTSTAT_GENCALLRAW  -----------------------------
// SVD Line: 19437

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_GENCALLRAW
//    <name> GENCALLRAW </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101034) \nGEN_CALL Interrupt Status\n0 : INACTIVE = GEN-CALL interrupt is inactive\n1 : ACTIVE = GEN-CALL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.11..11> GENCALLRAW
//        <0=> 0: INACTIVE = GEN-CALL interrupt is inactive
//        <1=> 1: ACTIVE = GEN-CALL interrupt is active
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C0_RAWINTSTAT_RESTARTDETRAW  ---------------------------
// SVD Line: 19456

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RESTARTDETRAW
//    <name> RESTARTDETRAW </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x40101034) \nRESTART_DET Interrupt Status\n0 : INACTIVE = RESTART_DET interrupt is inactive\n1 : ACTIVE = RESTART_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.12..12> RESTARTDETRAW
//        <0=> 0: INACTIVE = RESTART_DET interrupt is inactive
//        <1=> 1: ACTIVE = RESTART_DET interrupt is active
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C0_RAWINTSTAT_MSTONHOLDRAW  ----------------------------
// SVD Line: 19475

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_MSTONHOLDRAW
//    <name> MSTONHOLDRAW </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x40101034) \nMASTER_ON_HOLD Interrupt Status\n0 : INACTIVE = MASTER_ON_HOLD interrupt is inactive\n1 : ACTIVE = MASTER_ON_HOLD interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.13..13> MSTONHOLDRAW
//        <0=> 0: INACTIVE = MASTER_ON_HOLD interrupt is inactive
//        <1=> 1: ACTIVE = MASTER_ON_HOLD interrupt is active
//    </combo>
//  </item>
//  


// -----------------------  Field Item: I2C0_RAWINTSTAT_SCLSTUCKLOWRAW  ---------------------------
// SVD Line: 19494

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_SCLSTUCKLOWRAW
//    <name> SCLSTUCKLOWRAW </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x40101034) \nSCL_STUCK_AT_LOW Interrupt Status\n0 : INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive\n1 : ACTIVE = SCL_STUCK_AT_LOW interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.14..14> SCLSTUCKLOWRAW
//        <0=> 0: INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive
//        <1=> 1: ACTIVE = SCL_STUCK_AT_LOW interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_RAWINTSTAT_WRREQRAW  ------------------------------
// SVD Line: 19513

//  <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_WRREQRAW
//    <name> WRREQRAW </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x40101034) \nWR_REQ Interrupt Status\n0 : INACTIVE = WR_REQ interrupt is inactive\n1 : ACTIVE = WR_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_RAWINTSTAT ) </loc>
//      <o.15..15> WRREQRAW
//        <0=> 0: INACTIVE = WR_REQ interrupt is inactive
//        <1=> 1: ACTIVE = WR_REQ interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: I2C0_RAWINTSTAT  --------------------------------
// SVD Line: 19218

//  <rtree> SFDITEM_REG__I2C0_RAWINTSTAT
//    <name> RAWINTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101034) INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_RAWINTSTAT >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RXUNDERRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RXOVERRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RXFULLRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_TXOVERRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_TXEMPTYRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RDREQRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_TXABRTRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RXDONERAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_ACTIVITYRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_STOPDETRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_STARTDETRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_GENCALLRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_RESTARTDETRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_MSTONHOLDRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_SCLSTUCKLOWRAW </item>
//    <item> SFDITEM_FIELD__I2C0_RAWINTSTAT_WRREQRAW </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C0_RXTL  --------------------------------
// SVD Line: 19534

unsigned int I2C0_RXTL __AT (0x40101038);



// -------------------------------  Field Item: I2C0_RXTL_THRES  ----------------------------------
// SVD Line: 19544

//  <item> SFDITEM_FIELD__I2C0_RXTL_THRES
//    <name> THRES </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101038) Receive FIFO Threshold Level </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C0_RXTL >> 0) & 0xFF), ((I2C0_RXTL = (I2C0_RXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C0_RXTL  -----------------------------------
// SVD Line: 19534

//  <rtree> SFDITEM_REG__I2C0_RXTL
//    <name> RXTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101038) I2C RECEIVE FIFO THRESHOLD REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_RXTL >> 0) & 0xFFFFFFFF), ((I2C0_RXTL = (I2C0_RXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_RXTL_THRES </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C0_TXTL  --------------------------------
// SVD Line: 19553

unsigned int I2C0_TXTL __AT (0x4010103C);



// -------------------------------  Field Item: I2C0_TXTL_THRES  ----------------------------------
// SVD Line: 19563

//  <item> SFDITEM_FIELD__I2C0_TXTL_THRES
//    <name> THRES </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4010103C) Transmit FIFO Threshold Level </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C0_TXTL >> 0) & 0xFF), ((I2C0_TXTL = (I2C0_TXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C0_TXTL  -----------------------------------
// SVD Line: 19553

//  <rtree> SFDITEM_REG__I2C0_TXTL
//    <name> TXTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010103C) I2C TRANSMIT FIFO THRESHOLD REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_TXTL >> 0) & 0xFFFFFFFF), ((I2C0_TXTL = (I2C0_TXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_TXTL_THRES </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C0_CLRINT  -------------------------------
// SVD Line: 19572

unsigned int I2C0_CLRINT __AT (0x40101040);



// -------------------------------  Register Item: I2C0_CLRINT  -----------------------------------
// SVD Line: 19572

//  <item> SFDITEM_REG__I2C0_CLRINT
//    <name> CLRINT </name>
//    <i> [Bits 31..0] RO (@ 0x40101040) CLEAR COMBINED AND INDIVIDUAL INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRINT >> 0) & 0xFFFFFFFF), ((I2C0_CLRINT = (I2C0_CLRINT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C0_CLRRXUNDER  -----------------------------
// SVD Line: 19582

unsigned int I2C0_CLRRXUNDER __AT (0x40101044);



// -----------------------------  Register Item: I2C0_CLRRXUNDER  ---------------------------------
// SVD Line: 19582

//  <item> SFDITEM_REG__I2C0_CLRRXUNDER
//    <name> CLRRXUNDER </name>
//    <i> [Bits 31..0] RO (@ 0x40101044) Clear RX_UNDER Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRRXUNDER >> 0) & 0xFFFFFFFF), ((I2C0_CLRRXUNDER = (I2C0_CLRRXUNDER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C0_CLRRXOVER  -----------------------------
// SVD Line: 19592

unsigned int I2C0_CLRRXOVER __AT (0x40101048);



// ------------------------------  Register Item: I2C0_CLRRXOVER  ---------------------------------
// SVD Line: 19592

//  <item> SFDITEM_REG__I2C0_CLRRXOVER
//    <name> CLRRXOVER </name>
//    <i> [Bits 31..0] RO (@ 0x40101048) Clear RX_OVER Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRRXOVER >> 0) & 0xFFFFFFFF), ((I2C0_CLRRXOVER = (I2C0_CLRRXOVER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C0_CLRTXOVER  -----------------------------
// SVD Line: 19602

unsigned int I2C0_CLRTXOVER __AT (0x4010104C);



// ------------------------------  Register Item: I2C0_CLRTXOVER  ---------------------------------
// SVD Line: 19602

//  <item> SFDITEM_REG__I2C0_CLRTXOVER
//    <name> CLRTXOVER </name>
//    <i> [Bits 31..0] RO (@ 0x4010104C) Clear TX_OVER Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRTXOVER >> 0) & 0xFFFFFFFF), ((I2C0_CLRTXOVER = (I2C0_CLRTXOVER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C0_CLRRDREQ  ------------------------------
// SVD Line: 19612

unsigned int I2C0_CLRRDREQ __AT (0x40101050);



// ------------------------------  Register Item: I2C0_CLRRDREQ  ----------------------------------
// SVD Line: 19612

//  <item> SFDITEM_REG__I2C0_CLRRDREQ
//    <name> CLRRDREQ </name>
//    <i> [Bits 31..0] RO (@ 0x40101050) Clear RD_REQ Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRRDREQ >> 0) & 0xFFFFFFFF), ((I2C0_CLRRDREQ = (I2C0_CLRRDREQ & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C0_CLRTXABRT  -----------------------------
// SVD Line: 19622

unsigned int I2C0_CLRTXABRT __AT (0x40101054);



// ------------------------------  Register Item: I2C0_CLRTXABRT  ---------------------------------
// SVD Line: 19622

//  <item> SFDITEM_REG__I2C0_CLRTXABRT
//    <name> CLRTXABRT </name>
//    <i> [Bits 31..0] RO (@ 0x40101054) Clear TX_ABRT Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRTXABRT >> 0) & 0xFFFFFFFF), ((I2C0_CLRTXABRT = (I2C0_CLRTXABRT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C0_CLRRXDONE  -----------------------------
// SVD Line: 19632

unsigned int I2C0_CLRRXDONE __AT (0x40101058);



// ------------------------------  Register Item: I2C0_CLRRXDONE  ---------------------------------
// SVD Line: 19632

//  <item> SFDITEM_REG__I2C0_CLRRXDONE
//    <name> CLRRXDONE </name>
//    <i> [Bits 31..0] RO (@ 0x40101058) Clear RX_DONE Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRRXDONE >> 0) & 0xFFFFFFFF), ((I2C0_CLRRXDONE = (I2C0_CLRRXDONE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C0_CLRACTIVITY  ----------------------------
// SVD Line: 19642

unsigned int I2C0_CLRACTIVITY __AT (0x4010105C);



// -----------------------------  Register Item: I2C0_CLRACTIVITY  --------------------------------
// SVD Line: 19642

//  <item> SFDITEM_REG__I2C0_CLRACTIVITY
//    <name> CLRACTIVITY </name>
//    <i> [Bits 31..0] RO (@ 0x4010105C) Clear ACTIVITY Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRACTIVITY >> 0) & 0xFFFFFFFF), ((I2C0_CLRACTIVITY = (I2C0_CLRACTIVITY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C0_CLRSTOPDET  -----------------------------
// SVD Line: 19652

unsigned int I2C0_CLRSTOPDET __AT (0x40101060);



// -----------------------------  Register Item: I2C0_CLRSTOPDET  ---------------------------------
// SVD Line: 19652

//  <item> SFDITEM_REG__I2C0_CLRSTOPDET
//    <name> CLRSTOPDET </name>
//    <i> [Bits 31..0] RO (@ 0x40101060) Clear STOP_DET Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRSTOPDET >> 0) & 0xFFFFFFFF), ((I2C0_CLRSTOPDET = (I2C0_CLRSTOPDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C0_CLRSTARTDET  ----------------------------
// SVD Line: 19662

unsigned int I2C0_CLRSTARTDET __AT (0x40101064);



// -----------------------------  Register Item: I2C0_CLRSTARTDET  --------------------------------
// SVD Line: 19662

//  <item> SFDITEM_REG__I2C0_CLRSTARTDET
//    <name> CLRSTARTDET </name>
//    <i> [Bits 31..0] RO (@ 0x40101064) Clear START_DET Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRSTARTDET >> 0) & 0xFFFFFFFF), ((I2C0_CLRSTARTDET = (I2C0_CLRSTARTDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C0_CLRGENCALL  -----------------------------
// SVD Line: 19672

unsigned int I2C0_CLRGENCALL __AT (0x40101068);



// -----------------------------  Register Item: I2C0_CLRGENCALL  ---------------------------------
// SVD Line: 19672

//  <item> SFDITEM_REG__I2C0_CLRGENCALL
//    <name> CLRGENCALL </name>
//    <i> [Bits 31..0] RO (@ 0x40101068) Clear GEN_CALL Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRGENCALL >> 0) & 0xFFFFFFFF), ((I2C0_CLRGENCALL = (I2C0_CLRGENCALL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: I2C0_ENABLE  -------------------------------
// SVD Line: 19682

unsigned int I2C0_ENABLE __AT (0x4010106C);



// -------------------------------  Field Item: I2C0_ENABLE_EN  -----------------------------------
// SVD Line: 19692

//  <item> SFDITEM_FIELD__I2C0_ENABLE_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010106C) \nControls Whether The I2C Controller Is Enabled\n0 : DISABLE = Disables I2C controller\n1 : ENABLE = Enable I2C controller </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_ENABLE ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disables I2C controller
//        <1=> 1: ENABLE = Enable I2C controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_ENABLE_ABORT  ---------------------------------
// SVD Line: 19711

//  <item> SFDITEM_FIELD__I2C0_ENABLE_ABORT
//    <name> ABORT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010106C) \nInitiates The Transfer Abort\n0 : DISABLE = ABORT operation not in progress\n1 : ENABLE = ABORT operation in progress </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_ENABLE ) </loc>
//      <o.1..1> ABORT
//        <0=> 0: DISABLE = ABORT operation not in progress
//        <1=> 1: ENABLE = ABORT operation in progress
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_ENABLE_TXCMDBLOCK  -------------------------------
// SVD Line: 19730

//  <item> SFDITEM_FIELD__I2C0_ENABLE_TXCMDBLOCK
//    <name> TXCMDBLOCK </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010106C) \nBlocks The Transmission Of Data On I2c Bus Or Not\n0 : DISABLE = The transmission of data starts on I2C bus automatically\n1 : ENABLE = Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_ENABLE ) </loc>
//      <o.2..2> TXCMDBLOCK
//        <0=> 0: DISABLE = The transmission of data starts on I2C bus automatically
//        <1=> 1: ENABLE = Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_ENABLE_SDARECOVEN  -------------------------------
// SVD Line: 19749

//  <item> SFDITEM_FIELD__I2C0_ENABLE_SDARECOVEN
//    <name> SDARECOVEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4010106C) \nControl Knob To Initiate The SDA Recovery Mechanism\n0 : DISABLE = Master disabled the SDA stuck at low recovery mechanism\n1 : ENABLE = Master initiates the SDA stuck at low recovery mechanism </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_ENABLE ) </loc>
//      <o.3..3> SDARECOVEN
//        <0=> 0: DISABLE = Master disabled the SDA stuck at low recovery mechanism
//        <1=> 1: ENABLE = Master initiates the SDA stuck at low recovery mechanism
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C0_ENABLE  ----------------------------------
// SVD Line: 19682

//  <rtree> SFDITEM_REG__I2C0_ENABLE
//    <name> ENABLE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010106C) ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_ENABLE >> 0) & 0xFFFFFFFF), ((I2C0_ENABLE = (I2C0_ENABLE & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_ENABLE_EN </item>
//    <item> SFDITEM_FIELD__I2C0_ENABLE_ABORT </item>
//    <item> SFDITEM_FIELD__I2C0_ENABLE_TXCMDBLOCK </item>
//    <item> SFDITEM_FIELD__I2C0_ENABLE_SDARECOVEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C0_STATUS  -------------------------------
// SVD Line: 19770

unsigned int I2C0_STATUS __AT (0x40101070);



// ----------------------------  Field Item: I2C0_STATUS_ACTIVITY  --------------------------------
// SVD Line: 19780

//  <item> SFDITEM_FIELD__I2C0_STATUS_ACTIVITY
//    <name> ACTIVITY </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101070) \nI2C Activity Status\n0 : INACTIVE = I2C is idle\n1 : ACTIVE = I2C is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.0..0> ACTIVITY
//        <0=> 0: INACTIVE = I2C is idle
//        <1=> 1: ACTIVE = I2C is active
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_STATUS_TFNF  ----------------------------------
// SVD Line: 19799

//  <item> SFDITEM_FIELD__I2C0_STATUS_TFNF
//    <name> TFNF </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101070) \nTransmit FIFO Not Full\n0 : FULL = Tx FIFO is full\n1 : NOTFULL = Tx FIFO not full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.1..1> TFNF
//        <0=> 0: FULL = Tx FIFO is full
//        <1=> 1: NOTFULL = Tx FIFO not full
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C0_STATUS_TFE  ----------------------------------
// SVD Line: 19818

//  <item> SFDITEM_FIELD__I2C0_STATUS_TFE
//    <name> TFE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101070) \nTransmit FIFO Completely Empty\n0 : NOTEMPTY = Tx FIFO not empty\n1 : EMPTY = Tx FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.2..2> TFE
//        <0=> 0: NOTEMPTY = Tx FIFO not empty
//        <1=> 1: EMPTY = Tx FIFO is empty
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C0_STATUS_RFNE  ----------------------------------
// SVD Line: 19837

//  <item> SFDITEM_FIELD__I2C0_STATUS_RFNE
//    <name> RFNE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101070) \nReceive FIFO Not Empty\n0 : EMPTY = Rx FIFO is empty\n1 : NOTEMPTY = Rx FIFO not empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.3..3> RFNE
//        <0=> 0: EMPTY = Rx FIFO is empty
//        <1=> 1: NOTEMPTY = Rx FIFO not empty
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C0_STATUS_RFF  ----------------------------------
// SVD Line: 19856

//  <item> SFDITEM_FIELD__I2C0_STATUS_RFF
//    <name> RFF </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101070) \nReceive FIFO Completely Full\n0 : NOTFULL = Rx FIFO not full\n1 : FULL = Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.4..4> RFF
//        <0=> 0: NOTFULL = Rx FIFO not full
//        <1=> 1: FULL = Rx FIFO is full
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_STATUS_MSTACTIVITY  ------------------------------
// SVD Line: 19875

//  <item> SFDITEM_FIELD__I2C0_STATUS_MSTACTIVITY
//    <name> MSTACTIVITY </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101070) \nMaster FSM Activity Status\n0 : IDLE = Master is idle\n1 : ACTIVE = Master not idle </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.5..5> MSTACTIVITY
//        <0=> 0: IDLE = Master is idle
//        <1=> 1: ACTIVE = Master not idle
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_STATUS_SLVACTIVITY  ------------------------------
// SVD Line: 19894

//  <item> SFDITEM_FIELD__I2C0_STATUS_SLVACTIVITY
//    <name> SLVACTIVITY </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101070) \nSlave FSM Activity Status\n0 : IDLE = Slave is idle\n1 : ACTIVE = Slave not idle </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.6..6> SLVACTIVITY
//        <0=> 0: IDLE = Slave is idle
//        <1=> 1: ACTIVE = Slave not idle
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_STATUS_MSTHOLDTXEMPTY  -----------------------------
// SVD Line: 19913

//  <item> SFDITEM_FIELD__I2C0_STATUS_MSTHOLDTXEMPTY
//    <name> MSTHOLDTXEMPTY </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101070) \nIndicates The Bus Hold When The Master Holds The Bus Because Of The Tx FIFO Being Empty\n0 : INACTIVE = Master holds the bus due to Tx FIFO is empty\n1 : ACTIVE = Master is not holding the bus or Bus hold is not due to Tx FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.7..7> MSTHOLDTXEMPTY
//        <0=> 0: INACTIVE = Master holds the bus due to Tx FIFO is empty
//        <1=> 1: ACTIVE = Master is not holding the bus or Bus hold is not due to Tx FIFO is empty
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_STATUS_MSTHOLDRXFULL  -----------------------------
// SVD Line: 19932

//  <item> SFDITEM_FIELD__I2C0_STATUS_MSTHOLDRXFULL
//    <name> MSTHOLDRXFULL </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101070) \nINdicates The Bus Hold In Master Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : INACTIVE = Master is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : ACTIVE = Master holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.8..8> MSTHOLDRXFULL
//        <0=> 0: INACTIVE = Master is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: ACTIVE = Master holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_STATUS_SLVHOLDTXEMPTY  -----------------------------
// SVD Line: 19951

//  <item> SFDITEM_FIELD__I2C0_STATUS_SLVHOLDTXEMPTY
//    <name> SLVHOLDTXEMPTY </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101070) \nIndicates The Bus Hold In Slave Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : INACTIVE = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : ACTIVE = Slave holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.9..9> SLVHOLDTXEMPTY
//        <0=> 0: INACTIVE = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: ACTIVE = Slave holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_STATUS_SLVHOLDRXFULL  -----------------------------
// SVD Line: 19970

//  <item> SFDITEM_FIELD__I2C0_STATUS_SLVHOLDRXFULL
//    <name> SLVHOLDRXFULL </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101070) \nIndicates The Bus Hold In Slave Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : Inactive = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : Active = Slave holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.10..10> SLVHOLDRXFULL
//        <0=> 0: Inactive = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: Active = Slave holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_STATUS_SDANOTRECOV  ------------------------------
// SVD Line: 19989

//  <item> SFDITEM_FIELD__I2C0_STATUS_SDANOTRECOV
//    <name> SDANOTRECOV </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101070) \nIndicates That SDA Stuck At Low Is Not Recovered After The Recovery Mechanism\n0 : Inactive = SDA Stuck at low is recovered after recovery mechanism\n1 : Active = SDA Stuck at low is not recovered after recovery mechanism </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_STATUS ) </loc>
//      <o.11..11> SDANOTRECOV
//        <0=> 0: Inactive = SDA Stuck at low is recovered after recovery mechanism
//        <1=> 1: Active = SDA Stuck at low is not recovered after recovery mechanism
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C0_STATUS  ----------------------------------
// SVD Line: 19770

//  <rtree> SFDITEM_REG__I2C0_STATUS
//    <name> STATUS </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40101070) I2C STATUS Register </i>
//    <loc> ( (unsigned int)((I2C0_STATUS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C0_STATUS_ACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_TFNF </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_TFE </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_RFNE </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_RFF </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_MSTACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_SLVACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_MSTHOLDTXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_MSTHOLDRXFULL </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_SLVHOLDTXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_SLVHOLDRXFULL </item>
//    <item> SFDITEM_FIELD__I2C0_STATUS_SDANOTRECOV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C0_TXFLR  -------------------------------
// SVD Line: 20010

unsigned int I2C0_TXFLR __AT (0x40101074);



// --------------------------------  Register Item: I2C0_TXFLR  -----------------------------------
// SVD Line: 20010

//  <item> SFDITEM_REG__I2C0_TXFLR
//    <name> TXFLR </name>
//    <i> [Bits 31..0] RW (@ 0x40101074) I2C TRANSMIT FIFO LEVEL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_TXFLR >> 0) & 0xFFFFFFFF), ((I2C0_TXFLR = (I2C0_TXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: I2C0_RXFLR  -------------------------------
// SVD Line: 20020

unsigned int I2C0_RXFLR __AT (0x40101078);



// --------------------------------  Register Item: I2C0_RXFLR  -----------------------------------
// SVD Line: 20020

//  <item> SFDITEM_REG__I2C0_RXFLR
//    <name> RXFLR </name>
//    <i> [Bits 31..0] RW (@ 0x40101078) I2C RECEIVE FIFO LEVEL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_RXFLR >> 0) & 0xFFFFFFFF), ((I2C0_RXFLR = (I2C0_RXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: I2C0_SDAHOLD  ------------------------------
// SVD Line: 20030

unsigned int I2C0_SDAHOLD __AT (0x4010107C);



// ---------------------------  Field Item: I2C0_SDAHOLD_SDATXHOLD  -------------------------------
// SVD Line: 20040

//  <item> SFDITEM_FIELD__I2C0_SDAHOLD_SDATXHOLD
//    <name> SDATXHOLD </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010107C) Sets The Required SDA Hold Time In Units Of clk Period </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C0_SDAHOLD >> 0) & 0xFFFF), ((I2C0_SDAHOLD = (I2C0_SDAHOLD & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: I2C0_SDAHOLD_SDARXHOLD  -------------------------------
// SVD Line: 20047

//  <item> SFDITEM_FIELD__I2C0_SDAHOLD_SDARXHOLD
//    <name> SDARXHOLD </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x4010107C) Sets the required SDA hold time in units of I2C clk period </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C0_SDAHOLD >> 16) & 0xFF), ((I2C0_SDAHOLD = (I2C0_SDAHOLD & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C0_SDAHOLD  ----------------------------------
// SVD Line: 20030

//  <rtree> SFDITEM_REG__I2C0_SDAHOLD
//    <name> SDAHOLD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010107C) I2C SDA HOLD TIME LENGTH REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_SDAHOLD >> 0) & 0xFFFFFFFF), ((I2C0_SDAHOLD = (I2C0_SDAHOLD & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_SDAHOLD_SDATXHOLD </item>
//    <item> SFDITEM_FIELD__I2C0_SDAHOLD_SDARXHOLD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C0_TXABRTSRC  -----------------------------
// SVD Line: 20056

unsigned int I2C0_TXABRTSRC __AT (0x40101080);



// --------------------------  Field Item: I2C0_TXABRTSRC_ADDR7BNAK  ------------------------------
// SVD Line: 20066

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ADDR7BNAK
//    <name> ADDR7BNAK </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101080) \nIndicates That The Master Is In 7-bit Addressing Mode And The Address Sent Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = This abort is generated because of NOACK for 7-bit address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.0..0> ADDR7BNAK
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = This abort is generated because of NOACK for 7-bit address
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_TXABRTSRC_ADDR10BNAK1  -----------------------------
// SVD Line: 20085

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ADDR10BNAK1
//    <name> ADDR10BNAK1 </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101080) \nIndicates That The Master Is In 10-bit Address Mode And The First 10-bit Address Byte Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = Byte 1 of 10Bit Address not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.1..1> ADDR10BNAK1
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = Byte 1 of 10Bit Address not ACKed by any slave
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_TXABRTSRC_ADDR10BNACK2  ----------------------------
// SVD Line: 20104

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ADDR10BNACK2
//    <name> ADDR10BNACK2 </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101080) \nIndicates That The Master Is In 10-bit Address Mode And The Second 10-bit Address Byte Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = Byte 2 of 10Bit Address not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.2..2> ADDR10BNACK2
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = Byte 2 of 10Bit Address not ACKed by any slave
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_TXABRTSRC_TXDATANAK  ------------------------------
// SVD Line: 20123

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_TXDATANAK
//    <name> TXDATANAK </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101080) \nIndicates The Master-mode Only Bit. When Themaster Receives An Acknowledgement For The Address\n0 : NACK = Transmitted data non-ACKed by addressed slave-scenario not present\n1 : ACK = Transmitted data not ACKed by addressed slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.3..3> TXDATANAK
//        <0=> 0: NACK = Transmitted data non-ACKed by addressed slave-scenario not present
//        <1=> 1: ACK = Transmitted data not ACKed by addressed slave
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_TXABRTSRC_GCALLNAK  ------------------------------
// SVD Line: 20142

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_GCALLNAK
//    <name> GCALLNAK </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101080) \nIndicates That I2C Controller In Master Mode Has Sent A General Call And No Slave On The Bus Acknowledged The General Call\n0 : NACK = GCALL not ACKed by any slave-scenario not present\n1 : ACK = GCALL not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.4..4> GCALLNAK
//        <0=> 0: NACK = GCALL not ACKed by any slave-scenario not present
//        <1=> 1: ACK = GCALL not ACKed by any slave
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_TXABRTSRC_GCALLREAD  ------------------------------
// SVD Line: 20161

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_GCALLREAD
//    <name> GCALLREAD </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101080) \nIndicates That Dw_apb_i2c In The Master Mode Has Sent A General Call But The User Programmed The Byte Following The General Call To Be A Read From The Bus\n0 : NONABORT = GCALL is followed by read from bus-scenario not present\n1 : ABORT = GCALL is followed by read from bus </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.5..5> GCALLREAD
//        <0=> 0: NONABORT = GCALL is followed by read from bus-scenario not present
//        <1=> 1: ABORT = GCALL is followed by read from bus
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_TXABRTSRC_HSACKDET  ------------------------------
// SVD Line: 20180

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_HSACKDET
//    <name> HSACKDET </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101080) \nIndicates That The Master Is In High Speed Mode And The High Speed Master Code Was Acknowledged\n0 : NACK = HS Master code ACKed in HS Mode- scenario not present\n1 : ACK = HS Master code ACKed in HS Mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.6..6> HSACKDET
//        <0=> 0: NACK = HS Master code ACKed in HS Mode- scenario not present
//        <1=> 1: ACK = HS Master code ACKed in HS Mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_TXABRTSRC_SBYTEACKET  -----------------------------
// SVD Line: 20199

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SBYTEACKET
//    <name> SBYTEACKET </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101080) \nIndicates That The Master Has Sent A START Byte And The START Byte Was Acknowledged\n0 : NACK = ACK detected for START byte- scenario not present\n1 : ACK = ACK detected for START byte </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.7..7> SBYTEACKET
//        <0=> 0: NACK = ACK detected for START byte- scenario not present
//        <1=> 1: ACK = ACK detected for START byte
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_TXABRTSRC_HSNORSTRT  ------------------------------
// SVD Line: 20218

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_HSNORSTRT
//    <name> HSNORSTRT </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101080) \nIndicates That The Restart Is Disabled\n0 : NONABORT = User trying to switch Master to HS mode when RESTART disabled- scenario not present\n1 : ABORT = User trying to switch Master to HS mode when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.8..8> HSNORSTRT
//        <0=> 0: NONABORT = User trying to switch Master to HS mode when RESTART disabled- scenario not present
//        <1=> 1: ABORT = User trying to switch Master to HS mode when RESTART disabled
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_TXABRTSRC_SBYTENORSTRT  ----------------------------
// SVD Line: 20237

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SBYTENORSTRT
//    <name> SBYTENORSTRT </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101080) \nIndicates That The Restart Is Disabled\n0 : NONABORT = User trying to send START byte when RESTART disabled- scenario not present\n1 : ABORT = User trying to send START byte when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.9..9> SBYTENORSTRT
//        <0=> 0: NONABORT = User trying to send START byte when RESTART disabled- scenario not present
//        <1=> 1: ABORT = User trying to send START byte when RESTART disabled
//    </combo>
//  </item>
//  


// -----------------------  Field Item: I2C0_TXABRTSRC_ADDR10BRDNORSTRT  --------------------------
// SVD Line: 20256

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ADDR10BRDNORSTRT
//    <name> ADDR10BRDNORSTRT </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101080) \nIndicates That The Restart Is Disabled\n0 : NONABORT = Master not trying to read in 10Bit addressing mode when RESTART disabled\n1 : ABORT = Master trying to read in 10Bit addressing mode when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.10..10> ADDR10BRDNORSTRT
//        <0=> 0: NONABORT = Master not trying to read in 10Bit addressing mode when RESTART disabled
//        <1=> 1: ABORT = Master trying to read in 10Bit addressing mode when RESTART disabled
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_TXABRTSRC_MASTERIDS  ------------------------------
// SVD Line: 20275

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_MASTERIDS
//    <name> MASTERIDS </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101080) \nIndicates That The User Tries To Initiate A Master Operation With The Master Mode Disabled\n0 : NONABORT = User initiating master operation when MASTER disabled- scenario not present\n1 : ABORT = User initiating master operation when MASTER disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.11..11> MASTERIDS
//        <0=> 0: NONABORT = User initiating master operation when MASTER disabled- scenario not present
//        <1=> 1: ABORT = User initiating master operation when MASTER disabled
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_TXABRTSRC_ARBLOST  -------------------------------
// SVD Line: 20294

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ARBLOST
//    <name> ARBLOST </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x40101080) \nThis Field Specifies That The Master Has Lost Arbitration\n0 : NOTLOST = Master or Slave-Transmitter lost arbitration- scenario not present\n1 : LOST = Master or Slave-Transmitter lost arbitration </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.12..12> ARBLOST
//        <0=> 0: NOTLOST = Master or Slave-Transmitter lost arbitration- scenario not present
//        <1=> 1: LOST = Master or Slave-Transmitter lost arbitration
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C0_TXABRTSRC_SLVFLUSHTXFIFO  ---------------------------
// SVD Line: 20313

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SLVFLUSHTXFIFO
//    <name> SLVFLUSHTXFIFO </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x40101080) \nThis Field Specifies That The Slave Has Received A Read Command And Some Data Exists In The TX FIFO\n0 : NONABORT = Slave flushes existing data in TX-FIFO upon getting read commandscenario not present\n1 : ABORT = Slave flushes existing data in TX-FIFO upon getting read command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.13..13> SLVFLUSHTXFIFO
//        <0=> 0: NONABORT = Slave flushes existing data in TX-FIFO upon getting read commandscenario not present
//        <1=> 1: ABORT = Slave flushes existing data in TX-FIFO upon getting read command
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_TXABRTSRC_SLVARBLOST  -----------------------------
// SVD Line: 20332

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SLVARBLOST
//    <name> SLVARBLOST </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x40101080) \nThis Field Indicates That A Slave Has Lost The Bus While Transmitting Data To A Remote Master\n0 : NOTLOST = Slave lost arbitration to remote master- scenario not present\n1 : LOST = Slave lost arbitration to remote master </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.14..14> SLVARBLOST
//        <0=> 0: NOTLOST = Slave lost arbitration to remote master- scenario not present
//        <1=> 1: LOST = Slave lost arbitration to remote master
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_TXABRTSRC_SLVRDINTX  ------------------------------
// SVD Line: 20351

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SLVRDINTX
//    <name> SLVRDINTX </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x40101080) \nWhen The Processor Side Responds To A Slave Mode Request For Data To Be Transmitted To A Remote Master And User Writes A 1 In Cmd (bit 8) Of Ic_data_cmd Register\n0 : NOTABORT = Slave trying to transmit to remote master in read mode- scenario not present\n1 : ABORT = Slave trying to transmit to remote master in read mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.15..15> SLVRDINTX
//        <0=> 0: NOTABORT = Slave trying to transmit to remote master in read mode- scenario not present
//        <1=> 1: ABORT = Slave trying to transmit to remote master in read mode
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_TXABRTSRC_USRABRT  -------------------------------
// SVD Line: 20370

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_USRABRT
//    <name> USRABRT </name>
//    <r> 
//    <i> [Bit 16] RO (@ 0x40101080) \nThis Is A Master-mode-only Bit. Master Has Detected The Transfer Abort\n0 : NOTABORT = Transfer abort detected by master- scenario not present\n1 : ABORT = Transfer abort detected by master </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.16..16> USRABRT
//        <0=> 0: NOTABORT = Transfer abort detected by master- scenario not present
//        <1=> 1: ABORT = Transfer abort detected by master
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C0_TXABRTSRC_SDASTUCKLOW  -----------------------------
// SVD Line: 20389

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SDASTUCKLOW
//    <name> SDASTUCKLOW </name>
//    <r> 
//    <i> [Bit 17] RO (@ 0x40101080) \nThis Is A Master-mode-only Bit. Master Detects The SDA Stuck At Low\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of SDA stuck at low </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.17..17> SDASTUCKLOW
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of SDA stuck at low
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_TXABRTSRC_DEVNAK  -------------------------------
// SVD Line: 20408

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_DEVNAK
//    <name> DEVNAK </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40101080) \nMaster Is Initiating The DEVICE_ID Transfer And The Device Id Sent Was Not Acknowledged By Any Slave\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for DEVICE-ID </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.18..18> DEVNAK
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for DEVICE-ID
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C0_TXABRTSRC_DEVSLVADDRNAK  ----------------------------
// SVD Line: 20427

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_DEVSLVADDRNAK
//    <name> DEVSLVADDRNAK </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40101080) \nMaster Is Initiating The DEVICE_ID Transfer And The Slave Address Sent Was Not Acknowledged By Any Slave\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for Slave address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.19..19> DEVSLVADDRNAK
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for Slave address
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C0_TXABRTSRC_DEVWRITE  ------------------------------
// SVD Line: 20446

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_DEVWRITE
//    <name> DEVWRITE </name>
//    <r> 
//    <i> [Bit 20] RO (@ 0x40101080) \nMaster Is Initiating The DEVICE_ID Transfer And The Tx-FIFO Consists Of Write Commands\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for Slave address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_TXABRTSRC ) </loc>
//      <o.20..20> DEVWRITE
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for Slave address
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_TXABRTSRC_TXFLUSHCNT  -----------------------------
// SVD Line: 20465

//  <item> SFDITEM_FIELD__I2C0_TXABRTSRC_TXFLUSHCNT
//    <name> TXFLUSHCNT </name>
//    <r> 
//    <i> [Bits 31..23] RO (@ 0x40101080) Indicates The Number Of Tx FIFO Data Commands Which Are Flushed Due To TX_ABRT Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C0_TXABRTSRC >> 23) & 0x1FF) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C0_TXABRTSRC  ---------------------------------
// SVD Line: 20056

//  <rtree> SFDITEM_REG__I2C0_TXABRTSRC
//    <name> TXABRTSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101080) I2C TRANSMIT ABORT SOURCE REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_TXABRTSRC >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ADDR7BNAK </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ADDR10BNAK1 </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ADDR10BNACK2 </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_TXDATANAK </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_GCALLNAK </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_GCALLREAD </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_HSACKDET </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SBYTEACKET </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_HSNORSTRT </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SBYTENORSTRT </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ADDR10BRDNORSTRT </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_MASTERIDS </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_ARBLOST </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SLVFLUSHTXFIFO </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SLVARBLOST </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SLVRDINTX </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_USRABRT </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_SDASTUCKLOW </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_DEVNAK </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_DEVSLVADDRNAK </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_DEVWRITE </item>
//    <item> SFDITEM_FIELD__I2C0_TXABRTSRC_TXFLUSHCNT </item>
//  </rtree>
//  


// -----------------------  Register Item Address: I2C0_SLVDATANACKONLY  --------------------------
// SVD Line: 20474

unsigned int I2C0_SLVDATANACKONLY __AT (0x40101084);



// --------------------------  Field Item: I2C0_SLVDATANACKONLY_NAK  ------------------------------
// SVD Line: 20484

//  <item> SFDITEM_FIELD__I2C0_SLVDATANACKONLY_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101084) \nGenerate Nack. This Nack Generation Only Occurs When I2C Controller Is A Slave-receiver\n0 : DISABLE = Slave receiver generates NACK normally\n1 : ENABLE = Slave receiver generates NACK upon data reception only </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_SLVDATANACKONLY ) </loc>
//      <o.0..0> NAK
//        <0=> 0: DISABLE = Slave receiver generates NACK normally
//        <1=> 1: ENABLE = Slave receiver generates NACK upon data reception only
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: I2C0_SLVDATANACKONLY  ------------------------------
// SVD Line: 20474

//  <rtree> SFDITEM_REG__I2C0_SLVDATANACKONLY
//    <name> SLVDATANACKONLY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101084) GENERATE SLAVE DATA NACK REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_SLVDATANACKONLY >> 0) & 0xFFFFFFFF), ((I2C0_SLVDATANACKONLY = (I2C0_SLVDATANACKONLY & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_SLVDATANACKONLY_NAK </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C0_SDASETUP  ------------------------------
// SVD Line: 20505

unsigned int I2C0_SDASETUP __AT (0x40101094);



// -----------------------------  Field Item: I2C0_SDASETUP_SETUP  --------------------------------
// SVD Line: 20515

//  <item> SFDITEM_FIELD__I2C0_SDASETUP_SETUP
//    <name> SETUP </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101094) SDA Setup (tSU:DAT) </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C0_SDASETUP >> 0) & 0xFF), ((I2C0_SDASETUP = (I2C0_SDASETUP & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C0_SDASETUP  ---------------------------------
// SVD Line: 20505

//  <rtree> SFDITEM_REG__I2C0_SDASETUP
//    <name> SDASETUP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101094) I2C SDA SETUP REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_SDASETUP >> 0) & 0xFFFFFFFF), ((I2C0_SDASETUP = (I2C0_SDASETUP & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_SDASETUP_SETUP </item>
//  </rtree>
//  


// -------------------------  Register Item Address: I2C0_ACKGENCALL  -----------------------------
// SVD Line: 20524

unsigned int I2C0_ACKGENCALL __AT (0x40101098);



// -----------------------------  Field Item: I2C0_ACKGENCALL_ACK  --------------------------------
// SVD Line: 20534

//  <item> SFDITEM_FIELD__I2C0_ACKGENCALL_ACK
//    <name> ACK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101098) \nACK General Call\n0 : NACK = Generate NACK for General Call\n1 : ACK = Generate ACK for a General Call </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_ACKGENCALL ) </loc>
//      <o.0..0> ACK
//        <0=> 0: NACK = Generate NACK for General Call
//        <1=> 1: ACK = Generate ACK for a General Call
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: I2C0_ACKGENCALL  --------------------------------
// SVD Line: 20524

//  <rtree> SFDITEM_REG__I2C0_ACKGENCALL
//    <name> ACKGENCALL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101098) I2C ACK GENERAL CALL REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_ACKGENCALL >> 0) & 0xFFFFFFFF), ((I2C0_ACKGENCALL = (I2C0_ACKGENCALL & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_ACKGENCALL_ACK </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C0_ENSTS  -------------------------------
// SVD Line: 20555

unsigned int I2C0_ENSTS __AT (0x4010109C);



// ------------------------------  Field Item: I2C0_ENSTS_ENABLE  ---------------------------------
// SVD Line: 20565

//  <item> SFDITEM_FIELD__I2C0_ENSTS_ENABLE
//    <name> ENABLE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x4010109C) \nIC Enable Status\n0 : DISABLE = I2C disabled\n1 : ENABLE = I2C enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_ENSTS ) </loc>
//      <o.0..0> ENABLE
//        <0=> 0: DISABLE = I2C disabled
//        <1=> 1: ENABLE = I2C enabled
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C0_ENSTS_SLVDISBUSY  -------------------------------
// SVD Line: 20584

//  <item> SFDITEM_FIELD__I2C0_ENSTS_SLVDISBUSY
//    <name> SLVDISBUSY </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x4010109C) \nSlave Disabled While Busy (Transmit, Receive)\n0 : DISABLE = Slave is disabled when it is idle\n1 : ENABLE = Slave is disabled when it is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_ENSTS ) </loc>
//      <o.1..1> SLVDISBUSY
//        <0=> 0: DISABLE = Slave is disabled when it is idle
//        <1=> 1: ENABLE = Slave is disabled when it is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C0_ENSTS_SLVRXDATALOST  ------------------------------
// SVD Line: 20603

//  <item> SFDITEM_FIELD__I2C0_ENSTS_SLVRXDATALOST
//    <name> SLVRXDATALOST </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x4010109C) \nSlave Received Data Lost\n0 : DISABLE = Slave RX Data is not lost\n1 : ENABLE = Slave RX Data is lost </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C0_ENSTS ) </loc>
//      <o.2..2> SLVRXDATALOST
//        <0=> 0: DISABLE = Slave RX Data is not lost
//        <1=> 1: ENABLE = Slave RX Data is lost
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C0_ENSTS  -----------------------------------
// SVD Line: 20555

//  <rtree> SFDITEM_REG__I2C0_ENSTS
//    <name> ENSTS </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4010109C) I2C ENABLE STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C0_ENSTS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C0_ENSTS_ENABLE </item>
//    <item> SFDITEM_FIELD__I2C0_ENSTS_SLVDISBUSY </item>
//    <item> SFDITEM_FIELD__I2C0_ENSTS_SLVRXDATALOST </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C0_SPKLEN  -------------------------------
// SVD Line: 20624

unsigned int I2C0_SPKLEN __AT (0x401010A0);



// -------------------------------  Field Item: I2C0_SPKLEN_LEN  ----------------------------------
// SVD Line: 20634

//  <item> SFDITEM_FIELD__I2C0_SPKLEN_LEN
//    <name> LEN </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401010A0) Sets the Duration, Measured In Clk Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C0_SPKLEN >> 0) & 0xFF), ((I2C0_SPKLEN = (I2C0_SPKLEN & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: I2C0_SPKLEN  ----------------------------------
// SVD Line: 20624

//  <rtree> SFDITEM_REG__I2C0_SPKLEN
//    <name> SPKLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401010A0) I2C SS, FS OR FM+ RO UFM SPIKE SUPPRESSION LIMIT </i>
//    <loc> ( (unsigned int)((I2C0_SPKLEN >> 0) & 0xFFFFFFFF), ((I2C0_SPKLEN = (I2C0_SPKLEN & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C0_SPKLEN_LEN </item>
//  </rtree>
//  


// ------------------------  Register Item Address: I2C0_CLRRESTARTDET  ---------------------------
// SVD Line: 20643

unsigned int I2C0_CLRRESTARTDET __AT (0x401010A8);



// ----------------------------  Register Item: I2C0_CLRRESTARTDET  -------------------------------
// SVD Line: 20643

//  <item> SFDITEM_REG__I2C0_CLRRESTARTDET
//    <name> CLRRESTARTDET </name>
//    <i> [Bits 31..0] RW (@ 0x401010A8) CLEAR RESTART_DET INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRRESTARTDET >> 0) & 0xFFFFFFFF), ((I2C0_CLRRESTARTDET = (I2C0_CLRRESTARTDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C0_SCLLOWTO  ------------------------------
// SVD Line: 20653

unsigned int I2C0_SCLLOWTO __AT (0x401010AC);



// ------------------------------  Register Item: I2C0_SCLLOWTO  ----------------------------------
// SVD Line: 20653

//  <item> SFDITEM_REG__I2C0_SCLLOWTO
//    <name> SCLLOWTO </name>
//    <i> [Bits 31..0] RW (@ 0x401010AC) I2C SCL STUCK AT LOW TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_SCLLOWTO >> 0) & 0xFFFFFFFF), ((I2C0_SCLLOWTO = (I2C0_SCLLOWTO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C0_SDALOWTO  ------------------------------
// SVD Line: 20663

unsigned int I2C0_SDALOWTO __AT (0x401010B0);



// ------------------------------  Register Item: I2C0_SDALOWTO  ----------------------------------
// SVD Line: 20663

//  <item> SFDITEM_REG__I2C0_SDALOWTO
//    <name> SDALOWTO </name>
//    <i> [Bits 31..0] RW (@ 0x401010B0) I2C SDA STUCK AT LOW TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_SDALOWTO >> 0) & 0xFFFFFFFF), ((I2C0_SDALOWTO = (I2C0_SDALOWTO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: I2C0_CLRSCLSTUCKDET  ---------------------------
// SVD Line: 20673

unsigned int I2C0_CLRSCLSTUCKDET __AT (0x401010B4);



// ---------------------------  Register Item: I2C0_CLRSCLSTUCKDET  -------------------------------
// SVD Line: 20673

//  <item> SFDITEM_REG__I2C0_CLRSCLSTUCKDET
//    <name> CLRSCLSTUCKDET </name>
//    <i> [Bits 31..0] RW (@ 0x401010B4) CLEAR SCL STUCK AT LOW DETECT INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C0_CLRSCLSTUCKDET >> 0) & 0xFFFFFFFF), ((I2C0_CLRSCLSTUCKDET = (I2C0_CLRSCLSTUCKDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------------  Peripheral View: I2C0  -------------------------------------
// SVD Line: 18080

//  <view> I2C0
//    <name> I2C0 </name>
//    <item> SFDITEM_REG__I2C0_CON </item>
//    <item> SFDITEM_REG__I2C0_TAR </item>
//    <item> SFDITEM_REG__I2C0_SAR </item>
//    <item> SFDITEM_REG__I2C0_DATACMD </item>
//    <item> SFDITEM_REG__I2C0_SCLHCNT </item>
//    <item> SFDITEM_REG__I2C0_SCLLCNT </item>
//    <item> SFDITEM_REG__I2C0_FSSCLHCNT </item>
//    <item> SFDITEM_REG__I2C0_FSSCLLCNT </item>
//    <item> SFDITEM_REG__I2C0_INTSTAT </item>
//    <item> SFDITEM_REG__I2C0_INTMASK </item>
//    <item> SFDITEM_REG__I2C0_RAWINTSTAT </item>
//    <item> SFDITEM_REG__I2C0_RXTL </item>
//    <item> SFDITEM_REG__I2C0_TXTL </item>
//    <item> SFDITEM_REG__I2C0_CLRINT </item>
//    <item> SFDITEM_REG__I2C0_CLRRXUNDER </item>
//    <item> SFDITEM_REG__I2C0_CLRRXOVER </item>
//    <item> SFDITEM_REG__I2C0_CLRTXOVER </item>
//    <item> SFDITEM_REG__I2C0_CLRRDREQ </item>
//    <item> SFDITEM_REG__I2C0_CLRTXABRT </item>
//    <item> SFDITEM_REG__I2C0_CLRRXDONE </item>
//    <item> SFDITEM_REG__I2C0_CLRACTIVITY </item>
//    <item> SFDITEM_REG__I2C0_CLRSTOPDET </item>
//    <item> SFDITEM_REG__I2C0_CLRSTARTDET </item>
//    <item> SFDITEM_REG__I2C0_CLRGENCALL </item>
//    <item> SFDITEM_REG__I2C0_ENABLE </item>
//    <item> SFDITEM_REG__I2C0_STATUS </item>
//    <item> SFDITEM_REG__I2C0_TXFLR </item>
//    <item> SFDITEM_REG__I2C0_RXFLR </item>
//    <item> SFDITEM_REG__I2C0_SDAHOLD </item>
//    <item> SFDITEM_REG__I2C0_TXABRTSRC </item>
//    <item> SFDITEM_REG__I2C0_SLVDATANACKONLY </item>
//    <item> SFDITEM_REG__I2C0_SDASETUP </item>
//    <item> SFDITEM_REG__I2C0_ACKGENCALL </item>
//    <item> SFDITEM_REG__I2C0_ENSTS </item>
//    <item> SFDITEM_REG__I2C0_SPKLEN </item>
//    <item> SFDITEM_REG__I2C0_CLRRESTARTDET </item>
//    <item> SFDITEM_REG__I2C0_SCLLOWTO </item>
//    <item> SFDITEM_REG__I2C0_SDALOWTO </item>
//    <item> SFDITEM_REG__I2C0_CLRSCLSTUCKDET </item>
//  </view>
//  


// -----------------------------  Register Item Address: I2C1_CON  --------------------------------
// SVD Line: 18108

unsigned int I2C1_CON __AT (0x40101200);



// -------------------------------  Field Item: I2C1_CON_MATSER  ----------------------------------
// SVD Line: 18118

//  <item> SFDITEM_FIELD__I2C1_CON_MATSER
//    <name> MATSER </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101200) \nEnable/Disable Master Mode\n0 : DISABLE = Master mode is disabled\n1 : ENABLE = Master mode is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.0..0> MATSER
//        <0=> 0: DISABLE = Master mode is disabled
//        <1=> 1: ENABLE = Master mode is enabled
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C1_CON_SPEED  -----------------------------------
// SVD Line: 18137

//  <item> SFDITEM_FIELD__I2C1_CON_SPEED
//    <name> SPEED </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40101200) \nSpeed Mode\n0 : NONE = Not defined\n1 : STANDARD = Standard speed\n2 : FAST = Fast speed\n3 : HIGH = High speed </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.2..1> SPEED
//        <0=> 0: NONE = Not defined
//        <1=> 1: STANDARD = Standard speed
//        <2=> 2: FAST = Fast speed
//        <3=> 3: HIGH = High speed
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_CON_SLV10BIT  ---------------------------------
// SVD Line: 18166

//  <item> SFDITEM_FIELD__I2C1_CON_SLV10BIT
//    <name> SLV10BIT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101200) \nSlave Responds To 7-bit Or 10-bit Addresses\n0 : 7_BIT = Slave 7-bit addressing\n1 : 10_BIT = Slave 10-bit addressing </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.3..3> SLV10BIT
//        <0=> 0: 7_BIT = Slave 7-bit addressing
//        <1=> 1: 10_BIT = Slave 10-bit addressing
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_CON_MST10BIT  ---------------------------------
// SVD Line: 18185

//  <item> SFDITEM_FIELD__I2C1_CON_MST10BIT
//    <name> MST10BIT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40101200) \nMaster Is 7-bit Or 10-bit Addressing Mode\n0 : 7_BIT = Master 7-bit addressing\n1 : 10_BIT = Master 10-bit addressing </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.4..4> MST10BIT
//        <0=> 0: 7_BIT = Master 7-bit addressing
//        <1=> 1: 10_BIT = Master 10-bit addressing
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_CON_RESTREN  ----------------------------------
// SVD Line: 18204

//  <item> SFDITEM_FIELD__I2C1_CON_RESTREN
//    <name> RESTREN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40101200) \nEnable/Disable Master Restart\n0 : DISABLE = Master restart disabled\n1 : ENABLE = Master restart enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.5..5> RESTREN
//        <0=> 0: DISABLE = Master restart disabled
//        <1=> 1: ENABLE = Master restart enabled
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_CON_SLVDISABLE  --------------------------------
// SVD Line: 18223

//  <item> SFDITEM_FIELD__I2C1_CON_SLVDISABLE
//    <name> SLVDISABLE </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101200) \nEnable/Disable Slave Mode\n0 : Enable = Enable slave mode\n1 : Disable = Disable slave mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.6..6> SLVDISABLE
//        <0=> 0: Enable = Enable slave mode
//        <1=> 1: Disable = Disable slave mode
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C1_CON_STPDET  ----------------------------------
// SVD Line: 18242

//  <item> SFDITEM_FIELD__I2C1_CON_STPDET
//    <name> STPDET </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101200) \nHow Slave Issues Stop Detection Interrupt\n0 : ALWAYS = Slave issues stop detection interrupt always\n1 : ADDRESSED = Slave issues stop detection interrupt only if addressed </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.7..7> STPDET
//        <0=> 0: ALWAYS = Slave issues stop detection interrupt always
//        <1=> 1: ADDRESSED = Slave issues stop detection interrupt only if addressed
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_CON_TXEMPTYCTRL  --------------------------------
// SVD Line: 18261

//  <item> SFDITEM_FIELD__I2C1_CON_TXEMPTYCTRL
//    <name> TXEMPTYCTRL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101200) \nControls the Generation Of The Tx Empty Interrupt\n0 : DISABLE = Default behaviour of tx empty interrupt\n1 : ENABLE = Controlled generation of tx empty interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.8..8> TXEMPTYCTRL
//        <0=> 0: DISABLE = Default behaviour of tx empty interrupt
//        <1=> 1: ENABLE = Controlled generation of tx empty interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_CON_RXFULLHLDC  --------------------------------
// SVD Line: 18280

//  <item> SFDITEM_FIELD__I2C1_CON_RXFULLHLDC
//    <name> RXFULLHLDC </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40101200) \nHold the Bus When The Rx FIFO Is Full Or Not\n0 : DISABLE = Overflow when RX FIFO is full\n1 : ENABLE = Hold bus when RX FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.9..9> RXFULLHLDC
//        <0=> 0: DISABLE = Overflow when RX FIFO is full
//        <1=> 1: ENABLE = Hold bus when RX FIFO is full
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_CON_STPMSTACTIVE  -------------------------------
// SVD Line: 18299

//  <item> SFDITEM_FIELD__I2C1_CON_STPMSTACTIVE
//    <name> STPMSTACTIVE </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101200) \nHow I2c Controller Issues The Stop Detection Interrupt\n0 : DISABLE = Master issues the stop detection interrupt irrespective of whether master is active or not\n1 : ENABLE = Master issues the stop detection interrupt only when master is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.10..10> STPMSTACTIVE
//        <0=> 0: DISABLE = Master issues the stop detection interrupt irrespective of whether master is active or not
//        <1=> 1: ENABLE = Master issues the stop detection interrupt only when master is active
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_CON_BUSCLREN  ---------------------------------
// SVD Line: 18318

//  <item> SFDITEM_FIELD__I2C1_CON_BUSCLREN
//    <name> BUSCLREN </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101200) \nEnables the Bus Clear Feature\n0 : DISABLE = Bus Clear Feature is enabled\n1 : ENABLE = Bus Clear Feature is disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_CON ) </loc>
//      <o.11..11> BUSCLREN
//        <0=> 0: DISABLE = Bus Clear Feature is enabled
//        <1=> 1: ENABLE = Bus Clear Feature is disabled
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: I2C1_CON  ------------------------------------
// SVD Line: 18108

//  <rtree> SFDITEM_REG__I2C1_CON
//    <name> CON </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101200) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_CON >> 0) & 0xFFFFFFFF), ((I2C1_CON = (I2C1_CON & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_CON_MATSER </item>
//    <item> SFDITEM_FIELD__I2C1_CON_SPEED </item>
//    <item> SFDITEM_FIELD__I2C1_CON_SLV10BIT </item>
//    <item> SFDITEM_FIELD__I2C1_CON_MST10BIT </item>
//    <item> SFDITEM_FIELD__I2C1_CON_RESTREN </item>
//    <item> SFDITEM_FIELD__I2C1_CON_SLVDISABLE </item>
//    <item> SFDITEM_FIELD__I2C1_CON_STPDET </item>
//    <item> SFDITEM_FIELD__I2C1_CON_TXEMPTYCTRL </item>
//    <item> SFDITEM_FIELD__I2C1_CON_RXFULLHLDC </item>
//    <item> SFDITEM_FIELD__I2C1_CON_STPMSTACTIVE </item>
//    <item> SFDITEM_FIELD__I2C1_CON_BUSCLREN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: I2C1_TAR  --------------------------------
// SVD Line: 18339

unsigned int I2C1_TAR __AT (0x40101204);



// --------------------------------  Field Item: I2C1_TAR_TAR  ------------------------------------
// SVD Line: 18349

//  <item> SFDITEM_FIELD__I2C1_TAR_TAR
//    <name> TAR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x40101204) Target Address For Any Master Transaction </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C1_TAR >> 0) & 0x3FF), ((I2C1_TAR = (I2C1_TAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: I2C1_TAR_GCORSTR  ----------------------------------
// SVD Line: 18356

//  <item> SFDITEM_FIELD__I2C1_TAR_GCORSTR
//    <name> GCORSTR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101204) \nIndicates Whether A General Call Or Start Byte Command\n0 : GEN_CALL = General Call byte transmission\n1 : START = START byte transmission </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TAR ) </loc>
//      <o.10..10> GCORSTR
//        <0=> 0: GEN_CALL = General Call byte transmission
//        <1=> 1: START = START byte transmission
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_TAR_SPECIAL  ----------------------------------
// SVD Line: 18375

//  <item> SFDITEM_FIELD__I2C1_TAR_SPECIAL
//    <name> SPECIAL </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101204) \nIndicates Whether Software Performs A Device-id Or General Call Or Start Byte Command\n0 : DISABLE = Disables programming of GENERAL_CALL or START_BYTE transmission\n1 : ENABLE = Enables programming of GENERAL_CALL or START_BYTE transmission </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TAR ) </loc>
//      <o.11..11> SPECIAL
//        <0=> 0: DISABLE = Disables programming of GENERAL_CALL or START_BYTE transmission
//        <1=> 1: ENABLE = Enables programming of GENERAL_CALL or START_BYTE transmission
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: I2C1_TAR  ------------------------------------
// SVD Line: 18339

//  <rtree> SFDITEM_REG__I2C1_TAR
//    <name> TAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101204) TARGET ADDRESS REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_TAR >> 0) & 0xFFFFFFFF), ((I2C1_TAR = (I2C1_TAR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_TAR_TAR </item>
//    <item> SFDITEM_FIELD__I2C1_TAR_GCORSTR </item>
//    <item> SFDITEM_FIELD__I2C1_TAR_SPECIAL </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: I2C1_SAR  --------------------------------
// SVD Line: 18396

unsigned int I2C1_SAR __AT (0x40101208);



// --------------------------------  Field Item: I2C1_SAR_SAR  ------------------------------------
// SVD Line: 18406

//  <item> SFDITEM_FIELD__I2C1_SAR_SAR
//    <name> SAR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x40101208) Holds The Slave Address When The I2c Is Operating As A Slave </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C1_SAR >> 0) & 0x3FF), ((I2C1_SAR = (I2C1_SAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C1_SAR  ------------------------------------
// SVD Line: 18396

//  <rtree> SFDITEM_REG__I2C1_SAR
//    <name> SAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101208) SLAVE ADDRESS REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_SAR >> 0) & 0xFFFFFFFF), ((I2C1_SAR = (I2C1_SAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_SAR_SAR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C1_DATACMD  ------------------------------
// SVD Line: 18415

unsigned int I2C1_DATACMD __AT (0x40101210);



// ------------------------------  Field Item: I2C1_DATACMD_DATA  ---------------------------------
// SVD Line: 18425

//  <item> SFDITEM_FIELD__I2C1_DATACMD_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101210) The Data To Be Transmitted Or Received On The I2C Bus </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C1_DATACMD >> 0) & 0xFF), ((I2C1_DATACMD = (I2C1_DATACMD & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: I2C1_DATACMD_CMD  ----------------------------------
// SVD Line: 18432

//  <item> SFDITEM_FIELD__I2C1_DATACMD_CMD
//    <name> CMD </name>
//    <w> 
//    <i> [Bit 8] WO (@ 0x40101210) \nControls Whether A Read Or A Write Is Performed\n0 : WRITE = Master write command\n1 : read-only = Master read command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_DATACMD ) </loc>
//      <o.8..8> CMD
//        <0=> 0: WRITE = Master write command
//        <1=> 1: read-only = Master read command
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_DATACMD_STOP  ---------------------------------
// SVD Line: 18451

//  <item> SFDITEM_FIELD__I2C1_DATACMD_STOP
//    <name> STOP </name>
//    <w> 
//    <i> [Bit 9] WO (@ 0x40101210) \nControls Whether A Stop Is Issued After The Byte Is Sent Or Received\n0 : DISABLE = Do not issue STOP after this command\n1 : ENABLE = Issue STOP after this command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_DATACMD ) </loc>
//      <o.9..9> STOP
//        <0=> 0: DISABLE = Do not issue STOP after this command
//        <1=> 1: ENABLE = Issue STOP after this command
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_DATACMD_RESTART  --------------------------------
// SVD Line: 18470

//  <item> SFDITEM_FIELD__I2C1_DATACMD_RESTART
//    <name> RESTART </name>
//    <w> 
//    <i> [Bit 10] WO (@ 0x40101210) \nControls Whether a RESTART Is Issued Before The Byte Is Sent Or Received\n0 : DISABLE = Do not Issue RESTART before this command\n1 : ENABLE = Issue RESTART before this command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_DATACMD ) </loc>
//      <o.10..10> RESTART
//        <0=> 0: DISABLE = Do not Issue RESTART before this command
//        <1=> 1: ENABLE = Issue RESTART before this command
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_DATACMD_FIRSTDATA  -------------------------------
// SVD Line: 18489

//  <item> SFDITEM_FIELD__I2C1_DATACMD_FIRSTDATA
//    <name> FIRSTDATA </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101210) \nIndicates The First Data Byte Received After The Address Phase\n0 : INACTIVE = Non sequential data byte received\n1 : ACTIVE = Sequential data byte received </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_DATACMD ) </loc>
//      <o.11..11> FIRSTDATA
//        <0=> 0: INACTIVE = Non sequential data byte received
//        <1=> 1: ACTIVE = Sequential data byte received
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C1_DATACMD  ----------------------------------
// SVD Line: 18415

//  <rtree> SFDITEM_REG__I2C1_DATACMD
//    <name> DATACMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101210) DATA BUFFER AND COMMAND REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_DATACMD >> 0) & 0xFFFFFFFF), ((I2C1_DATACMD = (I2C1_DATACMD & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_DATACMD_DATA </item>
//    <item> SFDITEM_FIELD__I2C1_DATACMD_CMD </item>
//    <item> SFDITEM_FIELD__I2C1_DATACMD_STOP </item>
//    <item> SFDITEM_FIELD__I2C1_DATACMD_RESTART </item>
//    <item> SFDITEM_FIELD__I2C1_DATACMD_FIRSTDATA </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C1_SCLHCNT  ------------------------------
// SVD Line: 18510

unsigned int I2C1_SCLHCNT __AT (0x40101214);



// ------------------------------  Field Item: I2C1_SCLHCNT_HCNT  ---------------------------------
// SVD Line: 18520

//  <item> SFDITEM_FIELD__I2C1_SCLHCNT_HCNT
//    <name> HCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101214) Sets the SCL Clock High-period Count For Standard Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C1_SCLHCNT >> 0) & 0xFFFF), ((I2C1_SCLHCNT = (I2C1_SCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C1_SCLHCNT  ----------------------------------
// SVD Line: 18510

//  <rtree> SFDITEM_REG__I2C1_SCLHCNT
//    <name> SCLHCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101214) STANDARD SPEED I2C CLOCK SCL HIGH COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_SCLHCNT >> 0) & 0xFFFFFFFF), ((I2C1_SCLHCNT = (I2C1_SCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_SCLHCNT_HCNT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C1_SCLLCNT  ------------------------------
// SVD Line: 18529

unsigned int I2C1_SCLLCNT __AT (0x40101218);



// ------------------------------  Field Item: I2C1_SCLLCNT_LCNT  ---------------------------------
// SVD Line: 18539

//  <item> SFDITEM_FIELD__I2C1_SCLLCNT_LCNT
//    <name> LCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101218) Sets the SCL Clock Low-period Count For Standard Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C1_SCLLCNT >> 0) & 0xFFFF), ((I2C1_SCLLCNT = (I2C1_SCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C1_SCLLCNT  ----------------------------------
// SVD Line: 18529

//  <rtree> SFDITEM_REG__I2C1_SCLLCNT
//    <name> SCLLCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101218) STANDARD SPEED I2C CLOCK SCL LOW COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_SCLLCNT >> 0) & 0xFFFFFFFF), ((I2C1_SCLLCNT = (I2C1_SCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_SCLLCNT_LCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C1_FSSCLHCNT  -----------------------------
// SVD Line: 18548

unsigned int I2C1_FSSCLHCNT __AT (0x4010121C);



// -----------------------------  Field Item: I2C1_FSSCLHCNT_HCNT  --------------------------------
// SVD Line: 18558

//  <item> SFDITEM_FIELD__I2C1_FSSCLHCNT_HCNT
//    <name> HCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010121C) Sets the SCL Clock High-period Count For Fast Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C1_FSSCLHCNT >> 0) & 0xFFFF), ((I2C1_FSSCLHCNT = (I2C1_FSSCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C1_FSSCLHCNT  ---------------------------------
// SVD Line: 18548

//  <rtree> SFDITEM_REG__I2C1_FSSCLHCNT
//    <name> FSSCLHCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010121C) FAST MODE SCL HIGH COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_FSSCLHCNT >> 0) & 0xFFFFFFFF), ((I2C1_FSSCLHCNT = (I2C1_FSSCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_FSSCLHCNT_HCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C1_FSSCLLCNT  -----------------------------
// SVD Line: 18567

unsigned int I2C1_FSSCLLCNT __AT (0x40101220);



// -----------------------------  Field Item: I2C1_FSSCLLCNT_LCNT  --------------------------------
// SVD Line: 18577

//  <item> SFDITEM_FIELD__I2C1_FSSCLLCNT_LCNT
//    <name> LCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101220) Sets the SCL Clock Low-period Count For Fast Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C1_FSSCLLCNT >> 0) & 0xFFFF), ((I2C1_FSSCLLCNT = (I2C1_FSSCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C1_FSSCLLCNT  ---------------------------------
// SVD Line: 18567

//  <rtree> SFDITEM_REG__I2C1_FSSCLLCNT
//    <name> FSSCLLCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101220) FAST MODE SCL LOW COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_FSSCLLCNT >> 0) & 0xFFFFFFFF), ((I2C1_FSSCLLCNT = (I2C1_FSSCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_FSSCLLCNT_LCNT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C1_INTSTAT  ------------------------------
// SVD Line: 18586

unsigned int I2C1_INTSTAT __AT (0x4010122C);



// ----------------------------  Field Item: I2C1_INTSTAT_RXUNDER  --------------------------------
// SVD Line: 18596

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_RXUNDER
//    <name> RXUNDER </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x4010122C) \nRX_UNDER Interrupt\n0 : INACTIVE = RX_UNDER interrupt is inactive\n1 : ACTIVE = RX_UNDER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.0..0> RXUNDER
//        <0=> 0: INACTIVE = RX_UNDER interrupt is inactive
//        <1=> 1: ACTIVE = RX_UNDER interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_INTSTAT_RXOVER  --------------------------------
// SVD Line: 18615

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_RXOVER
//    <name> RXOVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x4010122C) \nRX_OVER Interrupt\n0 : INACTIVE = RX_OVER interrupt is inactive\n1 : ACTIVE = RX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.1..1> RXOVER
//        <0=> 0: INACTIVE = RX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = RX_OVER interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_INTSTAT_RXFULL  --------------------------------
// SVD Line: 18634

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_RXFULL
//    <name> RXFULL </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x4010122C) \nRX_FULL Interrupt\n0 : INACTIVE = RX_FULL interrupt is inactive\n1 : ACTIVE = RX_FULL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.2..2> RXFULL
//        <0=> 0: INACTIVE = RX_FULL interrupt is inactive
//        <1=> 1: ACTIVE = RX_FULL interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_INTSTAT_TXOVER  --------------------------------
// SVD Line: 18653

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_TXOVER
//    <name> TXOVER </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4010122C) \nTX_OVER Interrupt\n0 : INACTIVE = TX_OVER interrupt is inactive\n1 : ACTIVE = TX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.3..3> TXOVER
//        <0=> 0: INACTIVE = TX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = TX_OVER interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_INTSTAT_TXEMPTY  --------------------------------
// SVD Line: 18672

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_TXEMPTY
//    <name> TXEMPTY </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x4010122C) \nTX_EMPTY Interrupt\n0 : INACTIVE = TX_EMPTY interrupt is inactive\n1 : ACTIVE = TX_EMPTY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.4..4> TXEMPTY
//        <0=> 0: INACTIVE = TX_EMPTY interrupt is inactive
//        <1=> 1: ACTIVE = TX_EMPTY interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_INTSTAT_RDREQ  ---------------------------------
// SVD Line: 18691

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_RDREQ
//    <name> RDREQ </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x4010122C) \nRD_REQ interrupt\n0 : INACTIVE = RD_REQ interrupt is inactive\n1 : ACTIVE = RD_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.5..5> RDREQ
//        <0=> 0: INACTIVE = RD_REQ interrupt is inactive
//        <1=> 1: ACTIVE = RD_REQ interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_INTSTAT_TXABRT  --------------------------------
// SVD Line: 18710

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_TXABRT
//    <name> TXABRT </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x4010122C) \nTX_ABRT Interrupt\n0 : INACTIVE = TX_ABRT interrupt is inactive\n1 : ACTIVE = TX_ABRT interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.6..6> TXABRT
//        <0=> 0: INACTIVE = TX_ABRT interrupt is inactive
//        <1=> 1: ACTIVE = TX_ABRT interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_INTSTAT_RXDONE  --------------------------------
// SVD Line: 18729

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_RXDONE
//    <name> RXDONE </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x4010122C) \nRX_DONE Interrupt\n0 : INACTIVE = RX_DONE interrupt is inactive\n1 : ACTIVE = RX_DONE interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.7..7> RXDONE
//        <0=> 0: INACTIVE = RX_DONE interrupt is inactive
//        <1=> 1: ACTIVE = RX_DONE interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_INTSTAT_ACTIVITY  -------------------------------
// SVD Line: 18748

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_ACTIVITY
//    <name> ACTIVITY </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x4010122C) \nACTIVITY Interrupt\n0 : INACTIVE = ACTIVITY interrupt is inactive\n1 : ACTIVE = ACTIVITY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.8..8> ACTIVITY
//        <0=> 0: INACTIVE = ACTIVITY interrupt is inactive
//        <1=> 1: ACTIVE = ACTIVITY interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_INTSTAT_STOPDET  --------------------------------
// SVD Line: 18767

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_STOPDET
//    <name> STOPDET </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x4010122C) \nSTOP_DET Interrupt\n0 : INACTIVE = STOP_DET interrupt is inactive\n1 : ACTIVE = STOP_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.9..9> STOPDET
//        <0=> 0: INACTIVE = STOP_DET interrupt is inactive
//        <1=> 1: ACTIVE = STOP_DET interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_INTSTAT_STARTDET  -------------------------------
// SVD Line: 18786

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_STARTDET
//    <name> STARTDET </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x4010122C) \nSTART_DET Interrupt\n0 : INACTIVE = START_DET interrupt is inactive\n1 : ACTIVE = START_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.10..10> STARTDET
//        <0=> 0: INACTIVE = START_DET interrupt is inactive
//        <1=> 1: ACTIVE = START_DET interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_INTSTAT_GENCALL  --------------------------------
// SVD Line: 18805

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_GENCALL
//    <name> GENCALL </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x4010122C) \nGEN_CALL Interrupt\n0 : INACTIVE = GEN-CALL interrupt is inactive\n1 : ACTIVE = GEN-CALL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.11..11> GENCALL
//        <0=> 0: INACTIVE = GEN-CALL interrupt is inactive
//        <1=> 1: ACTIVE = GEN-CALL interrupt is active
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTSTAT_RESTARTDET  ------------------------------
// SVD Line: 18824

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_RESTARTDET
//    <name> RESTARTDET </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x4010122C) \nRESTART_DET Interrupt\n0 : INACTIVE = RESTART_DET interrupt is inactive\n1 : ACTIVE = RESTART_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.12..12> RESTARTDET
//        <0=> 0: INACTIVE = RESTART_DET interrupt is inactive
//        <1=> 1: ACTIVE = RESTART_DET interrupt is active
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTSTAT_MSTONHOLD  -------------------------------
// SVD Line: 18843

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_MSTONHOLD
//    <name> MSTONHOLD </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x4010122C) \nMASTER_ON_HOLD Interrupt\n0 : INACTIVE = MASTER_ON_HOLD interrupt is inactive\n1 : ACTIVE = MASTER_ON_HOLD interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.13..13> MSTONHOLD
//        <0=> 0: INACTIVE = MASTER_ON_HOLD interrupt is inactive
//        <1=> 1: ACTIVE = MASTER_ON_HOLD interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_INTSTAT_SCLSTUCKLOW  ------------------------------
// SVD Line: 18862

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_SCLSTUCKLOW
//    <name> SCLSTUCKLOW </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x4010122C) \nSCL_STUCK_AT_LOW Interrupt\n0 : INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive\n1 : ACTIVE = SCL_STUCK_AT_LOW interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.14..14> SCLSTUCKLOW
//        <0=> 0: INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive
//        <1=> 1: ACTIVE = SCL_STUCK_AT_LOW interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C1_INTSTAT_WRREQ  ---------------------------------
// SVD Line: 18881

//  <item> SFDITEM_FIELD__I2C1_INTSTAT_WRREQ
//    <name> WRREQ </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x4010122C) \nWR_REQ Interrupt\n0 : INACTIVE = WR_REQ interrupt is inactive\n1 : ACTIVE = WR_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTSTAT ) </loc>
//      <o.15..15> WRREQ
//        <0=> 0: INACTIVE = WR_REQ interrupt is inactive
//        <1=> 1: ACTIVE = WR_REQ interrupt is active
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C1_INTSTAT  ----------------------------------
// SVD Line: 18586

//  <rtree> SFDITEM_REG__I2C1_INTSTAT
//    <name> INTSTAT </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4010122C) I2C INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_INTSTAT >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_RXUNDER </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_RXOVER </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_RXFULL </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_TXOVER </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_TXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_RDREQ </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_TXABRT </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_RXDONE </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_ACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_STOPDET </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_STARTDET </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_GENCALL </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_RESTARTDET </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_MSTONHOLD </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_SCLSTUCKLOW </item>
//    <item> SFDITEM_FIELD__I2C1_INTSTAT_WRREQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C1_INTMASK  ------------------------------
// SVD Line: 18902

unsigned int I2C1_INTMASK __AT (0x40101230);



// ---------------------------  Field Item: I2C1_INTMASK_RXUNDERMSK  ------------------------------
// SVD Line: 18912

//  <item> SFDITEM_FIELD__I2C1_INTMASK_RXUNDERMSK
//    <name> RXUNDERMSK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101230) \nRX_UNDER Interrupt Mask\n0 : MASKED = RX_UNDER interrupt is masked\n1 : UNMASKED = RX_UNDER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.0..0> RXUNDERMSK
//        <0=> 0: MASKED = RX_UNDER interrupt is masked
//        <1=> 1: UNMASKED = RX_UNDER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTMASK_RXOVERMSK  -------------------------------
// SVD Line: 18931

//  <item> SFDITEM_FIELD__I2C1_INTMASK_RXOVERMSK
//    <name> RXOVERMSK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101230) \nRX_OVER Interrupt Mask\n0 : MASKED = RX_OVER interrupt is masked\n1 : UNMASKED = RX_OVER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.1..1> RXOVERMSK
//        <0=> 0: MASKED = RX_OVER interrupt is masked
//        <1=> 1: UNMASKED = RX_OVER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTMASK_RXFULLMSK  -------------------------------
// SVD Line: 18950

//  <item> SFDITEM_FIELD__I2C1_INTMASK_RXFULLMSK
//    <name> RXFULLMSK </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101230) \nRX_FULL Interrupt Mask\n0 : MASKED = RX_FULL interrupt is masked\n1 : UNMASKED = RX_FULL interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.2..2> RXFULLMSK
//        <0=> 0: MASKED = RX_FULL interrupt is masked
//        <1=> 1: UNMASKED = RX_FULL interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTMASK_TXOVERMSK  -------------------------------
// SVD Line: 18969

//  <item> SFDITEM_FIELD__I2C1_INTMASK_TXOVERMSK
//    <name> TXOVERMSK </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101230) \nTX_OVER Interrupt Mask\n0 : MASKED = TX_OVER interrupt is masked\n1 : UNMASKED = TX_OVER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.3..3> TXOVERMSK
//        <0=> 0: MASKED = TX_OVER interrupt is masked
//        <1=> 1: UNMASKED = TX_OVER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTMASK_TXEMPTYMSK  ------------------------------
// SVD Line: 18988

//  <item> SFDITEM_FIELD__I2C1_INTMASK_TXEMPTYMSK
//    <name> TXEMPTYMSK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40101230) \nTX_EMPTY Interrupt Mask\n0 : MASKED = TX_EMPTY interrupt is masked\n1 : UNMASKED = TX_EMPTY interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.4..4> TXEMPTYMSK
//        <0=> 0: MASKED = TX_EMPTY interrupt is masked
//        <1=> 1: UNMASKED = TX_EMPTY interrupt is unmasked
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_INTMASK_RDREQMSK  -------------------------------
// SVD Line: 19007

//  <item> SFDITEM_FIELD__I2C1_INTMASK_RDREQMSK
//    <name> RDREQMSK </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40101230) \nRD_REQ Interrupt Mask\n0 : MASKED = RD_REQ interrupt is masked\n1 : UNMASKED = RD_REQ interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.5..5> RDREQMSK
//        <0=> 0: MASKED = RD_REQ interrupt is masked
//        <1=> 1: UNMASKED = RD_REQ interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTMASK_TXABRTMSK  -------------------------------
// SVD Line: 19026

//  <item> SFDITEM_FIELD__I2C1_INTMASK_TXABRTMSK
//    <name> TXABRTMSK </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101230) \nTX_ABRT Interrupt Mask\n0 : MASKED = TX_ABRT interrupt is masked\n1 : UNMASKED = TX_ABRT interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.6..6> TXABRTMSK
//        <0=> 0: MASKED = TX_ABRT interrupt is masked
//        <1=> 1: UNMASKED = TX_ABRT interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTMASK_RXDONEMSK  -------------------------------
// SVD Line: 19045

//  <item> SFDITEM_FIELD__I2C1_INTMASK_RXDONEMSK
//    <name> RXDONEMSK </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101230) \nRX_DONE Interrupt Mask\n0 : MASKED = RX_DONE interrupt is masked\n1 : UNMASKED = RX_DONE interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.7..7> RXDONEMSK
//        <0=> 0: MASKED = RX_DONE interrupt is masked
//        <1=> 1: UNMASKED = RX_DONE interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_INTMASK_ACTIVITYMSK  ------------------------------
// SVD Line: 19064

//  <item> SFDITEM_FIELD__I2C1_INTMASK_ACTIVITYMSK
//    <name> ACTIVITYMSK </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101230) \nACTIVITY Interrupt Mask\n0 : MASKED = ACTIVITY interrupt is masked\n1 : UNMASKED = ACTIVITY interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.8..8> ACTIVITYMSK
//        <0=> 0: MASKED = ACTIVITY interrupt is masked
//        <1=> 1: UNMASKED = ACTIVITY interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTMASK_STOPDETMSK  ------------------------------
// SVD Line: 19083

//  <item> SFDITEM_FIELD__I2C1_INTMASK_STOPDETMSK
//    <name> STOPDETMSK </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40101230) \nSTOP_DET Interrupt Mask\n0 : MASKED = STOP_DET interrupt is masked\n1 : UNMASKED = STOP_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.9..9> STOPDETMSK
//        <0=> 0: MASKED = STOP_DET interrupt is masked
//        <1=> 1: UNMASKED = STOP_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_INTMASK_STARTDETMSK  ------------------------------
// SVD Line: 19102

//  <item> SFDITEM_FIELD__I2C1_INTMASK_STARTDETMSK
//    <name> STARTDETMSK </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101230) \nSTART_DET Interrupt Mask\n0 : MASKED = START_DET interrupt is masked\n1 : UNMASKED = START_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.10..10> STARTDETMSK
//        <0=> 0: MASKED = START_DET interrupt is masked
//        <1=> 1: UNMASKED = START_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_INTMASK_GENCALLMSK  ------------------------------
// SVD Line: 19121

//  <item> SFDITEM_FIELD__I2C1_INTMASK_GENCALLMSK
//    <name> GENCALLMSK </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101230) \nGEN_CALL Interrupt Mask\n0 : MASKED = GEN-CALL interrupt is masked\n1 : UNMASKED = GEN-CALL interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.11..11> GENCALLMSK
//        <0=> 0: MASKED = GEN-CALL interrupt is masked
//        <1=> 1: UNMASKED = GEN-CALL interrupt is unmasked
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_INTMASK_RESTARTDETMSK  -----------------------------
// SVD Line: 19140

//  <item> SFDITEM_FIELD__I2C1_INTMASK_RESTARTDETMSK
//    <name> RESTARTDETMSK </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40101230) \nRESTART_DET Interrupt Mask\n0 : MASKED = RESTART_DET interrupt is masked\n1 : UNMASKED = RESTART_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.12..12> RESTARTDETMSK
//        <0=> 0: MASKED = RESTART_DET interrupt is masked
//        <1=> 1: UNMASKED = RESTART_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_INTMASK_MSTONHOLDMSK  -----------------------------
// SVD Line: 19159

//  <item> SFDITEM_FIELD__I2C1_INTMASK_MSTONHOLDMSK
//    <name> MSTONHOLDMSK </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40101230) \nMASTER_ON_HOLD Interrupt Mask\n0 : MASKED = MASTER_ON_HOLD interrupt is masked\n1 : UNMASKED = MASTER_ON_HOLD interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.13..13> MSTONHOLDMSK
//        <0=> 0: MASKED = MASTER_ON_HOLD interrupt is masked
//        <1=> 1: UNMASKED = MASTER_ON_HOLD interrupt is unmasked
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_INTMASK_SCLSTUCKLOWMSK  ----------------------------
// SVD Line: 19178

//  <item> SFDITEM_FIELD__I2C1_INTMASK_SCLSTUCKLOWMSK
//    <name> SCLSTUCKLOWMSK </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40101230) \nSCL_STUCK_AT_LOW Interrupt Mask\n0 : MASKED = SCL_STUCK_AT_LOW interrupt is masked\n1 : UNMASKED = SCL_STUCK_AT_LOW interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.14..14> SCLSTUCKLOWMSK
//        <0=> 0: MASKED = SCL_STUCK_AT_LOW interrupt is masked
//        <1=> 1: UNMASKED = SCL_STUCK_AT_LOW interrupt is unmasked
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_INTMASK_WRREQMSK  -------------------------------
// SVD Line: 19197

//  <item> SFDITEM_FIELD__I2C1_INTMASK_WRREQMSK
//    <name> WRREQMSK </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40101230) \nWR_REQ Interrupt Mask\n0 : MASKED = WR_REQ interrupt is masked\n1 : UNMASKED = WR_REQ interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_INTMASK ) </loc>
//      <o.15..15> WRREQMSK
//        <0=> 0: MASKED = WR_REQ interrupt is masked
//        <1=> 1: UNMASKED = WR_REQ interrupt is unmasked
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C1_INTMASK  ----------------------------------
// SVD Line: 18902

//  <rtree> SFDITEM_REG__I2C1_INTMASK
//    <name> INTMASK </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101230) INTERRUPT MASK REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_INTMASK >> 0) & 0xFFFFFFFF), ((I2C1_INTMASK = (I2C1_INTMASK & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_RXUNDERMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_RXOVERMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_RXFULLMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_TXOVERMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_TXEMPTYMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_RDREQMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_TXABRTMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_RXDONEMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_ACTIVITYMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_STOPDETMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_STARTDETMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_GENCALLMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_RESTARTDETMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_MSTONHOLDMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_SCLSTUCKLOWMSK </item>
//    <item> SFDITEM_FIELD__I2C1_INTMASK_WRREQMSK </item>
//  </rtree>
//  


// -------------------------  Register Item Address: I2C1_RAWINTSTAT  -----------------------------
// SVD Line: 19218

unsigned int I2C1_RAWINTSTAT __AT (0x40101234);



// -------------------------  Field Item: I2C1_RAWINTSTAT_RXUNDERRAW  -----------------------------
// SVD Line: 19228

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RXUNDERRAW
//    <name> RXUNDERRAW </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101234) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_UNDER interrupt is inactive\n1 : ACTIVE = RX_UNDER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.0..0> RXUNDERRAW
//        <0=> 0: INACTIVE = RX_UNDER interrupt is inactive
//        <1=> 1: ACTIVE = RX_UNDER interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_RAWINTSTAT_RXOVERRAW  -----------------------------
// SVD Line: 19247

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RXOVERRAW
//    <name> RXOVERRAW </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101234) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_OVER interrupt is inactive\n1 : ACTIVE = RX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.1..1> RXOVERRAW
//        <0=> 0: INACTIVE = RX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = RX_OVER interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_RAWINTSTAT_RXFULLRAW  -----------------------------
// SVD Line: 19266

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RXFULLRAW
//    <name> RXFULLRAW </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101234) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_FULL interrupt is inactive\n1 : ACTIVE = RX_FULL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.2..2> RXFULLRAW
//        <0=> 0: INACTIVE = RX_FULL interrupt is inactive
//        <1=> 1: ACTIVE = RX_FULL interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_RAWINTSTAT_TXOVERRAW  -----------------------------
// SVD Line: 19285

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_TXOVERRAW
//    <name> TXOVERRAW </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101234) \nTX_OVER Interrupt Status\n0 : INACTIVE = TX_OVER interrupt is inactive\n1 : ACTIVE = TX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.3..3> TXOVERRAW
//        <0=> 0: INACTIVE = TX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = TX_OVER interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_RAWINTSTAT_TXEMPTYRAW  -----------------------------
// SVD Line: 19304

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_TXEMPTYRAW
//    <name> TXEMPTYRAW </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101234) \nTX_EMPTY Interrupt Status\n0 : INACTIVE = TX_EMPTY interrupt is inactive\n1 : ACTIVE = TX_EMPTY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.4..4> TXEMPTYRAW
//        <0=> 0: INACTIVE = TX_EMPTY interrupt is inactive
//        <1=> 1: ACTIVE = TX_EMPTY interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_RAWINTSTAT_RDREQRAW  ------------------------------
// SVD Line: 19323

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RDREQRAW
//    <name> RDREQRAW </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101234) \nRD_REQ Interrupt Status\n0 : INACTIVE = RD_REQ interrupt is inactive\n1 : ACTIVE = RD_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.5..5> RDREQRAW
//        <0=> 0: INACTIVE = RD_REQ interrupt is inactive
//        <1=> 1: ACTIVE = RD_REQ interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_RAWINTSTAT_TXABRTRAW  -----------------------------
// SVD Line: 19342

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_TXABRTRAW
//    <name> TXABRTRAW </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101234) \nTX_ABRT Interrupt Status\n0 : INACTIVE = TX_ABRT interrupt is inactive\n1 : ACTIVE = TX_ABRT interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.6..6> TXABRTRAW
//        <0=> 0: INACTIVE = TX_ABRT interrupt is inactive
//        <1=> 1: ACTIVE = TX_ABRT interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_RAWINTSTAT_RXDONERAW  -----------------------------
// SVD Line: 19361

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RXDONERAW
//    <name> RXDONERAW </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101234) \nRX_DONE Interrupt Status\n0 : INACTIVE = RX_DONE interrupt is inactive\n1 : ACTIVE = RX_DONE interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.7..7> RXDONERAW
//        <0=> 0: INACTIVE = RX_DONE interrupt is inactive
//        <1=> 1: ACTIVE = RX_DONE interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_RAWINTSTAT_ACTIVITYRAW  ----------------------------
// SVD Line: 19380

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_ACTIVITYRAW
//    <name> ACTIVITYRAW </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101234) \nI2C Controller Activity\n0 : INACTIVE = RAW_INTR_ACTIVITY interrupt is inactive\n1 : ACTIVE = RAW_INTR_ACTIVITY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.8..8> ACTIVITYRAW
//        <0=> 0: INACTIVE = RAW_INTR_ACTIVITY interrupt is inactive
//        <1=> 1: ACTIVE = RAW_INTR_ACTIVITY interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_RAWINTSTAT_STOPDETRAW  -----------------------------
// SVD Line: 19399

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_STOPDETRAW
//    <name> STOPDETRAW </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101234) \nSTOP_DET Interrupt Status\n0 : INACTIVE = STOP_DET interrupt is inactive\n1 : ACTIVE = STOP_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.9..9> STOPDETRAW
//        <0=> 0: INACTIVE = STOP_DET interrupt is inactive
//        <1=> 1: ACTIVE = STOP_DET interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_RAWINTSTAT_STARTDETRAW  ----------------------------
// SVD Line: 19418

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_STARTDETRAW
//    <name> STARTDETRAW </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101234) \nSTART_DET Interrupt Status\n0 : INACTIVE = START_DET interrupt is inactive\n1 : ACTIVE = START_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.10..10> STARTDETRAW
//        <0=> 0: INACTIVE = START_DET interrupt is inactive
//        <1=> 1: ACTIVE = START_DET interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_RAWINTSTAT_GENCALLRAW  -----------------------------
// SVD Line: 19437

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_GENCALLRAW
//    <name> GENCALLRAW </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101234) \nGEN_CALL Interrupt Status\n0 : INACTIVE = GEN-CALL interrupt is inactive\n1 : ACTIVE = GEN-CALL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.11..11> GENCALLRAW
//        <0=> 0: INACTIVE = GEN-CALL interrupt is inactive
//        <1=> 1: ACTIVE = GEN-CALL interrupt is active
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C1_RAWINTSTAT_RESTARTDETRAW  ---------------------------
// SVD Line: 19456

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RESTARTDETRAW
//    <name> RESTARTDETRAW </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x40101234) \nRESTART_DET Interrupt Status\n0 : INACTIVE = RESTART_DET interrupt is inactive\n1 : ACTIVE = RESTART_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.12..12> RESTARTDETRAW
//        <0=> 0: INACTIVE = RESTART_DET interrupt is inactive
//        <1=> 1: ACTIVE = RESTART_DET interrupt is active
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C1_RAWINTSTAT_MSTONHOLDRAW  ----------------------------
// SVD Line: 19475

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_MSTONHOLDRAW
//    <name> MSTONHOLDRAW </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x40101234) \nMASTER_ON_HOLD Interrupt Status\n0 : INACTIVE = MASTER_ON_HOLD interrupt is inactive\n1 : ACTIVE = MASTER_ON_HOLD interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.13..13> MSTONHOLDRAW
//        <0=> 0: INACTIVE = MASTER_ON_HOLD interrupt is inactive
//        <1=> 1: ACTIVE = MASTER_ON_HOLD interrupt is active
//    </combo>
//  </item>
//  


// -----------------------  Field Item: I2C1_RAWINTSTAT_SCLSTUCKLOWRAW  ---------------------------
// SVD Line: 19494

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_SCLSTUCKLOWRAW
//    <name> SCLSTUCKLOWRAW </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x40101234) \nSCL_STUCK_AT_LOW Interrupt Status\n0 : INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive\n1 : ACTIVE = SCL_STUCK_AT_LOW interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.14..14> SCLSTUCKLOWRAW
//        <0=> 0: INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive
//        <1=> 1: ACTIVE = SCL_STUCK_AT_LOW interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_RAWINTSTAT_WRREQRAW  ------------------------------
// SVD Line: 19513

//  <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_WRREQRAW
//    <name> WRREQRAW </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x40101234) \nWR_REQ Interrupt Status\n0 : INACTIVE = WR_REQ interrupt is inactive\n1 : ACTIVE = WR_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_RAWINTSTAT ) </loc>
//      <o.15..15> WRREQRAW
//        <0=> 0: INACTIVE = WR_REQ interrupt is inactive
//        <1=> 1: ACTIVE = WR_REQ interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: I2C1_RAWINTSTAT  --------------------------------
// SVD Line: 19218

//  <rtree> SFDITEM_REG__I2C1_RAWINTSTAT
//    <name> RAWINTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101234) INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_RAWINTSTAT >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RXUNDERRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RXOVERRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RXFULLRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_TXOVERRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_TXEMPTYRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RDREQRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_TXABRTRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RXDONERAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_ACTIVITYRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_STOPDETRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_STARTDETRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_GENCALLRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_RESTARTDETRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_MSTONHOLDRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_SCLSTUCKLOWRAW </item>
//    <item> SFDITEM_FIELD__I2C1_RAWINTSTAT_WRREQRAW </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C1_RXTL  --------------------------------
// SVD Line: 19534

unsigned int I2C1_RXTL __AT (0x40101238);



// -------------------------------  Field Item: I2C1_RXTL_THRES  ----------------------------------
// SVD Line: 19544

//  <item> SFDITEM_FIELD__I2C1_RXTL_THRES
//    <name> THRES </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101238) Receive FIFO Threshold Level </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C1_RXTL >> 0) & 0xFF), ((I2C1_RXTL = (I2C1_RXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C1_RXTL  -----------------------------------
// SVD Line: 19534

//  <rtree> SFDITEM_REG__I2C1_RXTL
//    <name> RXTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101238) I2C RECEIVE FIFO THRESHOLD REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_RXTL >> 0) & 0xFFFFFFFF), ((I2C1_RXTL = (I2C1_RXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_RXTL_THRES </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C1_TXTL  --------------------------------
// SVD Line: 19553

unsigned int I2C1_TXTL __AT (0x4010123C);



// -------------------------------  Field Item: I2C1_TXTL_THRES  ----------------------------------
// SVD Line: 19563

//  <item> SFDITEM_FIELD__I2C1_TXTL_THRES
//    <name> THRES </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4010123C) Transmit FIFO Threshold Level </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C1_TXTL >> 0) & 0xFF), ((I2C1_TXTL = (I2C1_TXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C1_TXTL  -----------------------------------
// SVD Line: 19553

//  <rtree> SFDITEM_REG__I2C1_TXTL
//    <name> TXTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010123C) I2C TRANSMIT FIFO THRESHOLD REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_TXTL >> 0) & 0xFFFFFFFF), ((I2C1_TXTL = (I2C1_TXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_TXTL_THRES </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C1_CLRINT  -------------------------------
// SVD Line: 19572

unsigned int I2C1_CLRINT __AT (0x40101240);



// -------------------------------  Register Item: I2C1_CLRINT  -----------------------------------
// SVD Line: 19572

//  <item> SFDITEM_REG__I2C1_CLRINT
//    <name> CLRINT </name>
//    <i> [Bits 31..0] RO (@ 0x40101240) CLEAR COMBINED AND INDIVIDUAL INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRINT >> 0) & 0xFFFFFFFF), ((I2C1_CLRINT = (I2C1_CLRINT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C1_CLRRXUNDER  -----------------------------
// SVD Line: 19582

unsigned int I2C1_CLRRXUNDER __AT (0x40101244);



// -----------------------------  Register Item: I2C1_CLRRXUNDER  ---------------------------------
// SVD Line: 19582

//  <item> SFDITEM_REG__I2C1_CLRRXUNDER
//    <name> CLRRXUNDER </name>
//    <i> [Bits 31..0] RO (@ 0x40101244) Clear RX_UNDER Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRRXUNDER >> 0) & 0xFFFFFFFF), ((I2C1_CLRRXUNDER = (I2C1_CLRRXUNDER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C1_CLRRXOVER  -----------------------------
// SVD Line: 19592

unsigned int I2C1_CLRRXOVER __AT (0x40101248);



// ------------------------------  Register Item: I2C1_CLRRXOVER  ---------------------------------
// SVD Line: 19592

//  <item> SFDITEM_REG__I2C1_CLRRXOVER
//    <name> CLRRXOVER </name>
//    <i> [Bits 31..0] RO (@ 0x40101248) Clear RX_OVER Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRRXOVER >> 0) & 0xFFFFFFFF), ((I2C1_CLRRXOVER = (I2C1_CLRRXOVER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C1_CLRTXOVER  -----------------------------
// SVD Line: 19602

unsigned int I2C1_CLRTXOVER __AT (0x4010124C);



// ------------------------------  Register Item: I2C1_CLRTXOVER  ---------------------------------
// SVD Line: 19602

//  <item> SFDITEM_REG__I2C1_CLRTXOVER
//    <name> CLRTXOVER </name>
//    <i> [Bits 31..0] RO (@ 0x4010124C) Clear TX_OVER Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRTXOVER >> 0) & 0xFFFFFFFF), ((I2C1_CLRTXOVER = (I2C1_CLRTXOVER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C1_CLRRDREQ  ------------------------------
// SVD Line: 19612

unsigned int I2C1_CLRRDREQ __AT (0x40101250);



// ------------------------------  Register Item: I2C1_CLRRDREQ  ----------------------------------
// SVD Line: 19612

//  <item> SFDITEM_REG__I2C1_CLRRDREQ
//    <name> CLRRDREQ </name>
//    <i> [Bits 31..0] RO (@ 0x40101250) Clear RD_REQ Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRRDREQ >> 0) & 0xFFFFFFFF), ((I2C1_CLRRDREQ = (I2C1_CLRRDREQ & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C1_CLRTXABRT  -----------------------------
// SVD Line: 19622

unsigned int I2C1_CLRTXABRT __AT (0x40101254);



// ------------------------------  Register Item: I2C1_CLRTXABRT  ---------------------------------
// SVD Line: 19622

//  <item> SFDITEM_REG__I2C1_CLRTXABRT
//    <name> CLRTXABRT </name>
//    <i> [Bits 31..0] RO (@ 0x40101254) Clear TX_ABRT Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRTXABRT >> 0) & 0xFFFFFFFF), ((I2C1_CLRTXABRT = (I2C1_CLRTXABRT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C1_CLRRXDONE  -----------------------------
// SVD Line: 19632

unsigned int I2C1_CLRRXDONE __AT (0x40101258);



// ------------------------------  Register Item: I2C1_CLRRXDONE  ---------------------------------
// SVD Line: 19632

//  <item> SFDITEM_REG__I2C1_CLRRXDONE
//    <name> CLRRXDONE </name>
//    <i> [Bits 31..0] RO (@ 0x40101258) Clear RX_DONE Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRRXDONE >> 0) & 0xFFFFFFFF), ((I2C1_CLRRXDONE = (I2C1_CLRRXDONE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C1_CLRACTIVITY  ----------------------------
// SVD Line: 19642

unsigned int I2C1_CLRACTIVITY __AT (0x4010125C);



// -----------------------------  Register Item: I2C1_CLRACTIVITY  --------------------------------
// SVD Line: 19642

//  <item> SFDITEM_REG__I2C1_CLRACTIVITY
//    <name> CLRACTIVITY </name>
//    <i> [Bits 31..0] RO (@ 0x4010125C) Clear ACTIVITY Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRACTIVITY >> 0) & 0xFFFFFFFF), ((I2C1_CLRACTIVITY = (I2C1_CLRACTIVITY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C1_CLRSTOPDET  -----------------------------
// SVD Line: 19652

unsigned int I2C1_CLRSTOPDET __AT (0x40101260);



// -----------------------------  Register Item: I2C1_CLRSTOPDET  ---------------------------------
// SVD Line: 19652

//  <item> SFDITEM_REG__I2C1_CLRSTOPDET
//    <name> CLRSTOPDET </name>
//    <i> [Bits 31..0] RO (@ 0x40101260) Clear STOP_DET Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRSTOPDET >> 0) & 0xFFFFFFFF), ((I2C1_CLRSTOPDET = (I2C1_CLRSTOPDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C1_CLRSTARTDET  ----------------------------
// SVD Line: 19662

unsigned int I2C1_CLRSTARTDET __AT (0x40101264);



// -----------------------------  Register Item: I2C1_CLRSTARTDET  --------------------------------
// SVD Line: 19662

//  <item> SFDITEM_REG__I2C1_CLRSTARTDET
//    <name> CLRSTARTDET </name>
//    <i> [Bits 31..0] RO (@ 0x40101264) Clear START_DET Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRSTARTDET >> 0) & 0xFFFFFFFF), ((I2C1_CLRSTARTDET = (I2C1_CLRSTARTDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C1_CLRGENCALL  -----------------------------
// SVD Line: 19672

unsigned int I2C1_CLRGENCALL __AT (0x40101268);



// -----------------------------  Register Item: I2C1_CLRGENCALL  ---------------------------------
// SVD Line: 19672

//  <item> SFDITEM_REG__I2C1_CLRGENCALL
//    <name> CLRGENCALL </name>
//    <i> [Bits 31..0] RO (@ 0x40101268) Clear GEN_CALL Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRGENCALL >> 0) & 0xFFFFFFFF), ((I2C1_CLRGENCALL = (I2C1_CLRGENCALL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: I2C1_ENABLE  -------------------------------
// SVD Line: 19682

unsigned int I2C1_ENABLE __AT (0x4010126C);



// -------------------------------  Field Item: I2C1_ENABLE_EN  -----------------------------------
// SVD Line: 19692

//  <item> SFDITEM_FIELD__I2C1_ENABLE_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010126C) \nControls Whether The I2C Controller Is Enabled\n0 : DISABLE = Disables I2C controller\n1 : ENABLE = Enable I2C controller </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_ENABLE ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disables I2C controller
//        <1=> 1: ENABLE = Enable I2C controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_ENABLE_ABORT  ---------------------------------
// SVD Line: 19711

//  <item> SFDITEM_FIELD__I2C1_ENABLE_ABORT
//    <name> ABORT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010126C) \nInitiates The Transfer Abort\n0 : DISABLE = ABORT operation not in progress\n1 : ENABLE = ABORT operation in progress </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_ENABLE ) </loc>
//      <o.1..1> ABORT
//        <0=> 0: DISABLE = ABORT operation not in progress
//        <1=> 1: ENABLE = ABORT operation in progress
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_ENABLE_TXCMDBLOCK  -------------------------------
// SVD Line: 19730

//  <item> SFDITEM_FIELD__I2C1_ENABLE_TXCMDBLOCK
//    <name> TXCMDBLOCK </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010126C) \nBlocks The Transmission Of Data On I2c Bus Or Not\n0 : DISABLE = The transmission of data starts on I2C bus automatically\n1 : ENABLE = Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_ENABLE ) </loc>
//      <o.2..2> TXCMDBLOCK
//        <0=> 0: DISABLE = The transmission of data starts on I2C bus automatically
//        <1=> 1: ENABLE = Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_ENABLE_SDARECOVEN  -------------------------------
// SVD Line: 19749

//  <item> SFDITEM_FIELD__I2C1_ENABLE_SDARECOVEN
//    <name> SDARECOVEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4010126C) \nControl Knob To Initiate The SDA Recovery Mechanism\n0 : DISABLE = Master disabled the SDA stuck at low recovery mechanism\n1 : ENABLE = Master initiates the SDA stuck at low recovery mechanism </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_ENABLE ) </loc>
//      <o.3..3> SDARECOVEN
//        <0=> 0: DISABLE = Master disabled the SDA stuck at low recovery mechanism
//        <1=> 1: ENABLE = Master initiates the SDA stuck at low recovery mechanism
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C1_ENABLE  ----------------------------------
// SVD Line: 19682

//  <rtree> SFDITEM_REG__I2C1_ENABLE
//    <name> ENABLE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010126C) ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_ENABLE >> 0) & 0xFFFFFFFF), ((I2C1_ENABLE = (I2C1_ENABLE & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_ENABLE_EN </item>
//    <item> SFDITEM_FIELD__I2C1_ENABLE_ABORT </item>
//    <item> SFDITEM_FIELD__I2C1_ENABLE_TXCMDBLOCK </item>
//    <item> SFDITEM_FIELD__I2C1_ENABLE_SDARECOVEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C1_STATUS  -------------------------------
// SVD Line: 19770

unsigned int I2C1_STATUS __AT (0x40101270);



// ----------------------------  Field Item: I2C1_STATUS_ACTIVITY  --------------------------------
// SVD Line: 19780

//  <item> SFDITEM_FIELD__I2C1_STATUS_ACTIVITY
//    <name> ACTIVITY </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101270) \nI2C Activity Status\n0 : INACTIVE = I2C is idle\n1 : ACTIVE = I2C is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.0..0> ACTIVITY
//        <0=> 0: INACTIVE = I2C is idle
//        <1=> 1: ACTIVE = I2C is active
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_STATUS_TFNF  ----------------------------------
// SVD Line: 19799

//  <item> SFDITEM_FIELD__I2C1_STATUS_TFNF
//    <name> TFNF </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101270) \nTransmit FIFO Not Full\n0 : FULL = Tx FIFO is full\n1 : NOTFULL = Tx FIFO not full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.1..1> TFNF
//        <0=> 0: FULL = Tx FIFO is full
//        <1=> 1: NOTFULL = Tx FIFO not full
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C1_STATUS_TFE  ----------------------------------
// SVD Line: 19818

//  <item> SFDITEM_FIELD__I2C1_STATUS_TFE
//    <name> TFE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101270) \nTransmit FIFO Completely Empty\n0 : NOTEMPTY = Tx FIFO not empty\n1 : EMPTY = Tx FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.2..2> TFE
//        <0=> 0: NOTEMPTY = Tx FIFO not empty
//        <1=> 1: EMPTY = Tx FIFO is empty
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C1_STATUS_RFNE  ----------------------------------
// SVD Line: 19837

//  <item> SFDITEM_FIELD__I2C1_STATUS_RFNE
//    <name> RFNE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101270) \nReceive FIFO Not Empty\n0 : EMPTY = Rx FIFO is empty\n1 : NOTEMPTY = Rx FIFO not empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.3..3> RFNE
//        <0=> 0: EMPTY = Rx FIFO is empty
//        <1=> 1: NOTEMPTY = Rx FIFO not empty
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C1_STATUS_RFF  ----------------------------------
// SVD Line: 19856

//  <item> SFDITEM_FIELD__I2C1_STATUS_RFF
//    <name> RFF </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101270) \nReceive FIFO Completely Full\n0 : NOTFULL = Rx FIFO not full\n1 : FULL = Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.4..4> RFF
//        <0=> 0: NOTFULL = Rx FIFO not full
//        <1=> 1: FULL = Rx FIFO is full
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_STATUS_MSTACTIVITY  ------------------------------
// SVD Line: 19875

//  <item> SFDITEM_FIELD__I2C1_STATUS_MSTACTIVITY
//    <name> MSTACTIVITY </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101270) \nMaster FSM Activity Status\n0 : IDLE = Master is idle\n1 : ACTIVE = Master not idle </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.5..5> MSTACTIVITY
//        <0=> 0: IDLE = Master is idle
//        <1=> 1: ACTIVE = Master not idle
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_STATUS_SLVACTIVITY  ------------------------------
// SVD Line: 19894

//  <item> SFDITEM_FIELD__I2C1_STATUS_SLVACTIVITY
//    <name> SLVACTIVITY </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101270) \nSlave FSM Activity Status\n0 : IDLE = Slave is idle\n1 : ACTIVE = Slave not idle </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.6..6> SLVACTIVITY
//        <0=> 0: IDLE = Slave is idle
//        <1=> 1: ACTIVE = Slave not idle
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_STATUS_MSTHOLDTXEMPTY  -----------------------------
// SVD Line: 19913

//  <item> SFDITEM_FIELD__I2C1_STATUS_MSTHOLDTXEMPTY
//    <name> MSTHOLDTXEMPTY </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101270) \nIndicates The Bus Hold When The Master Holds The Bus Because Of The Tx FIFO Being Empty\n0 : INACTIVE = Master holds the bus due to Tx FIFO is empty\n1 : ACTIVE = Master is not holding the bus or Bus hold is not due to Tx FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.7..7> MSTHOLDTXEMPTY
//        <0=> 0: INACTIVE = Master holds the bus due to Tx FIFO is empty
//        <1=> 1: ACTIVE = Master is not holding the bus or Bus hold is not due to Tx FIFO is empty
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_STATUS_MSTHOLDRXFULL  -----------------------------
// SVD Line: 19932

//  <item> SFDITEM_FIELD__I2C1_STATUS_MSTHOLDRXFULL
//    <name> MSTHOLDRXFULL </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101270) \nINdicates The Bus Hold In Master Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : INACTIVE = Master is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : ACTIVE = Master holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.8..8> MSTHOLDRXFULL
//        <0=> 0: INACTIVE = Master is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: ACTIVE = Master holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_STATUS_SLVHOLDTXEMPTY  -----------------------------
// SVD Line: 19951

//  <item> SFDITEM_FIELD__I2C1_STATUS_SLVHOLDTXEMPTY
//    <name> SLVHOLDTXEMPTY </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101270) \nIndicates The Bus Hold In Slave Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : INACTIVE = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : ACTIVE = Slave holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.9..9> SLVHOLDTXEMPTY
//        <0=> 0: INACTIVE = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: ACTIVE = Slave holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_STATUS_SLVHOLDRXFULL  -----------------------------
// SVD Line: 19970

//  <item> SFDITEM_FIELD__I2C1_STATUS_SLVHOLDRXFULL
//    <name> SLVHOLDRXFULL </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101270) \nIndicates The Bus Hold In Slave Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : Inactive = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : Active = Slave holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.10..10> SLVHOLDRXFULL
//        <0=> 0: Inactive = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: Active = Slave holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_STATUS_SDANOTRECOV  ------------------------------
// SVD Line: 19989

//  <item> SFDITEM_FIELD__I2C1_STATUS_SDANOTRECOV
//    <name> SDANOTRECOV </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101270) \nIndicates That SDA Stuck At Low Is Not Recovered After The Recovery Mechanism\n0 : Inactive = SDA Stuck at low is recovered after recovery mechanism\n1 : Active = SDA Stuck at low is not recovered after recovery mechanism </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_STATUS ) </loc>
//      <o.11..11> SDANOTRECOV
//        <0=> 0: Inactive = SDA Stuck at low is recovered after recovery mechanism
//        <1=> 1: Active = SDA Stuck at low is not recovered after recovery mechanism
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C1_STATUS  ----------------------------------
// SVD Line: 19770

//  <rtree> SFDITEM_REG__I2C1_STATUS
//    <name> STATUS </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40101270) I2C STATUS Register </i>
//    <loc> ( (unsigned int)((I2C1_STATUS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C1_STATUS_ACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_TFNF </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_TFE </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_RFNE </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_RFF </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_MSTACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_SLVACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_MSTHOLDTXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_MSTHOLDRXFULL </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_SLVHOLDTXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_SLVHOLDRXFULL </item>
//    <item> SFDITEM_FIELD__I2C1_STATUS_SDANOTRECOV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C1_TXFLR  -------------------------------
// SVD Line: 20010

unsigned int I2C1_TXFLR __AT (0x40101274);



// --------------------------------  Register Item: I2C1_TXFLR  -----------------------------------
// SVD Line: 20010

//  <item> SFDITEM_REG__I2C1_TXFLR
//    <name> TXFLR </name>
//    <i> [Bits 31..0] RW (@ 0x40101274) I2C TRANSMIT FIFO LEVEL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_TXFLR >> 0) & 0xFFFFFFFF), ((I2C1_TXFLR = (I2C1_TXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: I2C1_RXFLR  -------------------------------
// SVD Line: 20020

unsigned int I2C1_RXFLR __AT (0x40101278);



// --------------------------------  Register Item: I2C1_RXFLR  -----------------------------------
// SVD Line: 20020

//  <item> SFDITEM_REG__I2C1_RXFLR
//    <name> RXFLR </name>
//    <i> [Bits 31..0] RW (@ 0x40101278) I2C RECEIVE FIFO LEVEL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_RXFLR >> 0) & 0xFFFFFFFF), ((I2C1_RXFLR = (I2C1_RXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: I2C1_SDAHOLD  ------------------------------
// SVD Line: 20030

unsigned int I2C1_SDAHOLD __AT (0x4010127C);



// ---------------------------  Field Item: I2C1_SDAHOLD_SDATXHOLD  -------------------------------
// SVD Line: 20040

//  <item> SFDITEM_FIELD__I2C1_SDAHOLD_SDATXHOLD
//    <name> SDATXHOLD </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010127C) Sets The Required SDA Hold Time In Units Of clk Period </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C1_SDAHOLD >> 0) & 0xFFFF), ((I2C1_SDAHOLD = (I2C1_SDAHOLD & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: I2C1_SDAHOLD_SDARXHOLD  -------------------------------
// SVD Line: 20047

//  <item> SFDITEM_FIELD__I2C1_SDAHOLD_SDARXHOLD
//    <name> SDARXHOLD </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x4010127C) Sets the required SDA hold time in units of I2C clk period </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C1_SDAHOLD >> 16) & 0xFF), ((I2C1_SDAHOLD = (I2C1_SDAHOLD & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C1_SDAHOLD  ----------------------------------
// SVD Line: 20030

//  <rtree> SFDITEM_REG__I2C1_SDAHOLD
//    <name> SDAHOLD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010127C) I2C SDA HOLD TIME LENGTH REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_SDAHOLD >> 0) & 0xFFFFFFFF), ((I2C1_SDAHOLD = (I2C1_SDAHOLD & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_SDAHOLD_SDATXHOLD </item>
//    <item> SFDITEM_FIELD__I2C1_SDAHOLD_SDARXHOLD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C1_TXABRTSRC  -----------------------------
// SVD Line: 20056

unsigned int I2C1_TXABRTSRC __AT (0x40101280);



// --------------------------  Field Item: I2C1_TXABRTSRC_ADDR7BNAK  ------------------------------
// SVD Line: 20066

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ADDR7BNAK
//    <name> ADDR7BNAK </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101280) \nIndicates That The Master Is In 7-bit Addressing Mode And The Address Sent Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = This abort is generated because of NOACK for 7-bit address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.0..0> ADDR7BNAK
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = This abort is generated because of NOACK for 7-bit address
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_TXABRTSRC_ADDR10BNAK1  -----------------------------
// SVD Line: 20085

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ADDR10BNAK1
//    <name> ADDR10BNAK1 </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101280) \nIndicates That The Master Is In 10-bit Address Mode And The First 10-bit Address Byte Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = Byte 1 of 10Bit Address not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.1..1> ADDR10BNAK1
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = Byte 1 of 10Bit Address not ACKed by any slave
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_TXABRTSRC_ADDR10BNACK2  ----------------------------
// SVD Line: 20104

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ADDR10BNACK2
//    <name> ADDR10BNACK2 </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101280) \nIndicates That The Master Is In 10-bit Address Mode And The Second 10-bit Address Byte Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = Byte 2 of 10Bit Address not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.2..2> ADDR10BNACK2
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = Byte 2 of 10Bit Address not ACKed by any slave
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_TXABRTSRC_TXDATANAK  ------------------------------
// SVD Line: 20123

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_TXDATANAK
//    <name> TXDATANAK </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101280) \nIndicates The Master-mode Only Bit. When Themaster Receives An Acknowledgement For The Address\n0 : NACK = Transmitted data non-ACKed by addressed slave-scenario not present\n1 : ACK = Transmitted data not ACKed by addressed slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.3..3> TXDATANAK
//        <0=> 0: NACK = Transmitted data non-ACKed by addressed slave-scenario not present
//        <1=> 1: ACK = Transmitted data not ACKed by addressed slave
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_TXABRTSRC_GCALLNAK  ------------------------------
// SVD Line: 20142

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_GCALLNAK
//    <name> GCALLNAK </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101280) \nIndicates That I2C Controller In Master Mode Has Sent A General Call And No Slave On The Bus Acknowledged The General Call\n0 : NACK = GCALL not ACKed by any slave-scenario not present\n1 : ACK = GCALL not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.4..4> GCALLNAK
//        <0=> 0: NACK = GCALL not ACKed by any slave-scenario not present
//        <1=> 1: ACK = GCALL not ACKed by any slave
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_TXABRTSRC_GCALLREAD  ------------------------------
// SVD Line: 20161

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_GCALLREAD
//    <name> GCALLREAD </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101280) \nIndicates That Dw_apb_i2c In The Master Mode Has Sent A General Call But The User Programmed The Byte Following The General Call To Be A Read From The Bus\n0 : NONABORT = GCALL is followed by read from bus-scenario not present\n1 : ABORT = GCALL is followed by read from bus </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.5..5> GCALLREAD
//        <0=> 0: NONABORT = GCALL is followed by read from bus-scenario not present
//        <1=> 1: ABORT = GCALL is followed by read from bus
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_TXABRTSRC_HSACKDET  ------------------------------
// SVD Line: 20180

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_HSACKDET
//    <name> HSACKDET </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101280) \nIndicates That The Master Is In High Speed Mode And The High Speed Master Code Was Acknowledged\n0 : NACK = HS Master code ACKed in HS Mode- scenario not present\n1 : ACK = HS Master code ACKed in HS Mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.6..6> HSACKDET
//        <0=> 0: NACK = HS Master code ACKed in HS Mode- scenario not present
//        <1=> 1: ACK = HS Master code ACKed in HS Mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_TXABRTSRC_SBYTEACKET  -----------------------------
// SVD Line: 20199

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SBYTEACKET
//    <name> SBYTEACKET </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101280) \nIndicates That The Master Has Sent A START Byte And The START Byte Was Acknowledged\n0 : NACK = ACK detected for START byte- scenario not present\n1 : ACK = ACK detected for START byte </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.7..7> SBYTEACKET
//        <0=> 0: NACK = ACK detected for START byte- scenario not present
//        <1=> 1: ACK = ACK detected for START byte
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_TXABRTSRC_HSNORSTRT  ------------------------------
// SVD Line: 20218

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_HSNORSTRT
//    <name> HSNORSTRT </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101280) \nIndicates That The Restart Is Disabled\n0 : NONABORT = User trying to switch Master to HS mode when RESTART disabled- scenario not present\n1 : ABORT = User trying to switch Master to HS mode when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.8..8> HSNORSTRT
//        <0=> 0: NONABORT = User trying to switch Master to HS mode when RESTART disabled- scenario not present
//        <1=> 1: ABORT = User trying to switch Master to HS mode when RESTART disabled
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_TXABRTSRC_SBYTENORSTRT  ----------------------------
// SVD Line: 20237

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SBYTENORSTRT
//    <name> SBYTENORSTRT </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101280) \nIndicates That The Restart Is Disabled\n0 : NONABORT = User trying to send START byte when RESTART disabled- scenario not present\n1 : ABORT = User trying to send START byte when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.9..9> SBYTENORSTRT
//        <0=> 0: NONABORT = User trying to send START byte when RESTART disabled- scenario not present
//        <1=> 1: ABORT = User trying to send START byte when RESTART disabled
//    </combo>
//  </item>
//  


// -----------------------  Field Item: I2C1_TXABRTSRC_ADDR10BRDNORSTRT  --------------------------
// SVD Line: 20256

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ADDR10BRDNORSTRT
//    <name> ADDR10BRDNORSTRT </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101280) \nIndicates That The Restart Is Disabled\n0 : NONABORT = Master not trying to read in 10Bit addressing mode when RESTART disabled\n1 : ABORT = Master trying to read in 10Bit addressing mode when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.10..10> ADDR10BRDNORSTRT
//        <0=> 0: NONABORT = Master not trying to read in 10Bit addressing mode when RESTART disabled
//        <1=> 1: ABORT = Master trying to read in 10Bit addressing mode when RESTART disabled
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_TXABRTSRC_MASTERIDS  ------------------------------
// SVD Line: 20275

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_MASTERIDS
//    <name> MASTERIDS </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101280) \nIndicates That The User Tries To Initiate A Master Operation With The Master Mode Disabled\n0 : NONABORT = User initiating master operation when MASTER disabled- scenario not present\n1 : ABORT = User initiating master operation when MASTER disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.11..11> MASTERIDS
//        <0=> 0: NONABORT = User initiating master operation when MASTER disabled- scenario not present
//        <1=> 1: ABORT = User initiating master operation when MASTER disabled
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_TXABRTSRC_ARBLOST  -------------------------------
// SVD Line: 20294

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ARBLOST
//    <name> ARBLOST </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x40101280) \nThis Field Specifies That The Master Has Lost Arbitration\n0 : NOTLOST = Master or Slave-Transmitter lost arbitration- scenario not present\n1 : LOST = Master or Slave-Transmitter lost arbitration </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.12..12> ARBLOST
//        <0=> 0: NOTLOST = Master or Slave-Transmitter lost arbitration- scenario not present
//        <1=> 1: LOST = Master or Slave-Transmitter lost arbitration
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C1_TXABRTSRC_SLVFLUSHTXFIFO  ---------------------------
// SVD Line: 20313

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SLVFLUSHTXFIFO
//    <name> SLVFLUSHTXFIFO </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x40101280) \nThis Field Specifies That The Slave Has Received A Read Command And Some Data Exists In The TX FIFO\n0 : NONABORT = Slave flushes existing data in TX-FIFO upon getting read commandscenario not present\n1 : ABORT = Slave flushes existing data in TX-FIFO upon getting read command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.13..13> SLVFLUSHTXFIFO
//        <0=> 0: NONABORT = Slave flushes existing data in TX-FIFO upon getting read commandscenario not present
//        <1=> 1: ABORT = Slave flushes existing data in TX-FIFO upon getting read command
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_TXABRTSRC_SLVARBLOST  -----------------------------
// SVD Line: 20332

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SLVARBLOST
//    <name> SLVARBLOST </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x40101280) \nThis Field Indicates That A Slave Has Lost The Bus While Transmitting Data To A Remote Master\n0 : NOTLOST = Slave lost arbitration to remote master- scenario not present\n1 : LOST = Slave lost arbitration to remote master </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.14..14> SLVARBLOST
//        <0=> 0: NOTLOST = Slave lost arbitration to remote master- scenario not present
//        <1=> 1: LOST = Slave lost arbitration to remote master
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_TXABRTSRC_SLVRDINTX  ------------------------------
// SVD Line: 20351

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SLVRDINTX
//    <name> SLVRDINTX </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x40101280) \nWhen The Processor Side Responds To A Slave Mode Request For Data To Be Transmitted To A Remote Master And User Writes A 1 In Cmd (bit 8) Of Ic_data_cmd Register\n0 : NOTABORT = Slave trying to transmit to remote master in read mode- scenario not present\n1 : ABORT = Slave trying to transmit to remote master in read mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.15..15> SLVRDINTX
//        <0=> 0: NOTABORT = Slave trying to transmit to remote master in read mode- scenario not present
//        <1=> 1: ABORT = Slave trying to transmit to remote master in read mode
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_TXABRTSRC_USRABRT  -------------------------------
// SVD Line: 20370

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_USRABRT
//    <name> USRABRT </name>
//    <r> 
//    <i> [Bit 16] RO (@ 0x40101280) \nThis Is A Master-mode-only Bit. Master Has Detected The Transfer Abort\n0 : NOTABORT = Transfer abort detected by master- scenario not present\n1 : ABORT = Transfer abort detected by master </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.16..16> USRABRT
//        <0=> 0: NOTABORT = Transfer abort detected by master- scenario not present
//        <1=> 1: ABORT = Transfer abort detected by master
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C1_TXABRTSRC_SDASTUCKLOW  -----------------------------
// SVD Line: 20389

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SDASTUCKLOW
//    <name> SDASTUCKLOW </name>
//    <r> 
//    <i> [Bit 17] RO (@ 0x40101280) \nThis Is A Master-mode-only Bit. Master Detects The SDA Stuck At Low\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of SDA stuck at low </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.17..17> SDASTUCKLOW
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of SDA stuck at low
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_TXABRTSRC_DEVNAK  -------------------------------
// SVD Line: 20408

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_DEVNAK
//    <name> DEVNAK </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40101280) \nMaster Is Initiating The DEVICE_ID Transfer And The Device Id Sent Was Not Acknowledged By Any Slave\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for DEVICE-ID </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.18..18> DEVNAK
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for DEVICE-ID
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C1_TXABRTSRC_DEVSLVADDRNAK  ----------------------------
// SVD Line: 20427

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_DEVSLVADDRNAK
//    <name> DEVSLVADDRNAK </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40101280) \nMaster Is Initiating The DEVICE_ID Transfer And The Slave Address Sent Was Not Acknowledged By Any Slave\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for Slave address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.19..19> DEVSLVADDRNAK
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for Slave address
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C1_TXABRTSRC_DEVWRITE  ------------------------------
// SVD Line: 20446

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_DEVWRITE
//    <name> DEVWRITE </name>
//    <r> 
//    <i> [Bit 20] RO (@ 0x40101280) \nMaster Is Initiating The DEVICE_ID Transfer And The Tx-FIFO Consists Of Write Commands\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for Slave address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_TXABRTSRC ) </loc>
//      <o.20..20> DEVWRITE
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for Slave address
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_TXABRTSRC_TXFLUSHCNT  -----------------------------
// SVD Line: 20465

//  <item> SFDITEM_FIELD__I2C1_TXABRTSRC_TXFLUSHCNT
//    <name> TXFLUSHCNT </name>
//    <r> 
//    <i> [Bits 31..23] RO (@ 0x40101280) Indicates The Number Of Tx FIFO Data Commands Which Are Flushed Due To TX_ABRT Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C1_TXABRTSRC >> 23) & 0x1FF) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C1_TXABRTSRC  ---------------------------------
// SVD Line: 20056

//  <rtree> SFDITEM_REG__I2C1_TXABRTSRC
//    <name> TXABRTSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101280) I2C TRANSMIT ABORT SOURCE REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_TXABRTSRC >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ADDR7BNAK </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ADDR10BNAK1 </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ADDR10BNACK2 </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_TXDATANAK </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_GCALLNAK </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_GCALLREAD </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_HSACKDET </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SBYTEACKET </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_HSNORSTRT </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SBYTENORSTRT </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ADDR10BRDNORSTRT </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_MASTERIDS </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_ARBLOST </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SLVFLUSHTXFIFO </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SLVARBLOST </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SLVRDINTX </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_USRABRT </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_SDASTUCKLOW </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_DEVNAK </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_DEVSLVADDRNAK </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_DEVWRITE </item>
//    <item> SFDITEM_FIELD__I2C1_TXABRTSRC_TXFLUSHCNT </item>
//  </rtree>
//  


// -----------------------  Register Item Address: I2C1_SLVDATANACKONLY  --------------------------
// SVD Line: 20474

unsigned int I2C1_SLVDATANACKONLY __AT (0x40101284);



// --------------------------  Field Item: I2C1_SLVDATANACKONLY_NAK  ------------------------------
// SVD Line: 20484

//  <item> SFDITEM_FIELD__I2C1_SLVDATANACKONLY_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101284) \nGenerate Nack. This Nack Generation Only Occurs When I2C Controller Is A Slave-receiver\n0 : DISABLE = Slave receiver generates NACK normally\n1 : ENABLE = Slave receiver generates NACK upon data reception only </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_SLVDATANACKONLY ) </loc>
//      <o.0..0> NAK
//        <0=> 0: DISABLE = Slave receiver generates NACK normally
//        <1=> 1: ENABLE = Slave receiver generates NACK upon data reception only
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: I2C1_SLVDATANACKONLY  ------------------------------
// SVD Line: 20474

//  <rtree> SFDITEM_REG__I2C1_SLVDATANACKONLY
//    <name> SLVDATANACKONLY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101284) GENERATE SLAVE DATA NACK REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_SLVDATANACKONLY >> 0) & 0xFFFFFFFF), ((I2C1_SLVDATANACKONLY = (I2C1_SLVDATANACKONLY & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_SLVDATANACKONLY_NAK </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C1_SDASETUP  ------------------------------
// SVD Line: 20505

unsigned int I2C1_SDASETUP __AT (0x40101294);



// -----------------------------  Field Item: I2C1_SDASETUP_SETUP  --------------------------------
// SVD Line: 20515

//  <item> SFDITEM_FIELD__I2C1_SDASETUP_SETUP
//    <name> SETUP </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101294) SDA Setup (tSU:DAT) </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C1_SDASETUP >> 0) & 0xFF), ((I2C1_SDASETUP = (I2C1_SDASETUP & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C1_SDASETUP  ---------------------------------
// SVD Line: 20505

//  <rtree> SFDITEM_REG__I2C1_SDASETUP
//    <name> SDASETUP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101294) I2C SDA SETUP REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_SDASETUP >> 0) & 0xFFFFFFFF), ((I2C1_SDASETUP = (I2C1_SDASETUP & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_SDASETUP_SETUP </item>
//  </rtree>
//  


// -------------------------  Register Item Address: I2C1_ACKGENCALL  -----------------------------
// SVD Line: 20524

unsigned int I2C1_ACKGENCALL __AT (0x40101298);



// -----------------------------  Field Item: I2C1_ACKGENCALL_ACK  --------------------------------
// SVD Line: 20534

//  <item> SFDITEM_FIELD__I2C1_ACKGENCALL_ACK
//    <name> ACK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101298) \nACK General Call\n0 : NACK = Generate NACK for General Call\n1 : ACK = Generate ACK for a General Call </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_ACKGENCALL ) </loc>
//      <o.0..0> ACK
//        <0=> 0: NACK = Generate NACK for General Call
//        <1=> 1: ACK = Generate ACK for a General Call
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: I2C1_ACKGENCALL  --------------------------------
// SVD Line: 20524

//  <rtree> SFDITEM_REG__I2C1_ACKGENCALL
//    <name> ACKGENCALL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101298) I2C ACK GENERAL CALL REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_ACKGENCALL >> 0) & 0xFFFFFFFF), ((I2C1_ACKGENCALL = (I2C1_ACKGENCALL & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_ACKGENCALL_ACK </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C1_ENSTS  -------------------------------
// SVD Line: 20555

unsigned int I2C1_ENSTS __AT (0x4010129C);



// ------------------------------  Field Item: I2C1_ENSTS_ENABLE  ---------------------------------
// SVD Line: 20565

//  <item> SFDITEM_FIELD__I2C1_ENSTS_ENABLE
//    <name> ENABLE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x4010129C) \nIC Enable Status\n0 : DISABLE = I2C disabled\n1 : ENABLE = I2C enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_ENSTS ) </loc>
//      <o.0..0> ENABLE
//        <0=> 0: DISABLE = I2C disabled
//        <1=> 1: ENABLE = I2C enabled
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C1_ENSTS_SLVDISBUSY  -------------------------------
// SVD Line: 20584

//  <item> SFDITEM_FIELD__I2C1_ENSTS_SLVDISBUSY
//    <name> SLVDISBUSY </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x4010129C) \nSlave Disabled While Busy (Transmit, Receive)\n0 : DISABLE = Slave is disabled when it is idle\n1 : ENABLE = Slave is disabled when it is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_ENSTS ) </loc>
//      <o.1..1> SLVDISBUSY
//        <0=> 0: DISABLE = Slave is disabled when it is idle
//        <1=> 1: ENABLE = Slave is disabled when it is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C1_ENSTS_SLVRXDATALOST  ------------------------------
// SVD Line: 20603

//  <item> SFDITEM_FIELD__I2C1_ENSTS_SLVRXDATALOST
//    <name> SLVRXDATALOST </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x4010129C) \nSlave Received Data Lost\n0 : DISABLE = Slave RX Data is not lost\n1 : ENABLE = Slave RX Data is lost </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C1_ENSTS ) </loc>
//      <o.2..2> SLVRXDATALOST
//        <0=> 0: DISABLE = Slave RX Data is not lost
//        <1=> 1: ENABLE = Slave RX Data is lost
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C1_ENSTS  -----------------------------------
// SVD Line: 20555

//  <rtree> SFDITEM_REG__I2C1_ENSTS
//    <name> ENSTS </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4010129C) I2C ENABLE STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C1_ENSTS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C1_ENSTS_ENABLE </item>
//    <item> SFDITEM_FIELD__I2C1_ENSTS_SLVDISBUSY </item>
//    <item> SFDITEM_FIELD__I2C1_ENSTS_SLVRXDATALOST </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C1_SPKLEN  -------------------------------
// SVD Line: 20624

unsigned int I2C1_SPKLEN __AT (0x401012A0);



// -------------------------------  Field Item: I2C1_SPKLEN_LEN  ----------------------------------
// SVD Line: 20634

//  <item> SFDITEM_FIELD__I2C1_SPKLEN_LEN
//    <name> LEN </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401012A0) Sets the Duration, Measured In Clk Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C1_SPKLEN >> 0) & 0xFF), ((I2C1_SPKLEN = (I2C1_SPKLEN & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: I2C1_SPKLEN  ----------------------------------
// SVD Line: 20624

//  <rtree> SFDITEM_REG__I2C1_SPKLEN
//    <name> SPKLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401012A0) I2C SS, FS OR FM+ RO UFM SPIKE SUPPRESSION LIMIT </i>
//    <loc> ( (unsigned int)((I2C1_SPKLEN >> 0) & 0xFFFFFFFF), ((I2C1_SPKLEN = (I2C1_SPKLEN & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C1_SPKLEN_LEN </item>
//  </rtree>
//  


// ------------------------  Register Item Address: I2C1_CLRRESTARTDET  ---------------------------
// SVD Line: 20643

unsigned int I2C1_CLRRESTARTDET __AT (0x401012A8);



// ----------------------------  Register Item: I2C1_CLRRESTARTDET  -------------------------------
// SVD Line: 20643

//  <item> SFDITEM_REG__I2C1_CLRRESTARTDET
//    <name> CLRRESTARTDET </name>
//    <i> [Bits 31..0] RW (@ 0x401012A8) CLEAR RESTART_DET INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRRESTARTDET >> 0) & 0xFFFFFFFF), ((I2C1_CLRRESTARTDET = (I2C1_CLRRESTARTDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C1_SCLLOWTO  ------------------------------
// SVD Line: 20653

unsigned int I2C1_SCLLOWTO __AT (0x401012AC);



// ------------------------------  Register Item: I2C1_SCLLOWTO  ----------------------------------
// SVD Line: 20653

//  <item> SFDITEM_REG__I2C1_SCLLOWTO
//    <name> SCLLOWTO </name>
//    <i> [Bits 31..0] RW (@ 0x401012AC) I2C SCL STUCK AT LOW TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_SCLLOWTO >> 0) & 0xFFFFFFFF), ((I2C1_SCLLOWTO = (I2C1_SCLLOWTO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C1_SDALOWTO  ------------------------------
// SVD Line: 20663

unsigned int I2C1_SDALOWTO __AT (0x401012B0);



// ------------------------------  Register Item: I2C1_SDALOWTO  ----------------------------------
// SVD Line: 20663

//  <item> SFDITEM_REG__I2C1_SDALOWTO
//    <name> SDALOWTO </name>
//    <i> [Bits 31..0] RW (@ 0x401012B0) I2C SDA STUCK AT LOW TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_SDALOWTO >> 0) & 0xFFFFFFFF), ((I2C1_SDALOWTO = (I2C1_SDALOWTO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: I2C1_CLRSCLSTUCKDET  ---------------------------
// SVD Line: 20673

unsigned int I2C1_CLRSCLSTUCKDET __AT (0x401012B4);



// ---------------------------  Register Item: I2C1_CLRSCLSTUCKDET  -------------------------------
// SVD Line: 20673

//  <item> SFDITEM_REG__I2C1_CLRSCLSTUCKDET
//    <name> CLRSCLSTUCKDET </name>
//    <i> [Bits 31..0] RW (@ 0x401012B4) CLEAR SCL STUCK AT LOW DETECT INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C1_CLRSCLSTUCKDET >> 0) & 0xFFFFFFFF), ((I2C1_CLRSCLSTUCKDET = (I2C1_CLRSCLSTUCKDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------------  Peripheral View: I2C1  -------------------------------------
// SVD Line: 20686

//  <view> I2C1
//    <name> I2C1 </name>
//    <item> SFDITEM_REG__I2C1_CON </item>
//    <item> SFDITEM_REG__I2C1_TAR </item>
//    <item> SFDITEM_REG__I2C1_SAR </item>
//    <item> SFDITEM_REG__I2C1_DATACMD </item>
//    <item> SFDITEM_REG__I2C1_SCLHCNT </item>
//    <item> SFDITEM_REG__I2C1_SCLLCNT </item>
//    <item> SFDITEM_REG__I2C1_FSSCLHCNT </item>
//    <item> SFDITEM_REG__I2C1_FSSCLLCNT </item>
//    <item> SFDITEM_REG__I2C1_INTSTAT </item>
//    <item> SFDITEM_REG__I2C1_INTMASK </item>
//    <item> SFDITEM_REG__I2C1_RAWINTSTAT </item>
//    <item> SFDITEM_REG__I2C1_RXTL </item>
//    <item> SFDITEM_REG__I2C1_TXTL </item>
//    <item> SFDITEM_REG__I2C1_CLRINT </item>
//    <item> SFDITEM_REG__I2C1_CLRRXUNDER </item>
//    <item> SFDITEM_REG__I2C1_CLRRXOVER </item>
//    <item> SFDITEM_REG__I2C1_CLRTXOVER </item>
//    <item> SFDITEM_REG__I2C1_CLRRDREQ </item>
//    <item> SFDITEM_REG__I2C1_CLRTXABRT </item>
//    <item> SFDITEM_REG__I2C1_CLRRXDONE </item>
//    <item> SFDITEM_REG__I2C1_CLRACTIVITY </item>
//    <item> SFDITEM_REG__I2C1_CLRSTOPDET </item>
//    <item> SFDITEM_REG__I2C1_CLRSTARTDET </item>
//    <item> SFDITEM_REG__I2C1_CLRGENCALL </item>
//    <item> SFDITEM_REG__I2C1_ENABLE </item>
//    <item> SFDITEM_REG__I2C1_STATUS </item>
//    <item> SFDITEM_REG__I2C1_TXFLR </item>
//    <item> SFDITEM_REG__I2C1_RXFLR </item>
//    <item> SFDITEM_REG__I2C1_SDAHOLD </item>
//    <item> SFDITEM_REG__I2C1_TXABRTSRC </item>
//    <item> SFDITEM_REG__I2C1_SLVDATANACKONLY </item>
//    <item> SFDITEM_REG__I2C1_SDASETUP </item>
//    <item> SFDITEM_REG__I2C1_ACKGENCALL </item>
//    <item> SFDITEM_REG__I2C1_ENSTS </item>
//    <item> SFDITEM_REG__I2C1_SPKLEN </item>
//    <item> SFDITEM_REG__I2C1_CLRRESTARTDET </item>
//    <item> SFDITEM_REG__I2C1_SCLLOWTO </item>
//    <item> SFDITEM_REG__I2C1_SDALOWTO </item>
//    <item> SFDITEM_REG__I2C1_CLRSCLSTUCKDET </item>
//  </view>
//  


// -----------------------------  Register Item Address: I2C2_CON  --------------------------------
// SVD Line: 18108

unsigned int I2C2_CON __AT (0x40101400);



// -------------------------------  Field Item: I2C2_CON_MATSER  ----------------------------------
// SVD Line: 18118

//  <item> SFDITEM_FIELD__I2C2_CON_MATSER
//    <name> MATSER </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101400) \nEnable/Disable Master Mode\n0 : DISABLE = Master mode is disabled\n1 : ENABLE = Master mode is enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.0..0> MATSER
//        <0=> 0: DISABLE = Master mode is disabled
//        <1=> 1: ENABLE = Master mode is enabled
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C2_CON_SPEED  -----------------------------------
// SVD Line: 18137

//  <item> SFDITEM_FIELD__I2C2_CON_SPEED
//    <name> SPEED </name>
//    <rw> 
//    <i> [Bits 2..1] RW (@ 0x40101400) \nSpeed Mode\n0 : NONE = Not defined\n1 : STANDARD = Standard speed\n2 : FAST = Fast speed\n3 : HIGH = High speed </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.2..1> SPEED
//        <0=> 0: NONE = Not defined
//        <1=> 1: STANDARD = Standard speed
//        <2=> 2: FAST = Fast speed
//        <3=> 3: HIGH = High speed
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_CON_SLV10BIT  ---------------------------------
// SVD Line: 18166

//  <item> SFDITEM_FIELD__I2C2_CON_SLV10BIT
//    <name> SLV10BIT </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101400) \nSlave Responds To 7-bit Or 10-bit Addresses\n0 : 7_BIT = Slave 7-bit addressing\n1 : 10_BIT = Slave 10-bit addressing </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.3..3> SLV10BIT
//        <0=> 0: 7_BIT = Slave 7-bit addressing
//        <1=> 1: 10_BIT = Slave 10-bit addressing
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_CON_MST10BIT  ---------------------------------
// SVD Line: 18185

//  <item> SFDITEM_FIELD__I2C2_CON_MST10BIT
//    <name> MST10BIT </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40101400) \nMaster Is 7-bit Or 10-bit Addressing Mode\n0 : 7_BIT = Master 7-bit addressing\n1 : 10_BIT = Master 10-bit addressing </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.4..4> MST10BIT
//        <0=> 0: 7_BIT = Master 7-bit addressing
//        <1=> 1: 10_BIT = Master 10-bit addressing
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_CON_RESTREN  ----------------------------------
// SVD Line: 18204

//  <item> SFDITEM_FIELD__I2C2_CON_RESTREN
//    <name> RESTREN </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40101400) \nEnable/Disable Master Restart\n0 : DISABLE = Master restart disabled\n1 : ENABLE = Master restart enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.5..5> RESTREN
//        <0=> 0: DISABLE = Master restart disabled
//        <1=> 1: ENABLE = Master restart enabled
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_CON_SLVDISABLE  --------------------------------
// SVD Line: 18223

//  <item> SFDITEM_FIELD__I2C2_CON_SLVDISABLE
//    <name> SLVDISABLE </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101400) \nEnable/Disable Slave Mode\n0 : Enable = Enable slave mode\n1 : Disable = Disable slave mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.6..6> SLVDISABLE
//        <0=> 0: Enable = Enable slave mode
//        <1=> 1: Disable = Disable slave mode
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C2_CON_STPDET  ----------------------------------
// SVD Line: 18242

//  <item> SFDITEM_FIELD__I2C2_CON_STPDET
//    <name> STPDET </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101400) \nHow Slave Issues Stop Detection Interrupt\n0 : ALWAYS = Slave issues stop detection interrupt always\n1 : ADDRESSED = Slave issues stop detection interrupt only if addressed </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.7..7> STPDET
//        <0=> 0: ALWAYS = Slave issues stop detection interrupt always
//        <1=> 1: ADDRESSED = Slave issues stop detection interrupt only if addressed
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_CON_TXEMPTYCTRL  --------------------------------
// SVD Line: 18261

//  <item> SFDITEM_FIELD__I2C2_CON_TXEMPTYCTRL
//    <name> TXEMPTYCTRL </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101400) \nControls the Generation Of The Tx Empty Interrupt\n0 : DISABLE = Default behaviour of tx empty interrupt\n1 : ENABLE = Controlled generation of tx empty interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.8..8> TXEMPTYCTRL
//        <0=> 0: DISABLE = Default behaviour of tx empty interrupt
//        <1=> 1: ENABLE = Controlled generation of tx empty interrupt
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_CON_RXFULLHLDC  --------------------------------
// SVD Line: 18280

//  <item> SFDITEM_FIELD__I2C2_CON_RXFULLHLDC
//    <name> RXFULLHLDC </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40101400) \nHold the Bus When The Rx FIFO Is Full Or Not\n0 : DISABLE = Overflow when RX FIFO is full\n1 : ENABLE = Hold bus when RX FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.9..9> RXFULLHLDC
//        <0=> 0: DISABLE = Overflow when RX FIFO is full
//        <1=> 1: ENABLE = Hold bus when RX FIFO is full
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_CON_STPMSTACTIVE  -------------------------------
// SVD Line: 18299

//  <item> SFDITEM_FIELD__I2C2_CON_STPMSTACTIVE
//    <name> STPMSTACTIVE </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101400) \nHow I2c Controller Issues The Stop Detection Interrupt\n0 : DISABLE = Master issues the stop detection interrupt irrespective of whether master is active or not\n1 : ENABLE = Master issues the stop detection interrupt only when master is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.10..10> STPMSTACTIVE
//        <0=> 0: DISABLE = Master issues the stop detection interrupt irrespective of whether master is active or not
//        <1=> 1: ENABLE = Master issues the stop detection interrupt only when master is active
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_CON_BUSCLREN  ---------------------------------
// SVD Line: 18318

//  <item> SFDITEM_FIELD__I2C2_CON_BUSCLREN
//    <name> BUSCLREN </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101400) \nEnables the Bus Clear Feature\n0 : DISABLE = Bus Clear Feature is enabled\n1 : ENABLE = Bus Clear Feature is disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_CON ) </loc>
//      <o.11..11> BUSCLREN
//        <0=> 0: DISABLE = Bus Clear Feature is enabled
//        <1=> 1: ENABLE = Bus Clear Feature is disabled
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: I2C2_CON  ------------------------------------
// SVD Line: 18108

//  <rtree> SFDITEM_REG__I2C2_CON
//    <name> CON </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101400) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_CON >> 0) & 0xFFFFFFFF), ((I2C2_CON = (I2C2_CON & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_CON_MATSER </item>
//    <item> SFDITEM_FIELD__I2C2_CON_SPEED </item>
//    <item> SFDITEM_FIELD__I2C2_CON_SLV10BIT </item>
//    <item> SFDITEM_FIELD__I2C2_CON_MST10BIT </item>
//    <item> SFDITEM_FIELD__I2C2_CON_RESTREN </item>
//    <item> SFDITEM_FIELD__I2C2_CON_SLVDISABLE </item>
//    <item> SFDITEM_FIELD__I2C2_CON_STPDET </item>
//    <item> SFDITEM_FIELD__I2C2_CON_TXEMPTYCTRL </item>
//    <item> SFDITEM_FIELD__I2C2_CON_RXFULLHLDC </item>
//    <item> SFDITEM_FIELD__I2C2_CON_STPMSTACTIVE </item>
//    <item> SFDITEM_FIELD__I2C2_CON_BUSCLREN </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: I2C2_TAR  --------------------------------
// SVD Line: 18339

unsigned int I2C2_TAR __AT (0x40101404);



// --------------------------------  Field Item: I2C2_TAR_TAR  ------------------------------------
// SVD Line: 18349

//  <item> SFDITEM_FIELD__I2C2_TAR_TAR
//    <name> TAR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x40101404) Target Address For Any Master Transaction </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C2_TAR >> 0) & 0x3FF), ((I2C2_TAR = (I2C2_TAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: I2C2_TAR_GCORSTR  ----------------------------------
// SVD Line: 18356

//  <item> SFDITEM_FIELD__I2C2_TAR_GCORSTR
//    <name> GCORSTR </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101404) \nIndicates Whether A General Call Or Start Byte Command\n0 : GEN_CALL = General Call byte transmission\n1 : START = START byte transmission </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TAR ) </loc>
//      <o.10..10> GCORSTR
//        <0=> 0: GEN_CALL = General Call byte transmission
//        <1=> 1: START = START byte transmission
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_TAR_SPECIAL  ----------------------------------
// SVD Line: 18375

//  <item> SFDITEM_FIELD__I2C2_TAR_SPECIAL
//    <name> SPECIAL </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101404) \nIndicates Whether Software Performs A Device-id Or General Call Or Start Byte Command\n0 : DISABLE = Disables programming of GENERAL_CALL or START_BYTE transmission\n1 : ENABLE = Enables programming of GENERAL_CALL or START_BYTE transmission </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TAR ) </loc>
//      <o.11..11> SPECIAL
//        <0=> 0: DISABLE = Disables programming of GENERAL_CALL or START_BYTE transmission
//        <1=> 1: ENABLE = Enables programming of GENERAL_CALL or START_BYTE transmission
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: I2C2_TAR  ------------------------------------
// SVD Line: 18339

//  <rtree> SFDITEM_REG__I2C2_TAR
//    <name> TAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101404) TARGET ADDRESS REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_TAR >> 0) & 0xFFFFFFFF), ((I2C2_TAR = (I2C2_TAR & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_TAR_TAR </item>
//    <item> SFDITEM_FIELD__I2C2_TAR_GCORSTR </item>
//    <item> SFDITEM_FIELD__I2C2_TAR_SPECIAL </item>
//  </rtree>
//  


// -----------------------------  Register Item Address: I2C2_SAR  --------------------------------
// SVD Line: 18396

unsigned int I2C2_SAR __AT (0x40101408);



// --------------------------------  Field Item: I2C2_SAR_SAR  ------------------------------------
// SVD Line: 18406

//  <item> SFDITEM_FIELD__I2C2_SAR_SAR
//    <name> SAR </name>
//    <rw> 
//    <i> [Bits 9..0] RW (@ 0x40101408) Holds The Slave Address When The I2c Is Operating As A Slave </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C2_SAR >> 0) & 0x3FF), ((I2C2_SAR = (I2C2_SAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C2_SAR  ------------------------------------
// SVD Line: 18396

//  <rtree> SFDITEM_REG__I2C2_SAR
//    <name> SAR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101408) SLAVE ADDRESS REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_SAR >> 0) & 0xFFFFFFFF), ((I2C2_SAR = (I2C2_SAR & ~(0x3FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_SAR_SAR </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C2_DATACMD  ------------------------------
// SVD Line: 18415

unsigned int I2C2_DATACMD __AT (0x40101410);



// ------------------------------  Field Item: I2C2_DATACMD_DATA  ---------------------------------
// SVD Line: 18425

//  <item> SFDITEM_FIELD__I2C2_DATACMD_DATA
//    <name> DATA </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101410) The Data To Be Transmitted Or Received On The I2C Bus </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C2_DATACMD >> 0) & 0xFF), ((I2C2_DATACMD = (I2C2_DATACMD & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: I2C2_DATACMD_CMD  ----------------------------------
// SVD Line: 18432

//  <item> SFDITEM_FIELD__I2C2_DATACMD_CMD
//    <name> CMD </name>
//    <w> 
//    <i> [Bit 8] WO (@ 0x40101410) \nControls Whether A Read Or A Write Is Performed\n0 : WRITE = Master write command\n1 : read-only = Master read command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_DATACMD ) </loc>
//      <o.8..8> CMD
//        <0=> 0: WRITE = Master write command
//        <1=> 1: read-only = Master read command
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_DATACMD_STOP  ---------------------------------
// SVD Line: 18451

//  <item> SFDITEM_FIELD__I2C2_DATACMD_STOP
//    <name> STOP </name>
//    <w> 
//    <i> [Bit 9] WO (@ 0x40101410) \nControls Whether A Stop Is Issued After The Byte Is Sent Or Received\n0 : DISABLE = Do not issue STOP after this command\n1 : ENABLE = Issue STOP after this command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_DATACMD ) </loc>
//      <o.9..9> STOP
//        <0=> 0: DISABLE = Do not issue STOP after this command
//        <1=> 1: ENABLE = Issue STOP after this command
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_DATACMD_RESTART  --------------------------------
// SVD Line: 18470

//  <item> SFDITEM_FIELD__I2C2_DATACMD_RESTART
//    <name> RESTART </name>
//    <w> 
//    <i> [Bit 10] WO (@ 0x40101410) \nControls Whether a RESTART Is Issued Before The Byte Is Sent Or Received\n0 : DISABLE = Do not Issue RESTART before this command\n1 : ENABLE = Issue RESTART before this command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_DATACMD ) </loc>
//      <o.10..10> RESTART
//        <0=> 0: DISABLE = Do not Issue RESTART before this command
//        <1=> 1: ENABLE = Issue RESTART before this command
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_DATACMD_FIRSTDATA  -------------------------------
// SVD Line: 18489

//  <item> SFDITEM_FIELD__I2C2_DATACMD_FIRSTDATA
//    <name> FIRSTDATA </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101410) \nIndicates The First Data Byte Received After The Address Phase\n0 : INACTIVE = Non sequential data byte received\n1 : ACTIVE = Sequential data byte received </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_DATACMD ) </loc>
//      <o.11..11> FIRSTDATA
//        <0=> 0: INACTIVE = Non sequential data byte received
//        <1=> 1: ACTIVE = Sequential data byte received
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C2_DATACMD  ----------------------------------
// SVD Line: 18415

//  <rtree> SFDITEM_REG__I2C2_DATACMD
//    <name> DATACMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101410) DATA BUFFER AND COMMAND REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_DATACMD >> 0) & 0xFFFFFFFF), ((I2C2_DATACMD = (I2C2_DATACMD & ~(0x7FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_DATACMD_DATA </item>
//    <item> SFDITEM_FIELD__I2C2_DATACMD_CMD </item>
//    <item> SFDITEM_FIELD__I2C2_DATACMD_STOP </item>
//    <item> SFDITEM_FIELD__I2C2_DATACMD_RESTART </item>
//    <item> SFDITEM_FIELD__I2C2_DATACMD_FIRSTDATA </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C2_SCLHCNT  ------------------------------
// SVD Line: 18510

unsigned int I2C2_SCLHCNT __AT (0x40101414);



// ------------------------------  Field Item: I2C2_SCLHCNT_HCNT  ---------------------------------
// SVD Line: 18520

//  <item> SFDITEM_FIELD__I2C2_SCLHCNT_HCNT
//    <name> HCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101414) Sets the SCL Clock High-period Count For Standard Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C2_SCLHCNT >> 0) & 0xFFFF), ((I2C2_SCLHCNT = (I2C2_SCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C2_SCLHCNT  ----------------------------------
// SVD Line: 18510

//  <rtree> SFDITEM_REG__I2C2_SCLHCNT
//    <name> SCLHCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101414) STANDARD SPEED I2C CLOCK SCL HIGH COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_SCLHCNT >> 0) & 0xFFFFFFFF), ((I2C2_SCLHCNT = (I2C2_SCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_SCLHCNT_HCNT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C2_SCLLCNT  ------------------------------
// SVD Line: 18529

unsigned int I2C2_SCLLCNT __AT (0x40101418);



// ------------------------------  Field Item: I2C2_SCLLCNT_LCNT  ---------------------------------
// SVD Line: 18539

//  <item> SFDITEM_FIELD__I2C2_SCLLCNT_LCNT
//    <name> LCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101418) Sets the SCL Clock Low-period Count For Standard Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C2_SCLLCNT >> 0) & 0xFFFF), ((I2C2_SCLLCNT = (I2C2_SCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C2_SCLLCNT  ----------------------------------
// SVD Line: 18529

//  <rtree> SFDITEM_REG__I2C2_SCLLCNT
//    <name> SCLLCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101418) STANDARD SPEED I2C CLOCK SCL LOW COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_SCLLCNT >> 0) & 0xFFFFFFFF), ((I2C2_SCLLCNT = (I2C2_SCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_SCLLCNT_LCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C2_FSSCLHCNT  -----------------------------
// SVD Line: 18548

unsigned int I2C2_FSSCLHCNT __AT (0x4010141C);



// -----------------------------  Field Item: I2C2_FSSCLHCNT_HCNT  --------------------------------
// SVD Line: 18558

//  <item> SFDITEM_FIELD__I2C2_FSSCLHCNT_HCNT
//    <name> HCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010141C) Sets the SCL Clock High-period Count For Fast Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C2_FSSCLHCNT >> 0) & 0xFFFF), ((I2C2_FSSCLHCNT = (I2C2_FSSCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C2_FSSCLHCNT  ---------------------------------
// SVD Line: 18548

//  <rtree> SFDITEM_REG__I2C2_FSSCLHCNT
//    <name> FSSCLHCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010141C) FAST MODE SCL HIGH COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_FSSCLHCNT >> 0) & 0xFFFFFFFF), ((I2C2_FSSCLHCNT = (I2C2_FSSCLHCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_FSSCLHCNT_HCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C2_FSSCLLCNT  -----------------------------
// SVD Line: 18567

unsigned int I2C2_FSSCLLCNT __AT (0x40101420);



// -----------------------------  Field Item: I2C2_FSSCLLCNT_LCNT  --------------------------------
// SVD Line: 18577

//  <item> SFDITEM_FIELD__I2C2_FSSCLLCNT_LCNT
//    <name> LCNT </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40101420) Sets the SCL Clock Low-period Count For Fast Speed </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C2_FSSCLLCNT >> 0) & 0xFFFF), ((I2C2_FSSCLLCNT = (I2C2_FSSCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C2_FSSCLLCNT  ---------------------------------
// SVD Line: 18567

//  <rtree> SFDITEM_REG__I2C2_FSSCLLCNT
//    <name> FSSCLLCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101420) FAST MODE SCL LOW COUNT REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_FSSCLLCNT >> 0) & 0xFFFFFFFF), ((I2C2_FSSCLLCNT = (I2C2_FSSCLLCNT & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_FSSCLLCNT_LCNT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C2_INTSTAT  ------------------------------
// SVD Line: 18586

unsigned int I2C2_INTSTAT __AT (0x4010142C);



// ----------------------------  Field Item: I2C2_INTSTAT_RXUNDER  --------------------------------
// SVD Line: 18596

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_RXUNDER
//    <name> RXUNDER </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x4010142C) \nRX_UNDER Interrupt\n0 : INACTIVE = RX_UNDER interrupt is inactive\n1 : ACTIVE = RX_UNDER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.0..0> RXUNDER
//        <0=> 0: INACTIVE = RX_UNDER interrupt is inactive
//        <1=> 1: ACTIVE = RX_UNDER interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_INTSTAT_RXOVER  --------------------------------
// SVD Line: 18615

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_RXOVER
//    <name> RXOVER </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x4010142C) \nRX_OVER Interrupt\n0 : INACTIVE = RX_OVER interrupt is inactive\n1 : ACTIVE = RX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.1..1> RXOVER
//        <0=> 0: INACTIVE = RX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = RX_OVER interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_INTSTAT_RXFULL  --------------------------------
// SVD Line: 18634

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_RXFULL
//    <name> RXFULL </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x4010142C) \nRX_FULL Interrupt\n0 : INACTIVE = RX_FULL interrupt is inactive\n1 : ACTIVE = RX_FULL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.2..2> RXFULL
//        <0=> 0: INACTIVE = RX_FULL interrupt is inactive
//        <1=> 1: ACTIVE = RX_FULL interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_INTSTAT_TXOVER  --------------------------------
// SVD Line: 18653

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_TXOVER
//    <name> TXOVER </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4010142C) \nTX_OVER Interrupt\n0 : INACTIVE = TX_OVER interrupt is inactive\n1 : ACTIVE = TX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.3..3> TXOVER
//        <0=> 0: INACTIVE = TX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = TX_OVER interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_INTSTAT_TXEMPTY  --------------------------------
// SVD Line: 18672

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_TXEMPTY
//    <name> TXEMPTY </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x4010142C) \nTX_EMPTY Interrupt\n0 : INACTIVE = TX_EMPTY interrupt is inactive\n1 : ACTIVE = TX_EMPTY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.4..4> TXEMPTY
//        <0=> 0: INACTIVE = TX_EMPTY interrupt is inactive
//        <1=> 1: ACTIVE = TX_EMPTY interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_INTSTAT_RDREQ  ---------------------------------
// SVD Line: 18691

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_RDREQ
//    <name> RDREQ </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x4010142C) \nRD_REQ interrupt\n0 : INACTIVE = RD_REQ interrupt is inactive\n1 : ACTIVE = RD_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.5..5> RDREQ
//        <0=> 0: INACTIVE = RD_REQ interrupt is inactive
//        <1=> 1: ACTIVE = RD_REQ interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_INTSTAT_TXABRT  --------------------------------
// SVD Line: 18710

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_TXABRT
//    <name> TXABRT </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x4010142C) \nTX_ABRT Interrupt\n0 : INACTIVE = TX_ABRT interrupt is inactive\n1 : ACTIVE = TX_ABRT interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.6..6> TXABRT
//        <0=> 0: INACTIVE = TX_ABRT interrupt is inactive
//        <1=> 1: ACTIVE = TX_ABRT interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_INTSTAT_RXDONE  --------------------------------
// SVD Line: 18729

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_RXDONE
//    <name> RXDONE </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x4010142C) \nRX_DONE Interrupt\n0 : INACTIVE = RX_DONE interrupt is inactive\n1 : ACTIVE = RX_DONE interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.7..7> RXDONE
//        <0=> 0: INACTIVE = RX_DONE interrupt is inactive
//        <1=> 1: ACTIVE = RX_DONE interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_INTSTAT_ACTIVITY  -------------------------------
// SVD Line: 18748

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_ACTIVITY
//    <name> ACTIVITY </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x4010142C) \nACTIVITY Interrupt\n0 : INACTIVE = ACTIVITY interrupt is inactive\n1 : ACTIVE = ACTIVITY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.8..8> ACTIVITY
//        <0=> 0: INACTIVE = ACTIVITY interrupt is inactive
//        <1=> 1: ACTIVE = ACTIVITY interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_INTSTAT_STOPDET  --------------------------------
// SVD Line: 18767

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_STOPDET
//    <name> STOPDET </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x4010142C) \nSTOP_DET Interrupt\n0 : INACTIVE = STOP_DET interrupt is inactive\n1 : ACTIVE = STOP_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.9..9> STOPDET
//        <0=> 0: INACTIVE = STOP_DET interrupt is inactive
//        <1=> 1: ACTIVE = STOP_DET interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_INTSTAT_STARTDET  -------------------------------
// SVD Line: 18786

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_STARTDET
//    <name> STARTDET </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x4010142C) \nSTART_DET Interrupt\n0 : INACTIVE = START_DET interrupt is inactive\n1 : ACTIVE = START_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.10..10> STARTDET
//        <0=> 0: INACTIVE = START_DET interrupt is inactive
//        <1=> 1: ACTIVE = START_DET interrupt is active
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_INTSTAT_GENCALL  --------------------------------
// SVD Line: 18805

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_GENCALL
//    <name> GENCALL </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x4010142C) \nGEN_CALL Interrupt\n0 : INACTIVE = GEN-CALL interrupt is inactive\n1 : ACTIVE = GEN-CALL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.11..11> GENCALL
//        <0=> 0: INACTIVE = GEN-CALL interrupt is inactive
//        <1=> 1: ACTIVE = GEN-CALL interrupt is active
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTSTAT_RESTARTDET  ------------------------------
// SVD Line: 18824

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_RESTARTDET
//    <name> RESTARTDET </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x4010142C) \nRESTART_DET Interrupt\n0 : INACTIVE = RESTART_DET interrupt is inactive\n1 : ACTIVE = RESTART_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.12..12> RESTARTDET
//        <0=> 0: INACTIVE = RESTART_DET interrupt is inactive
//        <1=> 1: ACTIVE = RESTART_DET interrupt is active
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTSTAT_MSTONHOLD  -------------------------------
// SVD Line: 18843

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_MSTONHOLD
//    <name> MSTONHOLD </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x4010142C) \nMASTER_ON_HOLD Interrupt\n0 : INACTIVE = MASTER_ON_HOLD interrupt is inactive\n1 : ACTIVE = MASTER_ON_HOLD interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.13..13> MSTONHOLD
//        <0=> 0: INACTIVE = MASTER_ON_HOLD interrupt is inactive
//        <1=> 1: ACTIVE = MASTER_ON_HOLD interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_INTSTAT_SCLSTUCKLOW  ------------------------------
// SVD Line: 18862

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_SCLSTUCKLOW
//    <name> SCLSTUCKLOW </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x4010142C) \nSCL_STUCK_AT_LOW Interrupt\n0 : INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive\n1 : ACTIVE = SCL_STUCK_AT_LOW interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.14..14> SCLSTUCKLOW
//        <0=> 0: INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive
//        <1=> 1: ACTIVE = SCL_STUCK_AT_LOW interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: I2C2_INTSTAT_WRREQ  ---------------------------------
// SVD Line: 18881

//  <item> SFDITEM_FIELD__I2C2_INTSTAT_WRREQ
//    <name> WRREQ </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x4010142C) \nWR_REQ Interrupt\n0 : INACTIVE = WR_REQ interrupt is inactive\n1 : ACTIVE = WR_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTSTAT ) </loc>
//      <o.15..15> WRREQ
//        <0=> 0: INACTIVE = WR_REQ interrupt is inactive
//        <1=> 1: ACTIVE = WR_REQ interrupt is active
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C2_INTSTAT  ----------------------------------
// SVD Line: 18586

//  <rtree> SFDITEM_REG__I2C2_INTSTAT
//    <name> INTSTAT </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4010142C) I2C INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_INTSTAT >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_RXUNDER </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_RXOVER </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_RXFULL </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_TXOVER </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_TXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_RDREQ </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_TXABRT </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_RXDONE </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_ACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_STOPDET </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_STARTDET </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_GENCALL </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_RESTARTDET </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_MSTONHOLD </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_SCLSTUCKLOW </item>
//    <item> SFDITEM_FIELD__I2C2_INTSTAT_WRREQ </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C2_INTMASK  ------------------------------
// SVD Line: 18902

unsigned int I2C2_INTMASK __AT (0x40101430);



// ---------------------------  Field Item: I2C2_INTMASK_RXUNDERMSK  ------------------------------
// SVD Line: 18912

//  <item> SFDITEM_FIELD__I2C2_INTMASK_RXUNDERMSK
//    <name> RXUNDERMSK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101430) \nRX_UNDER Interrupt Mask\n0 : MASKED = RX_UNDER interrupt is masked\n1 : UNMASKED = RX_UNDER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.0..0> RXUNDERMSK
//        <0=> 0: MASKED = RX_UNDER interrupt is masked
//        <1=> 1: UNMASKED = RX_UNDER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTMASK_RXOVERMSK  -------------------------------
// SVD Line: 18931

//  <item> SFDITEM_FIELD__I2C2_INTMASK_RXOVERMSK
//    <name> RXOVERMSK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101430) \nRX_OVER Interrupt Mask\n0 : MASKED = RX_OVER interrupt is masked\n1 : UNMASKED = RX_OVER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.1..1> RXOVERMSK
//        <0=> 0: MASKED = RX_OVER interrupt is masked
//        <1=> 1: UNMASKED = RX_OVER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTMASK_RXFULLMSK  -------------------------------
// SVD Line: 18950

//  <item> SFDITEM_FIELD__I2C2_INTMASK_RXFULLMSK
//    <name> RXFULLMSK </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101430) \nRX_FULL Interrupt Mask\n0 : MASKED = RX_FULL interrupt is masked\n1 : UNMASKED = RX_FULL interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.2..2> RXFULLMSK
//        <0=> 0: MASKED = RX_FULL interrupt is masked
//        <1=> 1: UNMASKED = RX_FULL interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTMASK_TXOVERMSK  -------------------------------
// SVD Line: 18969

//  <item> SFDITEM_FIELD__I2C2_INTMASK_TXOVERMSK
//    <name> TXOVERMSK </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101430) \nTX_OVER Interrupt Mask\n0 : MASKED = TX_OVER interrupt is masked\n1 : UNMASKED = TX_OVER interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.3..3> TXOVERMSK
//        <0=> 0: MASKED = TX_OVER interrupt is masked
//        <1=> 1: UNMASKED = TX_OVER interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTMASK_TXEMPTYMSK  ------------------------------
// SVD Line: 18988

//  <item> SFDITEM_FIELD__I2C2_INTMASK_TXEMPTYMSK
//    <name> TXEMPTYMSK </name>
//    <rw> 
//    <i> [Bit 4] RW (@ 0x40101430) \nTX_EMPTY Interrupt Mask\n0 : MASKED = TX_EMPTY interrupt is masked\n1 : UNMASKED = TX_EMPTY interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.4..4> TXEMPTYMSK
//        <0=> 0: MASKED = TX_EMPTY interrupt is masked
//        <1=> 1: UNMASKED = TX_EMPTY interrupt is unmasked
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_INTMASK_RDREQMSK  -------------------------------
// SVD Line: 19007

//  <item> SFDITEM_FIELD__I2C2_INTMASK_RDREQMSK
//    <name> RDREQMSK </name>
//    <rw> 
//    <i> [Bit 5] RW (@ 0x40101430) \nRD_REQ Interrupt Mask\n0 : MASKED = RD_REQ interrupt is masked\n1 : UNMASKED = RD_REQ interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.5..5> RDREQMSK
//        <0=> 0: MASKED = RD_REQ interrupt is masked
//        <1=> 1: UNMASKED = RD_REQ interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTMASK_TXABRTMSK  -------------------------------
// SVD Line: 19026

//  <item> SFDITEM_FIELD__I2C2_INTMASK_TXABRTMSK
//    <name> TXABRTMSK </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101430) \nTX_ABRT Interrupt Mask\n0 : MASKED = TX_ABRT interrupt is masked\n1 : UNMASKED = TX_ABRT interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.6..6> TXABRTMSK
//        <0=> 0: MASKED = TX_ABRT interrupt is masked
//        <1=> 1: UNMASKED = TX_ABRT interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTMASK_RXDONEMSK  -------------------------------
// SVD Line: 19045

//  <item> SFDITEM_FIELD__I2C2_INTMASK_RXDONEMSK
//    <name> RXDONEMSK </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101430) \nRX_DONE Interrupt Mask\n0 : MASKED = RX_DONE interrupt is masked\n1 : UNMASKED = RX_DONE interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.7..7> RXDONEMSK
//        <0=> 0: MASKED = RX_DONE interrupt is masked
//        <1=> 1: UNMASKED = RX_DONE interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_INTMASK_ACTIVITYMSK  ------------------------------
// SVD Line: 19064

//  <item> SFDITEM_FIELD__I2C2_INTMASK_ACTIVITYMSK
//    <name> ACTIVITYMSK </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101430) \nACTIVITY Interrupt Mask\n0 : MASKED = ACTIVITY interrupt is masked\n1 : UNMASKED = ACTIVITY interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.8..8> ACTIVITYMSK
//        <0=> 0: MASKED = ACTIVITY interrupt is masked
//        <1=> 1: UNMASKED = ACTIVITY interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTMASK_STOPDETMSK  ------------------------------
// SVD Line: 19083

//  <item> SFDITEM_FIELD__I2C2_INTMASK_STOPDETMSK
//    <name> STOPDETMSK </name>
//    <rw> 
//    <i> [Bit 9] RW (@ 0x40101430) \nSTOP_DET Interrupt Mask\n0 : MASKED = STOP_DET interrupt is masked\n1 : UNMASKED = STOP_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.9..9> STOPDETMSK
//        <0=> 0: MASKED = STOP_DET interrupt is masked
//        <1=> 1: UNMASKED = STOP_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_INTMASK_STARTDETMSK  ------------------------------
// SVD Line: 19102

//  <item> SFDITEM_FIELD__I2C2_INTMASK_STARTDETMSK
//    <name> STARTDETMSK </name>
//    <rw> 
//    <i> [Bit 10] RW (@ 0x40101430) \nSTART_DET Interrupt Mask\n0 : MASKED = START_DET interrupt is masked\n1 : UNMASKED = START_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.10..10> STARTDETMSK
//        <0=> 0: MASKED = START_DET interrupt is masked
//        <1=> 1: UNMASKED = START_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_INTMASK_GENCALLMSK  ------------------------------
// SVD Line: 19121

//  <item> SFDITEM_FIELD__I2C2_INTMASK_GENCALLMSK
//    <name> GENCALLMSK </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40101430) \nGEN_CALL Interrupt Mask\n0 : MASKED = GEN-CALL interrupt is masked\n1 : UNMASKED = GEN-CALL interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.11..11> GENCALLMSK
//        <0=> 0: MASKED = GEN-CALL interrupt is masked
//        <1=> 1: UNMASKED = GEN-CALL interrupt is unmasked
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_INTMASK_RESTARTDETMSK  -----------------------------
// SVD Line: 19140

//  <item> SFDITEM_FIELD__I2C2_INTMASK_RESTARTDETMSK
//    <name> RESTARTDETMSK </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40101430) \nRESTART_DET Interrupt Mask\n0 : MASKED = RESTART_DET interrupt is masked\n1 : UNMASKED = RESTART_DET interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.12..12> RESTARTDETMSK
//        <0=> 0: MASKED = RESTART_DET interrupt is masked
//        <1=> 1: UNMASKED = RESTART_DET interrupt is unmasked
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_INTMASK_MSTONHOLDMSK  -----------------------------
// SVD Line: 19159

//  <item> SFDITEM_FIELD__I2C2_INTMASK_MSTONHOLDMSK
//    <name> MSTONHOLDMSK </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40101430) \nMASTER_ON_HOLD Interrupt Mask\n0 : MASKED = MASTER_ON_HOLD interrupt is masked\n1 : UNMASKED = MASTER_ON_HOLD interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.13..13> MSTONHOLDMSK
//        <0=> 0: MASKED = MASTER_ON_HOLD interrupt is masked
//        <1=> 1: UNMASKED = MASTER_ON_HOLD interrupt is unmasked
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_INTMASK_SCLSTUCKLOWMSK  ----------------------------
// SVD Line: 19178

//  <item> SFDITEM_FIELD__I2C2_INTMASK_SCLSTUCKLOWMSK
//    <name> SCLSTUCKLOWMSK </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40101430) \nSCL_STUCK_AT_LOW Interrupt Mask\n0 : MASKED = SCL_STUCK_AT_LOW interrupt is masked\n1 : UNMASKED = SCL_STUCK_AT_LOW interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.14..14> SCLSTUCKLOWMSK
//        <0=> 0: MASKED = SCL_STUCK_AT_LOW interrupt is masked
//        <1=> 1: UNMASKED = SCL_STUCK_AT_LOW interrupt is unmasked
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_INTMASK_WRREQMSK  -------------------------------
// SVD Line: 19197

//  <item> SFDITEM_FIELD__I2C2_INTMASK_WRREQMSK
//    <name> WRREQMSK </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40101430) \nWR_REQ Interrupt Mask\n0 : MASKED = WR_REQ interrupt is masked\n1 : UNMASKED = WR_REQ interrupt is unmasked </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_INTMASK ) </loc>
//      <o.15..15> WRREQMSK
//        <0=> 0: MASKED = WR_REQ interrupt is masked
//        <1=> 1: UNMASKED = WR_REQ interrupt is unmasked
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: I2C2_INTMASK  ----------------------------------
// SVD Line: 18902

//  <rtree> SFDITEM_REG__I2C2_INTMASK
//    <name> INTMASK </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101430) INTERRUPT MASK REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_INTMASK >> 0) & 0xFFFFFFFF), ((I2C2_INTMASK = (I2C2_INTMASK & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_RXUNDERMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_RXOVERMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_RXFULLMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_TXOVERMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_TXEMPTYMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_RDREQMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_TXABRTMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_RXDONEMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_ACTIVITYMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_STOPDETMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_STARTDETMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_GENCALLMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_RESTARTDETMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_MSTONHOLDMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_SCLSTUCKLOWMSK </item>
//    <item> SFDITEM_FIELD__I2C2_INTMASK_WRREQMSK </item>
//  </rtree>
//  


// -------------------------  Register Item Address: I2C2_RAWINTSTAT  -----------------------------
// SVD Line: 19218

unsigned int I2C2_RAWINTSTAT __AT (0x40101434);



// -------------------------  Field Item: I2C2_RAWINTSTAT_RXUNDERRAW  -----------------------------
// SVD Line: 19228

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RXUNDERRAW
//    <name> RXUNDERRAW </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101434) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_UNDER interrupt is inactive\n1 : ACTIVE = RX_UNDER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.0..0> RXUNDERRAW
//        <0=> 0: INACTIVE = RX_UNDER interrupt is inactive
//        <1=> 1: ACTIVE = RX_UNDER interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_RAWINTSTAT_RXOVERRAW  -----------------------------
// SVD Line: 19247

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RXOVERRAW
//    <name> RXOVERRAW </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101434) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_OVER interrupt is inactive\n1 : ACTIVE = RX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.1..1> RXOVERRAW
//        <0=> 0: INACTIVE = RX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = RX_OVER interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_RAWINTSTAT_RXFULLRAW  -----------------------------
// SVD Line: 19266

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RXFULLRAW
//    <name> RXFULLRAW </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101434) \nRX_UNDER Interrupt Status\n0 : INACTIVE = RX_FULL interrupt is inactive\n1 : ACTIVE = RX_FULL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.2..2> RXFULLRAW
//        <0=> 0: INACTIVE = RX_FULL interrupt is inactive
//        <1=> 1: ACTIVE = RX_FULL interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_RAWINTSTAT_TXOVERRAW  -----------------------------
// SVD Line: 19285

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_TXOVERRAW
//    <name> TXOVERRAW </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101434) \nTX_OVER Interrupt Status\n0 : INACTIVE = TX_OVER interrupt is inactive\n1 : ACTIVE = TX_OVER interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.3..3> TXOVERRAW
//        <0=> 0: INACTIVE = TX_OVER interrupt is inactive
//        <1=> 1: ACTIVE = TX_OVER interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_RAWINTSTAT_TXEMPTYRAW  -----------------------------
// SVD Line: 19304

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_TXEMPTYRAW
//    <name> TXEMPTYRAW </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101434) \nTX_EMPTY Interrupt Status\n0 : INACTIVE = TX_EMPTY interrupt is inactive\n1 : ACTIVE = TX_EMPTY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.4..4> TXEMPTYRAW
//        <0=> 0: INACTIVE = TX_EMPTY interrupt is inactive
//        <1=> 1: ACTIVE = TX_EMPTY interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_RAWINTSTAT_RDREQRAW  ------------------------------
// SVD Line: 19323

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RDREQRAW
//    <name> RDREQRAW </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101434) \nRD_REQ Interrupt Status\n0 : INACTIVE = RD_REQ interrupt is inactive\n1 : ACTIVE = RD_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.5..5> RDREQRAW
//        <0=> 0: INACTIVE = RD_REQ interrupt is inactive
//        <1=> 1: ACTIVE = RD_REQ interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_RAWINTSTAT_TXABRTRAW  -----------------------------
// SVD Line: 19342

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_TXABRTRAW
//    <name> TXABRTRAW </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101434) \nTX_ABRT Interrupt Status\n0 : INACTIVE = TX_ABRT interrupt is inactive\n1 : ACTIVE = TX_ABRT interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.6..6> TXABRTRAW
//        <0=> 0: INACTIVE = TX_ABRT interrupt is inactive
//        <1=> 1: ACTIVE = TX_ABRT interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_RAWINTSTAT_RXDONERAW  -----------------------------
// SVD Line: 19361

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RXDONERAW
//    <name> RXDONERAW </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101434) \nRX_DONE Interrupt Status\n0 : INACTIVE = RX_DONE interrupt is inactive\n1 : ACTIVE = RX_DONE interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.7..7> RXDONERAW
//        <0=> 0: INACTIVE = RX_DONE interrupt is inactive
//        <1=> 1: ACTIVE = RX_DONE interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_RAWINTSTAT_ACTIVITYRAW  ----------------------------
// SVD Line: 19380

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_ACTIVITYRAW
//    <name> ACTIVITYRAW </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101434) \nI2C Controller Activity\n0 : INACTIVE = RAW_INTR_ACTIVITY interrupt is inactive\n1 : ACTIVE = RAW_INTR_ACTIVITY interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.8..8> ACTIVITYRAW
//        <0=> 0: INACTIVE = RAW_INTR_ACTIVITY interrupt is inactive
//        <1=> 1: ACTIVE = RAW_INTR_ACTIVITY interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_RAWINTSTAT_STOPDETRAW  -----------------------------
// SVD Line: 19399

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_STOPDETRAW
//    <name> STOPDETRAW </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101434) \nSTOP_DET Interrupt Status\n0 : INACTIVE = STOP_DET interrupt is inactive\n1 : ACTIVE = STOP_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.9..9> STOPDETRAW
//        <0=> 0: INACTIVE = STOP_DET interrupt is inactive
//        <1=> 1: ACTIVE = STOP_DET interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_RAWINTSTAT_STARTDETRAW  ----------------------------
// SVD Line: 19418

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_STARTDETRAW
//    <name> STARTDETRAW </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101434) \nSTART_DET Interrupt Status\n0 : INACTIVE = START_DET interrupt is inactive\n1 : ACTIVE = START_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.10..10> STARTDETRAW
//        <0=> 0: INACTIVE = START_DET interrupt is inactive
//        <1=> 1: ACTIVE = START_DET interrupt is active
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_RAWINTSTAT_GENCALLRAW  -----------------------------
// SVD Line: 19437

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_GENCALLRAW
//    <name> GENCALLRAW </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101434) \nGEN_CALL Interrupt Status\n0 : INACTIVE = GEN-CALL interrupt is inactive\n1 : ACTIVE = GEN-CALL interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.11..11> GENCALLRAW
//        <0=> 0: INACTIVE = GEN-CALL interrupt is inactive
//        <1=> 1: ACTIVE = GEN-CALL interrupt is active
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C2_RAWINTSTAT_RESTARTDETRAW  ---------------------------
// SVD Line: 19456

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RESTARTDETRAW
//    <name> RESTARTDETRAW </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x40101434) \nRESTART_DET Interrupt Status\n0 : INACTIVE = RESTART_DET interrupt is inactive\n1 : ACTIVE = RESTART_DET interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.12..12> RESTARTDETRAW
//        <0=> 0: INACTIVE = RESTART_DET interrupt is inactive
//        <1=> 1: ACTIVE = RESTART_DET interrupt is active
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C2_RAWINTSTAT_MSTONHOLDRAW  ----------------------------
// SVD Line: 19475

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_MSTONHOLDRAW
//    <name> MSTONHOLDRAW </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x40101434) \nMASTER_ON_HOLD Interrupt Status\n0 : INACTIVE = MASTER_ON_HOLD interrupt is inactive\n1 : ACTIVE = MASTER_ON_HOLD interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.13..13> MSTONHOLDRAW
//        <0=> 0: INACTIVE = MASTER_ON_HOLD interrupt is inactive
//        <1=> 1: ACTIVE = MASTER_ON_HOLD interrupt is active
//    </combo>
//  </item>
//  


// -----------------------  Field Item: I2C2_RAWINTSTAT_SCLSTUCKLOWRAW  ---------------------------
// SVD Line: 19494

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_SCLSTUCKLOWRAW
//    <name> SCLSTUCKLOWRAW </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x40101434) \nSCL_STUCK_AT_LOW Interrupt Status\n0 : INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive\n1 : ACTIVE = SCL_STUCK_AT_LOW interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.14..14> SCLSTUCKLOWRAW
//        <0=> 0: INACTIVE = SCL_STUCK_AT_LOW interrupt is inactive
//        <1=> 1: ACTIVE = SCL_STUCK_AT_LOW interrupt is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_RAWINTSTAT_WRREQRAW  ------------------------------
// SVD Line: 19513

//  <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_WRREQRAW
//    <name> WRREQRAW </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x40101434) \nWR_REQ Interrupt Status\n0 : INACTIVE = WR_REQ interrupt is inactive\n1 : ACTIVE = WR_REQ interrupt is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_RAWINTSTAT ) </loc>
//      <o.15..15> WRREQRAW
//        <0=> 0: INACTIVE = WR_REQ interrupt is inactive
//        <1=> 1: ACTIVE = WR_REQ interrupt is active
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: I2C2_RAWINTSTAT  --------------------------------
// SVD Line: 19218

//  <rtree> SFDITEM_REG__I2C2_RAWINTSTAT
//    <name> RAWINTSTAT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101434) INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_RAWINTSTAT >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RXUNDERRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RXOVERRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RXFULLRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_TXOVERRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_TXEMPTYRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RDREQRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_TXABRTRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RXDONERAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_ACTIVITYRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_STOPDETRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_STARTDETRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_GENCALLRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_RESTARTDETRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_MSTONHOLDRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_SCLSTUCKLOWRAW </item>
//    <item> SFDITEM_FIELD__I2C2_RAWINTSTAT_WRREQRAW </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C2_RXTL  --------------------------------
// SVD Line: 19534

unsigned int I2C2_RXTL __AT (0x40101438);



// -------------------------------  Field Item: I2C2_RXTL_THRES  ----------------------------------
// SVD Line: 19544

//  <item> SFDITEM_FIELD__I2C2_RXTL_THRES
//    <name> THRES </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101438) Receive FIFO Threshold Level </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C2_RXTL >> 0) & 0xFF), ((I2C2_RXTL = (I2C2_RXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C2_RXTL  -----------------------------------
// SVD Line: 19534

//  <rtree> SFDITEM_REG__I2C2_RXTL
//    <name> RXTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101438) I2C RECEIVE FIFO THRESHOLD REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_RXTL >> 0) & 0xFFFFFFFF), ((I2C2_RXTL = (I2C2_RXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_RXTL_THRES </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C2_TXTL  --------------------------------
// SVD Line: 19553

unsigned int I2C2_TXTL __AT (0x4010143C);



// -------------------------------  Field Item: I2C2_TXTL_THRES  ----------------------------------
// SVD Line: 19563

//  <item> SFDITEM_FIELD__I2C2_TXTL_THRES
//    <name> THRES </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x4010143C) Transmit FIFO Threshold Level </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C2_TXTL >> 0) & 0xFF), ((I2C2_TXTL = (I2C2_TXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------------  Register RTree: I2C2_TXTL  -----------------------------------
// SVD Line: 19553

//  <rtree> SFDITEM_REG__I2C2_TXTL
//    <name> TXTL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010143C) I2C TRANSMIT FIFO THRESHOLD REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_TXTL >> 0) & 0xFFFFFFFF), ((I2C2_TXTL = (I2C2_TXTL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_TXTL_THRES </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C2_CLRINT  -------------------------------
// SVD Line: 19572

unsigned int I2C2_CLRINT __AT (0x40101440);



// -------------------------------  Register Item: I2C2_CLRINT  -----------------------------------
// SVD Line: 19572

//  <item> SFDITEM_REG__I2C2_CLRINT
//    <name> CLRINT </name>
//    <i> [Bits 31..0] RO (@ 0x40101440) CLEAR COMBINED AND INDIVIDUAL INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRINT >> 0) & 0xFFFFFFFF), ((I2C2_CLRINT = (I2C2_CLRINT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C2_CLRRXUNDER  -----------------------------
// SVD Line: 19582

unsigned int I2C2_CLRRXUNDER __AT (0x40101444);



// -----------------------------  Register Item: I2C2_CLRRXUNDER  ---------------------------------
// SVD Line: 19582

//  <item> SFDITEM_REG__I2C2_CLRRXUNDER
//    <name> CLRRXUNDER </name>
//    <i> [Bits 31..0] RO (@ 0x40101444) Clear RX_UNDER Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRRXUNDER >> 0) & 0xFFFFFFFF), ((I2C2_CLRRXUNDER = (I2C2_CLRRXUNDER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C2_CLRRXOVER  -----------------------------
// SVD Line: 19592

unsigned int I2C2_CLRRXOVER __AT (0x40101448);



// ------------------------------  Register Item: I2C2_CLRRXOVER  ---------------------------------
// SVD Line: 19592

//  <item> SFDITEM_REG__I2C2_CLRRXOVER
//    <name> CLRRXOVER </name>
//    <i> [Bits 31..0] RO (@ 0x40101448) Clear RX_OVER Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRRXOVER >> 0) & 0xFFFFFFFF), ((I2C2_CLRRXOVER = (I2C2_CLRRXOVER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C2_CLRTXOVER  -----------------------------
// SVD Line: 19602

unsigned int I2C2_CLRTXOVER __AT (0x4010144C);



// ------------------------------  Register Item: I2C2_CLRTXOVER  ---------------------------------
// SVD Line: 19602

//  <item> SFDITEM_REG__I2C2_CLRTXOVER
//    <name> CLRTXOVER </name>
//    <i> [Bits 31..0] RO (@ 0x4010144C) Clear TX_OVER Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRTXOVER >> 0) & 0xFFFFFFFF), ((I2C2_CLRTXOVER = (I2C2_CLRTXOVER & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C2_CLRRDREQ  ------------------------------
// SVD Line: 19612

unsigned int I2C2_CLRRDREQ __AT (0x40101450);



// ------------------------------  Register Item: I2C2_CLRRDREQ  ----------------------------------
// SVD Line: 19612

//  <item> SFDITEM_REG__I2C2_CLRRDREQ
//    <name> CLRRDREQ </name>
//    <i> [Bits 31..0] RO (@ 0x40101450) Clear RD_REQ Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRRDREQ >> 0) & 0xFFFFFFFF), ((I2C2_CLRRDREQ = (I2C2_CLRRDREQ & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C2_CLRTXABRT  -----------------------------
// SVD Line: 19622

unsigned int I2C2_CLRTXABRT __AT (0x40101454);



// ------------------------------  Register Item: I2C2_CLRTXABRT  ---------------------------------
// SVD Line: 19622

//  <item> SFDITEM_REG__I2C2_CLRTXABRT
//    <name> CLRTXABRT </name>
//    <i> [Bits 31..0] RO (@ 0x40101454) Clear TX_ABRT Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRTXABRT >> 0) & 0xFFFFFFFF), ((I2C2_CLRTXABRT = (I2C2_CLRTXABRT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C2_CLRRXDONE  -----------------------------
// SVD Line: 19632

unsigned int I2C2_CLRRXDONE __AT (0x40101458);



// ------------------------------  Register Item: I2C2_CLRRXDONE  ---------------------------------
// SVD Line: 19632

//  <item> SFDITEM_REG__I2C2_CLRRXDONE
//    <name> CLRRXDONE </name>
//    <i> [Bits 31..0] RO (@ 0x40101458) Clear RX_DONE Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRRXDONE >> 0) & 0xFFFFFFFF), ((I2C2_CLRRXDONE = (I2C2_CLRRXDONE & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C2_CLRACTIVITY  ----------------------------
// SVD Line: 19642

unsigned int I2C2_CLRACTIVITY __AT (0x4010145C);



// -----------------------------  Register Item: I2C2_CLRACTIVITY  --------------------------------
// SVD Line: 19642

//  <item> SFDITEM_REG__I2C2_CLRACTIVITY
//    <name> CLRACTIVITY </name>
//    <i> [Bits 31..0] RO (@ 0x4010145C) Clear ACTIVITY Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRACTIVITY >> 0) & 0xFFFFFFFF), ((I2C2_CLRACTIVITY = (I2C2_CLRACTIVITY & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C2_CLRSTOPDET  -----------------------------
// SVD Line: 19652

unsigned int I2C2_CLRSTOPDET __AT (0x40101460);



// -----------------------------  Register Item: I2C2_CLRSTOPDET  ---------------------------------
// SVD Line: 19652

//  <item> SFDITEM_REG__I2C2_CLRSTOPDET
//    <name> CLRSTOPDET </name>
//    <i> [Bits 31..0] RO (@ 0x40101460) Clear STOP_DET Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRSTOPDET >> 0) & 0xFFFFFFFF), ((I2C2_CLRSTOPDET = (I2C2_CLRSTOPDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C2_CLRSTARTDET  ----------------------------
// SVD Line: 19662

unsigned int I2C2_CLRSTARTDET __AT (0x40101464);



// -----------------------------  Register Item: I2C2_CLRSTARTDET  --------------------------------
// SVD Line: 19662

//  <item> SFDITEM_REG__I2C2_CLRSTARTDET
//    <name> CLRSTARTDET </name>
//    <i> [Bits 31..0] RO (@ 0x40101464) Clear START_DET Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRSTARTDET >> 0) & 0xFFFFFFFF), ((I2C2_CLRSTARTDET = (I2C2_CLRSTARTDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Register Item Address: I2C2_CLRGENCALL  -----------------------------
// SVD Line: 19672

unsigned int I2C2_CLRGENCALL __AT (0x40101468);



// -----------------------------  Register Item: I2C2_CLRGENCALL  ---------------------------------
// SVD Line: 19672

//  <item> SFDITEM_REG__I2C2_CLRGENCALL
//    <name> CLRGENCALL </name>
//    <i> [Bits 31..0] RO (@ 0x40101468) Clear GEN_CALL Interrupt Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRGENCALL >> 0) & 0xFFFFFFFF), ((I2C2_CLRGENCALL = (I2C2_CLRGENCALL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: I2C2_ENABLE  -------------------------------
// SVD Line: 19682

unsigned int I2C2_ENABLE __AT (0x4010146C);



// -------------------------------  Field Item: I2C2_ENABLE_EN  -----------------------------------
// SVD Line: 19692

//  <item> SFDITEM_FIELD__I2C2_ENABLE_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010146C) \nControls Whether The I2C Controller Is Enabled\n0 : DISABLE = Disables I2C controller\n1 : ENABLE = Enable I2C controller </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_ENABLE ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disables I2C controller
//        <1=> 1: ENABLE = Enable I2C controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_ENABLE_ABORT  ---------------------------------
// SVD Line: 19711

//  <item> SFDITEM_FIELD__I2C2_ENABLE_ABORT
//    <name> ABORT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4010146C) \nInitiates The Transfer Abort\n0 : DISABLE = ABORT operation not in progress\n1 : ENABLE = ABORT operation in progress </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_ENABLE ) </loc>
//      <o.1..1> ABORT
//        <0=> 0: DISABLE = ABORT operation not in progress
//        <1=> 1: ENABLE = ABORT operation in progress
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_ENABLE_TXCMDBLOCK  -------------------------------
// SVD Line: 19730

//  <item> SFDITEM_FIELD__I2C2_ENABLE_TXCMDBLOCK
//    <name> TXCMDBLOCK </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4010146C) \nBlocks The Transmission Of Data On I2c Bus Or Not\n0 : DISABLE = The transmission of data starts on I2C bus automatically\n1 : ENABLE = Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_ENABLE ) </loc>
//      <o.2..2> TXCMDBLOCK
//        <0=> 0: DISABLE = The transmission of data starts on I2C bus automatically
//        <1=> 1: ENABLE = Blocks the transmission of data on I2C bus even if Tx FIFO has data to transmit
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_ENABLE_SDARECOVEN  -------------------------------
// SVD Line: 19749

//  <item> SFDITEM_FIELD__I2C2_ENABLE_SDARECOVEN
//    <name> SDARECOVEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x4010146C) \nControl Knob To Initiate The SDA Recovery Mechanism\n0 : DISABLE = Master disabled the SDA stuck at low recovery mechanism\n1 : ENABLE = Master initiates the SDA stuck at low recovery mechanism </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_ENABLE ) </loc>
//      <o.3..3> SDARECOVEN
//        <0=> 0: DISABLE = Master disabled the SDA stuck at low recovery mechanism
//        <1=> 1: ENABLE = Master initiates the SDA stuck at low recovery mechanism
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C2_ENABLE  ----------------------------------
// SVD Line: 19682

//  <rtree> SFDITEM_REG__I2C2_ENABLE
//    <name> ENABLE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010146C) ENABLE REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_ENABLE >> 0) & 0xFFFFFFFF), ((I2C2_ENABLE = (I2C2_ENABLE & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_ENABLE_EN </item>
//    <item> SFDITEM_FIELD__I2C2_ENABLE_ABORT </item>
//    <item> SFDITEM_FIELD__I2C2_ENABLE_TXCMDBLOCK </item>
//    <item> SFDITEM_FIELD__I2C2_ENABLE_SDARECOVEN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C2_STATUS  -------------------------------
// SVD Line: 19770

unsigned int I2C2_STATUS __AT (0x40101470);



// ----------------------------  Field Item: I2C2_STATUS_ACTIVITY  --------------------------------
// SVD Line: 19780

//  <item> SFDITEM_FIELD__I2C2_STATUS_ACTIVITY
//    <name> ACTIVITY </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101470) \nI2C Activity Status\n0 : INACTIVE = I2C is idle\n1 : ACTIVE = I2C is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.0..0> ACTIVITY
//        <0=> 0: INACTIVE = I2C is idle
//        <1=> 1: ACTIVE = I2C is active
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_STATUS_TFNF  ----------------------------------
// SVD Line: 19799

//  <item> SFDITEM_FIELD__I2C2_STATUS_TFNF
//    <name> TFNF </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101470) \nTransmit FIFO Not Full\n0 : FULL = Tx FIFO is full\n1 : NOTFULL = Tx FIFO not full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.1..1> TFNF
//        <0=> 0: FULL = Tx FIFO is full
//        <1=> 1: NOTFULL = Tx FIFO not full
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C2_STATUS_TFE  ----------------------------------
// SVD Line: 19818

//  <item> SFDITEM_FIELD__I2C2_STATUS_TFE
//    <name> TFE </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101470) \nTransmit FIFO Completely Empty\n0 : NOTEMPTY = Tx FIFO not empty\n1 : EMPTY = Tx FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.2..2> TFE
//        <0=> 0: NOTEMPTY = Tx FIFO not empty
//        <1=> 1: EMPTY = Tx FIFO is empty
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: I2C2_STATUS_RFNE  ----------------------------------
// SVD Line: 19837

//  <item> SFDITEM_FIELD__I2C2_STATUS_RFNE
//    <name> RFNE </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101470) \nReceive FIFO Not Empty\n0 : EMPTY = Rx FIFO is empty\n1 : NOTEMPTY = Rx FIFO not empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.3..3> RFNE
//        <0=> 0: EMPTY = Rx FIFO is empty
//        <1=> 1: NOTEMPTY = Rx FIFO not empty
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: I2C2_STATUS_RFF  ----------------------------------
// SVD Line: 19856

//  <item> SFDITEM_FIELD__I2C2_STATUS_RFF
//    <name> RFF </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101470) \nReceive FIFO Completely Full\n0 : NOTFULL = Rx FIFO not full\n1 : FULL = Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.4..4> RFF
//        <0=> 0: NOTFULL = Rx FIFO not full
//        <1=> 1: FULL = Rx FIFO is full
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_STATUS_MSTACTIVITY  ------------------------------
// SVD Line: 19875

//  <item> SFDITEM_FIELD__I2C2_STATUS_MSTACTIVITY
//    <name> MSTACTIVITY </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101470) \nMaster FSM Activity Status\n0 : IDLE = Master is idle\n1 : ACTIVE = Master not idle </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.5..5> MSTACTIVITY
//        <0=> 0: IDLE = Master is idle
//        <1=> 1: ACTIVE = Master not idle
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_STATUS_SLVACTIVITY  ------------------------------
// SVD Line: 19894

//  <item> SFDITEM_FIELD__I2C2_STATUS_SLVACTIVITY
//    <name> SLVACTIVITY </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101470) \nSlave FSM Activity Status\n0 : IDLE = Slave is idle\n1 : ACTIVE = Slave not idle </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.6..6> SLVACTIVITY
//        <0=> 0: IDLE = Slave is idle
//        <1=> 1: ACTIVE = Slave not idle
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_STATUS_MSTHOLDTXEMPTY  -----------------------------
// SVD Line: 19913

//  <item> SFDITEM_FIELD__I2C2_STATUS_MSTHOLDTXEMPTY
//    <name> MSTHOLDTXEMPTY </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101470) \nIndicates The Bus Hold When The Master Holds The Bus Because Of The Tx FIFO Being Empty\n0 : INACTIVE = Master holds the bus due to Tx FIFO is empty\n1 : ACTIVE = Master is not holding the bus or Bus hold is not due to Tx FIFO is empty </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.7..7> MSTHOLDTXEMPTY
//        <0=> 0: INACTIVE = Master holds the bus due to Tx FIFO is empty
//        <1=> 1: ACTIVE = Master is not holding the bus or Bus hold is not due to Tx FIFO is empty
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_STATUS_MSTHOLDRXFULL  -----------------------------
// SVD Line: 19932

//  <item> SFDITEM_FIELD__I2C2_STATUS_MSTHOLDRXFULL
//    <name> MSTHOLDRXFULL </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101470) \nINdicates The Bus Hold In Master Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : INACTIVE = Master is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : ACTIVE = Master holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.8..8> MSTHOLDRXFULL
//        <0=> 0: INACTIVE = Master is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: ACTIVE = Master holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_STATUS_SLVHOLDTXEMPTY  -----------------------------
// SVD Line: 19951

//  <item> SFDITEM_FIELD__I2C2_STATUS_SLVHOLDTXEMPTY
//    <name> SLVHOLDTXEMPTY </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101470) \nIndicates The Bus Hold In Slave Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : INACTIVE = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : ACTIVE = Slave holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.9..9> SLVHOLDTXEMPTY
//        <0=> 0: INACTIVE = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: ACTIVE = Slave holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_STATUS_SLVHOLDRXFULL  -----------------------------
// SVD Line: 19970

//  <item> SFDITEM_FIELD__I2C2_STATUS_SLVHOLDRXFULL
//    <name> SLVHOLDRXFULL </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101470) \nIndicates The Bus Hold In Slave Mode Due To Rx FIFO Is Full And Additional Byte Has Been Received\n0 : Inactive = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full\n1 : Active = Slave holds the bus due to Rx FIFO is full </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.10..10> SLVHOLDRXFULL
//        <0=> 0: Inactive = Slave is not holding the bus or Bus hold is not due to Rx FIFO is full
//        <1=> 1: Active = Slave holds the bus due to Rx FIFO is full
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_STATUS_SDANOTRECOV  ------------------------------
// SVD Line: 19989

//  <item> SFDITEM_FIELD__I2C2_STATUS_SDANOTRECOV
//    <name> SDANOTRECOV </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101470) \nIndicates That SDA Stuck At Low Is Not Recovered After The Recovery Mechanism\n0 : Inactive = SDA Stuck at low is recovered after recovery mechanism\n1 : Active = SDA Stuck at low is not recovered after recovery mechanism </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_STATUS ) </loc>
//      <o.11..11> SDANOTRECOV
//        <0=> 0: Inactive = SDA Stuck at low is recovered after recovery mechanism
//        <1=> 1: Active = SDA Stuck at low is not recovered after recovery mechanism
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C2_STATUS  ----------------------------------
// SVD Line: 19770

//  <rtree> SFDITEM_REG__I2C2_STATUS
//    <name> STATUS </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x40101470) I2C STATUS Register </i>
//    <loc> ( (unsigned int)((I2C2_STATUS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C2_STATUS_ACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_TFNF </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_TFE </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_RFNE </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_RFF </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_MSTACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_SLVACTIVITY </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_MSTHOLDTXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_MSTHOLDRXFULL </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_SLVHOLDTXEMPTY </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_SLVHOLDRXFULL </item>
//    <item> SFDITEM_FIELD__I2C2_STATUS_SDANOTRECOV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C2_TXFLR  -------------------------------
// SVD Line: 20010

unsigned int I2C2_TXFLR __AT (0x40101474);



// --------------------------------  Register Item: I2C2_TXFLR  -----------------------------------
// SVD Line: 20010

//  <item> SFDITEM_REG__I2C2_TXFLR
//    <name> TXFLR </name>
//    <i> [Bits 31..0] RW (@ 0x40101474) I2C TRANSMIT FIFO LEVEL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_TXFLR >> 0) & 0xFFFFFFFF), ((I2C2_TXFLR = (I2C2_TXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: I2C2_RXFLR  -------------------------------
// SVD Line: 20020

unsigned int I2C2_RXFLR __AT (0x40101478);



// --------------------------------  Register Item: I2C2_RXFLR  -----------------------------------
// SVD Line: 20020

//  <item> SFDITEM_REG__I2C2_RXFLR
//    <name> RXFLR </name>
//    <i> [Bits 31..0] RW (@ 0x40101478) I2C RECEIVE FIFO LEVEL REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_RXFLR >> 0) & 0xFFFFFFFF), ((I2C2_RXFLR = (I2C2_RXFLR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: I2C2_SDAHOLD  ------------------------------
// SVD Line: 20030

unsigned int I2C2_SDAHOLD __AT (0x4010147C);



// ---------------------------  Field Item: I2C2_SDAHOLD_SDATXHOLD  -------------------------------
// SVD Line: 20040

//  <item> SFDITEM_FIELD__I2C2_SDAHOLD_SDATXHOLD
//    <name> SDATXHOLD </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x4010147C) Sets The Required SDA Hold Time In Units Of clk Period </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C2_SDAHOLD >> 0) & 0xFFFF), ((I2C2_SDAHOLD = (I2C2_SDAHOLD & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: I2C2_SDAHOLD_SDARXHOLD  -------------------------------
// SVD Line: 20047

//  <item> SFDITEM_FIELD__I2C2_SDAHOLD_SDARXHOLD
//    <name> SDARXHOLD </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x4010147C) Sets the required SDA hold time in units of I2C clk period </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C2_SDAHOLD >> 16) & 0xFF), ((I2C2_SDAHOLD = (I2C2_SDAHOLD & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C2_SDAHOLD  ----------------------------------
// SVD Line: 20030

//  <rtree> SFDITEM_REG__I2C2_SDAHOLD
//    <name> SDAHOLD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010147C) I2C SDA HOLD TIME LENGTH REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_SDAHOLD >> 0) & 0xFFFFFFFF), ((I2C2_SDAHOLD = (I2C2_SDAHOLD & ~(0xFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_SDAHOLD_SDATXHOLD </item>
//    <item> SFDITEM_FIELD__I2C2_SDAHOLD_SDARXHOLD </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C2_TXABRTSRC  -----------------------------
// SVD Line: 20056

unsigned int I2C2_TXABRTSRC __AT (0x40101480);



// --------------------------  Field Item: I2C2_TXABRTSRC_ADDR7BNAK  ------------------------------
// SVD Line: 20066

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ADDR7BNAK
//    <name> ADDR7BNAK </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x40101480) \nIndicates That The Master Is In 7-bit Addressing Mode And The Address Sent Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = This abort is generated because of NOACK for 7-bit address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.0..0> ADDR7BNAK
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = This abort is generated because of NOACK for 7-bit address
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_TXABRTSRC_ADDR10BNAK1  -----------------------------
// SVD Line: 20085

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ADDR10BNAK1
//    <name> ADDR10BNAK1 </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x40101480) \nIndicates That The Master Is In 10-bit Address Mode And The First 10-bit Address Byte Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = Byte 1 of 10Bit Address not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.1..1> ADDR10BNAK1
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = Byte 1 of 10Bit Address not ACKed by any slave
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_TXABRTSRC_ADDR10BNACK2  ----------------------------
// SVD Line: 20104

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ADDR10BNACK2
//    <name> ADDR10BNACK2 </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x40101480) \nIndicates That The Master Is In 10-bit Address Mode And The Second 10-bit Address Byte Was Not Acknowledged By Any Slave\n0 : INACTIVE = This abort is not generated\n1 : ACTIVE = Byte 2 of 10Bit Address not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.2..2> ADDR10BNACK2
//        <0=> 0: INACTIVE = This abort is not generated
//        <1=> 1: ACTIVE = Byte 2 of 10Bit Address not ACKed by any slave
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_TXABRTSRC_TXDATANAK  ------------------------------
// SVD Line: 20123

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_TXDATANAK
//    <name> TXDATANAK </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40101480) \nIndicates The Master-mode Only Bit. When Themaster Receives An Acknowledgement For The Address\n0 : NACK = Transmitted data non-ACKed by addressed slave-scenario not present\n1 : ACK = Transmitted data not ACKed by addressed slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.3..3> TXDATANAK
//        <0=> 0: NACK = Transmitted data non-ACKed by addressed slave-scenario not present
//        <1=> 1: ACK = Transmitted data not ACKed by addressed slave
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_TXABRTSRC_GCALLNAK  ------------------------------
// SVD Line: 20142

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_GCALLNAK
//    <name> GCALLNAK </name>
//    <r> 
//    <i> [Bit 4] RO (@ 0x40101480) \nIndicates That I2C Controller In Master Mode Has Sent A General Call And No Slave On The Bus Acknowledged The General Call\n0 : NACK = GCALL not ACKed by any slave-scenario not present\n1 : ACK = GCALL not ACKed by any slave </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.4..4> GCALLNAK
//        <0=> 0: NACK = GCALL not ACKed by any slave-scenario not present
//        <1=> 1: ACK = GCALL not ACKed by any slave
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_TXABRTSRC_GCALLREAD  ------------------------------
// SVD Line: 20161

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_GCALLREAD
//    <name> GCALLREAD </name>
//    <r> 
//    <i> [Bit 5] RO (@ 0x40101480) \nIndicates That Dw_apb_i2c In The Master Mode Has Sent A General Call But The User Programmed The Byte Following The General Call To Be A Read From The Bus\n0 : NONABORT = GCALL is followed by read from bus-scenario not present\n1 : ABORT = GCALL is followed by read from bus </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.5..5> GCALLREAD
//        <0=> 0: NONABORT = GCALL is followed by read from bus-scenario not present
//        <1=> 1: ABORT = GCALL is followed by read from bus
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_TXABRTSRC_HSACKDET  ------------------------------
// SVD Line: 20180

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_HSACKDET
//    <name> HSACKDET </name>
//    <r> 
//    <i> [Bit 6] RO (@ 0x40101480) \nIndicates That The Master Is In High Speed Mode And The High Speed Master Code Was Acknowledged\n0 : NACK = HS Master code ACKed in HS Mode- scenario not present\n1 : ACK = HS Master code ACKed in HS Mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.6..6> HSACKDET
//        <0=> 0: NACK = HS Master code ACKed in HS Mode- scenario not present
//        <1=> 1: ACK = HS Master code ACKed in HS Mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_TXABRTSRC_SBYTEACKET  -----------------------------
// SVD Line: 20199

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SBYTEACKET
//    <name> SBYTEACKET </name>
//    <r> 
//    <i> [Bit 7] RO (@ 0x40101480) \nIndicates That The Master Has Sent A START Byte And The START Byte Was Acknowledged\n0 : NACK = ACK detected for START byte- scenario not present\n1 : ACK = ACK detected for START byte </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.7..7> SBYTEACKET
//        <0=> 0: NACK = ACK detected for START byte- scenario not present
//        <1=> 1: ACK = ACK detected for START byte
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_TXABRTSRC_HSNORSTRT  ------------------------------
// SVD Line: 20218

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_HSNORSTRT
//    <name> HSNORSTRT </name>
//    <r> 
//    <i> [Bit 8] RO (@ 0x40101480) \nIndicates That The Restart Is Disabled\n0 : NONABORT = User trying to switch Master to HS mode when RESTART disabled- scenario not present\n1 : ABORT = User trying to switch Master to HS mode when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.8..8> HSNORSTRT
//        <0=> 0: NONABORT = User trying to switch Master to HS mode when RESTART disabled- scenario not present
//        <1=> 1: ABORT = User trying to switch Master to HS mode when RESTART disabled
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_TXABRTSRC_SBYTENORSTRT  ----------------------------
// SVD Line: 20237

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SBYTENORSTRT
//    <name> SBYTENORSTRT </name>
//    <r> 
//    <i> [Bit 9] RO (@ 0x40101480) \nIndicates That The Restart Is Disabled\n0 : NONABORT = User trying to send START byte when RESTART disabled- scenario not present\n1 : ABORT = User trying to send START byte when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.9..9> SBYTENORSTRT
//        <0=> 0: NONABORT = User trying to send START byte when RESTART disabled- scenario not present
//        <1=> 1: ABORT = User trying to send START byte when RESTART disabled
//    </combo>
//  </item>
//  


// -----------------------  Field Item: I2C2_TXABRTSRC_ADDR10BRDNORSTRT  --------------------------
// SVD Line: 20256

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ADDR10BRDNORSTRT
//    <name> ADDR10BRDNORSTRT </name>
//    <r> 
//    <i> [Bit 10] RO (@ 0x40101480) \nIndicates That The Restart Is Disabled\n0 : NONABORT = Master not trying to read in 10Bit addressing mode when RESTART disabled\n1 : ABORT = Master trying to read in 10Bit addressing mode when RESTART disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.10..10> ADDR10BRDNORSTRT
//        <0=> 0: NONABORT = Master not trying to read in 10Bit addressing mode when RESTART disabled
//        <1=> 1: ABORT = Master trying to read in 10Bit addressing mode when RESTART disabled
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_TXABRTSRC_MASTERIDS  ------------------------------
// SVD Line: 20275

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_MASTERIDS
//    <name> MASTERIDS </name>
//    <r> 
//    <i> [Bit 11] RO (@ 0x40101480) \nIndicates That The User Tries To Initiate A Master Operation With The Master Mode Disabled\n0 : NONABORT = User initiating master operation when MASTER disabled- scenario not present\n1 : ABORT = User initiating master operation when MASTER disabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.11..11> MASTERIDS
//        <0=> 0: NONABORT = User initiating master operation when MASTER disabled- scenario not present
//        <1=> 1: ABORT = User initiating master operation when MASTER disabled
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_TXABRTSRC_ARBLOST  -------------------------------
// SVD Line: 20294

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ARBLOST
//    <name> ARBLOST </name>
//    <r> 
//    <i> [Bit 12] RO (@ 0x40101480) \nThis Field Specifies That The Master Has Lost Arbitration\n0 : NOTLOST = Master or Slave-Transmitter lost arbitration- scenario not present\n1 : LOST = Master or Slave-Transmitter lost arbitration </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.12..12> ARBLOST
//        <0=> 0: NOTLOST = Master or Slave-Transmitter lost arbitration- scenario not present
//        <1=> 1: LOST = Master or Slave-Transmitter lost arbitration
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C2_TXABRTSRC_SLVFLUSHTXFIFO  ---------------------------
// SVD Line: 20313

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SLVFLUSHTXFIFO
//    <name> SLVFLUSHTXFIFO </name>
//    <r> 
//    <i> [Bit 13] RO (@ 0x40101480) \nThis Field Specifies That The Slave Has Received A Read Command And Some Data Exists In The TX FIFO\n0 : NONABORT = Slave flushes existing data in TX-FIFO upon getting read commandscenario not present\n1 : ABORT = Slave flushes existing data in TX-FIFO upon getting read command </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.13..13> SLVFLUSHTXFIFO
//        <0=> 0: NONABORT = Slave flushes existing data in TX-FIFO upon getting read commandscenario not present
//        <1=> 1: ABORT = Slave flushes existing data in TX-FIFO upon getting read command
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_TXABRTSRC_SLVARBLOST  -----------------------------
// SVD Line: 20332

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SLVARBLOST
//    <name> SLVARBLOST </name>
//    <r> 
//    <i> [Bit 14] RO (@ 0x40101480) \nThis Field Indicates That A Slave Has Lost The Bus While Transmitting Data To A Remote Master\n0 : NOTLOST = Slave lost arbitration to remote master- scenario not present\n1 : LOST = Slave lost arbitration to remote master </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.14..14> SLVARBLOST
//        <0=> 0: NOTLOST = Slave lost arbitration to remote master- scenario not present
//        <1=> 1: LOST = Slave lost arbitration to remote master
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_TXABRTSRC_SLVRDINTX  ------------------------------
// SVD Line: 20351

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SLVRDINTX
//    <name> SLVRDINTX </name>
//    <r> 
//    <i> [Bit 15] RO (@ 0x40101480) \nWhen The Processor Side Responds To A Slave Mode Request For Data To Be Transmitted To A Remote Master And User Writes A 1 In Cmd (bit 8) Of Ic_data_cmd Register\n0 : NOTABORT = Slave trying to transmit to remote master in read mode- scenario not present\n1 : ABORT = Slave trying to transmit to remote master in read mode </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.15..15> SLVRDINTX
//        <0=> 0: NOTABORT = Slave trying to transmit to remote master in read mode- scenario not present
//        <1=> 1: ABORT = Slave trying to transmit to remote master in read mode
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_TXABRTSRC_USRABRT  -------------------------------
// SVD Line: 20370

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_USRABRT
//    <name> USRABRT </name>
//    <r> 
//    <i> [Bit 16] RO (@ 0x40101480) \nThis Is A Master-mode-only Bit. Master Has Detected The Transfer Abort\n0 : NOTABORT = Transfer abort detected by master- scenario not present\n1 : ABORT = Transfer abort detected by master </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.16..16> USRABRT
//        <0=> 0: NOTABORT = Transfer abort detected by master- scenario not present
//        <1=> 1: ABORT = Transfer abort detected by master
//    </combo>
//  </item>
//  


// -------------------------  Field Item: I2C2_TXABRTSRC_SDASTUCKLOW  -----------------------------
// SVD Line: 20389

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SDASTUCKLOW
//    <name> SDASTUCKLOW </name>
//    <r> 
//    <i> [Bit 17] RO (@ 0x40101480) \nThis Is A Master-mode-only Bit. Master Detects The SDA Stuck At Low\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of SDA stuck at low </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.17..17> SDASTUCKLOW
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of SDA stuck at low
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_TXABRTSRC_DEVNAK  -------------------------------
// SVD Line: 20408

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_DEVNAK
//    <name> DEVNAK </name>
//    <r> 
//    <i> [Bit 18] RO (@ 0x40101480) \nMaster Is Initiating The DEVICE_ID Transfer And The Device Id Sent Was Not Acknowledged By Any Slave\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for DEVICE-ID </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.18..18> DEVNAK
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for DEVICE-ID
//    </combo>
//  </item>
//  


// ------------------------  Field Item: I2C2_TXABRTSRC_DEVSLVADDRNAK  ----------------------------
// SVD Line: 20427

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_DEVSLVADDRNAK
//    <name> DEVSLVADDRNAK </name>
//    <r> 
//    <i> [Bit 19] RO (@ 0x40101480) \nMaster Is Initiating The DEVICE_ID Transfer And The Slave Address Sent Was Not Acknowledged By Any Slave\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for Slave address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.19..19> DEVSLVADDRNAK
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for Slave address
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: I2C2_TXABRTSRC_DEVWRITE  ------------------------------
// SVD Line: 20446

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_DEVWRITE
//    <name> DEVWRITE </name>
//    <r> 
//    <i> [Bit 20] RO (@ 0x40101480) \nMaster Is Initiating The DEVICE_ID Transfer And The Tx-FIFO Consists Of Write Commands\n0 : NOTABORT = This abort is not generated\n1 : ABORT = This abort is generated because of NOACK for Slave address </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_TXABRTSRC ) </loc>
//      <o.20..20> DEVWRITE
//        <0=> 0: NOTABORT = This abort is not generated
//        <1=> 1: ABORT = This abort is generated because of NOACK for Slave address
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_TXABRTSRC_TXFLUSHCNT  -----------------------------
// SVD Line: 20465

//  <item> SFDITEM_FIELD__I2C2_TXABRTSRC_TXFLUSHCNT
//    <name> TXFLUSHCNT </name>
//    <r> 
//    <i> [Bits 31..23] RO (@ 0x40101480) Indicates The Number Of Tx FIFO Data Commands Which Are Flushed Due To TX_ABRT Interrupt </i>
//    <edit> 
//      <loc> ( (unsigned short)((I2C2_TXABRTSRC >> 23) & 0x1FF) ) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: I2C2_TXABRTSRC  ---------------------------------
// SVD Line: 20056

//  <rtree> SFDITEM_REG__I2C2_TXABRTSRC
//    <name> TXABRTSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101480) I2C TRANSMIT ABORT SOURCE REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_TXABRTSRC >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ADDR7BNAK </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ADDR10BNAK1 </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ADDR10BNACK2 </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_TXDATANAK </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_GCALLNAK </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_GCALLREAD </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_HSACKDET </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SBYTEACKET </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_HSNORSTRT </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SBYTENORSTRT </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ADDR10BRDNORSTRT </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_MASTERIDS </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_ARBLOST </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SLVFLUSHTXFIFO </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SLVARBLOST </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SLVRDINTX </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_USRABRT </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_SDASTUCKLOW </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_DEVNAK </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_DEVSLVADDRNAK </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_DEVWRITE </item>
//    <item> SFDITEM_FIELD__I2C2_TXABRTSRC_TXFLUSHCNT </item>
//  </rtree>
//  


// -----------------------  Register Item Address: I2C2_SLVDATANACKONLY  --------------------------
// SVD Line: 20474

unsigned int I2C2_SLVDATANACKONLY __AT (0x40101484);



// --------------------------  Field Item: I2C2_SLVDATANACKONLY_NAK  ------------------------------
// SVD Line: 20484

//  <item> SFDITEM_FIELD__I2C2_SLVDATANACKONLY_NAK
//    <name> NAK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101484) \nGenerate Nack. This Nack Generation Only Occurs When I2C Controller Is A Slave-receiver\n0 : DISABLE = Slave receiver generates NACK normally\n1 : ENABLE = Slave receiver generates NACK upon data reception only </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_SLVDATANACKONLY ) </loc>
//      <o.0..0> NAK
//        <0=> 0: DISABLE = Slave receiver generates NACK normally
//        <1=> 1: ENABLE = Slave receiver generates NACK upon data reception only
//    </combo>
//  </item>
//  


// --------------------------  Register RTree: I2C2_SLVDATANACKONLY  ------------------------------
// SVD Line: 20474

//  <rtree> SFDITEM_REG__I2C2_SLVDATANACKONLY
//    <name> SLVDATANACKONLY </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101484) GENERATE SLAVE DATA NACK REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_SLVDATANACKONLY >> 0) & 0xFFFFFFFF), ((I2C2_SLVDATANACKONLY = (I2C2_SLVDATANACKONLY & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_SLVDATANACKONLY_NAK </item>
//  </rtree>
//  


// --------------------------  Register Item Address: I2C2_SDASETUP  ------------------------------
// SVD Line: 20505

unsigned int I2C2_SDASETUP __AT (0x40101494);



// -----------------------------  Field Item: I2C2_SDASETUP_SETUP  --------------------------------
// SVD Line: 20515

//  <item> SFDITEM_FIELD__I2C2_SDASETUP_SETUP
//    <name> SETUP </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101494) SDA Setup (tSU:DAT) </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C2_SDASETUP >> 0) & 0xFF), ((I2C2_SDASETUP = (I2C2_SDASETUP & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: I2C2_SDASETUP  ---------------------------------
// SVD Line: 20505

//  <rtree> SFDITEM_REG__I2C2_SDASETUP
//    <name> SDASETUP </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101494) I2C SDA SETUP REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_SDASETUP >> 0) & 0xFFFFFFFF), ((I2C2_SDASETUP = (I2C2_SDASETUP & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_SDASETUP_SETUP </item>
//  </rtree>
//  


// -------------------------  Register Item Address: I2C2_ACKGENCALL  -----------------------------
// SVD Line: 20524

unsigned int I2C2_ACKGENCALL __AT (0x40101498);



// -----------------------------  Field Item: I2C2_ACKGENCALL_ACK  --------------------------------
// SVD Line: 20534

//  <item> SFDITEM_FIELD__I2C2_ACKGENCALL_ACK
//    <name> ACK </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101498) \nACK General Call\n0 : NACK = Generate NACK for General Call\n1 : ACK = Generate ACK for a General Call </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_ACKGENCALL ) </loc>
//      <o.0..0> ACK
//        <0=> 0: NACK = Generate NACK for General Call
//        <1=> 1: ACK = Generate ACK for a General Call
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: I2C2_ACKGENCALL  --------------------------------
// SVD Line: 20524

//  <rtree> SFDITEM_REG__I2C2_ACKGENCALL
//    <name> ACKGENCALL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101498) I2C ACK GENERAL CALL REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_ACKGENCALL >> 0) & 0xFFFFFFFF), ((I2C2_ACKGENCALL = (I2C2_ACKGENCALL & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_ACKGENCALL_ACK </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: I2C2_ENSTS  -------------------------------
// SVD Line: 20555

unsigned int I2C2_ENSTS __AT (0x4010149C);



// ------------------------------  Field Item: I2C2_ENSTS_ENABLE  ---------------------------------
// SVD Line: 20565

//  <item> SFDITEM_FIELD__I2C2_ENSTS_ENABLE
//    <name> ENABLE </name>
//    <r> 
//    <i> [Bit 0] RO (@ 0x4010149C) \nIC Enable Status\n0 : DISABLE = I2C disabled\n1 : ENABLE = I2C enabled </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_ENSTS ) </loc>
//      <o.0..0> ENABLE
//        <0=> 0: DISABLE = I2C disabled
//        <1=> 1: ENABLE = I2C enabled
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: I2C2_ENSTS_SLVDISBUSY  -------------------------------
// SVD Line: 20584

//  <item> SFDITEM_FIELD__I2C2_ENSTS_SLVDISBUSY
//    <name> SLVDISBUSY </name>
//    <r> 
//    <i> [Bit 1] RO (@ 0x4010149C) \nSlave Disabled While Busy (Transmit, Receive)\n0 : DISABLE = Slave is disabled when it is idle\n1 : ENABLE = Slave is disabled when it is active </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_ENSTS ) </loc>
//      <o.1..1> SLVDISBUSY
//        <0=> 0: DISABLE = Slave is disabled when it is idle
//        <1=> 1: ENABLE = Slave is disabled when it is active
//    </combo>
//  </item>
//  


// --------------------------  Field Item: I2C2_ENSTS_SLVRXDATALOST  ------------------------------
// SVD Line: 20603

//  <item> SFDITEM_FIELD__I2C2_ENSTS_SLVRXDATALOST
//    <name> SLVRXDATALOST </name>
//    <r> 
//    <i> [Bit 2] RO (@ 0x4010149C) \nSlave Received Data Lost\n0 : DISABLE = Slave RX Data is not lost\n1 : ENABLE = Slave RX Data is lost </i>
//    <combo> 
//      <loc> ( (unsigned int) I2C2_ENSTS ) </loc>
//      <o.2..2> SLVRXDATALOST
//        <0=> 0: DISABLE = Slave RX Data is not lost
//        <1=> 1: ENABLE = Slave RX Data is lost
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: I2C2_ENSTS  -----------------------------------
// SVD Line: 20555

//  <rtree> SFDITEM_REG__I2C2_ENSTS
//    <name> ENSTS </name>
//    <r> 
//    <i> [Bits 31..0] RO (@ 0x4010149C) I2C ENABLE STATUS REGISTER </i>
//    <loc> ( (unsigned int)((I2C2_ENSTS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__I2C2_ENSTS_ENABLE </item>
//    <item> SFDITEM_FIELD__I2C2_ENSTS_SLVDISBUSY </item>
//    <item> SFDITEM_FIELD__I2C2_ENSTS_SLVRXDATALOST </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: I2C2_SPKLEN  -------------------------------
// SVD Line: 20624

unsigned int I2C2_SPKLEN __AT (0x401014A0);



// -------------------------------  Field Item: I2C2_SPKLEN_LEN  ----------------------------------
// SVD Line: 20634

//  <item> SFDITEM_FIELD__I2C2_SPKLEN_LEN
//    <name> LEN </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401014A0) Sets the Duration, Measured In Clk Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((I2C2_SPKLEN >> 0) & 0xFF), ((I2C2_SPKLEN = (I2C2_SPKLEN & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: I2C2_SPKLEN  ----------------------------------
// SVD Line: 20624

//  <rtree> SFDITEM_REG__I2C2_SPKLEN
//    <name> SPKLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401014A0) I2C SS, FS OR FM+ RO UFM SPIKE SUPPRESSION LIMIT </i>
//    <loc> ( (unsigned int)((I2C2_SPKLEN >> 0) & 0xFFFFFFFF), ((I2C2_SPKLEN = (I2C2_SPKLEN & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__I2C2_SPKLEN_LEN </item>
//  </rtree>
//  


// ------------------------  Register Item Address: I2C2_CLRRESTARTDET  ---------------------------
// SVD Line: 20643

unsigned int I2C2_CLRRESTARTDET __AT (0x401014A8);



// ----------------------------  Register Item: I2C2_CLRRESTARTDET  -------------------------------
// SVD Line: 20643

//  <item> SFDITEM_REG__I2C2_CLRRESTARTDET
//    <name> CLRRESTARTDET </name>
//    <i> [Bits 31..0] RW (@ 0x401014A8) CLEAR RESTART_DET INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRRESTARTDET >> 0) & 0xFFFFFFFF), ((I2C2_CLRRESTARTDET = (I2C2_CLRRESTARTDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C2_SCLLOWTO  ------------------------------
// SVD Line: 20653

unsigned int I2C2_SCLLOWTO __AT (0x401014AC);



// ------------------------------  Register Item: I2C2_SCLLOWTO  ----------------------------------
// SVD Line: 20653

//  <item> SFDITEM_REG__I2C2_SCLLOWTO
//    <name> SCLLOWTO </name>
//    <i> [Bits 31..0] RW (@ 0x401014AC) I2C SCL STUCK AT LOW TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_SCLLOWTO >> 0) & 0xFFFFFFFF), ((I2C2_SCLLOWTO = (I2C2_SCLLOWTO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Register Item Address: I2C2_SDALOWTO  ------------------------------
// SVD Line: 20663

unsigned int I2C2_SDALOWTO __AT (0x401014B0);



// ------------------------------  Register Item: I2C2_SDALOWTO  ----------------------------------
// SVD Line: 20663

//  <item> SFDITEM_REG__I2C2_SDALOWTO
//    <name> SDALOWTO </name>
//    <i> [Bits 31..0] RW (@ 0x401014B0) I2C SDA STUCK AT LOW TIMEOUT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_SDALOWTO >> 0) & 0xFFFFFFFF), ((I2C2_SDALOWTO = (I2C2_SDALOWTO & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------  Register Item Address: I2C2_CLRSCLSTUCKDET  ---------------------------
// SVD Line: 20673

unsigned int I2C2_CLRSCLSTUCKDET __AT (0x401014B4);



// ---------------------------  Register Item: I2C2_CLRSCLSTUCKDET  -------------------------------
// SVD Line: 20673

//  <item> SFDITEM_REG__I2C2_CLRSCLSTUCKDET
//    <name> CLRSCLSTUCKDET </name>
//    <i> [Bits 31..0] RW (@ 0x401014B4) CLEAR SCL STUCK AT LOW DETECT INTERRUPT REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((I2C2_CLRSCLSTUCKDET >> 0) & 0xFFFFFFFF), ((I2C2_CLRSCLSTUCKDET = (I2C2_CLRSCLSTUCKDET & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------------  Peripheral View: I2C2  -------------------------------------
// SVD Line: 20698

//  <view> I2C2
//    <name> I2C2 </name>
//    <item> SFDITEM_REG__I2C2_CON </item>
//    <item> SFDITEM_REG__I2C2_TAR </item>
//    <item> SFDITEM_REG__I2C2_SAR </item>
//    <item> SFDITEM_REG__I2C2_DATACMD </item>
//    <item> SFDITEM_REG__I2C2_SCLHCNT </item>
//    <item> SFDITEM_REG__I2C2_SCLLCNT </item>
//    <item> SFDITEM_REG__I2C2_FSSCLHCNT </item>
//    <item> SFDITEM_REG__I2C2_FSSCLLCNT </item>
//    <item> SFDITEM_REG__I2C2_INTSTAT </item>
//    <item> SFDITEM_REG__I2C2_INTMASK </item>
//    <item> SFDITEM_REG__I2C2_RAWINTSTAT </item>
//    <item> SFDITEM_REG__I2C2_RXTL </item>
//    <item> SFDITEM_REG__I2C2_TXTL </item>
//    <item> SFDITEM_REG__I2C2_CLRINT </item>
//    <item> SFDITEM_REG__I2C2_CLRRXUNDER </item>
//    <item> SFDITEM_REG__I2C2_CLRRXOVER </item>
//    <item> SFDITEM_REG__I2C2_CLRTXOVER </item>
//    <item> SFDITEM_REG__I2C2_CLRRDREQ </item>
//    <item> SFDITEM_REG__I2C2_CLRTXABRT </item>
//    <item> SFDITEM_REG__I2C2_CLRRXDONE </item>
//    <item> SFDITEM_REG__I2C2_CLRACTIVITY </item>
//    <item> SFDITEM_REG__I2C2_CLRSTOPDET </item>
//    <item> SFDITEM_REG__I2C2_CLRSTARTDET </item>
//    <item> SFDITEM_REG__I2C2_CLRGENCALL </item>
//    <item> SFDITEM_REG__I2C2_ENABLE </item>
//    <item> SFDITEM_REG__I2C2_STATUS </item>
//    <item> SFDITEM_REG__I2C2_TXFLR </item>
//    <item> SFDITEM_REG__I2C2_RXFLR </item>
//    <item> SFDITEM_REG__I2C2_SDAHOLD </item>
//    <item> SFDITEM_REG__I2C2_TXABRTSRC </item>
//    <item> SFDITEM_REG__I2C2_SLVDATANACKONLY </item>
//    <item> SFDITEM_REG__I2C2_SDASETUP </item>
//    <item> SFDITEM_REG__I2C2_ACKGENCALL </item>
//    <item> SFDITEM_REG__I2C2_ENSTS </item>
//    <item> SFDITEM_REG__I2C2_SPKLEN </item>
//    <item> SFDITEM_REG__I2C2_CLRRESTARTDET </item>
//    <item> SFDITEM_REG__I2C2_SCLLOWTO </item>
//    <item> SFDITEM_REG__I2C2_SDALOWTO </item>
//    <item> SFDITEM_REG__I2C2_CLRSCLSTUCKDET </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP0_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP0_CONTROL __AT (0x40101600);



// ----------------------------  Field Item: STRIP0_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101600) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_CONTROL >> 16) & 0xFF), ((STRIP0_CONTROL = (STRIP0_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP0_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101600) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP0_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101600) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP0_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101600) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP0_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101600) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP0_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101600) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP0_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101600) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP0_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101600) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP0_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP0_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101600) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP0_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP0_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101600) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP0_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP0_CONTROL = (STRIP0_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP0_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP0_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP0_CODE0 __AT (0x40101604);



// ------------------------------  Field Item: STRIP0_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP0_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101604) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_CODE0 >> 8) & 0x3F), ((STRIP0_CODE0 = (STRIP0_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP0_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP0_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101604) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_CODE0 >> 0) & 0x3F), ((STRIP0_CODE0 = (STRIP0_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP0_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP0_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101604) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP0_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP0_CODE0 = (STRIP0_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP0_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP0_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP0_CODE1 __AT (0x40101608);



// ------------------------------  Field Item: STRIP0_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP0_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101608) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_CODE1 >> 8) & 0x3F), ((STRIP0_CODE1 = (STRIP0_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP0_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP0_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101608) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_CODE1 >> 0) & 0x3F), ((STRIP0_CODE1 = (STRIP0_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP0_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP0_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101608) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP0_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP0_CODE1 = (STRIP0_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP0_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP0_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP0_RSTW __AT (0x4010160C);



// ------------------------------  Field Item: STRIP0_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP0_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010160C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP0_RSTW >> 0) & 0xFFFFFFFF), ((STRIP0_RSTW = (STRIP0_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP0_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP0_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010160C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP0_RSTW >> 0) & 0xFFFFFFFF), ((STRIP0_RSTW = (STRIP0_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP0_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP0_PENDW __AT (0x40101610);



// -----------------------------  Field Item: STRIP0_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP0_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101610) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_PENDW >> 0) & 0x3F), ((STRIP0_PENDW = (STRIP0_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP0_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP0_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101610) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP0_PENDW >> 0) & 0xFFFFFFFF), ((STRIP0_PENDW = (STRIP0_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP0_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP0_DSRC __AT (0x40101614);



// ----------------------------  Field Item: STRIP0_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP0_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101614) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP0_DSRC >> 0) & 0xFFFFFFFF), ((STRIP0_DSRC = (STRIP0_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP0_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP0_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101614) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP0_DSRC >> 0) & 0xFFFFFFFF), ((STRIP0_DSRC = (STRIP0_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP0_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP0_TRANSLEN __AT (0x40101618);



// --------------------------  Field Item: STRIP0_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP0_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101618) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_TRANSLEN >> 0) & 0x3FFF), ((STRIP0_TRANSLEN = (STRIP0_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP0_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP0_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101618) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP0_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP0_TRANSLEN = (STRIP0_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP0_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP0_ADVCMD __AT (0x4010161C);



// -----------------------------  Field Item: STRIP0_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP0_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010161C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP0_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP0_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP0_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x4010161C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP0_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP0_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP0_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010161C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP0_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP0_ADVCMD = (STRIP0_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP0_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP0_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP0_TH50CTRL0 __AT (0x40101620);



// --------------------------  Field Item: STRIP0_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP0_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101620) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_TH50CTRL0 >> 16) & 0xFFF), ((STRIP0_TH50CTRL0 = (STRIP0_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP0_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP0_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101620) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_TH50CTRL0 >> 0) & 0xFFF), ((STRIP0_TH50CTRL0 = (STRIP0_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP0_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP0_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101620) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP0_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP0_TH50CTRL0 = (STRIP0_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP0_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP0_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP0_TH50CTRL1 __AT (0x40101624);



// --------------------------  Field Item: STRIP0_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP0_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101624) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_TH50CTRL1 >> 16) & 0xFFF), ((STRIP0_TH50CTRL1 = (STRIP0_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP0_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP0_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101624) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_TH50CTRL1 >> 0) & 0xFFF), ((STRIP0_TH50CTRL1 = (STRIP0_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP0_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP0_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101624) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP0_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP0_TH50CTRL1 = (STRIP0_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP0_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP0_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP0_TH50RX __AT (0x40101628);



// ----------------------------  Field Item: STRIP0_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP0_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101628) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_TH50RX >> 8) & 0xFF), ((STRIP0_TH50RX = (STRIP0_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP0_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP0_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101628) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_TH50RX >> 0) & 0xFF), ((STRIP0_TH50RX = (STRIP0_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP0_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP0_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101628) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP0_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP0_TH50RX = (STRIP0_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP0_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP0_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP0_TH50TO __AT (0x4010162C);



// ----------------------------  Field Item: STRIP0_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP0_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x4010162C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_TH50TO >> 0) & 0xFFF), ((STRIP0_TH50TO = (STRIP0_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP0_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP0_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010162C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP0_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP0_TH50TO = (STRIP0_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP0_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP0_AVDPRLCTRL0 __AT (0x40101630);



// --------------------------  Field Item: STRIP0_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101630) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP0_AVDPRLCTRL0 = (STRIP0_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP0_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101630) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP0_AVDPRLCTRL0 = (STRIP0_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP0_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101630) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP0_AVDPRLCTRL0 = (STRIP0_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP0_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101630) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP0_AVDPRLCTRL0 = (STRIP0_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP0_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP0_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101630) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP0_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP0_AVDPRLCTRL0 = (STRIP0_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP0_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP0_AVDPRLCTRL1 __AT (0x40101634);



// --------------------------  Field Item: STRIP0_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101634) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP0_AVDPRLCTRL1 = (STRIP0_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP0_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101634) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP0_AVDPRLCTRL1 = (STRIP0_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP0_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP0_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101634) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP0_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP0_AVDPRLCTRL1 = (STRIP0_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP0_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP0_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP0_AVDPRLTO __AT (0x40101638);



// ----------------------------  Field Item: STRIP0_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP0_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101638) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP0_AVDPRLTO >> 0) & 0xFFF), ((STRIP0_AVDPRLTO = (STRIP0_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP0_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP0_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101638) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP0_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP0_AVDPRLTO = (STRIP0_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP0_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP0_RECVADDR __AT (0x4010163C);



// --------------------------  Field Item: STRIP0_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP0_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010163C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP0_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP0_RECVADDR = (STRIP0_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP0_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP0_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010163C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP0_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP0_RECVADDR = (STRIP0_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP0_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP0_RECVCNT __AT (0x40101640);



// ---------------------------  Field Item: STRIP0_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP0_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101640) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP0_RECVCNT >> 0) & 0xFF), ((STRIP0_RECVCNT = (STRIP0_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP0_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP0_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101640) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP0_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP0_RECVCNT = (STRIP0_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP0_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP0_ADVSTS __AT (0x40101644);



// ----------------------------  Field Item: STRIP0_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP0_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101644) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP0_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP0_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP0_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101644) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP0_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP0_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP0_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101644) Status Register </i>
//    <loc> ( (unsigned int)((STRIP0_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP0_ADVSTS = (STRIP0_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP0_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP0_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP0_ADVINT __AT (0x40101648);



// --------------------------  Field Item: STRIP0_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP0_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101648) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP0_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP0_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP0_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101648) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP0_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP0_ADVINT = (STRIP0_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP0_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP0  ------------------------------------
// SVD Line: 20709

//  <view> STRIP0
//    <name> STRIP0 </name>
//    <item> SFDITEM_REG__STRIP0_CONTROL </item>
//    <item> SFDITEM_REG__STRIP0_CODE0 </item>
//    <item> SFDITEM_REG__STRIP0_CODE1 </item>
//    <item> SFDITEM_REG__STRIP0_RSTW </item>
//    <item> SFDITEM_REG__STRIP0_PENDW </item>
//    <item> SFDITEM_REG__STRIP0_DSRC </item>
//    <item> SFDITEM_REG__STRIP0_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP0_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP0_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP0_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP0_TH50RX </item>
//    <item> SFDITEM_REG__STRIP0_TH50TO </item>
//    <item> SFDITEM_REG__STRIP0_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP0_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP0_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP0_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP0_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP0_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP0_ADVINT </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP1_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP1_CONTROL __AT (0x40101700);



// ----------------------------  Field Item: STRIP1_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101700) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_CONTROL >> 16) & 0xFF), ((STRIP1_CONTROL = (STRIP1_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP1_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101700) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP1_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101700) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP1_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101700) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP1_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101700) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP1_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101700) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP1_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101700) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP1_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101700) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP1_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP1_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101700) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP1_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP1_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101700) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP1_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP1_CONTROL = (STRIP1_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP1_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP1_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP1_CODE0 __AT (0x40101704);



// ------------------------------  Field Item: STRIP1_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP1_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101704) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_CODE0 >> 8) & 0x3F), ((STRIP1_CODE0 = (STRIP1_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP1_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP1_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101704) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_CODE0 >> 0) & 0x3F), ((STRIP1_CODE0 = (STRIP1_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP1_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP1_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101704) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP1_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP1_CODE0 = (STRIP1_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP1_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP1_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP1_CODE1 __AT (0x40101708);



// ------------------------------  Field Item: STRIP1_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP1_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101708) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_CODE1 >> 8) & 0x3F), ((STRIP1_CODE1 = (STRIP1_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP1_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP1_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101708) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_CODE1 >> 0) & 0x3F), ((STRIP1_CODE1 = (STRIP1_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP1_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP1_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101708) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP1_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP1_CODE1 = (STRIP1_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP1_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP1_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP1_RSTW __AT (0x4010170C);



// ------------------------------  Field Item: STRIP1_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP1_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010170C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP1_RSTW >> 0) & 0xFFFFFFFF), ((STRIP1_RSTW = (STRIP1_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP1_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP1_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010170C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP1_RSTW >> 0) & 0xFFFFFFFF), ((STRIP1_RSTW = (STRIP1_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP1_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP1_PENDW __AT (0x40101710);



// -----------------------------  Field Item: STRIP1_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP1_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101710) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_PENDW >> 0) & 0x3F), ((STRIP1_PENDW = (STRIP1_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP1_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP1_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101710) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP1_PENDW >> 0) & 0xFFFFFFFF), ((STRIP1_PENDW = (STRIP1_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP1_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP1_DSRC __AT (0x40101714);



// ----------------------------  Field Item: STRIP1_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP1_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101714) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP1_DSRC >> 0) & 0xFFFFFFFF), ((STRIP1_DSRC = (STRIP1_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP1_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP1_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101714) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP1_DSRC >> 0) & 0xFFFFFFFF), ((STRIP1_DSRC = (STRIP1_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP1_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP1_TRANSLEN __AT (0x40101718);



// --------------------------  Field Item: STRIP1_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP1_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101718) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_TRANSLEN >> 0) & 0x3FFF), ((STRIP1_TRANSLEN = (STRIP1_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP1_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP1_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101718) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP1_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP1_TRANSLEN = (STRIP1_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP1_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP1_ADVCMD __AT (0x4010171C);



// -----------------------------  Field Item: STRIP1_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP1_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010171C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP1_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP1_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP1_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x4010171C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP1_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP1_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP1_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010171C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP1_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP1_ADVCMD = (STRIP1_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP1_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP1_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP1_TH50CTRL0 __AT (0x40101720);



// --------------------------  Field Item: STRIP1_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP1_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101720) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_TH50CTRL0 >> 16) & 0xFFF), ((STRIP1_TH50CTRL0 = (STRIP1_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP1_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP1_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101720) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_TH50CTRL0 >> 0) & 0xFFF), ((STRIP1_TH50CTRL0 = (STRIP1_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP1_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP1_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101720) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP1_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP1_TH50CTRL0 = (STRIP1_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP1_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP1_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP1_TH50CTRL1 __AT (0x40101724);



// --------------------------  Field Item: STRIP1_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP1_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101724) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_TH50CTRL1 >> 16) & 0xFFF), ((STRIP1_TH50CTRL1 = (STRIP1_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP1_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP1_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101724) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_TH50CTRL1 >> 0) & 0xFFF), ((STRIP1_TH50CTRL1 = (STRIP1_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP1_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP1_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101724) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP1_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP1_TH50CTRL1 = (STRIP1_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP1_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP1_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP1_TH50RX __AT (0x40101728);



// ----------------------------  Field Item: STRIP1_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP1_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101728) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_TH50RX >> 8) & 0xFF), ((STRIP1_TH50RX = (STRIP1_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP1_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP1_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101728) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_TH50RX >> 0) & 0xFF), ((STRIP1_TH50RX = (STRIP1_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP1_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP1_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101728) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP1_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP1_TH50RX = (STRIP1_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP1_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP1_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP1_TH50TO __AT (0x4010172C);



// ----------------------------  Field Item: STRIP1_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP1_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x4010172C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_TH50TO >> 0) & 0xFFF), ((STRIP1_TH50TO = (STRIP1_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP1_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP1_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010172C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP1_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP1_TH50TO = (STRIP1_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP1_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP1_AVDPRLCTRL0 __AT (0x40101730);



// --------------------------  Field Item: STRIP1_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101730) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP1_AVDPRLCTRL0 = (STRIP1_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP1_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101730) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP1_AVDPRLCTRL0 = (STRIP1_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP1_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101730) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP1_AVDPRLCTRL0 = (STRIP1_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP1_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101730) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP1_AVDPRLCTRL0 = (STRIP1_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP1_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP1_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101730) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP1_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP1_AVDPRLCTRL0 = (STRIP1_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP1_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP1_AVDPRLCTRL1 __AT (0x40101734);



// --------------------------  Field Item: STRIP1_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101734) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP1_AVDPRLCTRL1 = (STRIP1_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP1_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101734) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP1_AVDPRLCTRL1 = (STRIP1_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP1_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP1_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101734) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP1_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP1_AVDPRLCTRL1 = (STRIP1_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP1_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP1_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP1_AVDPRLTO __AT (0x40101738);



// ----------------------------  Field Item: STRIP1_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP1_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101738) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP1_AVDPRLTO >> 0) & 0xFFF), ((STRIP1_AVDPRLTO = (STRIP1_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP1_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP1_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101738) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP1_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP1_AVDPRLTO = (STRIP1_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP1_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP1_RECVADDR __AT (0x4010173C);



// --------------------------  Field Item: STRIP1_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP1_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010173C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP1_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP1_RECVADDR = (STRIP1_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP1_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP1_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010173C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP1_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP1_RECVADDR = (STRIP1_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP1_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP1_RECVCNT __AT (0x40101740);



// ---------------------------  Field Item: STRIP1_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP1_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101740) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP1_RECVCNT >> 0) & 0xFF), ((STRIP1_RECVCNT = (STRIP1_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP1_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP1_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101740) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP1_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP1_RECVCNT = (STRIP1_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP1_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP1_ADVSTS __AT (0x40101744);



// ----------------------------  Field Item: STRIP1_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP1_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101744) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP1_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP1_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP1_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101744) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP1_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP1_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP1_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101744) Status Register </i>
//    <loc> ( (unsigned int)((STRIP1_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP1_ADVSTS = (STRIP1_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP1_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP1_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP1_ADVINT __AT (0x40101748);



// --------------------------  Field Item: STRIP1_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP1_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101748) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP1_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP1_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP1_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101748) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP1_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP1_ADVINT = (STRIP1_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP1_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP1  ------------------------------------
// SVD Line: 21260

//  <view> STRIP1
//    <name> STRIP1 </name>
//    <item> SFDITEM_REG__STRIP1_CONTROL </item>
//    <item> SFDITEM_REG__STRIP1_CODE0 </item>
//    <item> SFDITEM_REG__STRIP1_CODE1 </item>
//    <item> SFDITEM_REG__STRIP1_RSTW </item>
//    <item> SFDITEM_REG__STRIP1_PENDW </item>
//    <item> SFDITEM_REG__STRIP1_DSRC </item>
//    <item> SFDITEM_REG__STRIP1_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP1_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP1_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP1_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP1_TH50RX </item>
//    <item> SFDITEM_REG__STRIP1_TH50TO </item>
//    <item> SFDITEM_REG__STRIP1_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP1_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP1_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP1_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP1_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP1_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP1_ADVINT </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP2_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP2_CONTROL __AT (0x40101800);



// ----------------------------  Field Item: STRIP2_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101800) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_CONTROL >> 16) & 0xFF), ((STRIP2_CONTROL = (STRIP2_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP2_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101800) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP2_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101800) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP2_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101800) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP2_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101800) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP2_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101800) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP2_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101800) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP2_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101800) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP2_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP2_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101800) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP2_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP2_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101800) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP2_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP2_CONTROL = (STRIP2_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP2_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP2_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP2_CODE0 __AT (0x40101804);



// ------------------------------  Field Item: STRIP2_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP2_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101804) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_CODE0 >> 8) & 0x3F), ((STRIP2_CODE0 = (STRIP2_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP2_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP2_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101804) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_CODE0 >> 0) & 0x3F), ((STRIP2_CODE0 = (STRIP2_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP2_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP2_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101804) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP2_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP2_CODE0 = (STRIP2_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP2_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP2_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP2_CODE1 __AT (0x40101808);



// ------------------------------  Field Item: STRIP2_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP2_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101808) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_CODE1 >> 8) & 0x3F), ((STRIP2_CODE1 = (STRIP2_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP2_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP2_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101808) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_CODE1 >> 0) & 0x3F), ((STRIP2_CODE1 = (STRIP2_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP2_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP2_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101808) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP2_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP2_CODE1 = (STRIP2_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP2_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP2_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP2_RSTW __AT (0x4010180C);



// ------------------------------  Field Item: STRIP2_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP2_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010180C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP2_RSTW >> 0) & 0xFFFFFFFF), ((STRIP2_RSTW = (STRIP2_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP2_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP2_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010180C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP2_RSTW >> 0) & 0xFFFFFFFF), ((STRIP2_RSTW = (STRIP2_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP2_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP2_PENDW __AT (0x40101810);



// -----------------------------  Field Item: STRIP2_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP2_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101810) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_PENDW >> 0) & 0x3F), ((STRIP2_PENDW = (STRIP2_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP2_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP2_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101810) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP2_PENDW >> 0) & 0xFFFFFFFF), ((STRIP2_PENDW = (STRIP2_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP2_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP2_DSRC __AT (0x40101814);



// ----------------------------  Field Item: STRIP2_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP2_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101814) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP2_DSRC >> 0) & 0xFFFFFFFF), ((STRIP2_DSRC = (STRIP2_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP2_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP2_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101814) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP2_DSRC >> 0) & 0xFFFFFFFF), ((STRIP2_DSRC = (STRIP2_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP2_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP2_TRANSLEN __AT (0x40101818);



// --------------------------  Field Item: STRIP2_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP2_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101818) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_TRANSLEN >> 0) & 0x3FFF), ((STRIP2_TRANSLEN = (STRIP2_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP2_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP2_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101818) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP2_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP2_TRANSLEN = (STRIP2_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP2_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP2_ADVCMD __AT (0x4010181C);



// -----------------------------  Field Item: STRIP2_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP2_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010181C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP2_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP2_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP2_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x4010181C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP2_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP2_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP2_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010181C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP2_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP2_ADVCMD = (STRIP2_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP2_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP2_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP2_TH50CTRL0 __AT (0x40101820);



// --------------------------  Field Item: STRIP2_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP2_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101820) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_TH50CTRL0 >> 16) & 0xFFF), ((STRIP2_TH50CTRL0 = (STRIP2_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP2_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP2_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101820) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_TH50CTRL0 >> 0) & 0xFFF), ((STRIP2_TH50CTRL0 = (STRIP2_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP2_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP2_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101820) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP2_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP2_TH50CTRL0 = (STRIP2_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP2_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP2_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP2_TH50CTRL1 __AT (0x40101824);



// --------------------------  Field Item: STRIP2_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP2_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101824) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_TH50CTRL1 >> 16) & 0xFFF), ((STRIP2_TH50CTRL1 = (STRIP2_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP2_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP2_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101824) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_TH50CTRL1 >> 0) & 0xFFF), ((STRIP2_TH50CTRL1 = (STRIP2_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP2_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP2_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101824) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP2_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP2_TH50CTRL1 = (STRIP2_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP2_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP2_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP2_TH50RX __AT (0x40101828);



// ----------------------------  Field Item: STRIP2_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP2_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101828) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_TH50RX >> 8) & 0xFF), ((STRIP2_TH50RX = (STRIP2_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP2_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP2_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101828) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_TH50RX >> 0) & 0xFF), ((STRIP2_TH50RX = (STRIP2_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP2_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP2_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101828) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP2_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP2_TH50RX = (STRIP2_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP2_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP2_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP2_TH50TO __AT (0x4010182C);



// ----------------------------  Field Item: STRIP2_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP2_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x4010182C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_TH50TO >> 0) & 0xFFF), ((STRIP2_TH50TO = (STRIP2_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP2_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP2_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010182C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP2_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP2_TH50TO = (STRIP2_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP2_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP2_AVDPRLCTRL0 __AT (0x40101830);



// --------------------------  Field Item: STRIP2_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101830) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP2_AVDPRLCTRL0 = (STRIP2_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP2_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101830) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP2_AVDPRLCTRL0 = (STRIP2_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP2_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101830) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP2_AVDPRLCTRL0 = (STRIP2_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP2_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101830) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP2_AVDPRLCTRL0 = (STRIP2_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP2_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP2_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101830) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP2_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP2_AVDPRLCTRL0 = (STRIP2_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP2_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP2_AVDPRLCTRL1 __AT (0x40101834);



// --------------------------  Field Item: STRIP2_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101834) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP2_AVDPRLCTRL1 = (STRIP2_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP2_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101834) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP2_AVDPRLCTRL1 = (STRIP2_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP2_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP2_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101834) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP2_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP2_AVDPRLCTRL1 = (STRIP2_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP2_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP2_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP2_AVDPRLTO __AT (0x40101838);



// ----------------------------  Field Item: STRIP2_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP2_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101838) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP2_AVDPRLTO >> 0) & 0xFFF), ((STRIP2_AVDPRLTO = (STRIP2_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP2_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP2_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101838) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP2_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP2_AVDPRLTO = (STRIP2_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP2_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP2_RECVADDR __AT (0x4010183C);



// --------------------------  Field Item: STRIP2_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP2_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010183C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP2_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP2_RECVADDR = (STRIP2_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP2_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP2_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010183C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP2_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP2_RECVADDR = (STRIP2_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP2_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP2_RECVCNT __AT (0x40101840);



// ---------------------------  Field Item: STRIP2_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP2_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101840) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP2_RECVCNT >> 0) & 0xFF), ((STRIP2_RECVCNT = (STRIP2_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP2_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP2_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101840) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP2_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP2_RECVCNT = (STRIP2_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP2_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP2_ADVSTS __AT (0x40101844);



// ----------------------------  Field Item: STRIP2_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP2_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101844) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP2_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP2_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP2_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101844) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP2_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP2_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP2_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101844) Status Register </i>
//    <loc> ( (unsigned int)((STRIP2_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP2_ADVSTS = (STRIP2_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP2_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP2_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP2_ADVINT __AT (0x40101848);



// --------------------------  Field Item: STRIP2_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP2_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101848) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP2_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP2_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP2_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101848) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP2_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP2_ADVINT = (STRIP2_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP2_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP2  ------------------------------------
// SVD Line: 21271

//  <view> STRIP2
//    <name> STRIP2 </name>
//    <item> SFDITEM_REG__STRIP2_CONTROL </item>
//    <item> SFDITEM_REG__STRIP2_CODE0 </item>
//    <item> SFDITEM_REG__STRIP2_CODE1 </item>
//    <item> SFDITEM_REG__STRIP2_RSTW </item>
//    <item> SFDITEM_REG__STRIP2_PENDW </item>
//    <item> SFDITEM_REG__STRIP2_DSRC </item>
//    <item> SFDITEM_REG__STRIP2_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP2_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP2_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP2_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP2_TH50RX </item>
//    <item> SFDITEM_REG__STRIP2_TH50TO </item>
//    <item> SFDITEM_REG__STRIP2_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP2_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP2_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP2_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP2_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP2_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP2_ADVINT </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP3_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP3_CONTROL __AT (0x40101900);



// ----------------------------  Field Item: STRIP3_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101900) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_CONTROL >> 16) & 0xFF), ((STRIP3_CONTROL = (STRIP3_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP3_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101900) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP3_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101900) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP3_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101900) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP3_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101900) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP3_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101900) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP3_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101900) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP3_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101900) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP3_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP3_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101900) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP3_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP3_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101900) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP3_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP3_CONTROL = (STRIP3_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP3_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP3_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP3_CODE0 __AT (0x40101904);



// ------------------------------  Field Item: STRIP3_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP3_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101904) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_CODE0 >> 8) & 0x3F), ((STRIP3_CODE0 = (STRIP3_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP3_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP3_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101904) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_CODE0 >> 0) & 0x3F), ((STRIP3_CODE0 = (STRIP3_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP3_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP3_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101904) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP3_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP3_CODE0 = (STRIP3_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP3_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP3_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP3_CODE1 __AT (0x40101908);



// ------------------------------  Field Item: STRIP3_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP3_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101908) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_CODE1 >> 8) & 0x3F), ((STRIP3_CODE1 = (STRIP3_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP3_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP3_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101908) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_CODE1 >> 0) & 0x3F), ((STRIP3_CODE1 = (STRIP3_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP3_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP3_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101908) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP3_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP3_CODE1 = (STRIP3_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP3_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP3_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP3_RSTW __AT (0x4010190C);



// ------------------------------  Field Item: STRIP3_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP3_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010190C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP3_RSTW >> 0) & 0xFFFFFFFF), ((STRIP3_RSTW = (STRIP3_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP3_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP3_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010190C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP3_RSTW >> 0) & 0xFFFFFFFF), ((STRIP3_RSTW = (STRIP3_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP3_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP3_PENDW __AT (0x40101910);



// -----------------------------  Field Item: STRIP3_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP3_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101910) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_PENDW >> 0) & 0x3F), ((STRIP3_PENDW = (STRIP3_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP3_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP3_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101910) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP3_PENDW >> 0) & 0xFFFFFFFF), ((STRIP3_PENDW = (STRIP3_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP3_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP3_DSRC __AT (0x40101914);



// ----------------------------  Field Item: STRIP3_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP3_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101914) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP3_DSRC >> 0) & 0xFFFFFFFF), ((STRIP3_DSRC = (STRIP3_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP3_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP3_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101914) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP3_DSRC >> 0) & 0xFFFFFFFF), ((STRIP3_DSRC = (STRIP3_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP3_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP3_TRANSLEN __AT (0x40101918);



// --------------------------  Field Item: STRIP3_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP3_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101918) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_TRANSLEN >> 0) & 0x3FFF), ((STRIP3_TRANSLEN = (STRIP3_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP3_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP3_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101918) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP3_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP3_TRANSLEN = (STRIP3_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP3_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP3_ADVCMD __AT (0x4010191C);



// -----------------------------  Field Item: STRIP3_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP3_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4010191C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP3_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP3_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP3_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x4010191C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP3_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP3_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP3_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010191C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP3_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP3_ADVCMD = (STRIP3_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP3_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP3_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP3_TH50CTRL0 __AT (0x40101920);



// --------------------------  Field Item: STRIP3_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP3_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101920) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_TH50CTRL0 >> 16) & 0xFFF), ((STRIP3_TH50CTRL0 = (STRIP3_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP3_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP3_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101920) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_TH50CTRL0 >> 0) & 0xFFF), ((STRIP3_TH50CTRL0 = (STRIP3_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP3_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP3_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101920) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP3_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP3_TH50CTRL0 = (STRIP3_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP3_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP3_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP3_TH50CTRL1 __AT (0x40101924);



// --------------------------  Field Item: STRIP3_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP3_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101924) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_TH50CTRL1 >> 16) & 0xFFF), ((STRIP3_TH50CTRL1 = (STRIP3_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP3_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP3_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101924) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_TH50CTRL1 >> 0) & 0xFFF), ((STRIP3_TH50CTRL1 = (STRIP3_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP3_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP3_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101924) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP3_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP3_TH50CTRL1 = (STRIP3_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP3_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP3_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP3_TH50RX __AT (0x40101928);



// ----------------------------  Field Item: STRIP3_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP3_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101928) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_TH50RX >> 8) & 0xFF), ((STRIP3_TH50RX = (STRIP3_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP3_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP3_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101928) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_TH50RX >> 0) & 0xFF), ((STRIP3_TH50RX = (STRIP3_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP3_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP3_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101928) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP3_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP3_TH50RX = (STRIP3_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP3_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP3_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP3_TH50TO __AT (0x4010192C);



// ----------------------------  Field Item: STRIP3_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP3_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x4010192C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_TH50TO >> 0) & 0xFFF), ((STRIP3_TH50TO = (STRIP3_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP3_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP3_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010192C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP3_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP3_TH50TO = (STRIP3_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP3_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP3_AVDPRLCTRL0 __AT (0x40101930);



// --------------------------  Field Item: STRIP3_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101930) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP3_AVDPRLCTRL0 = (STRIP3_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP3_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101930) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP3_AVDPRLCTRL0 = (STRIP3_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP3_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101930) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP3_AVDPRLCTRL0 = (STRIP3_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP3_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101930) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP3_AVDPRLCTRL0 = (STRIP3_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP3_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP3_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101930) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP3_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP3_AVDPRLCTRL0 = (STRIP3_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP3_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP3_AVDPRLCTRL1 __AT (0x40101934);



// --------------------------  Field Item: STRIP3_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101934) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP3_AVDPRLCTRL1 = (STRIP3_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP3_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101934) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP3_AVDPRLCTRL1 = (STRIP3_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP3_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP3_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101934) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP3_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP3_AVDPRLCTRL1 = (STRIP3_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP3_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP3_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP3_AVDPRLTO __AT (0x40101938);



// ----------------------------  Field Item: STRIP3_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP3_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101938) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP3_AVDPRLTO >> 0) & 0xFFF), ((STRIP3_AVDPRLTO = (STRIP3_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP3_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP3_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101938) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP3_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP3_AVDPRLTO = (STRIP3_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP3_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP3_RECVADDR __AT (0x4010193C);



// --------------------------  Field Item: STRIP3_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP3_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010193C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP3_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP3_RECVADDR = (STRIP3_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP3_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP3_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4010193C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP3_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP3_RECVADDR = (STRIP3_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP3_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP3_RECVCNT __AT (0x40101940);



// ---------------------------  Field Item: STRIP3_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP3_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101940) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP3_RECVCNT >> 0) & 0xFF), ((STRIP3_RECVCNT = (STRIP3_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP3_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP3_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101940) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP3_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP3_RECVCNT = (STRIP3_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP3_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP3_ADVSTS __AT (0x40101944);



// ----------------------------  Field Item: STRIP3_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP3_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101944) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP3_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP3_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP3_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101944) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP3_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP3_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP3_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101944) Status Register </i>
//    <loc> ( (unsigned int)((STRIP3_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP3_ADVSTS = (STRIP3_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP3_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP3_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP3_ADVINT __AT (0x40101948);



// --------------------------  Field Item: STRIP3_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP3_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101948) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP3_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP3_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP3_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101948) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP3_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP3_ADVINT = (STRIP3_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP3_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP3  ------------------------------------
// SVD Line: 21282

//  <view> STRIP3
//    <name> STRIP3 </name>
//    <item> SFDITEM_REG__STRIP3_CONTROL </item>
//    <item> SFDITEM_REG__STRIP3_CODE0 </item>
//    <item> SFDITEM_REG__STRIP3_CODE1 </item>
//    <item> SFDITEM_REG__STRIP3_RSTW </item>
//    <item> SFDITEM_REG__STRIP3_PENDW </item>
//    <item> SFDITEM_REG__STRIP3_DSRC </item>
//    <item> SFDITEM_REG__STRIP3_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP3_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP3_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP3_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP3_TH50RX </item>
//    <item> SFDITEM_REG__STRIP3_TH50TO </item>
//    <item> SFDITEM_REG__STRIP3_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP3_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP3_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP3_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP3_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP3_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP3_ADVINT </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP4_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP4_CONTROL __AT (0x40101A00);



// ----------------------------  Field Item: STRIP4_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101A00) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_CONTROL >> 16) & 0xFF), ((STRIP4_CONTROL = (STRIP4_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP4_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101A00) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP4_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101A00) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP4_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101A00) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP4_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101A00) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP4_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101A00) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP4_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101A00) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP4_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101A00) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP4_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP4_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101A00) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP4_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP4_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A00) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP4_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP4_CONTROL = (STRIP4_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP4_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP4_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP4_CODE0 __AT (0x40101A04);



// ------------------------------  Field Item: STRIP4_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP4_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101A04) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_CODE0 >> 8) & 0x3F), ((STRIP4_CODE0 = (STRIP4_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP4_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP4_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101A04) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_CODE0 >> 0) & 0x3F), ((STRIP4_CODE0 = (STRIP4_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP4_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP4_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A04) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP4_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP4_CODE0 = (STRIP4_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP4_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP4_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP4_CODE1 __AT (0x40101A08);



// ------------------------------  Field Item: STRIP4_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP4_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101A08) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_CODE1 >> 8) & 0x3F), ((STRIP4_CODE1 = (STRIP4_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP4_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP4_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101A08) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_CODE1 >> 0) & 0x3F), ((STRIP4_CODE1 = (STRIP4_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP4_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP4_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A08) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP4_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP4_CODE1 = (STRIP4_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP4_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP4_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP4_RSTW __AT (0x40101A0C);



// ------------------------------  Field Item: STRIP4_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP4_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A0C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP4_RSTW >> 0) & 0xFFFFFFFF), ((STRIP4_RSTW = (STRIP4_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP4_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP4_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A0C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP4_RSTW >> 0) & 0xFFFFFFFF), ((STRIP4_RSTW = (STRIP4_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP4_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP4_PENDW __AT (0x40101A10);



// -----------------------------  Field Item: STRIP4_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP4_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101A10) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_PENDW >> 0) & 0x3F), ((STRIP4_PENDW = (STRIP4_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP4_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP4_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A10) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP4_PENDW >> 0) & 0xFFFFFFFF), ((STRIP4_PENDW = (STRIP4_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP4_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP4_DSRC __AT (0x40101A14);



// ----------------------------  Field Item: STRIP4_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP4_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A14) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP4_DSRC >> 0) & 0xFFFFFFFF), ((STRIP4_DSRC = (STRIP4_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP4_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP4_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A14) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP4_DSRC >> 0) & 0xFFFFFFFF), ((STRIP4_DSRC = (STRIP4_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP4_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP4_TRANSLEN __AT (0x40101A18);



// --------------------------  Field Item: STRIP4_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP4_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101A18) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_TRANSLEN >> 0) & 0x3FFF), ((STRIP4_TRANSLEN = (STRIP4_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP4_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP4_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A18) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP4_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP4_TRANSLEN = (STRIP4_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP4_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP4_ADVCMD __AT (0x40101A1C);



// -----------------------------  Field Item: STRIP4_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP4_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101A1C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP4_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP4_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP4_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40101A1C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP4_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP4_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP4_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A1C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP4_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP4_ADVCMD = (STRIP4_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP4_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP4_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP4_TH50CTRL0 __AT (0x40101A20);



// --------------------------  Field Item: STRIP4_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP4_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101A20) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_TH50CTRL0 >> 16) & 0xFFF), ((STRIP4_TH50CTRL0 = (STRIP4_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP4_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP4_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101A20) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_TH50CTRL0 >> 0) & 0xFFF), ((STRIP4_TH50CTRL0 = (STRIP4_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP4_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP4_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A20) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP4_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP4_TH50CTRL0 = (STRIP4_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP4_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP4_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP4_TH50CTRL1 __AT (0x40101A24);



// --------------------------  Field Item: STRIP4_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP4_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101A24) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_TH50CTRL1 >> 16) & 0xFFF), ((STRIP4_TH50CTRL1 = (STRIP4_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP4_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP4_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101A24) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_TH50CTRL1 >> 0) & 0xFFF), ((STRIP4_TH50CTRL1 = (STRIP4_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP4_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP4_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A24) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP4_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP4_TH50CTRL1 = (STRIP4_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP4_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP4_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP4_TH50RX __AT (0x40101A28);



// ----------------------------  Field Item: STRIP4_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP4_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101A28) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_TH50RX >> 8) & 0xFF), ((STRIP4_TH50RX = (STRIP4_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP4_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP4_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101A28) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_TH50RX >> 0) & 0xFF), ((STRIP4_TH50RX = (STRIP4_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP4_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP4_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A28) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP4_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP4_TH50RX = (STRIP4_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP4_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP4_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP4_TH50TO __AT (0x40101A2C);



// ----------------------------  Field Item: STRIP4_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP4_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101A2C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_TH50TO >> 0) & 0xFFF), ((STRIP4_TH50TO = (STRIP4_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP4_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP4_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A2C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP4_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP4_TH50TO = (STRIP4_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP4_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP4_AVDPRLCTRL0 __AT (0x40101A30);



// --------------------------  Field Item: STRIP4_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101A30) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP4_AVDPRLCTRL0 = (STRIP4_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP4_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101A30) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP4_AVDPRLCTRL0 = (STRIP4_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP4_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101A30) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP4_AVDPRLCTRL0 = (STRIP4_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP4_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101A30) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP4_AVDPRLCTRL0 = (STRIP4_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP4_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP4_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A30) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP4_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP4_AVDPRLCTRL0 = (STRIP4_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP4_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP4_AVDPRLCTRL1 __AT (0x40101A34);



// --------------------------  Field Item: STRIP4_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101A34) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP4_AVDPRLCTRL1 = (STRIP4_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP4_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101A34) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP4_AVDPRLCTRL1 = (STRIP4_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP4_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP4_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A34) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP4_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP4_AVDPRLCTRL1 = (STRIP4_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP4_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP4_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP4_AVDPRLTO __AT (0x40101A38);



// ----------------------------  Field Item: STRIP4_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP4_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101A38) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP4_AVDPRLTO >> 0) & 0xFFF), ((STRIP4_AVDPRLTO = (STRIP4_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP4_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP4_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A38) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP4_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP4_AVDPRLTO = (STRIP4_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP4_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP4_RECVADDR __AT (0x40101A3C);



// --------------------------  Field Item: STRIP4_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP4_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A3C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP4_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP4_RECVADDR = (STRIP4_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP4_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP4_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A3C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP4_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP4_RECVADDR = (STRIP4_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP4_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP4_RECVCNT __AT (0x40101A40);



// ---------------------------  Field Item: STRIP4_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP4_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101A40) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP4_RECVCNT >> 0) & 0xFF), ((STRIP4_RECVCNT = (STRIP4_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP4_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP4_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A40) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP4_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP4_RECVCNT = (STRIP4_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP4_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP4_ADVSTS __AT (0x40101A44);



// ----------------------------  Field Item: STRIP4_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP4_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101A44) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP4_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP4_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP4_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101A44) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP4_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP4_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP4_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A44) Status Register </i>
//    <loc> ( (unsigned int)((STRIP4_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP4_ADVSTS = (STRIP4_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP4_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP4_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP4_ADVINT __AT (0x40101A48);



// --------------------------  Field Item: STRIP4_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP4_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101A48) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP4_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP4_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP4_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101A48) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP4_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP4_ADVINT = (STRIP4_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP4_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP4  ------------------------------------
// SVD Line: 21293

//  <view> STRIP4
//    <name> STRIP4 </name>
//    <item> SFDITEM_REG__STRIP4_CONTROL </item>
//    <item> SFDITEM_REG__STRIP4_CODE0 </item>
//    <item> SFDITEM_REG__STRIP4_CODE1 </item>
//    <item> SFDITEM_REG__STRIP4_RSTW </item>
//    <item> SFDITEM_REG__STRIP4_PENDW </item>
//    <item> SFDITEM_REG__STRIP4_DSRC </item>
//    <item> SFDITEM_REG__STRIP4_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP4_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP4_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP4_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP4_TH50RX </item>
//    <item> SFDITEM_REG__STRIP4_TH50TO </item>
//    <item> SFDITEM_REG__STRIP4_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP4_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP4_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP4_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP4_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP4_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP4_ADVINT </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP5_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP5_CONTROL __AT (0x40101B00);



// ----------------------------  Field Item: STRIP5_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101B00) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_CONTROL >> 16) & 0xFF), ((STRIP5_CONTROL = (STRIP5_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP5_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101B00) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP5_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101B00) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP5_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101B00) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP5_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101B00) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP5_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101B00) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP5_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101B00) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP5_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101B00) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP5_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP5_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101B00) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP5_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP5_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B00) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP5_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP5_CONTROL = (STRIP5_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP5_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP5_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP5_CODE0 __AT (0x40101B04);



// ------------------------------  Field Item: STRIP5_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP5_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101B04) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_CODE0 >> 8) & 0x3F), ((STRIP5_CODE0 = (STRIP5_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP5_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP5_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101B04) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_CODE0 >> 0) & 0x3F), ((STRIP5_CODE0 = (STRIP5_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP5_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP5_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B04) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP5_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP5_CODE0 = (STRIP5_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP5_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP5_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP5_CODE1 __AT (0x40101B08);



// ------------------------------  Field Item: STRIP5_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP5_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101B08) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_CODE1 >> 8) & 0x3F), ((STRIP5_CODE1 = (STRIP5_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP5_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP5_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101B08) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_CODE1 >> 0) & 0x3F), ((STRIP5_CODE1 = (STRIP5_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP5_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP5_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B08) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP5_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP5_CODE1 = (STRIP5_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP5_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP5_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP5_RSTW __AT (0x40101B0C);



// ------------------------------  Field Item: STRIP5_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP5_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B0C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP5_RSTW >> 0) & 0xFFFFFFFF), ((STRIP5_RSTW = (STRIP5_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP5_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP5_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B0C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP5_RSTW >> 0) & 0xFFFFFFFF), ((STRIP5_RSTW = (STRIP5_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP5_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP5_PENDW __AT (0x40101B10);



// -----------------------------  Field Item: STRIP5_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP5_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101B10) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_PENDW >> 0) & 0x3F), ((STRIP5_PENDW = (STRIP5_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP5_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP5_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B10) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP5_PENDW >> 0) & 0xFFFFFFFF), ((STRIP5_PENDW = (STRIP5_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP5_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP5_DSRC __AT (0x40101B14);



// ----------------------------  Field Item: STRIP5_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP5_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B14) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP5_DSRC >> 0) & 0xFFFFFFFF), ((STRIP5_DSRC = (STRIP5_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP5_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP5_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B14) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP5_DSRC >> 0) & 0xFFFFFFFF), ((STRIP5_DSRC = (STRIP5_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP5_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP5_TRANSLEN __AT (0x40101B18);



// --------------------------  Field Item: STRIP5_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP5_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101B18) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_TRANSLEN >> 0) & 0x3FFF), ((STRIP5_TRANSLEN = (STRIP5_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP5_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP5_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B18) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP5_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP5_TRANSLEN = (STRIP5_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP5_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP5_ADVCMD __AT (0x40101B1C);



// -----------------------------  Field Item: STRIP5_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP5_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101B1C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP5_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP5_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP5_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40101B1C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP5_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP5_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP5_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B1C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP5_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP5_ADVCMD = (STRIP5_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP5_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP5_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP5_TH50CTRL0 __AT (0x40101B20);



// --------------------------  Field Item: STRIP5_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP5_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101B20) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_TH50CTRL0 >> 16) & 0xFFF), ((STRIP5_TH50CTRL0 = (STRIP5_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP5_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP5_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101B20) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_TH50CTRL0 >> 0) & 0xFFF), ((STRIP5_TH50CTRL0 = (STRIP5_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP5_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP5_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B20) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP5_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP5_TH50CTRL0 = (STRIP5_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP5_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP5_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP5_TH50CTRL1 __AT (0x40101B24);



// --------------------------  Field Item: STRIP5_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP5_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101B24) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_TH50CTRL1 >> 16) & 0xFFF), ((STRIP5_TH50CTRL1 = (STRIP5_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP5_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP5_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101B24) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_TH50CTRL1 >> 0) & 0xFFF), ((STRIP5_TH50CTRL1 = (STRIP5_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP5_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP5_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B24) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP5_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP5_TH50CTRL1 = (STRIP5_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP5_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP5_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP5_TH50RX __AT (0x40101B28);



// ----------------------------  Field Item: STRIP5_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP5_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101B28) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_TH50RX >> 8) & 0xFF), ((STRIP5_TH50RX = (STRIP5_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP5_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP5_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101B28) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_TH50RX >> 0) & 0xFF), ((STRIP5_TH50RX = (STRIP5_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP5_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP5_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B28) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP5_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP5_TH50RX = (STRIP5_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP5_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP5_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP5_TH50TO __AT (0x40101B2C);



// ----------------------------  Field Item: STRIP5_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP5_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101B2C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_TH50TO >> 0) & 0xFFF), ((STRIP5_TH50TO = (STRIP5_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP5_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP5_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B2C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP5_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP5_TH50TO = (STRIP5_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP5_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP5_AVDPRLCTRL0 __AT (0x40101B30);



// --------------------------  Field Item: STRIP5_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101B30) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP5_AVDPRLCTRL0 = (STRIP5_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP5_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101B30) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP5_AVDPRLCTRL0 = (STRIP5_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP5_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101B30) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP5_AVDPRLCTRL0 = (STRIP5_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP5_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101B30) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP5_AVDPRLCTRL0 = (STRIP5_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP5_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP5_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B30) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP5_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP5_AVDPRLCTRL0 = (STRIP5_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP5_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP5_AVDPRLCTRL1 __AT (0x40101B34);



// --------------------------  Field Item: STRIP5_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101B34) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP5_AVDPRLCTRL1 = (STRIP5_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP5_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101B34) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP5_AVDPRLCTRL1 = (STRIP5_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP5_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP5_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B34) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP5_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP5_AVDPRLCTRL1 = (STRIP5_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP5_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP5_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP5_AVDPRLTO __AT (0x40101B38);



// ----------------------------  Field Item: STRIP5_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP5_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101B38) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP5_AVDPRLTO >> 0) & 0xFFF), ((STRIP5_AVDPRLTO = (STRIP5_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP5_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP5_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B38) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP5_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP5_AVDPRLTO = (STRIP5_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP5_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP5_RECVADDR __AT (0x40101B3C);



// --------------------------  Field Item: STRIP5_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP5_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B3C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP5_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP5_RECVADDR = (STRIP5_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP5_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP5_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B3C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP5_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP5_RECVADDR = (STRIP5_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP5_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP5_RECVCNT __AT (0x40101B40);



// ---------------------------  Field Item: STRIP5_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP5_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101B40) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP5_RECVCNT >> 0) & 0xFF), ((STRIP5_RECVCNT = (STRIP5_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP5_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP5_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B40) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP5_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP5_RECVCNT = (STRIP5_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP5_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP5_ADVSTS __AT (0x40101B44);



// ----------------------------  Field Item: STRIP5_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP5_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101B44) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP5_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP5_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP5_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101B44) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP5_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP5_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP5_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B44) Status Register </i>
//    <loc> ( (unsigned int)((STRIP5_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP5_ADVSTS = (STRIP5_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP5_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP5_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP5_ADVINT __AT (0x40101B48);



// --------------------------  Field Item: STRIP5_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP5_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101B48) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP5_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP5_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP5_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101B48) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP5_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP5_ADVINT = (STRIP5_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP5_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP5  ------------------------------------
// SVD Line: 21304

//  <view> STRIP5
//    <name> STRIP5 </name>
//    <item> SFDITEM_REG__STRIP5_CONTROL </item>
//    <item> SFDITEM_REG__STRIP5_CODE0 </item>
//    <item> SFDITEM_REG__STRIP5_CODE1 </item>
//    <item> SFDITEM_REG__STRIP5_RSTW </item>
//    <item> SFDITEM_REG__STRIP5_PENDW </item>
//    <item> SFDITEM_REG__STRIP5_DSRC </item>
//    <item> SFDITEM_REG__STRIP5_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP5_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP5_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP5_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP5_TH50RX </item>
//    <item> SFDITEM_REG__STRIP5_TH50TO </item>
//    <item> SFDITEM_REG__STRIP5_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP5_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP5_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP5_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP5_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP5_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP5_ADVINT </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP6_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP6_CONTROL __AT (0x40101C00);



// ----------------------------  Field Item: STRIP6_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101C00) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_CONTROL >> 16) & 0xFF), ((STRIP6_CONTROL = (STRIP6_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP6_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101C00) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP6_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101C00) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP6_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101C00) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP6_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101C00) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP6_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101C00) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP6_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101C00) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP6_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101C00) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP6_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP6_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101C00) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP6_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP6_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C00) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP6_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP6_CONTROL = (STRIP6_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP6_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP6_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP6_CODE0 __AT (0x40101C04);



// ------------------------------  Field Item: STRIP6_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP6_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101C04) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_CODE0 >> 8) & 0x3F), ((STRIP6_CODE0 = (STRIP6_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP6_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP6_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101C04) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_CODE0 >> 0) & 0x3F), ((STRIP6_CODE0 = (STRIP6_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP6_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP6_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C04) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP6_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP6_CODE0 = (STRIP6_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP6_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP6_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP6_CODE1 __AT (0x40101C08);



// ------------------------------  Field Item: STRIP6_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP6_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101C08) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_CODE1 >> 8) & 0x3F), ((STRIP6_CODE1 = (STRIP6_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP6_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP6_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101C08) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_CODE1 >> 0) & 0x3F), ((STRIP6_CODE1 = (STRIP6_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP6_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP6_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C08) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP6_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP6_CODE1 = (STRIP6_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP6_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP6_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP6_RSTW __AT (0x40101C0C);



// ------------------------------  Field Item: STRIP6_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP6_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C0C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP6_RSTW >> 0) & 0xFFFFFFFF), ((STRIP6_RSTW = (STRIP6_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP6_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP6_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C0C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP6_RSTW >> 0) & 0xFFFFFFFF), ((STRIP6_RSTW = (STRIP6_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP6_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP6_PENDW __AT (0x40101C10);



// -----------------------------  Field Item: STRIP6_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP6_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101C10) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_PENDW >> 0) & 0x3F), ((STRIP6_PENDW = (STRIP6_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP6_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP6_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C10) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP6_PENDW >> 0) & 0xFFFFFFFF), ((STRIP6_PENDW = (STRIP6_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP6_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP6_DSRC __AT (0x40101C14);



// ----------------------------  Field Item: STRIP6_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP6_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C14) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP6_DSRC >> 0) & 0xFFFFFFFF), ((STRIP6_DSRC = (STRIP6_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP6_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP6_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C14) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP6_DSRC >> 0) & 0xFFFFFFFF), ((STRIP6_DSRC = (STRIP6_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP6_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP6_TRANSLEN __AT (0x40101C18);



// --------------------------  Field Item: STRIP6_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP6_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101C18) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_TRANSLEN >> 0) & 0x3FFF), ((STRIP6_TRANSLEN = (STRIP6_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP6_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP6_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C18) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP6_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP6_TRANSLEN = (STRIP6_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP6_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP6_ADVCMD __AT (0x40101C1C);



// -----------------------------  Field Item: STRIP6_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP6_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101C1C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP6_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP6_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP6_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40101C1C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP6_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP6_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP6_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C1C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP6_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP6_ADVCMD = (STRIP6_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP6_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP6_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP6_TH50CTRL0 __AT (0x40101C20);



// --------------------------  Field Item: STRIP6_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP6_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101C20) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_TH50CTRL0 >> 16) & 0xFFF), ((STRIP6_TH50CTRL0 = (STRIP6_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP6_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP6_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101C20) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_TH50CTRL0 >> 0) & 0xFFF), ((STRIP6_TH50CTRL0 = (STRIP6_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP6_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP6_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C20) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP6_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP6_TH50CTRL0 = (STRIP6_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP6_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP6_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP6_TH50CTRL1 __AT (0x40101C24);



// --------------------------  Field Item: STRIP6_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP6_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101C24) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_TH50CTRL1 >> 16) & 0xFFF), ((STRIP6_TH50CTRL1 = (STRIP6_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP6_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP6_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101C24) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_TH50CTRL1 >> 0) & 0xFFF), ((STRIP6_TH50CTRL1 = (STRIP6_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP6_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP6_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C24) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP6_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP6_TH50CTRL1 = (STRIP6_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP6_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP6_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP6_TH50RX __AT (0x40101C28);



// ----------------------------  Field Item: STRIP6_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP6_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101C28) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_TH50RX >> 8) & 0xFF), ((STRIP6_TH50RX = (STRIP6_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP6_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP6_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101C28) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_TH50RX >> 0) & 0xFF), ((STRIP6_TH50RX = (STRIP6_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP6_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP6_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C28) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP6_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP6_TH50RX = (STRIP6_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP6_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP6_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP6_TH50TO __AT (0x40101C2C);



// ----------------------------  Field Item: STRIP6_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP6_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101C2C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_TH50TO >> 0) & 0xFFF), ((STRIP6_TH50TO = (STRIP6_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP6_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP6_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C2C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP6_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP6_TH50TO = (STRIP6_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP6_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP6_AVDPRLCTRL0 __AT (0x40101C30);



// --------------------------  Field Item: STRIP6_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101C30) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP6_AVDPRLCTRL0 = (STRIP6_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP6_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101C30) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP6_AVDPRLCTRL0 = (STRIP6_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP6_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101C30) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP6_AVDPRLCTRL0 = (STRIP6_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP6_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101C30) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP6_AVDPRLCTRL0 = (STRIP6_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP6_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP6_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C30) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP6_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP6_AVDPRLCTRL0 = (STRIP6_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP6_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP6_AVDPRLCTRL1 __AT (0x40101C34);



// --------------------------  Field Item: STRIP6_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101C34) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP6_AVDPRLCTRL1 = (STRIP6_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP6_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101C34) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP6_AVDPRLCTRL1 = (STRIP6_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP6_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP6_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C34) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP6_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP6_AVDPRLCTRL1 = (STRIP6_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP6_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP6_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP6_AVDPRLTO __AT (0x40101C38);



// ----------------------------  Field Item: STRIP6_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP6_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101C38) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP6_AVDPRLTO >> 0) & 0xFFF), ((STRIP6_AVDPRLTO = (STRIP6_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP6_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP6_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C38) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP6_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP6_AVDPRLTO = (STRIP6_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP6_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP6_RECVADDR __AT (0x40101C3C);



// --------------------------  Field Item: STRIP6_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP6_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C3C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP6_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP6_RECVADDR = (STRIP6_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP6_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP6_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C3C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP6_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP6_RECVADDR = (STRIP6_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP6_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP6_RECVCNT __AT (0x40101C40);



// ---------------------------  Field Item: STRIP6_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP6_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101C40) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP6_RECVCNT >> 0) & 0xFF), ((STRIP6_RECVCNT = (STRIP6_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP6_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP6_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C40) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP6_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP6_RECVCNT = (STRIP6_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP6_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP6_ADVSTS __AT (0x40101C44);



// ----------------------------  Field Item: STRIP6_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP6_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101C44) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP6_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP6_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP6_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101C44) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP6_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP6_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP6_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C44) Status Register </i>
//    <loc> ( (unsigned int)((STRIP6_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP6_ADVSTS = (STRIP6_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP6_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP6_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP6_ADVINT __AT (0x40101C48);



// --------------------------  Field Item: STRIP6_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP6_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101C48) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP6_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP6_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP6_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101C48) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP6_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP6_ADVINT = (STRIP6_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP6_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP6  ------------------------------------
// SVD Line: 21315

//  <view> STRIP6
//    <name> STRIP6 </name>
//    <item> SFDITEM_REG__STRIP6_CONTROL </item>
//    <item> SFDITEM_REG__STRIP6_CODE0 </item>
//    <item> SFDITEM_REG__STRIP6_CODE1 </item>
//    <item> SFDITEM_REG__STRIP6_RSTW </item>
//    <item> SFDITEM_REG__STRIP6_PENDW </item>
//    <item> SFDITEM_REG__STRIP6_DSRC </item>
//    <item> SFDITEM_REG__STRIP6_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP6_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP6_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP6_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP6_TH50RX </item>
//    <item> SFDITEM_REG__STRIP6_TH50TO </item>
//    <item> SFDITEM_REG__STRIP6_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP6_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP6_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP6_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP6_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP6_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP6_ADVINT </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP7_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP7_CONTROL __AT (0x40101D00);



// ----------------------------  Field Item: STRIP7_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101D00) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_CONTROL >> 16) & 0xFF), ((STRIP7_CONTROL = (STRIP7_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP7_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101D00) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP7_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101D00) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP7_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101D00) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP7_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101D00) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP7_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101D00) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP7_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101D00) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP7_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101D00) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP7_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP7_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101D00) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP7_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP7_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D00) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP7_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP7_CONTROL = (STRIP7_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP7_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP7_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP7_CODE0 __AT (0x40101D04);



// ------------------------------  Field Item: STRIP7_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP7_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101D04) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_CODE0 >> 8) & 0x3F), ((STRIP7_CODE0 = (STRIP7_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP7_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP7_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101D04) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_CODE0 >> 0) & 0x3F), ((STRIP7_CODE0 = (STRIP7_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP7_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP7_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D04) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP7_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP7_CODE0 = (STRIP7_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP7_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP7_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP7_CODE1 __AT (0x40101D08);



// ------------------------------  Field Item: STRIP7_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP7_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101D08) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_CODE1 >> 8) & 0x3F), ((STRIP7_CODE1 = (STRIP7_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP7_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP7_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101D08) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_CODE1 >> 0) & 0x3F), ((STRIP7_CODE1 = (STRIP7_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP7_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP7_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D08) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP7_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP7_CODE1 = (STRIP7_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP7_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP7_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP7_RSTW __AT (0x40101D0C);



// ------------------------------  Field Item: STRIP7_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP7_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D0C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP7_RSTW >> 0) & 0xFFFFFFFF), ((STRIP7_RSTW = (STRIP7_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP7_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP7_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D0C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP7_RSTW >> 0) & 0xFFFFFFFF), ((STRIP7_RSTW = (STRIP7_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP7_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP7_PENDW __AT (0x40101D10);



// -----------------------------  Field Item: STRIP7_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP7_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101D10) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_PENDW >> 0) & 0x3F), ((STRIP7_PENDW = (STRIP7_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP7_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP7_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D10) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP7_PENDW >> 0) & 0xFFFFFFFF), ((STRIP7_PENDW = (STRIP7_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP7_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP7_DSRC __AT (0x40101D14);



// ----------------------------  Field Item: STRIP7_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP7_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D14) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP7_DSRC >> 0) & 0xFFFFFFFF), ((STRIP7_DSRC = (STRIP7_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP7_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP7_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D14) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP7_DSRC >> 0) & 0xFFFFFFFF), ((STRIP7_DSRC = (STRIP7_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP7_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP7_TRANSLEN __AT (0x40101D18);



// --------------------------  Field Item: STRIP7_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP7_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101D18) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_TRANSLEN >> 0) & 0x3FFF), ((STRIP7_TRANSLEN = (STRIP7_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP7_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP7_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D18) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP7_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP7_TRANSLEN = (STRIP7_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP7_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP7_ADVCMD __AT (0x40101D1C);



// -----------------------------  Field Item: STRIP7_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP7_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101D1C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP7_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP7_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP7_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40101D1C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP7_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP7_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP7_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D1C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP7_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP7_ADVCMD = (STRIP7_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP7_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP7_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP7_TH50CTRL0 __AT (0x40101D20);



// --------------------------  Field Item: STRIP7_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP7_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101D20) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_TH50CTRL0 >> 16) & 0xFFF), ((STRIP7_TH50CTRL0 = (STRIP7_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP7_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP7_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101D20) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_TH50CTRL0 >> 0) & 0xFFF), ((STRIP7_TH50CTRL0 = (STRIP7_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP7_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP7_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D20) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP7_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP7_TH50CTRL0 = (STRIP7_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP7_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP7_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP7_TH50CTRL1 __AT (0x40101D24);



// --------------------------  Field Item: STRIP7_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP7_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101D24) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_TH50CTRL1 >> 16) & 0xFFF), ((STRIP7_TH50CTRL1 = (STRIP7_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP7_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP7_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101D24) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_TH50CTRL1 >> 0) & 0xFFF), ((STRIP7_TH50CTRL1 = (STRIP7_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP7_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP7_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D24) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP7_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP7_TH50CTRL1 = (STRIP7_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP7_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP7_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP7_TH50RX __AT (0x40101D28);



// ----------------------------  Field Item: STRIP7_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP7_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101D28) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_TH50RX >> 8) & 0xFF), ((STRIP7_TH50RX = (STRIP7_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP7_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP7_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101D28) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_TH50RX >> 0) & 0xFF), ((STRIP7_TH50RX = (STRIP7_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP7_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP7_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D28) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP7_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP7_TH50RX = (STRIP7_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP7_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP7_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP7_TH50TO __AT (0x40101D2C);



// ----------------------------  Field Item: STRIP7_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP7_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101D2C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_TH50TO >> 0) & 0xFFF), ((STRIP7_TH50TO = (STRIP7_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP7_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP7_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D2C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP7_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP7_TH50TO = (STRIP7_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP7_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP7_AVDPRLCTRL0 __AT (0x40101D30);



// --------------------------  Field Item: STRIP7_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101D30) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP7_AVDPRLCTRL0 = (STRIP7_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP7_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101D30) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP7_AVDPRLCTRL0 = (STRIP7_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP7_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101D30) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP7_AVDPRLCTRL0 = (STRIP7_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP7_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101D30) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP7_AVDPRLCTRL0 = (STRIP7_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP7_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP7_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D30) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP7_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP7_AVDPRLCTRL0 = (STRIP7_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP7_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP7_AVDPRLCTRL1 __AT (0x40101D34);



// --------------------------  Field Item: STRIP7_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101D34) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP7_AVDPRLCTRL1 = (STRIP7_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP7_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101D34) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP7_AVDPRLCTRL1 = (STRIP7_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP7_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP7_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D34) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP7_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP7_AVDPRLCTRL1 = (STRIP7_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP7_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP7_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP7_AVDPRLTO __AT (0x40101D38);



// ----------------------------  Field Item: STRIP7_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP7_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101D38) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP7_AVDPRLTO >> 0) & 0xFFF), ((STRIP7_AVDPRLTO = (STRIP7_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP7_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP7_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D38) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP7_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP7_AVDPRLTO = (STRIP7_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP7_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP7_RECVADDR __AT (0x40101D3C);



// --------------------------  Field Item: STRIP7_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP7_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D3C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP7_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP7_RECVADDR = (STRIP7_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP7_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP7_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D3C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP7_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP7_RECVADDR = (STRIP7_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP7_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP7_RECVCNT __AT (0x40101D40);



// ---------------------------  Field Item: STRIP7_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP7_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101D40) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP7_RECVCNT >> 0) & 0xFF), ((STRIP7_RECVCNT = (STRIP7_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP7_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP7_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D40) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP7_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP7_RECVCNT = (STRIP7_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP7_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP7_ADVSTS __AT (0x40101D44);



// ----------------------------  Field Item: STRIP7_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP7_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101D44) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP7_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP7_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP7_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101D44) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP7_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP7_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP7_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D44) Status Register </i>
//    <loc> ( (unsigned int)((STRIP7_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP7_ADVSTS = (STRIP7_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP7_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP7_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP7_ADVINT __AT (0x40101D48);



// --------------------------  Field Item: STRIP7_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP7_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101D48) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP7_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP7_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP7_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101D48) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP7_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP7_ADVINT = (STRIP7_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP7_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP7  ------------------------------------
// SVD Line: 21326

//  <view> STRIP7
//    <name> STRIP7 </name>
//    <item> SFDITEM_REG__STRIP7_CONTROL </item>
//    <item> SFDITEM_REG__STRIP7_CODE0 </item>
//    <item> SFDITEM_REG__STRIP7_CODE1 </item>
//    <item> SFDITEM_REG__STRIP7_RSTW </item>
//    <item> SFDITEM_REG__STRIP7_PENDW </item>
//    <item> SFDITEM_REG__STRIP7_DSRC </item>
//    <item> SFDITEM_REG__STRIP7_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP7_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP7_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP7_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP7_TH50RX </item>
//    <item> SFDITEM_REG__STRIP7_TH50TO </item>
//    <item> SFDITEM_REG__STRIP7_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP7_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP7_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP7_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP7_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP7_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP7_ADVINT </item>
//  </view>
//  


// --------------------------  Register Item Address: STRIP8_CONTROL  -----------------------------
// SVD Line: 20735

unsigned int STRIP8_CONTROL __AT (0x40101E00);



// ----------------------------  Field Item: STRIP8_CONTROL_REPCY  --------------------------------
// SVD Line: 20740

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_REPCY
//    <name> REPCY </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40101E00) LED STRIP REPEAT CYCLE. Output strip data size is [REPCY * (TRANSLEN +1)] </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_CONTROL >> 16) & 0xFF), ((STRIP8_CONTROL = (STRIP8_CONTROL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP8_CONTROL_FINISHSTS  ------------------------------
// SVD Line: 20746

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_FINISHSTS
//    <name> FINISHSTS </name>
//    <rw> 
//    <i> [Bit 8] RW (@ 0x40101E00) \nLED STRIP FINISH STATUS: 1=Data transfer is finished; 0=interface is idle\n0 : Idle = LED STRIP interface is idle\n1 : Finished = Data transfer is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_CONTROL ) </loc>
//      <o.8..8> FINISHSTS
//        <0=> 0: Idle = LED STRIP interface is idle
//        <1=> 1: Finished = Data transfer is finished
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP8_CONTROL_FINISHINTSTS  ----------------------------
// SVD Line: 20764

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_FINISHINTSTS
//    <name> FINISHINTSTS </name>
//    <rw> 
//    <i> [Bit 7] RW (@ 0x40101E00) \nLED STRIP BUSY INTERRUPT STATUS. W1C clears to 0. 1=Busy flag from 1 to 0\n0 : NoEffect = No effect\n1 : SetOnBusyToIdle = Set when Busy flag from 1 to 0 </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_CONTROL ) </loc>
//      <o.7..7> FINISHINTSTS
//        <0=> 0: NoEffect = No effect
//        <1=> 1: SetOnBusyToIdle = Set when Busy flag from 1 to 0
//    </combo>
//  </item>
//  


// -------------------------  Field Item: STRIP8_CONTROL_FINISHINTEN  -----------------------------
// SVD Line: 20782

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_FINISHINTEN
//    <name> FINISHINTEN </name>
//    <rw> 
//    <i> [Bit 6] RW (@ 0x40101E00) \nLED STRIP FINISH INTERRUPT ENABLE\n0 : Disable = Disable Interrupt\n1 : Enable = Enable Interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_CONTROL ) </loc>
//      <o.6..6> FINISHINTEN
//        <0=> 0: Disable = Disable Interrupt
//        <1=> 1: Enable = Enable Interrupt
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP8_CONTROL_MDSEL  --------------------------------
// SVD Line: 20800

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bits 5..4] RW (@ 0x40101E00) \nLED MODE SELECT\n0 : OneShot = One shot Mode\n1 : Repeat = Repeat Mode\n2 : AlwaysRun = Always Run Mode\n3 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_CONTROL ) </loc>
//      <o.5..4> MDSEL
//        <0=> 0: OneShot = One shot Mode
//        <1=> 1: Repeat = Repeat Mode
//        <2=> 2: AlwaysRun = Always Run Mode
//        <3=> 3: 
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP8_CONTROL_PENDEN  -------------------------------
// SVD Line: 20823

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_PENDEN
//    <name> PENDEN </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40101E00) \nLED STRIP PENDING CODE ENABLE\n0 : Disable = Disable Pending Code\n1 : Enable = Enable Pending Code </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_CONTROL ) </loc>
//      <o.3..3> PENDEN
//        <0=> 0: Disable = Disable Pending Code
//        <1=> 1: Enable = Enable Pending Code
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: STRIP8_CONTROL_STOP  --------------------------------
// SVD Line: 20841

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40101E00) \nLED STRIP STOP. 1=stop after this transmit cycle is complete\n0 : NoEffect = No effect\n1 : Stop = Stop after this cycle </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_CONTROL ) </loc>
//      <o.2..2> STOP
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Stop = Stop after this cycle
//    </combo>
//  </item>
//  


// ----------------------------  Field Item: STRIP8_CONTROL_START  --------------------------------
// SVD Line: 20859

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101E00) \nLED STRIP START. 1=Start data buffer transmit. W1C clears\n0 : NoEffect = No effect\n1 : Start = Start LED STRIP data buffer transmit </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_CONTROL ) </loc>
//      <o.1..1> START
//        <0=> 0: NoEffect = No effect
//        <1=> 1: Start = Start LED STRIP data buffer transmit
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: STRIP8_CONTROL_EN  ---------------------------------
// SVD Line: 20877

//  <item> SFDITEM_FIELD__STRIP8_CONTROL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101E00) \nLED STRIP ENABLE\n0 : Disable = Disable LED STRIP Module\n1 : Enable = Enable LED STRIP Module </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_CONTROL ) </loc>
//      <o.0..0> EN
//        <0=> 0: Disable = Disable LED STRIP Module
//        <1=> 1: Enable = Enable LED STRIP Module
//    </combo>
//  </item>
//  


// -----------------------------  Register RTree: STRIP8_CONTROL  ---------------------------------
// SVD Line: 20735

//  <rtree> SFDITEM_REG__STRIP8_CONTROL
//    <name> CONTROL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E00) LED STRIP CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((STRIP8_CONTROL >> 0) & 0xFFFFFFFF), ((STRIP8_CONTROL = (STRIP8_CONTROL & ~(0xFF01FFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF01FF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_REPCY </item>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_FINISHSTS </item>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_FINISHINTSTS </item>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_FINISHINTEN </item>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_MDSEL </item>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_PENDEN </item>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_STOP </item>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_START </item>
//    <item> SFDITEM_FIELD__STRIP8_CONTROL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP8_CODE0  ------------------------------
// SVD Line: 20897

unsigned int STRIP8_CODE0 __AT (0x40101E04);



// ------------------------------  Field Item: STRIP8_CODE0_ZCHW  ---------------------------------
// SVD Line: 20902

//  <item> SFDITEM_FIELD__STRIP8_CODE0_ZCHW
//    <name> ZCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101E04) LED STRIP 0 CODE HIGH WIDTH. Output 0 high time = (ZCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_CODE0 >> 8) & 0x3F), ((STRIP8_CODE0 = (STRIP8_CODE0 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP8_CODE0_ZCLW  ---------------------------------
// SVD Line: 20908

//  <item> SFDITEM_FIELD__STRIP8_CODE0_ZCLW
//    <name> ZCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101E04) LED STRIP 0 CODE LOW WIDTH. Output 0 low time = (ZCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_CODE0 >> 0) & 0x3F), ((STRIP8_CODE0 = (STRIP8_CODE0 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP8_CODE0  ----------------------------------
// SVD Line: 20897

//  <rtree> SFDITEM_REG__STRIP8_CODE0
//    <name> CODE0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E04) LED STRIP 0 CODE </i>
//    <loc> ( (unsigned int)((STRIP8_CODE0 >> 0) & 0xFFFFFFFF), ((STRIP8_CODE0 = (STRIP8_CODE0 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_CODE0_ZCHW </item>
//    <item> SFDITEM_FIELD__STRIP8_CODE0_ZCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP8_CODE1  ------------------------------
// SVD Line: 20916

unsigned int STRIP8_CODE1 __AT (0x40101E08);



// ------------------------------  Field Item: STRIP8_CODE1_OCHW  ---------------------------------
// SVD Line: 20921

//  <item> SFDITEM_FIELD__STRIP8_CODE1_OCHW
//    <name> OCHW </name>
//    <rw> 
//    <i> [Bits 13..8] RW (@ 0x40101E08) LED STRIP 1 CODE HIGH WIDTH. Output 1 high time = (OCHW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_CODE1 >> 8) & 0x3F), ((STRIP8_CODE1 = (STRIP8_CODE1 & ~(0x3FUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: STRIP8_CODE1_OCLW  ---------------------------------
// SVD Line: 20927

//  <item> SFDITEM_FIELD__STRIP8_CODE1_OCLW
//    <name> OCLW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101E08) LED STRIP 1 CODE LOW WIDTH. Output 1 low time = (OCLW + 2) * period of clk_fnd (40ns) </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_CODE1 >> 0) & 0x3F), ((STRIP8_CODE1 = (STRIP8_CODE1 & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP8_CODE1  ----------------------------------
// SVD Line: 20916

//  <rtree> SFDITEM_REG__STRIP8_CODE1
//    <name> CODE1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E08) LED STRIP 1 CODE </i>
//    <loc> ( (unsigned int)((STRIP8_CODE1 >> 0) & 0xFFFFFFFF), ((STRIP8_CODE1 = (STRIP8_CODE1 & ~(0x3F3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_CODE1_OCHW </item>
//    <item> SFDITEM_FIELD__STRIP8_CODE1_OCLW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP8_RSTW  -------------------------------
// SVD Line: 20935

unsigned int STRIP8_RSTW __AT (0x40101E0C);



// ------------------------------  Field Item: STRIP8_RSTW_RSTW  ----------------------------------
// SVD Line: 20940

//  <item> SFDITEM_FIELD__STRIP8_RSTW_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E0C) LED strip reset time = (RSTW + 1) * period of clk_fnd (40ns).  RSTLW [5:0] is treated as 1_11111b internally. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP8_RSTW >> 0) & 0xFFFFFFFF), ((STRIP8_RSTW = (STRIP8_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP8_RSTW  ----------------------------------
// SVD Line: 20935

//  <rtree> SFDITEM_REG__STRIP8_RSTW
//    <name> RSTW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E0C) LED STRIP RESET WIDTH REGISTER </i>
//    <loc> ( (unsigned int)((STRIP8_RSTW >> 0) & 0xFFFFFFFF), ((STRIP8_RSTW = (STRIP8_RSTW & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_RSTW_RSTW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP8_PENDW  ------------------------------
// SVD Line: 20951

unsigned int STRIP8_PENDW __AT (0x40101E10);



// -----------------------------  Field Item: STRIP8_PENDW_PENDW  ---------------------------------
// SVD Line: 20956

//  <item> SFDITEM_FIELD__STRIP8_PENDW_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 5..0] RW (@ 0x40101E10) These bits control pending time before the next LED strip data is transferred. </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_PENDW >> 0) & 0x3F), ((STRIP8_PENDW = (STRIP8_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP8_PENDW  ----------------------------------
// SVD Line: 20951

//  <rtree> SFDITEM_REG__STRIP8_PENDW
//    <name> PENDW </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E10) Pending Width Control Register </i>
//    <loc> ( (unsigned int)((STRIP8_PENDW >> 0) & 0xFFFFFFFF), ((STRIP8_PENDW = (STRIP8_PENDW & ~(0x3FUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3F) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_PENDW_PENDW </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: STRIP8_DSRC  -------------------------------
// SVD Line: 20964

unsigned int STRIP8_DSRC __AT (0x40101E14);



// ----------------------------  Field Item: STRIP8_DSRC_TRANSADD  --------------------------------
// SVD Line: 20969

//  <item> SFDITEM_FIELD__STRIP8_DSRC_TRANSADD
//    <name> TRANSADD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E14) Before starting an LED STRIP Transmit, this field must be initialized to contain the Base Address of the buffer in SRAM. </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP8_DSRC >> 0) & 0xFFFFFFFF), ((STRIP8_DSRC = (STRIP8_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: STRIP8_DSRC  ----------------------------------
// SVD Line: 20964

//  <rtree> SFDITEM_REG__STRIP8_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E14) LED STRIP Data Source Address </i>
//    <loc> ( (unsigned int)((STRIP8_DSRC >> 0) & 0xFFFFFFFF), ((STRIP8_DSRC = (STRIP8_DSRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_DSRC_TRANSADD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP8_TRANSLEN  -----------------------------
// SVD Line: 20977

unsigned int STRIP8_TRANSLEN __AT (0x40101E18);



// --------------------------  Field Item: STRIP8_TRANSLEN_TRANSLEN  ------------------------------
// SVD Line: 20982

//  <item> SFDITEM_FIELD__STRIP8_TRANSLEN_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 13..0] RW (@ 0x40101E18) Specifies how many bytes are to be transmitted from the Transmit Buffer memory. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_TRANSLEN >> 0) & 0x3FFF), ((STRIP8_TRANSLEN = (STRIP8_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP8_TRANSLEN  --------------------------------
// SVD Line: 20977

//  <rtree> SFDITEM_REG__STRIP8_TRANSLEN
//    <name> TRANSLEN </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E18) Transmit Length Register </i>
//    <loc> ( (unsigned int)((STRIP8_TRANSLEN >> 0) & 0xFFFFFFFF), ((STRIP8_TRANSLEN = (STRIP8_TRANSLEN & ~(0x3FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_TRANSLEN_TRANSLEN </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP8_ADVCMD  ------------------------------
// SVD Line: 20990

unsigned int STRIP8_ADVCMD __AT (0x40101E1C);



// -----------------------------  Field Item: STRIP8_ADVCMD_ADVEN  --------------------------------
// SVD Line: 20995

//  <item> SFDITEM_FIELD__STRIP8_ADVCMD_ADVEN
//    <name> ADVEN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101E1C) Enable advanced command execution </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP8_ADVCMD ) </loc>
//      <o.0..0> ADVEN
//    </check>
//  </item>
//  


// ----------------------------  Field Item: STRIP8_ADVCMD_ADVCMD  --------------------------------
// SVD Line: 21001

//  <item> SFDITEM_FIELD__STRIP8_ADVCMD_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 3..1] RW (@ 0x40101E1C) \nAdvanced command selector.  0x00: AVD_TH50  0x01: AVD_TH20  0x02: AVD_SLEEP  0x03: AVD_WAKEUP  0x04: AVD_SET_ID  0x05: AVD_CLEAN_ID  0x06: AVD_CHECK_ID  0x07: AVD_SPECIFY_ID\n0 : AVD_TH50 = AVD_TH50\n1 : AVD_TH20 = AVD_TH20\n2 : AVD_SLEEP = AVD_SLEEP\n3 : AVD_WAKEUP = AVD_WAKEUP\n4 : AVD_SET_ID = AVD_SET_ID\n5 : AVD_CLEAN_ID = AVD_CLEAN_ID\n6 : AVD_CHECK_ID = AVD_CHECK_ID\n7 : AVD_SPECIFY_ID = AVD_SPECIFY_ID </i>
//    <combo> 
//      <loc> ( (unsigned int) STRIP8_ADVCMD ) </loc>
//      <o.3..1> ADVCMD
//        <0=> 0: AVD_TH50 = AVD_TH50
//        <1=> 1: AVD_TH20 = AVD_TH20
//        <2=> 2: AVD_SLEEP = AVD_SLEEP
//        <3=> 3: AVD_WAKEUP = AVD_WAKEUP
//        <4=> 4: AVD_SET_ID = AVD_SET_ID
//        <5=> 5: AVD_CLEAN_ID = AVD_CLEAN_ID
//        <6=> 6: AVD_CHECK_ID = AVD_CHECK_ID
//        <7=> 7: AVD_SPECIFY_ID = AVD_SPECIFY_ID
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: STRIP8_ADVCMD  ---------------------------------
// SVD Line: 20990

//  <rtree> SFDITEM_REG__STRIP8_ADVCMD
//    <name> ADVCMD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E1C) Advanced Command Register </i>
//    <loc> ( (unsigned int)((STRIP8_ADVCMD >> 0) & 0xFFFFFFFF), ((STRIP8_ADVCMD = (STRIP8_ADVCMD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_ADVCMD_ADVEN </item>
//    <item> SFDITEM_FIELD__STRIP8_ADVCMD_ADVCMD </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP8_TH50CTRL0  ----------------------------
// SVD Line: 21061

unsigned int STRIP8_TH50CTRL0 __AT (0x40101E20);



// --------------------------  Field Item: STRIP8_TH50CTRL0_TH50L1T  ------------------------------
// SVD Line: 21066

//  <item> SFDITEM_FIELD__STRIP8_TH50CTRL0_TH50L1T
//    <name> TH50L1T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101E20) Indicate the 1st low pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_TH50CTRL0 >> 16) & 0xFFF), ((STRIP8_TH50CTRL0 = (STRIP8_TH50CTRL0 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP8_TH50CTRL0_TH50H1T  ------------------------------
// SVD Line: 21072

//  <item> SFDITEM_FIELD__STRIP8_TH50CTRL0_TH50H1T
//    <name> TH50H1T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101E20) Indicate the 1st high pulse width (number of count base on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_TH50CTRL0 >> 0) & 0xFFF), ((STRIP8_TH50CTRL0 = (STRIP8_TH50CTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP8_TH50CTRL0  --------------------------------
// SVD Line: 21061

//  <rtree> SFDITEM_REG__STRIP8_TH50CTRL0
//    <name> TH50CTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E20) ADV_TH50 Command Timing Register </i>
//    <loc> ( (unsigned int)((STRIP8_TH50CTRL0 >> 0) & 0xFFFFFFFF), ((STRIP8_TH50CTRL0 = (STRIP8_TH50CTRL0 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_TH50CTRL0_TH50L1T </item>
//    <item> SFDITEM_FIELD__STRIP8_TH50CTRL0_TH50H1T </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP8_TH50CTRL1  ----------------------------
// SVD Line: 21080

unsigned int STRIP8_TH50CTRL1 __AT (0x40101E24);



// --------------------------  Field Item: STRIP8_TH50CTRL1_TH50L2T  ------------------------------
// SVD Line: 21085

//  <item> SFDITEM_FIELD__STRIP8_TH50CTRL1_TH50L2T
//    <name> TH50L2T </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101E24) Indicate the 2nd low pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_TH50CTRL1 >> 16) & 0xFFF), ((STRIP8_TH50CTRL1 = (STRIP8_TH50CTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP8_TH50CTRL1_TH50H2T  ------------------------------
// SVD Line: 21093

//  <item> SFDITEM_FIELD__STRIP8_TH50CTRL1_TH50H2T
//    <name> TH50H2T </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101E24) Indicate the 2nd high pulse width (number of count based on 24MHz) of ADV_TH50 command. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_TH50CTRL1 >> 0) & 0xFFF), ((STRIP8_TH50CTRL1 = (STRIP8_TH50CTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register RTree: STRIP8_TH50CTRL1  --------------------------------
// SVD Line: 21080

//  <rtree> SFDITEM_REG__STRIP8_TH50CTRL1
//    <name> TH50CTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E24) ADV_TH50 2nd Pulse Timing Register </i>
//    <loc> ( (unsigned int)((STRIP8_TH50CTRL1 >> 0) & 0xFFFFFFFF), ((STRIP8_TH50CTRL1 = (STRIP8_TH50CTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_TH50CTRL1_TH50L2T </item>
//    <item> SFDITEM_FIELD__STRIP8_TH50CTRL1_TH50H2T </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP8_TH50RX  ------------------------------
// SVD Line: 21103

unsigned int STRIP8_TH50RX __AT (0x40101E28);



// ----------------------------  Field Item: STRIP8_TH50RX_RX_TH50  -------------------------------
// SVD Line: 21108

//  <item> SFDITEM_FIELD__STRIP8_TH50RX_RX_TH50
//    <name> RX_TH50 </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40101E28) Received TH50 data (bits 15:8). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_TH50RX >> 8) & 0xFF), ((STRIP8_TH50RX = (STRIP8_TH50RX & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP8_TH50RX_RX_TH50_PRE  -----------------------------
// SVD Line: 21114

//  <item> SFDITEM_FIELD__STRIP8_TH50RX_RX_TH50_PRE
//    <name> RX_TH50_PRE </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101E28) TH50 pre-received data (bits 7:0). </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_TH50RX >> 0) & 0xFF), ((STRIP8_TH50RX = (STRIP8_TH50RX & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP8_TH50RX  ---------------------------------
// SVD Line: 21103

//  <rtree> SFDITEM_REG__STRIP8_TH50RX
//    <name> TH50RX </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E28) TH50 Receive Register </i>
//    <loc> ( (unsigned int)((STRIP8_TH50RX >> 0) & 0xFFFFFFFF), ((STRIP8_TH50RX = (STRIP8_TH50RX & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_TH50RX_RX_TH50 </item>
//    <item> SFDITEM_FIELD__STRIP8_TH50RX_RX_TH50_PRE </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP8_TH50TO  ------------------------------
// SVD Line: 21122

unsigned int STRIP8_TH50TO __AT (0x40101E2C);



// ----------------------------  Field Item: STRIP8_TH50TO_TH50TO  --------------------------------
// SVD Line: 21127

//  <item> SFDITEM_FIELD__STRIP8_TH50TO_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101E2C) Indicate the timeout pulse width (number of count based on 24MHz) of ADV_TH50 command.  Exit ADV_TH50 mode when there is no response pulse within the time of TH50TO. </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_TH50TO >> 0) & 0xFFF), ((STRIP8_TH50TO = (STRIP8_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Register RTree: STRIP8_TH50TO  ---------------------------------
// SVD Line: 21122

//  <rtree> SFDITEM_REG__STRIP8_TH50TO
//    <name> TH50TO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E2C) ADV_TH50 Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP8_TH50TO >> 0) & 0xFFFFFFFF), ((STRIP8_TH50TO = (STRIP8_TH50TO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_TH50TO_TH50TO </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP8_AVDPRLCTRL0  ---------------------------
// SVD Line: 21138

unsigned int STRIP8_AVDPRLCTRL0 __AT (0x40101E30);



// --------------------------  Field Item: STRIP8_AVDPRLCTRL0_ADVID  ------------------------------
// SVD Line: 21143

//  <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL0_ADVID
//    <name> ADVID </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40101E30) Dynamic ID number for ARGB gen2 parallel mode </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_AVDPRLCTRL0 >> 28) & 0xF), ((STRIP8_AVDPRLCTRL0 = (STRIP8_AVDPRLCTRL0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP8_AVDPRLCTRL0_ADVWKHT  -----------------------------
// SVD Line: 21149

//  <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL0_ADVWKHT
//    <name> ADVWKHT </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40101E30) High pulse width (counts, 24MHz) of ADV_WAKUP command </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_AVDPRLCTRL0 >> 20) & 0xFF), ((STRIP8_AVDPRLCTRL0 = (STRIP8_AVDPRLCTRL0 & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------  Field Item: STRIP8_AVDPRLCTRL0_ADVWKLT  -----------------------------
// SVD Line: 21155

//  <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL0_ADVWKLT
//    <name> ADVWKLT </name>
//    <rw> 
//    <i> [Bits 19..12] RW (@ 0x40101E30) Low pulse width (counts, 24MHz/1024) of ADV_WAKUP command, default ~1ms </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_AVDPRLCTRL0 >> 12) & 0xFF), ((STRIP8_AVDPRLCTRL0 = (STRIP8_AVDPRLCTRL0 & ~(0xFFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP8_AVDPRLCTRL0_TH20HT  -----------------------------
// SVD Line: 21161

//  <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL0_TH20HT
//    <name> TH20HT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101E30) High pulse width (counts, 24MHz) of ADV_TH20 command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_AVDPRLCTRL0 >> 0) & 0xFFF), ((STRIP8_AVDPRLCTRL0 = (STRIP8_AVDPRLCTRL0 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP8_AVDPRLCTRL0  -------------------------------
// SVD Line: 21138

//  <rtree> SFDITEM_REG__STRIP8_AVDPRLCTRL0
//    <name> AVDPRLCTRL0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E30) ARGB Gen2 Parallel Control Register 0 </i>
//    <loc> ( (unsigned int)((STRIP8_AVDPRLCTRL0 >> 0) & 0xFFFFFFFF), ((STRIP8_AVDPRLCTRL0 = (STRIP8_AVDPRLCTRL0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL0_ADVID </item>
//    <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL0_ADVWKHT </item>
//    <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL0_ADVWKLT </item>
//    <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL0_TH20HT </item>
//  </rtree>
//  


// ------------------------  Register Item Address: STRIP8_AVDPRLCTRL1  ---------------------------
// SVD Line: 21169

unsigned int STRIP8_AVDPRLCTRL1 __AT (0x40101E34);



// --------------------------  Field Item: STRIP8_AVDPRLCTRL1_PRLLT  ------------------------------
// SVD Line: 21174

//  <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL1_PRLLT
//    <name> PRLLT </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40101E34) Low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_AVDPRLCTRL1 >> 16) & 0xFFF), ((STRIP8_AVDPRLCTRL1 = (STRIP8_AVDPRLCTRL1 & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// --------------------------  Field Item: STRIP8_AVDPRLCTRL1_PRLHT  ------------------------------
// SVD Line: 21180

//  <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL1_PRLHT
//    <name> PRLHT </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101E34) High pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_AVDPRLCTRL1 >> 0) & 0xFFF), ((STRIP8_AVDPRLCTRL1 = (STRIP8_AVDPRLCTRL1 & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register RTree: STRIP8_AVDPRLCTRL1  -------------------------------
// SVD Line: 21169

//  <rtree> SFDITEM_REG__STRIP8_AVDPRLCTRL1
//    <name> AVDPRLCTRL1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E34) ARGB Gen2 Parallel Control Register 1 </i>
//    <loc> ( (unsigned int)((STRIP8_AVDPRLCTRL1 >> 0) & 0xFFFFFFFF), ((STRIP8_AVDPRLCTRL1 = (STRIP8_AVDPRLCTRL1 & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL1_PRLLT </item>
//    <item> SFDITEM_FIELD__STRIP8_AVDPRLCTRL1_PRLHT </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP8_AVDPRLTO  -----------------------------
// SVD Line: 21188

unsigned int STRIP8_AVDPRLTO __AT (0x40101E38);



// ----------------------------  Field Item: STRIP8_AVDPRLTO_PRLTO  -------------------------------
// SVD Line: 21193

//  <item> SFDITEM_FIELD__STRIP8_AVDPRLTO_PRLTO
//    <name> PRLTO </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40101E38) Timeout low pulse width (counts, 24MHz) of ADV_SET_ID command </i>
//    <edit> 
//      <loc> ( (unsigned short)((STRIP8_AVDPRLTO >> 0) & 0xFFF), ((STRIP8_AVDPRLTO = (STRIP8_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP8_AVDPRLTO  --------------------------------
// SVD Line: 21188

//  <rtree> SFDITEM_REG__STRIP8_AVDPRLTO
//    <name> AVDPRLTO </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E38) ADV_SET_ID Timeout Register </i>
//    <loc> ( (unsigned int)((STRIP8_AVDPRLTO >> 0) & 0xFFFFFFFF), ((STRIP8_AVDPRLTO = (STRIP8_AVDPRLTO & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_AVDPRLTO_PRLTO </item>
//  </rtree>
//  


// -------------------------  Register Item Address: STRIP8_RECVADDR  -----------------------------
// SVD Line: 21201

unsigned int STRIP8_RECVADDR __AT (0x40101E3C);



// --------------------------  Field Item: STRIP8_RECVADDR_RECVADDR  ------------------------------
// SVD Line: 21206

//  <item> SFDITEM_FIELD__STRIP8_RECVADDR_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E3C) SRAM address for receiving Gen2 ARGB data </i>
//    <edit> 
//      <loc> ( (unsigned int)((STRIP8_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP8_RECVADDR = (STRIP8_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP8_RECVADDR  --------------------------------
// SVD Line: 21201

//  <rtree> SFDITEM_REG__STRIP8_RECVADDR
//    <name> RECVADDR </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E3C) SRAM Address for Receiving Gen2 ARGB Data </i>
//    <loc> ( (unsigned int)((STRIP8_RECVADDR >> 0) & 0xFFFFFFFF), ((STRIP8_RECVADDR = (STRIP8_RECVADDR & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_RECVADDR_RECVADDR </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP8_RECVCNT  -----------------------------
// SVD Line: 21214

unsigned int STRIP8_RECVCNT __AT (0x40101E40);



// ---------------------------  Field Item: STRIP8_RECVCNT_RECVCNT  -------------------------------
// SVD Line: 21219

//  <item> SFDITEM_FIELD__STRIP8_RECVCNT_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40101E40) Receive data count </i>
//    <edit> 
//      <loc> ( (unsigned char)((STRIP8_RECVCNT >> 0) & 0xFF), ((STRIP8_RECVCNT = (STRIP8_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: STRIP8_RECVCNT  ---------------------------------
// SVD Line: 21214

//  <rtree> SFDITEM_REG__STRIP8_RECVCNT
//    <name> RECVCNT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E40) Receive Data Count Register </i>
//    <loc> ( (unsigned int)((STRIP8_RECVCNT >> 0) & 0xFFFFFFFF), ((STRIP8_RECVCNT = (STRIP8_RECVCNT & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_RECVCNT_RECVCNT </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP8_ADVSTS  ------------------------------
// SVD Line: 21227

unsigned int STRIP8_ADVSTS __AT (0x40101E44);



// ----------------------------  Field Item: STRIP8_ADVSTS_ID_ACK  --------------------------------
// SVD Line: 21232

//  <item> SFDITEM_FIELD__STRIP8_ADVSTS_ID_ACK
//    <name> ID_ACK </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40101E44) ID Acknowledge (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP8_ADVSTS ) </loc>
//      <o.1..1> ID_ACK
//    </check>
//  </item>
//  


// -----------------------------  Field Item: STRIP8_ADVSTS_ADVTO  --------------------------------
// SVD Line: 21237

//  <item> SFDITEM_FIELD__STRIP8_ADVSTS_ADVTO
//    <name> ADVTO </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101E44) Timeout Flag (W1C) </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP8_ADVSTS ) </loc>
//      <o.0..0> ADVTO
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP8_ADVSTS  ---------------------------------
// SVD Line: 21227

//  <rtree> SFDITEM_REG__STRIP8_ADVSTS
//    <name> ADVSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E44) Status Register </i>
//    <loc> ( (unsigned int)((STRIP8_ADVSTS >> 0) & 0xFFFFFFFF), ((STRIP8_ADVSTS = (STRIP8_ADVSTS & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_ADVSTS_ID_ACK </item>
//    <item> SFDITEM_FIELD__STRIP8_ADVSTS_ADVTO </item>
//  </rtree>
//  


// --------------------------  Register Item Address: STRIP8_ADVINT  ------------------------------
// SVD Line: 21244

unsigned int STRIP8_ADVINT __AT (0x40101E48);



// --------------------------  Field Item: STRIP8_ADVINT_ADVTOINT_EN  -----------------------------
// SVD Line: 21249

//  <item> SFDITEM_FIELD__STRIP8_ADVINT_ADVTOINT_EN
//    <name> ADVTOINT_EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40101E48) ADV Timeout Interrupt Enable </i>
//    <check> 
//      <loc> ( (unsigned int) STRIP8_ADVINT ) </loc>
//      <o.0..0> ADVTOINT_EN
//    </check>
//  </item>
//  


// ------------------------------  Register RTree: STRIP8_ADVINT  ---------------------------------
// SVD Line: 21244

//  <rtree> SFDITEM_REG__STRIP8_ADVINT
//    <name> ADVINT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40101E48) ADV Interrupt Enable Register </i>
//    <loc> ( (unsigned int)((STRIP8_ADVINT >> 0) & 0xFFFFFFFF), ((STRIP8_ADVINT = (STRIP8_ADVINT & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__STRIP8_ADVINT_ADVTOINT_EN </item>
//  </rtree>
//  


// ---------------------------------  Peripheral View: STRIP8  ------------------------------------
// SVD Line: 21337

//  <view> STRIP8
//    <name> STRIP8 </name>
//    <item> SFDITEM_REG__STRIP8_CONTROL </item>
//    <item> SFDITEM_REG__STRIP8_CODE0 </item>
//    <item> SFDITEM_REG__STRIP8_CODE1 </item>
//    <item> SFDITEM_REG__STRIP8_RSTW </item>
//    <item> SFDITEM_REG__STRIP8_PENDW </item>
//    <item> SFDITEM_REG__STRIP8_DSRC </item>
//    <item> SFDITEM_REG__STRIP8_TRANSLEN </item>
//    <item> SFDITEM_REG__STRIP8_ADVCMD </item>
//    <item> SFDITEM_REG__STRIP8_TH50CTRL0 </item>
//    <item> SFDITEM_REG__STRIP8_TH50CTRL1 </item>
//    <item> SFDITEM_REG__STRIP8_TH50RX </item>
//    <item> SFDITEM_REG__STRIP8_TH50TO </item>
//    <item> SFDITEM_REG__STRIP8_AVDPRLCTRL0 </item>
//    <item> SFDITEM_REG__STRIP8_AVDPRLCTRL1 </item>
//    <item> SFDITEM_REG__STRIP8_AVDPRLTO </item>
//    <item> SFDITEM_REG__STRIP8_RECVADDR </item>
//    <item> SFDITEM_REG__STRIP8_RECVCNT </item>
//    <item> SFDITEM_REG__STRIP8_ADVSTS </item>
//    <item> SFDITEM_REG__STRIP8_ADVINT </item>
//  </view>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR0  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR0 __AT (0x40110000);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR0_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110000) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR0_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110000) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR0_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110000) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR0_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110000) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR0_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110000) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR0_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110000) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR0_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110000) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR0_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110000) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR0_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110000) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR0_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110000) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR0_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110000) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR0_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110000) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR0_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110000) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR0_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110000) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR0_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110000) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR0 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR0  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR0
//    <name> [0] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110000) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR0 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR0 = (GPIO_GCR_GCR_GCR0 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR0_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR1  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR1 __AT (0x40110004);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR1_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110004) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR1_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110004) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR1_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110004) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR1_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110004) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR1_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110004) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR1_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110004) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR1_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110004) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR1_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110004) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR1_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110004) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR1_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110004) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR1_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110004) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR1_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110004) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR1_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110004) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR1_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110004) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR1_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110004) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR1 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR1  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR1
//    <name> [1] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110004) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR1 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR1 = (GPIO_GCR_GCR_GCR1 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR1_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR2  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR2 __AT (0x40110008);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR2_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110008) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR2_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110008) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR2_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110008) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR2_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110008) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR2_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110008) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR2_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110008) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR2_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110008) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR2_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110008) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR2_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110008) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR2_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110008) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR2_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110008) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR2_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110008) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR2_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110008) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR2_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110008) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR2_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110008) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR2 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR2  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR2
//    <name> [2] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110008) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR2 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR2 = (GPIO_GCR_GCR_GCR2 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR2_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR3  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR3 __AT (0x4011000C);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR3_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011000C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR3_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011000C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR3_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011000C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR3_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011000C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR3_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011000C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR3_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011000C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR3_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011000C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR3_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011000C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR3_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011000C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR3_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011000C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR3_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011000C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR3_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011000C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR3_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011000C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR3_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011000C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR3_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011000C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR3 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR3  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR3
//    <name> [3] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011000C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR3 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR3 = (GPIO_GCR_GCR_GCR3 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR3_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR4  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR4 __AT (0x40110010);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR4_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110010) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR4_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110010) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR4_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110010) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR4_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110010) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR4_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110010) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR4_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110010) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR4_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110010) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR4_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110010) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR4_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110010) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR4_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110010) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR4_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110010) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR4_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110010) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR4_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110010) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR4_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110010) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR4_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110010) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR4 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR4  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR4
//    <name> [4] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110010) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR4 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR4 = (GPIO_GCR_GCR_GCR4 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR4_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR5  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR5 __AT (0x40110014);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR5_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110014) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR5_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110014) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR5_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110014) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR5_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110014) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR5_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110014) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR5_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110014) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR5_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110014) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR5_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110014) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR5_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110014) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR5_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110014) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR5_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110014) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR5_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110014) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR5_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110014) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR5_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110014) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR5_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110014) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR5 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR5  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR5
//    <name> [5] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110014) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR5 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR5 = (GPIO_GCR_GCR_GCR5 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR5_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR6  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR6 __AT (0x40110018);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR6_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110018) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR6_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110018) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR6_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110018) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR6_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110018) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR6_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110018) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR6_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110018) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR6_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110018) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR6_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110018) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR6_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110018) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR6_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110018) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR6_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110018) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR6_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110018) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR6_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110018) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR6_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110018) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR6_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110018) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR6 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR6  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR6
//    <name> [6] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110018) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR6 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR6 = (GPIO_GCR_GCR_GCR6 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR6_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR7  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR7 __AT (0x4011001C);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR7_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011001C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR7_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011001C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR7_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011001C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR7_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011001C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR7_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011001C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR7_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011001C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR7_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011001C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR7_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011001C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR7_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011001C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR7_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011001C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR7_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011001C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR7_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011001C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR7_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011001C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR7_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011001C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR7_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011001C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR7 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR7  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR7
//    <name> [7] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011001C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR7 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR7 = (GPIO_GCR_GCR_GCR7 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR7_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR8  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR8 __AT (0x40110020);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR8_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110020) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR8_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110020) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR8_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110020) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR8_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110020) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR8_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110020) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR8_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110020) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR8_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110020) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR8_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110020) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR8_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110020) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR8_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110020) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR8_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110020) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR8_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110020) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR8_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110020) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR8_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110020) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR8_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110020) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR8 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR8  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR8
//    <name> [8] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110020) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR8 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR8 = (GPIO_GCR_GCR_GCR8 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR8_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR9  -------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR9 __AT (0x40110024);



// ----------------------------  Field Item: GPIO_GCR_GCR_GCR9_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110024) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR9_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110024) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR9_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110024) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR9_PINSTS  ------------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110024) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR9_MFCTRL  ------------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110024) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR9_OUTDRV  ------------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110024) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR9_SLEWRATE  -----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110024) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR9_PULLDWEN  -----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110024) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR9_PULLUPEN  -----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110024) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR9_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110024) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR9_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110024) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR9_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110024) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR9_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110024) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// ---------------------------  Field Item: GPIO_GCR_GCR_GCR9_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110024) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR9_INTSTS  ------------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110024) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR9 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------  Register Array RTree: GPIO_GCR_GCR_GCR9  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR9
//    <name> [9] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110024) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR9 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR9 = (GPIO_GCR_GCR_GCR9 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR9_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR10  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR10 __AT (0x40110028);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR10_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110028) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR10_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110028) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR10_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110028) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR10_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110028) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR10_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110028) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR10_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110028) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR10_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110028) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR10_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110028) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR10_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110028) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR10_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110028) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR10_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110028) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR10_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110028) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR10_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110028) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR10_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110028) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR10_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110028) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR10 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR10  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR10
//    <name> [10] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110028) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR10 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR10 = (GPIO_GCR_GCR_GCR10 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR10_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR11  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR11 __AT (0x4011002C);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR11_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011002C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR11_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011002C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR11_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011002C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR11_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011002C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR11_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011002C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR11_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011002C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR11_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011002C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR11_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011002C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR11_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011002C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR11_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011002C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR11_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011002C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR11_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011002C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR11_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011002C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR11_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011002C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR11_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011002C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR11 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR11  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR11
//    <name> [11] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011002C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR11 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR11 = (GPIO_GCR_GCR_GCR11 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR11_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR12  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR12 __AT (0x40110030);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR12_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110030) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR12_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110030) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR12_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110030) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR12_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110030) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR12_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110030) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR12_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110030) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR12_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110030) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR12_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110030) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR12_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110030) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR12_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110030) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR12_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110030) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR12_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110030) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR12_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110030) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR12_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110030) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR12_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110030) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR12 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR12  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR12
//    <name> [12] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110030) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR12 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR12 = (GPIO_GCR_GCR_GCR12 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR12_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR13  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR13 __AT (0x40110034);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR13_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110034) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR13_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110034) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR13_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110034) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR13_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110034) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR13_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110034) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR13_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110034) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR13_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110034) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR13_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110034) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR13_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110034) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR13_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110034) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR13_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110034) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR13_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110034) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR13_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110034) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR13_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110034) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR13_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110034) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR13 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR13  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR13
//    <name> [13] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110034) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR13 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR13 = (GPIO_GCR_GCR_GCR13 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR13_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR14  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR14 __AT (0x40110038);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR14_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110038) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR14_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110038) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR14_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110038) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR14_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110038) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR14_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110038) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR14_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110038) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR14_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110038) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR14_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110038) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR14_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110038) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR14_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110038) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR14_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110038) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR14_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110038) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR14_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110038) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR14_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110038) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR14_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110038) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR14 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR14  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR14
//    <name> [14] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110038) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR14 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR14 = (GPIO_GCR_GCR_GCR14 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR14_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR15  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR15 __AT (0x4011003C);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR15_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011003C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR15_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011003C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR15_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011003C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR15_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011003C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR15_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011003C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR15_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011003C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR15_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011003C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR15_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011003C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR15_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011003C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR15_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011003C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR15_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011003C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR15_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011003C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR15_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011003C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR15_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011003C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR15_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011003C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR15 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR15  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR15
//    <name> [15] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011003C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR15 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR15 = (GPIO_GCR_GCR_GCR15 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR15_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR16  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR16 __AT (0x40110040);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR16_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110040) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR16_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110040) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR16_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110040) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR16_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110040) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR16_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110040) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR16_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110040) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR16_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110040) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR16_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110040) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR16_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110040) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR16_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110040) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR16_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110040) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR16_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110040) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR16_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110040) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR16_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110040) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR16_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110040) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR16 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR16  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR16
//    <name> [16] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110040) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR16 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR16 = (GPIO_GCR_GCR_GCR16 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR16_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR17  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR17 __AT (0x40110044);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR17_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110044) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR17_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110044) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR17_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110044) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR17_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110044) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR17_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110044) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR17_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110044) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR17_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110044) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR17_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110044) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR17_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110044) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR17_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110044) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR17_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110044) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR17_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110044) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR17_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110044) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR17_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110044) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR17_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110044) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR17 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR17  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR17
//    <name> [17] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110044) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR17 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR17 = (GPIO_GCR_GCR_GCR17 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR17_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR18  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR18 __AT (0x40110048);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR18_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110048) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR18_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110048) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR18_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110048) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR18_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110048) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR18_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110048) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR18_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110048) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR18_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110048) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR18_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110048) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR18_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110048) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR18_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110048) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR18_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110048) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR18_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110048) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR18_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110048) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR18_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110048) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR18_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110048) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR18 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR18  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR18
//    <name> [18] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110048) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR18 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR18 = (GPIO_GCR_GCR_GCR18 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR18_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR19  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR19 __AT (0x4011004C);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR19_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011004C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR19_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011004C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR19_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011004C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR19_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011004C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR19_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011004C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR19_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011004C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR19_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011004C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR19_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011004C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR19_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011004C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR19_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011004C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR19_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011004C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR19_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011004C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR19_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011004C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR19_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011004C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR19_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011004C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR19 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR19  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR19
//    <name> [19] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011004C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR19 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR19 = (GPIO_GCR_GCR_GCR19 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR19_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR20  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR20 __AT (0x40110050);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR20_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110050) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR20_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110050) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR20_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110050) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR20_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110050) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR20_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110050) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR20_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110050) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR20_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110050) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR20_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110050) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR20_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110050) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR20_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110050) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR20_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110050) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR20_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110050) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR20_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110050) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR20_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110050) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR20_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110050) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR20 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR20  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR20
//    <name> [20] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110050) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR20 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR20 = (GPIO_GCR_GCR_GCR20 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR20_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR21  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR21 __AT (0x40110054);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR21_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110054) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR21_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110054) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR21_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110054) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR21_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110054) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR21_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110054) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR21_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110054) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR21_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110054) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR21_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110054) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR21_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110054) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR21_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110054) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR21_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110054) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR21_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110054) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR21_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110054) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR21_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110054) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR21_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110054) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR21 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR21  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR21
//    <name> [21] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110054) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR21 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR21 = (GPIO_GCR_GCR_GCR21 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR21_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR22  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR22 __AT (0x40110058);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR22_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110058) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR22_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110058) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR22_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110058) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR22_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110058) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR22_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110058) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR22_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110058) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR22_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110058) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR22_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110058) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR22_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110058) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR22_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110058) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR22_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110058) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR22_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110058) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR22_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110058) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR22_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110058) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR22_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110058) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR22 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR22  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR22
//    <name> [22] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110058) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR22 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR22 = (GPIO_GCR_GCR_GCR22 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR22_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR23  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR23 __AT (0x4011005C);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR23_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011005C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR23_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011005C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR23_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011005C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR23_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011005C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR23_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011005C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR23_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011005C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR23_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011005C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR23_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011005C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR23_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011005C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR23_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011005C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR23_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011005C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR23_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011005C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR23_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011005C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR23_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011005C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR23_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011005C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR23 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR23  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR23
//    <name> [23] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011005C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR23 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR23 = (GPIO_GCR_GCR_GCR23 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR23_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR24  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR24 __AT (0x40110060);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR24_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110060) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR24_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110060) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR24_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110060) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR24_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110060) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR24_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110060) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR24_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110060) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR24_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110060) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR24_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110060) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR24_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110060) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR24_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110060) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR24_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110060) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR24_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110060) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR24_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110060) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR24_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110060) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR24_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110060) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR24 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR24  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR24
//    <name> [24] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110060) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR24 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR24 = (GPIO_GCR_GCR_GCR24 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR24_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR25  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR25 __AT (0x40110064);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR25_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110064) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR25_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110064) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR25_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110064) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR25_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110064) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR25_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110064) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR25_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110064) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR25_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110064) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR25_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110064) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR25_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110064) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR25_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110064) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR25_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110064) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR25_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110064) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR25_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110064) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR25_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110064) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR25_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110064) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR25 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR25  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR25
//    <name> [25] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110064) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR25 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR25 = (GPIO_GCR_GCR_GCR25 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR25_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR26  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR26 __AT (0x40110068);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR26_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110068) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR26_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110068) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR26_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110068) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR26_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110068) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR26_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110068) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR26_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110068) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR26_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110068) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR26_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110068) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR26_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110068) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR26_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110068) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR26_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110068) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR26_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110068) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR26_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110068) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR26_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110068) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR26_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110068) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR26 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR26  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR26
//    <name> [26] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110068) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR26 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR26 = (GPIO_GCR_GCR_GCR26 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR26_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR27  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR27 __AT (0x4011006C);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR27_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011006C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR27_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011006C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR27_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011006C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR27_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011006C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR27_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011006C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR27_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011006C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR27_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011006C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR27_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011006C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR27_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011006C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR27_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011006C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR27_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011006C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR27_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011006C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR27_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011006C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR27_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011006C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR27_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011006C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR27 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR27  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR27
//    <name> [27] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011006C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR27 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR27 = (GPIO_GCR_GCR_GCR27 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR27_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR28  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR28 __AT (0x40110070);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR28_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110070) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR28_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110070) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR28_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110070) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR28_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110070) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR28_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110070) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR28_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110070) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR28_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110070) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR28_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110070) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR28_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110070) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR28_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110070) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR28_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110070) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR28_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110070) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR28_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110070) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR28_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110070) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR28_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110070) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR28 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR28  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR28
//    <name> [28] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110070) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR28 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR28 = (GPIO_GCR_GCR_GCR28 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR28_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR29  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR29 __AT (0x40110074);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR29_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110074) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR29_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110074) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR29_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110074) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR29_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110074) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR29_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110074) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR29_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110074) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR29_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110074) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR29_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110074) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR29_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110074) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR29_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110074) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR29_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110074) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR29_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110074) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR29_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110074) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR29_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110074) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR29_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110074) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR29 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR29  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR29
//    <name> [29] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110074) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR29 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR29 = (GPIO_GCR_GCR_GCR29 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR29_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR30  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR30 __AT (0x40110078);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR30_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110078) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR30_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110078) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR30_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110078) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR30_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110078) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR30_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110078) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR30_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110078) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR30_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110078) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR30_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110078) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR30_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110078) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR30_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110078) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR30_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110078) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR30_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110078) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR30_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110078) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR30_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110078) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR30_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110078) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR30 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR30  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR30
//    <name> [30] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110078) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR30 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR30 = (GPIO_GCR_GCR_GCR30 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR30_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR31  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR31 __AT (0x4011007C);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR31_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011007C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR31_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011007C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR31_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011007C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR31_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011007C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR31_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011007C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR31_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011007C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR31_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011007C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR31_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011007C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR31_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011007C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR31_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011007C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR31_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011007C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR31_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011007C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR31_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011007C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR31_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011007C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR31_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011007C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR31 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR31  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR31
//    <name> [31] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011007C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR31 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR31 = (GPIO_GCR_GCR_GCR31 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR31_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR32  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR32 __AT (0x40110080);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR32_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110080) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR32_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110080) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR32_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110080) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR32_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110080) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR32_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110080) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR32_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110080) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR32_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110080) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR32_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110080) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR32_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110080) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR32_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110080) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR32_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110080) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR32_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110080) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR32_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110080) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR32_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110080) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR32_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110080) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR32 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR32  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR32
//    <name> [32] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110080) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR32 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR32 = (GPIO_GCR_GCR_GCR32 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR32_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR33  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR33 __AT (0x40110084);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR33_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110084) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR33_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110084) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR33_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110084) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR33_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110084) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR33_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110084) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR33_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110084) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR33_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110084) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR33_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110084) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR33_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110084) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR33_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110084) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR33_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110084) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR33_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110084) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR33_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110084) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR33_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110084) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR33_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110084) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR33 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR33  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR33
//    <name> [33] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110084) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR33 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR33 = (GPIO_GCR_GCR_GCR33 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR33_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR34  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR34 __AT (0x40110088);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR34_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110088) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR34_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110088) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR34_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110088) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR34_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110088) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR34_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110088) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR34_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110088) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR34_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110088) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR34_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110088) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR34_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110088) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR34_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110088) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR34_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110088) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR34_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110088) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR34_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110088) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR34_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110088) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR34_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110088) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR34 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR34  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR34
//    <name> [34] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110088) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR34 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR34 = (GPIO_GCR_GCR_GCR34 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR34_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR35  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR35 __AT (0x4011008C);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR35_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011008C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR35_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011008C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR35_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011008C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR35_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011008C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR35_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011008C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR35_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011008C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR35_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011008C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR35_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011008C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR35_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011008C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR35_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011008C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR35_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011008C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR35_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011008C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR35_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011008C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR35_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011008C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR35_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011008C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR35 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR35  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR35
//    <name> [35] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011008C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR35 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR35 = (GPIO_GCR_GCR_GCR35 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR35_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR36  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR36 __AT (0x40110090);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR36_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110090) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR36_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110090) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR36_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110090) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR36_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110090) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR36_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110090) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR36_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110090) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR36_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110090) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR36_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110090) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR36_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110090) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR36_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110090) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR36_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110090) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR36_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110090) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR36_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110090) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR36_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110090) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR36_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110090) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR36 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR36  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR36
//    <name> [36] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110090) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR36 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR36 = (GPIO_GCR_GCR_GCR36 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR36_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR37  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR37 __AT (0x40110094);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR37_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110094) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR37_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110094) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR37_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110094) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR37_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110094) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR37_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110094) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR37_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110094) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR37_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110094) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR37_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110094) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR37_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110094) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR37_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110094) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR37_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110094) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR37_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110094) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR37_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110094) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR37_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110094) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR37_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110094) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR37 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR37  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR37
//    <name> [37] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110094) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR37 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR37 = (GPIO_GCR_GCR_GCR37 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR37_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR38  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR38 __AT (0x40110098);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR38_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40110098) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR38_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40110098) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR38_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40110098) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR38_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x40110098) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR38_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x40110098) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR38_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x40110098) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR38_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x40110098) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR38_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x40110098) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR38_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x40110098) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR38_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x40110098) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR38_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x40110098) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR38_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x40110098) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR38_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x40110098) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR38_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40110098) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR38_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40110098) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR38 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR38  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR38
//    <name> [38] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40110098) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR38 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR38 = (GPIO_GCR_GCR_GCR38 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR38_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR39  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR39 __AT (0x4011009C);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR39_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4011009C) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR39_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x4011009C) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR39_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x4011009C) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR39_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x4011009C) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR39_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x4011009C) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR39_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x4011009C) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR39_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x4011009C) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR39_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x4011009C) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR39_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x4011009C) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR39_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x4011009C) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR39_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x4011009C) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR39_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x4011009C) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR39_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x4011009C) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR39_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x4011009C) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR39_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x4011009C) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR39 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR39  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR39
//    <name> [39] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4011009C) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR39 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR39 = (GPIO_GCR_GCR_GCR39 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR39_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR40  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR40 __AT (0x401100A0);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR40_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100A0) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR40_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100A0) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR40_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100A0) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR40_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100A0) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR40_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100A0) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR40_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100A0) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR40_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100A0) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR40_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100A0) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR40_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100A0) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR40_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100A0) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR40_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100A0) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR40_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100A0) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR40_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100A0) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR40_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100A0) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR40_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100A0) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR40 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR40  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR40
//    <name> [40] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100A0) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR40 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR40 = (GPIO_GCR_GCR_GCR40 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR40_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR41  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR41 __AT (0x401100A4);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR41_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100A4) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR41_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100A4) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR41_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100A4) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR41_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100A4) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR41_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100A4) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR41_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100A4) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR41_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100A4) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR41_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100A4) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR41_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100A4) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR41_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100A4) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR41_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100A4) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR41_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100A4) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR41_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100A4) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR41_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100A4) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR41_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100A4) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR41 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR41  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR41
//    <name> [41] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100A4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR41 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR41 = (GPIO_GCR_GCR_GCR41 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR41_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR42  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR42 __AT (0x401100A8);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR42_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100A8) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR42_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100A8) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR42_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100A8) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR42_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100A8) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR42_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100A8) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR42_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100A8) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR42_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100A8) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR42_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100A8) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR42_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100A8) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR42_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100A8) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR42_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100A8) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR42_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100A8) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR42_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100A8) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR42_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100A8) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR42_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100A8) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR42 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR42  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR42
//    <name> [42] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100A8) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR42 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR42 = (GPIO_GCR_GCR_GCR42 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR42_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR43  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR43 __AT (0x401100AC);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR43_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100AC) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR43_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100AC) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR43_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100AC) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR43_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100AC) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR43_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100AC) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR43_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100AC) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR43_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100AC) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR43_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100AC) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR43_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100AC) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR43_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100AC) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR43_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100AC) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR43_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100AC) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR43_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100AC) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR43_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100AC) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR43_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100AC) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR43 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR43  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR43
//    <name> [43] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100AC) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR43 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR43 = (GPIO_GCR_GCR_GCR43 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR43_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR44  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR44 __AT (0x401100B0);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR44_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100B0) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR44_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100B0) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR44_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100B0) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR44_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100B0) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR44_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100B0) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR44_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100B0) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR44_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100B0) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR44_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100B0) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR44_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100B0) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR44_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100B0) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR44_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100B0) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR44_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100B0) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR44_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100B0) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR44_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100B0) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR44_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100B0) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR44 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR44  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR44
//    <name> [44] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100B0) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR44 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR44 = (GPIO_GCR_GCR_GCR44 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR44_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR45  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR45 __AT (0x401100B4);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR45_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100B4) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR45_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100B4) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR45_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100B4) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR45_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100B4) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR45_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100B4) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR45_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100B4) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR45_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100B4) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR45_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100B4) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR45_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100B4) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR45_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100B4) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR45_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100B4) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR45_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100B4) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR45_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100B4) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR45_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100B4) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR45_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100B4) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR45 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR45  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR45
//    <name> [45] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100B4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR45 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR45 = (GPIO_GCR_GCR_GCR45 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR45_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR46  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR46 __AT (0x401100B8);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR46_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100B8) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR46_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100B8) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR46_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100B8) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR46_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100B8) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR46_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100B8) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR46_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100B8) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR46_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100B8) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR46_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100B8) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR46_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100B8) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR46_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100B8) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR46_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100B8) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR46_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100B8) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR46_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100B8) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR46_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100B8) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR46_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100B8) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR46 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR46  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR46
//    <name> [46] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100B8) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR46 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR46 = (GPIO_GCR_GCR_GCR46 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR46_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR47  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR47 __AT (0x401100BC);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR47_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100BC) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR47_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100BC) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR47_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100BC) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR47_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100BC) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR47_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100BC) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR47_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100BC) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR47_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100BC) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR47_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100BC) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR47_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100BC) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR47_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100BC) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR47_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100BC) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR47_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100BC) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR47_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100BC) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR47_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100BC) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR47_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100BC) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR47 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR47  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR47
//    <name> [47] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100BC) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR47 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR47 = (GPIO_GCR_GCR_GCR47 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR47_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR48  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR48 __AT (0x401100C0);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR48_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100C0) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR48_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100C0) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR48_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100C0) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR48_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100C0) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR48_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100C0) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR48_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100C0) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR48_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100C0) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR48_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100C0) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR48_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100C0) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR48_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100C0) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR48_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100C0) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR48_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100C0) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR48_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100C0) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR48_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100C0) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR48_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100C0) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR48 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR48  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR48
//    <name> [48] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100C0) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR48 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR48 = (GPIO_GCR_GCR_GCR48 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR48_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR49  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR49 __AT (0x401100C4);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR49_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100C4) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR49_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100C4) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR49_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100C4) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR49_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100C4) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR49_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100C4) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR49_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100C4) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR49_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100C4) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR49_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100C4) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR49_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100C4) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR49_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100C4) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR49_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100C4) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR49_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100C4) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR49_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100C4) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR49_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100C4) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR49_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100C4) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR49 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR49  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR49
//    <name> [49] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100C4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR49 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR49 = (GPIO_GCR_GCR_GCR49 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR49_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR50  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR50 __AT (0x401100C8);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR50_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100C8) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR50_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100C8) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR50_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100C8) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR50_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100C8) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR50_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100C8) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR50_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100C8) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR50_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100C8) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR50_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100C8) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR50_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100C8) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR50_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100C8) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR50_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100C8) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR50_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100C8) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR50_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100C8) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR50_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100C8) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR50_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100C8) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR50 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR50  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR50
//    <name> [50] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100C8) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR50 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR50 = (GPIO_GCR_GCR_GCR50 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR50_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR51  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR51 __AT (0x401100CC);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR51_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100CC) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR51_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100CC) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR51_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100CC) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR51_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100CC) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR51_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100CC) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR51_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100CC) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR51_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100CC) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR51_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100CC) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR51_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100CC) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR51_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100CC) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR51_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100CC) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR51_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100CC) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR51_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100CC) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR51_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100CC) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR51_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100CC) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR51 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR51  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR51
//    <name> [51] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100CC) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR51 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR51 = (GPIO_GCR_GCR_GCR51 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR51_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR52  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR52 __AT (0x401100D0);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR52_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100D0) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR52_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100D0) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR52_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100D0) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR52_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100D0) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR52_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100D0) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR52_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100D0) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR52_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100D0) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR52_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100D0) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR52_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100D0) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR52_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100D0) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR52_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100D0) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR52_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100D0) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR52_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100D0) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR52_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100D0) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR52_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100D0) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR52 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR52  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR52
//    <name> [52] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100D0) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR52 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR52 = (GPIO_GCR_GCR_GCR52 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR52_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR53  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR53 __AT (0x401100D4);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR53_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100D4) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR53_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100D4) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR53_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100D4) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR53_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100D4) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR53_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100D4) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR53_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100D4) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR53_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100D4) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR53_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100D4) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR53_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100D4) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR53_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100D4) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR53_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100D4) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR53_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100D4) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR53_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100D4) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR53_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100D4) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR53_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100D4) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR53 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR53  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR53
//    <name> [53] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100D4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR53 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR53 = (GPIO_GCR_GCR_GCR53 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR53_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR54  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR54 __AT (0x401100D8);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR54_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100D8) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR54_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100D8) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR54_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100D8) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR54_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100D8) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR54_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100D8) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR54_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100D8) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR54_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100D8) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR54_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100D8) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR54_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100D8) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR54_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100D8) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR54_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100D8) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR54_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100D8) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR54_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100D8) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR54_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100D8) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR54_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100D8) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR54 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR54  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR54
//    <name> [54] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100D8) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR54 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR54 = (GPIO_GCR_GCR_GCR54 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR54_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR55  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR55 __AT (0x401100DC);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR55_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100DC) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR55_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100DC) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR55_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100DC) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR55_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100DC) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR55_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100DC) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR55_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100DC) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR55_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100DC) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR55_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100DC) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR55_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100DC) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR55_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100DC) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR55_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100DC) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR55_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100DC) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR55_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100DC) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR55_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100DC) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR55_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100DC) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR55 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR55  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR55
//    <name> [55] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100DC) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR55 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR55 = (GPIO_GCR_GCR_GCR55 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR55_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR56  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR56 __AT (0x401100E0);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR56_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100E0) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR56_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100E0) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR56_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100E0) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR56_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100E0) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR56_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100E0) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR56_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100E0) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR56_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100E0) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR56_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100E0) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR56_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100E0) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR56_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100E0) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR56_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100E0) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR56_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100E0) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR56_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100E0) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR56_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100E0) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR56_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100E0) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR56 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR56  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR56
//    <name> [56] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100E0) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR56 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR56 = (GPIO_GCR_GCR_GCR56 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR56_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR57  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR57 __AT (0x401100E4);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR57_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100E4) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR57_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100E4) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR57_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100E4) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR57_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100E4) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR57_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100E4) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR57_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100E4) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR57_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100E4) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR57_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100E4) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR57_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100E4) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR57_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100E4) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR57_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100E4) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR57_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100E4) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR57_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100E4) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR57_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100E4) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR57_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100E4) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR57 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR57  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR57
//    <name> [57] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100E4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR57 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR57 = (GPIO_GCR_GCR_GCR57 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR57_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR58  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR58 __AT (0x401100E8);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR58_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100E8) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR58_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100E8) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR58_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100E8) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR58_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100E8) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR58_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100E8) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR58_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100E8) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR58_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100E8) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR58_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100E8) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR58_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100E8) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR58_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100E8) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR58_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100E8) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR58_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100E8) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR58_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100E8) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR58_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100E8) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR58_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100E8) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR58 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR58  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR58
//    <name> [58] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100E8) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR58 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR58 = (GPIO_GCR_GCR_GCR58 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR58_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR59  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR59 __AT (0x401100EC);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR59_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100EC) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR59_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100EC) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR59_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100EC) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR59_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100EC) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR59_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100EC) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR59_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100EC) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR59_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100EC) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR59_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100EC) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR59_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100EC) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR59_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100EC) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR59_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100EC) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR59_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100EC) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR59_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100EC) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR59_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100EC) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR59_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100EC) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR59 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR59  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR59
//    <name> [59] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100EC) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR59 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR59 = (GPIO_GCR_GCR_GCR59 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR59_INTSTS </item>
//  </rtree>
//  


// ---------------------  Register Array Item Address: GPIO_GCR_GCR_GCR60  ------------------------
// SVD Line: 21424

unsigned int GPIO_GCR_GCR_GCR60 __AT (0x401100F0);



// ---------------------------  Field Item: GPIO_GCR_GCR_GCR60_DIR  -------------------------------
// SVD Line: 21436

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_DIR
//    <name> DIR </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x401100F0) \nDirection\n0 : INPUT = Intput mode\n1 : OUTPUT = Output mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.0..0> DIR
//        <0=> 0: INPUT = Intput mode
//        <1=> 1: OUTPUT = Output mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR60_INDETEN  -----------------------------
// SVD Line: 21455

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INDETEN
//    <name> INDETEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x401100F0) \nInput Detection Enable\n0 : DISABLE = Disable input detection\n1 : ENABLE = Enable input detection </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.1..1> INDETEN
//        <0=> 0: DISABLE = Disable input detection
//        <1=> 1: ENABLE = Enable input detection
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR60_INVOLMD  -----------------------------
// SVD Line: 21474

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INVOLMD
//    <name> INVOLMD </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x401100F0) \nInput Voltage Mode\n0 : 3V3 = 3V3 voltage input\n1 : 1V8 = 1V8 voltage input </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.2..2> INVOLMD
//        <0=> 0: 3V3 = 3V3 voltage input
//        <1=> 1: 1V8 = 1V8 voltage input
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR60_PINSTS  -----------------------------
// SVD Line: 21493

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_PINSTS
//    <name> PINSTS </name>
//    <r> 
//    <i> [Bit 3] RO (@ 0x401100F0) \nStatus of GPIO Pin\n0 : LOW = Pin status is low\n1 : HIGH = Pin status is high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.3..3> PINSTS
//        <0=> 0: LOW = Pin status is low
//        <1=> 1: HIGH = Pin status is high
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR60_MFCTRL  -----------------------------
// SVD Line: 21512

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_MFCTRL
//    <name> MFCTRL </name>
//    <rw> 
//    <i> [Bits 10..8] RW (@ 0x401100F0) \nMultiple Function Control\n0 : FUN0 = Select function[0]\n1 : FUN1 = Select function[1]\n2 : FUN2 = Select function[2]\n3 : FUN3 = Select function[3]\n4 : Reserved - do not use\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.10..8> MFCTRL
//        <0=> 0: FUN0 = Select function[0]
//        <1=> 1: FUN1 = Select function[1]
//        <2=> 2: FUN2 = Select function[2]
//        <3=> 3: FUN3 = Select function[3]
//        <4=> 4: 
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR60_OUTDRV  -----------------------------
// SVD Line: 21541

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_OUTDRV
//    <name> OUTDRV </name>
//    <rw> 
//    <i> [Bit 11] RW (@ 0x401100F0) \nDriving Current Selection\n0 : LOW = Low driving capability\n1 : HIGH = High driving capability </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.11..11> OUTDRV
//        <0=> 0: LOW = Low driving capability
//        <1=> 1: HIGH = High driving capability
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR60_SLEWRATE  ----------------------------
// SVD Line: 21560

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_SLEWRATE
//    <name> SLEWRATE </name>
//    <rw> 
//    <i> [Bit 12] RW (@ 0x401100F0) \nSlew Rate Selection\n0 : FAST = Fast slew-rate\n1 : SLOW = Slow slew-rate </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.12..12> SLEWRATE
//        <0=> 0: FAST = Fast slew-rate
//        <1=> 1: SLOW = Slow slew-rate
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR60_PULLDWEN  ----------------------------
// SVD Line: 21579

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_PULLDWEN
//    <name> PULLDWEN </name>
//    <rw> 
//    <i> [Bit 13] RW (@ 0x401100F0) \nInternal Pull-Down Resistor Enable\n0 : DISABLE = Disable internal pull-down resistor\n1 : ENABLE = Enable internal pull-down resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.13..13> PULLDWEN
//        <0=> 0: DISABLE = Disable internal pull-down resistor
//        <1=> 1: ENABLE = Enable internal pull-down resistor
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR60_PULLUPEN  ----------------------------
// SVD Line: 21598

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_PULLUPEN
//    <name> PULLUPEN </name>
//    <rw> 
//    <i> [Bit 14] RW (@ 0x401100F0) \nInternal Pull-Up Resistor Enable\n0 : DISABLE = Disable internal pull-up resistor\n1 : ENABLE = Enable internal pull-up resistor </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.14..14> PULLUPEN
//        <0=> 0: DISABLE = Disable internal pull-up resistor
//        <1=> 1: ENABLE = Enable internal pull-up resistor
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR60_SCHEN  ------------------------------
// SVD Line: 21617

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_SCHEN
//    <name> SCHEN </name>
//    <rw> 
//    <i> [Bit 15] RW (@ 0x401100F0) \nSchmitter-Trigger Enable\n0 : DISABLE = Disable schmitter-trigger\n1 : ENABLE = Enable schmitter-trigger </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.15..15> SCHEN
//        <0=> 0: DISABLE = Disable schmitter-trigger
//        <1=> 1: ENABLE = Enable schmitter-trigger
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR60_OUTMD  ------------------------------
// SVD Line: 21636

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_OUTMD
//    <name> OUTMD </name>
//    <rw> 
//    <i> [Bit 16] RW (@ 0x401100F0) \nOutput Mode Selection\n0 : PUSH_PULL = Push-pull mode\n1 : OPEN_DRAIN = Open-drain mode </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.16..16> OUTMD
//        <0=> 0: PUSH_PULL = Push-pull mode
//        <1=> 1: OPEN_DRAIN = Open-drain mode
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR60_OUTCTRL  -----------------------------
// SVD Line: 21655

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_OUTCTRL
//    <name> OUTCTRL </name>
//    <rw> 
//    <i> [Bit 17] RW (@ 0x401100F0) \nOutput Control\n0 : LOW = Output low\n1 : HIGH = Output high </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.17..17> OUTCTRL
//        <0=> 0: LOW = Output low
//        <1=> 1: HIGH = Output high
//    </combo>
//  </item>
//  


// -------------------------  Field Item: GPIO_GCR_GCR_GCR60_INTCTRL  -----------------------------
// SVD Line: 21674

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INTCTRL
//    <name> INTCTRL </name>
//    <rw> 
//    <i> [Bits 26..24] RW (@ 0x401100F0) \nType of GPIO Interrupt\n0 : POSTIVE = Trigger interrupt when positive edge occurred\n1 : NEGATIVE = Trigger interrupt when negative edge occurred\n2 : DUAL = Trigger interrupt when positive/negative edge occurred\n3 : LOW = Trigger interrupt when low-level occurred\n4 : HIGH = Trigger interrupt when high-level occurred\n5 : Reserved - do not use\n6 : Reserved - do not use\n7 : Reserved - do not use </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.26..24> INTCTRL
//        <0=> 0: POSTIVE = Trigger interrupt when positive edge occurred
//        <1=> 1: NEGATIVE = Trigger interrupt when negative edge occurred
//        <2=> 2: DUAL = Trigger interrupt when positive/negative edge occurred
//        <3=> 3: LOW = Trigger interrupt when low-level occurred
//        <4=> 4: HIGH = Trigger interrupt when high-level occurred
//        <5=> 5: 
//        <6=> 6: 
//        <7=> 7: 
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR60_INTEN  ------------------------------
// SVD Line: 21708

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401100F0) \nInterrupt Enable\n0 : DISABLE = Disable interrupt\n1 : ENABLE = Enable interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.28..28> INTEN
//        <0=> 0: DISABLE = Disable interrupt
//        <1=> 1: ENABLE = Enable interrupt
//    </combo>
//  </item>
//  


// --------------------------  Field Item: GPIO_GCR_GCR_GCR60_INTSTS  -----------------------------
// SVD Line: 21727

//  <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401100F0) \nInterrupt Status\n0 : NOT_OCCURRED = GPIO interrupt is not occurred\n1 : OCCURRED = GPIO interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) GPIO_GCR_GCR_GCR60 ) </loc>
//      <o.31..31> INTSTS
//        <0=> 0: NOT_OCCURRED = GPIO interrupt is not occurred
//        <1=> 1: OCCURRED = GPIO interrupt is occurred
//    </combo>
//  </item>
//  


// ------------------------  Register Array RTree: GPIO_GCR_GCR_GCR60  ----------------------------
// SVD Line: 21424

//  <rtree> SFDITEM_REG__GPIO_GCR_GCR_GCR60
//    <name> [60] </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401100F0) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((GPIO_GCR_GCR_GCR60 >> 0) & 0xFFFFFFFF), ((GPIO_GCR_GCR_GCR60 = (GPIO_GCR_GCR_GCR60 & ~(0x9703FF07UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x9703FF07) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_DIR </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INDETEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INVOLMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_PINSTS </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_MFCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_OUTDRV </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_SLEWRATE </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_PULLDWEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_PULLUPEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_SCHEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_OUTMD </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_OUTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INTCTRL </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INTEN </item>
//    <item> SFDITEM_FIELD__GPIO_GCR_GCR_GCR60_INTSTS </item>
//  </rtree>
//  


// -----------------------------  Register Array ITree: GPIO_GCR  ---------------------------------
// SVD Line: 21424

//  <itree> SFDITEM_REG__GPIO_GCR
//    <name> GCR </name>
//    <i> CONTROL REGISTER </i>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR0 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR1 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR2 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR3 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR4 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR5 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR6 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR7 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR8 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR9 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR10 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR11 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR12 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR13 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR14 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR15 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR16 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR17 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR18 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR19 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR20 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR21 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR22 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR23 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR24 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR25 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR26 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR27 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR28 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR29 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR30 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR31 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR32 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR33 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR34 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR35 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR36 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR37 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR38 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR39 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR40 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR41 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR42 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR43 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR44 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR45 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR46 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR47 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR48 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR49 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR50 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR51 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR52 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR53 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR54 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR55 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR56 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR57 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR58 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR59 </item>
//    <item> SFDITEM_REG__GPIO_GCR_GCR_GCR60 </item>
//  </itree>
//  


// ----------------------------------  Peripheral View: GPIO  -------------------------------------
// SVD Line: 21347

//  <view> GPIO
//    <name> GPIO </name>
//    <item> SFDITEM_REG__GPIO_GCR </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED0_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED0_MODE __AT (0x40121000);



// ------------------------------  Field Item: PWMLED0_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED0_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121000) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED0_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED0_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED0_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121000) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED0_MODE >> 0) & 0xFFFFFFFF), ((PWMLED0_MODE = (PWMLED0_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED0_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED0_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED0_DL __AT (0x40121004);



// -------------------------------  Field Item: PWMLED0_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED0_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121004) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_DL >> 0) & 0xFF), ((PWMLED0_DL = (PWMLED0_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED0_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED0_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121004) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_DL >> 8) & 0xFF), ((PWMLED0_DL = (PWMLED0_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED0_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED0_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121004) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED0_DL >> 0) & 0xFFFFFFFF), ((PWMLED0_DL = (PWMLED0_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED0_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED0_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED0_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED0_WT __AT (0x40121008);



// -------------------------------  Field Item: PWMLED0_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED0_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121008) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED0_WT >> 0) & 0xFFF), ((PWMLED0_WT = (PWMLED0_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED0_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED0_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121008) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED0_WT >> 16) & 0xFFF), ((PWMLED0_WT = (PWMLED0_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED0_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED0_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121008) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED0_WT >> 0) & 0xFFFFFFFF), ((PWMLED0_WT = (PWMLED0_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED0_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED0_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED0_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED0_SD __AT (0x4012100C);



// -----------------------------  Field Item: PWMLED0_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED0_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012100C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_SD >> 0) & 0xF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED0_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012100C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_SD >> 4) & 0xF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED0_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012100C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_SD >> 8) & 0xF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED0_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012100C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_SD >> 12) & 0xF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED0_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012100C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_SD >> 16) & 0xF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED0_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012100C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_SD >> 20) & 0xF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED0_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012100C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_SD >> 24) & 0xF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED0_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012100C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_SD >> 28) & 0xF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED0_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED0_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012100C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED0_SD >> 0) & 0xFFFFFFFF), ((PWMLED0_SD = (PWMLED0_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED0_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED0_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED0_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED0_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED0_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED0_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED0_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED0_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED0_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED0_ST __AT (0x40121010);



// -----------------------------  Field Item: PWMLED0_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED0_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121010) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_ST >> 0) & 0xF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED0_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121010) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_ST >> 4) & 0xF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED0_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121010) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_ST >> 8) & 0xF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED0_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121010) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_ST >> 12) & 0xF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED0_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121010) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_ST >> 16) & 0xF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED0_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121010) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_ST >> 20) & 0xF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED0_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121010) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_ST >> 24) & 0xF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED0_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121010) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_ST >> 28) & 0xF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED0_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED0_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121010) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED0_ST >> 0) & 0xFFFFFFFF), ((PWMLED0_ST = (PWMLED0_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED0_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED0_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED0_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED0_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED0_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED0_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED0_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED0_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED0_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED0_CTRL __AT (0x40121014);



// -----------------------------  Field Item: PWMLED0_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED0_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121014) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED0_CTRL >> 16) & 0xFF), ((PWMLED0_CTRL = (PWMLED0_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED0_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED0_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121014) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED0_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED0_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED0_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121014) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED0_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED0_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED0_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121014) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED0_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED0_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED0_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121014) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED0_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED0_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED0_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121014) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED0_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED0_CTRL = (PWMLED0_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED0_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED0_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED0_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED0_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED0_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED0  ------------------------------------
// SVD Line: 21752

//  <view> PWMLED0
//    <name> PWMLED0 </name>
//    <item> SFDITEM_REG__PWMLED0_MODE </item>
//    <item> SFDITEM_REG__PWMLED0_DL </item>
//    <item> SFDITEM_REG__PWMLED0_WT </item>
//    <item> SFDITEM_REG__PWMLED0_SD </item>
//    <item> SFDITEM_REG__PWMLED0_ST </item>
//    <item> SFDITEM_REG__PWMLED0_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED1_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED1_MODE __AT (0x40121020);



// ------------------------------  Field Item: PWMLED1_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED1_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121020) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED1_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED1_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED1_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121020) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED1_MODE >> 0) & 0xFFFFFFFF), ((PWMLED1_MODE = (PWMLED1_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED1_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED1_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED1_DL __AT (0x40121024);



// -------------------------------  Field Item: PWMLED1_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED1_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121024) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_DL >> 0) & 0xFF), ((PWMLED1_DL = (PWMLED1_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED1_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED1_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121024) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_DL >> 8) & 0xFF), ((PWMLED1_DL = (PWMLED1_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED1_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED1_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121024) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED1_DL >> 0) & 0xFFFFFFFF), ((PWMLED1_DL = (PWMLED1_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED1_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED1_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED1_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED1_WT __AT (0x40121028);



// -------------------------------  Field Item: PWMLED1_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED1_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121028) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED1_WT >> 0) & 0xFFF), ((PWMLED1_WT = (PWMLED1_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED1_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED1_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121028) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED1_WT >> 16) & 0xFFF), ((PWMLED1_WT = (PWMLED1_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED1_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED1_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121028) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED1_WT >> 0) & 0xFFFFFFFF), ((PWMLED1_WT = (PWMLED1_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED1_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED1_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED1_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED1_SD __AT (0x4012102C);



// -----------------------------  Field Item: PWMLED1_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED1_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012102C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_SD >> 0) & 0xF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED1_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012102C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_SD >> 4) & 0xF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED1_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012102C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_SD >> 8) & 0xF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED1_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012102C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_SD >> 12) & 0xF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED1_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012102C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_SD >> 16) & 0xF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED1_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012102C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_SD >> 20) & 0xF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED1_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012102C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_SD >> 24) & 0xF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED1_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012102C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_SD >> 28) & 0xF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED1_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED1_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012102C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED1_SD >> 0) & 0xFFFFFFFF), ((PWMLED1_SD = (PWMLED1_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED1_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED1_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED1_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED1_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED1_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED1_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED1_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED1_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED1_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED1_ST __AT (0x40121030);



// -----------------------------  Field Item: PWMLED1_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED1_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121030) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_ST >> 0) & 0xF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED1_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121030) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_ST >> 4) & 0xF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED1_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121030) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_ST >> 8) & 0xF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED1_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121030) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_ST >> 12) & 0xF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED1_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121030) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_ST >> 16) & 0xF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED1_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121030) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_ST >> 20) & 0xF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED1_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121030) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_ST >> 24) & 0xF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED1_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121030) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_ST >> 28) & 0xF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED1_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED1_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121030) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED1_ST >> 0) & 0xFFFFFFFF), ((PWMLED1_ST = (PWMLED1_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED1_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED1_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED1_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED1_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED1_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED1_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED1_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED1_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED1_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED1_CTRL __AT (0x40121034);



// -----------------------------  Field Item: PWMLED1_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED1_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121034) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED1_CTRL >> 16) & 0xFF), ((PWMLED1_CTRL = (PWMLED1_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED1_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED1_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121034) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED1_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED1_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED1_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121034) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED1_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED1_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED1_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121034) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED1_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED1_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED1_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121034) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED1_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED1_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED1_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121034) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED1_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED1_CTRL = (PWMLED1_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED1_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED1_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED1_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED1_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED1_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED1  ------------------------------------
// SVD Line: 22073

//  <view> PWMLED1
//    <name> PWMLED1 </name>
//    <item> SFDITEM_REG__PWMLED1_MODE </item>
//    <item> SFDITEM_REG__PWMLED1_DL </item>
//    <item> SFDITEM_REG__PWMLED1_WT </item>
//    <item> SFDITEM_REG__PWMLED1_SD </item>
//    <item> SFDITEM_REG__PWMLED1_ST </item>
//    <item> SFDITEM_REG__PWMLED1_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED2_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED2_MODE __AT (0x40121040);



// ------------------------------  Field Item: PWMLED2_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED2_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121040) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED2_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED2_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED2_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121040) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED2_MODE >> 0) & 0xFFFFFFFF), ((PWMLED2_MODE = (PWMLED2_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED2_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED2_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED2_DL __AT (0x40121044);



// -------------------------------  Field Item: PWMLED2_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED2_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121044) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_DL >> 0) & 0xFF), ((PWMLED2_DL = (PWMLED2_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED2_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED2_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121044) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_DL >> 8) & 0xFF), ((PWMLED2_DL = (PWMLED2_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED2_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED2_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121044) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED2_DL >> 0) & 0xFFFFFFFF), ((PWMLED2_DL = (PWMLED2_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED2_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED2_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED2_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED2_WT __AT (0x40121048);



// -------------------------------  Field Item: PWMLED2_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED2_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121048) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED2_WT >> 0) & 0xFFF), ((PWMLED2_WT = (PWMLED2_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED2_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED2_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121048) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED2_WT >> 16) & 0xFFF), ((PWMLED2_WT = (PWMLED2_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED2_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED2_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121048) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED2_WT >> 0) & 0xFFFFFFFF), ((PWMLED2_WT = (PWMLED2_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED2_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED2_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED2_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED2_SD __AT (0x4012104C);



// -----------------------------  Field Item: PWMLED2_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED2_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012104C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_SD >> 0) & 0xF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED2_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012104C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_SD >> 4) & 0xF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED2_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012104C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_SD >> 8) & 0xF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED2_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012104C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_SD >> 12) & 0xF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED2_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012104C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_SD >> 16) & 0xF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED2_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012104C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_SD >> 20) & 0xF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED2_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012104C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_SD >> 24) & 0xF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED2_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012104C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_SD >> 28) & 0xF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED2_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED2_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012104C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED2_SD >> 0) & 0xFFFFFFFF), ((PWMLED2_SD = (PWMLED2_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED2_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED2_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED2_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED2_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED2_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED2_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED2_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED2_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED2_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED2_ST __AT (0x40121050);



// -----------------------------  Field Item: PWMLED2_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED2_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121050) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_ST >> 0) & 0xF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED2_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121050) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_ST >> 4) & 0xF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED2_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121050) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_ST >> 8) & 0xF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED2_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121050) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_ST >> 12) & 0xF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED2_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121050) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_ST >> 16) & 0xF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED2_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121050) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_ST >> 20) & 0xF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED2_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121050) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_ST >> 24) & 0xF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED2_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121050) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_ST >> 28) & 0xF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED2_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED2_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121050) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED2_ST >> 0) & 0xFFFFFFFF), ((PWMLED2_ST = (PWMLED2_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED2_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED2_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED2_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED2_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED2_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED2_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED2_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED2_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED2_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED2_CTRL __AT (0x40121054);



// -----------------------------  Field Item: PWMLED2_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED2_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121054) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED2_CTRL >> 16) & 0xFF), ((PWMLED2_CTRL = (PWMLED2_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED2_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED2_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121054) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED2_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED2_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED2_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121054) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED2_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED2_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED2_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121054) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED2_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED2_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED2_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121054) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED2_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED2_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED2_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121054) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED2_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED2_CTRL = (PWMLED2_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED2_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED2_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED2_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED2_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED2_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED2  ------------------------------------
// SVD Line: 22077

//  <view> PWMLED2
//    <name> PWMLED2 </name>
//    <item> SFDITEM_REG__PWMLED2_MODE </item>
//    <item> SFDITEM_REG__PWMLED2_DL </item>
//    <item> SFDITEM_REG__PWMLED2_WT </item>
//    <item> SFDITEM_REG__PWMLED2_SD </item>
//    <item> SFDITEM_REG__PWMLED2_ST </item>
//    <item> SFDITEM_REG__PWMLED2_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED3_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED3_MODE __AT (0x40121060);



// ------------------------------  Field Item: PWMLED3_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED3_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121060) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED3_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED3_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED3_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121060) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED3_MODE >> 0) & 0xFFFFFFFF), ((PWMLED3_MODE = (PWMLED3_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED3_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED3_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED3_DL __AT (0x40121064);



// -------------------------------  Field Item: PWMLED3_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED3_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121064) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_DL >> 0) & 0xFF), ((PWMLED3_DL = (PWMLED3_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED3_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED3_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121064) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_DL >> 8) & 0xFF), ((PWMLED3_DL = (PWMLED3_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED3_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED3_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121064) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED3_DL >> 0) & 0xFFFFFFFF), ((PWMLED3_DL = (PWMLED3_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED3_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED3_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED3_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED3_WT __AT (0x40121068);



// -------------------------------  Field Item: PWMLED3_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED3_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121068) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED3_WT >> 0) & 0xFFF), ((PWMLED3_WT = (PWMLED3_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED3_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED3_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121068) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED3_WT >> 16) & 0xFFF), ((PWMLED3_WT = (PWMLED3_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED3_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED3_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121068) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED3_WT >> 0) & 0xFFFFFFFF), ((PWMLED3_WT = (PWMLED3_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED3_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED3_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED3_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED3_SD __AT (0x4012106C);



// -----------------------------  Field Item: PWMLED3_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED3_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012106C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_SD >> 0) & 0xF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED3_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012106C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_SD >> 4) & 0xF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED3_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012106C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_SD >> 8) & 0xF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED3_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012106C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_SD >> 12) & 0xF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED3_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012106C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_SD >> 16) & 0xF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED3_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012106C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_SD >> 20) & 0xF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED3_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012106C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_SD >> 24) & 0xF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED3_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012106C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_SD >> 28) & 0xF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED3_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED3_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012106C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED3_SD >> 0) & 0xFFFFFFFF), ((PWMLED3_SD = (PWMLED3_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED3_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED3_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED3_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED3_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED3_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED3_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED3_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED3_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED3_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED3_ST __AT (0x40121070);



// -----------------------------  Field Item: PWMLED3_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED3_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121070) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_ST >> 0) & 0xF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED3_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121070) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_ST >> 4) & 0xF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED3_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121070) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_ST >> 8) & 0xF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED3_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121070) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_ST >> 12) & 0xF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED3_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121070) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_ST >> 16) & 0xF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED3_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121070) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_ST >> 20) & 0xF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED3_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121070) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_ST >> 24) & 0xF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED3_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121070) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_ST >> 28) & 0xF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED3_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED3_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121070) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED3_ST >> 0) & 0xFFFFFFFF), ((PWMLED3_ST = (PWMLED3_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED3_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED3_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED3_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED3_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED3_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED3_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED3_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED3_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED3_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED3_CTRL __AT (0x40121074);



// -----------------------------  Field Item: PWMLED3_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED3_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121074) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED3_CTRL >> 16) & 0xFF), ((PWMLED3_CTRL = (PWMLED3_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED3_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED3_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121074) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED3_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED3_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED3_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121074) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED3_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED3_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED3_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121074) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED3_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED3_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED3_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121074) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED3_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED3_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED3_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121074) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED3_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED3_CTRL = (PWMLED3_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED3_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED3_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED3_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED3_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED3_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED3  ------------------------------------
// SVD Line: 22081

//  <view> PWMLED3
//    <name> PWMLED3 </name>
//    <item> SFDITEM_REG__PWMLED3_MODE </item>
//    <item> SFDITEM_REG__PWMLED3_DL </item>
//    <item> SFDITEM_REG__PWMLED3_WT </item>
//    <item> SFDITEM_REG__PWMLED3_SD </item>
//    <item> SFDITEM_REG__PWMLED3_ST </item>
//    <item> SFDITEM_REG__PWMLED3_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED4_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED4_MODE __AT (0x40121080);



// ------------------------------  Field Item: PWMLED4_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED4_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121080) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED4_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED4_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED4_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121080) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED4_MODE >> 0) & 0xFFFFFFFF), ((PWMLED4_MODE = (PWMLED4_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED4_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED4_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED4_DL __AT (0x40121084);



// -------------------------------  Field Item: PWMLED4_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED4_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121084) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_DL >> 0) & 0xFF), ((PWMLED4_DL = (PWMLED4_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED4_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED4_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121084) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_DL >> 8) & 0xFF), ((PWMLED4_DL = (PWMLED4_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED4_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED4_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121084) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED4_DL >> 0) & 0xFFFFFFFF), ((PWMLED4_DL = (PWMLED4_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED4_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED4_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED4_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED4_WT __AT (0x40121088);



// -------------------------------  Field Item: PWMLED4_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED4_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121088) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED4_WT >> 0) & 0xFFF), ((PWMLED4_WT = (PWMLED4_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED4_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED4_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121088) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED4_WT >> 16) & 0xFFF), ((PWMLED4_WT = (PWMLED4_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED4_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED4_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121088) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED4_WT >> 0) & 0xFFFFFFFF), ((PWMLED4_WT = (PWMLED4_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED4_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED4_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED4_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED4_SD __AT (0x4012108C);



// -----------------------------  Field Item: PWMLED4_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED4_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012108C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_SD >> 0) & 0xF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED4_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012108C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_SD >> 4) & 0xF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED4_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012108C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_SD >> 8) & 0xF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED4_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012108C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_SD >> 12) & 0xF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED4_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012108C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_SD >> 16) & 0xF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED4_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012108C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_SD >> 20) & 0xF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED4_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012108C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_SD >> 24) & 0xF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED4_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012108C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_SD >> 28) & 0xF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED4_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED4_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012108C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED4_SD >> 0) & 0xFFFFFFFF), ((PWMLED4_SD = (PWMLED4_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED4_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED4_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED4_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED4_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED4_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED4_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED4_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED4_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED4_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED4_ST __AT (0x40121090);



// -----------------------------  Field Item: PWMLED4_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED4_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121090) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_ST >> 0) & 0xF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED4_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121090) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_ST >> 4) & 0xF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED4_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121090) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_ST >> 8) & 0xF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED4_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121090) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_ST >> 12) & 0xF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED4_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121090) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_ST >> 16) & 0xF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED4_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121090) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_ST >> 20) & 0xF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED4_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121090) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_ST >> 24) & 0xF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED4_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121090) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_ST >> 28) & 0xF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED4_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED4_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121090) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED4_ST >> 0) & 0xFFFFFFFF), ((PWMLED4_ST = (PWMLED4_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED4_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED4_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED4_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED4_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED4_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED4_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED4_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED4_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED4_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED4_CTRL __AT (0x40121094);



// -----------------------------  Field Item: PWMLED4_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED4_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121094) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED4_CTRL >> 16) & 0xFF), ((PWMLED4_CTRL = (PWMLED4_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED4_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED4_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121094) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED4_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED4_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED4_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121094) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED4_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED4_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED4_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121094) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED4_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED4_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED4_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121094) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED4_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED4_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED4_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121094) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED4_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED4_CTRL = (PWMLED4_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED4_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED4_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED4_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED4_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED4_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED4  ------------------------------------
// SVD Line: 22085

//  <view> PWMLED4
//    <name> PWMLED4 </name>
//    <item> SFDITEM_REG__PWMLED4_MODE </item>
//    <item> SFDITEM_REG__PWMLED4_DL </item>
//    <item> SFDITEM_REG__PWMLED4_WT </item>
//    <item> SFDITEM_REG__PWMLED4_SD </item>
//    <item> SFDITEM_REG__PWMLED4_ST </item>
//    <item> SFDITEM_REG__PWMLED4_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED5_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED5_MODE __AT (0x401210A0);



// ------------------------------  Field Item: PWMLED5_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED5_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401210A0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED5_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED5_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED5_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210A0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED5_MODE >> 0) & 0xFFFFFFFF), ((PWMLED5_MODE = (PWMLED5_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED5_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED5_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED5_DL __AT (0x401210A4);



// -------------------------------  Field Item: PWMLED5_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED5_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401210A4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_DL >> 0) & 0xFF), ((PWMLED5_DL = (PWMLED5_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED5_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED5_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401210A4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_DL >> 8) & 0xFF), ((PWMLED5_DL = (PWMLED5_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED5_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED5_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210A4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED5_DL >> 0) & 0xFFFFFFFF), ((PWMLED5_DL = (PWMLED5_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED5_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED5_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED5_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED5_WT __AT (0x401210A8);



// -------------------------------  Field Item: PWMLED5_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED5_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401210A8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED5_WT >> 0) & 0xFFF), ((PWMLED5_WT = (PWMLED5_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED5_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED5_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401210A8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED5_WT >> 16) & 0xFFF), ((PWMLED5_WT = (PWMLED5_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED5_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED5_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210A8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED5_WT >> 0) & 0xFFFFFFFF), ((PWMLED5_WT = (PWMLED5_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED5_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED5_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED5_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED5_SD __AT (0x401210AC);



// -----------------------------  Field Item: PWMLED5_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED5_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401210AC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_SD >> 0) & 0xF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED5_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401210AC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_SD >> 4) & 0xF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED5_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401210AC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_SD >> 8) & 0xF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED5_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401210AC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_SD >> 12) & 0xF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED5_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401210AC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_SD >> 16) & 0xF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED5_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401210AC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_SD >> 20) & 0xF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED5_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401210AC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_SD >> 24) & 0xF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED5_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401210AC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_SD >> 28) & 0xF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED5_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED5_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210AC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED5_SD >> 0) & 0xFFFFFFFF), ((PWMLED5_SD = (PWMLED5_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED5_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED5_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED5_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED5_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED5_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED5_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED5_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED5_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED5_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED5_ST __AT (0x401210B0);



// -----------------------------  Field Item: PWMLED5_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED5_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401210B0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_ST >> 0) & 0xF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED5_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401210B0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_ST >> 4) & 0xF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED5_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401210B0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_ST >> 8) & 0xF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED5_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401210B0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_ST >> 12) & 0xF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED5_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401210B0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_ST >> 16) & 0xF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED5_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401210B0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_ST >> 20) & 0xF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED5_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401210B0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_ST >> 24) & 0xF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED5_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401210B0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_ST >> 28) & 0xF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED5_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED5_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210B0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED5_ST >> 0) & 0xFFFFFFFF), ((PWMLED5_ST = (PWMLED5_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED5_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED5_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED5_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED5_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED5_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED5_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED5_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED5_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED5_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED5_CTRL __AT (0x401210B4);



// -----------------------------  Field Item: PWMLED5_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED5_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401210B4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED5_CTRL >> 16) & 0xFF), ((PWMLED5_CTRL = (PWMLED5_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED5_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED5_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401210B4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED5_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED5_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED5_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401210B4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED5_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED5_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED5_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401210B4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED5_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED5_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED5_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401210B4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED5_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED5_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED5_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210B4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED5_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED5_CTRL = (PWMLED5_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED5_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED5_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED5_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED5_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED5_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED5  ------------------------------------
// SVD Line: 22089

//  <view> PWMLED5
//    <name> PWMLED5 </name>
//    <item> SFDITEM_REG__PWMLED5_MODE </item>
//    <item> SFDITEM_REG__PWMLED5_DL </item>
//    <item> SFDITEM_REG__PWMLED5_WT </item>
//    <item> SFDITEM_REG__PWMLED5_SD </item>
//    <item> SFDITEM_REG__PWMLED5_ST </item>
//    <item> SFDITEM_REG__PWMLED5_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED6_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED6_MODE __AT (0x401210C0);



// ------------------------------  Field Item: PWMLED6_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED6_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401210C0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED6_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED6_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED6_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210C0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED6_MODE >> 0) & 0xFFFFFFFF), ((PWMLED6_MODE = (PWMLED6_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED6_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED6_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED6_DL __AT (0x401210C4);



// -------------------------------  Field Item: PWMLED6_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED6_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401210C4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_DL >> 0) & 0xFF), ((PWMLED6_DL = (PWMLED6_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED6_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED6_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401210C4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_DL >> 8) & 0xFF), ((PWMLED6_DL = (PWMLED6_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED6_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED6_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210C4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED6_DL >> 0) & 0xFFFFFFFF), ((PWMLED6_DL = (PWMLED6_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED6_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED6_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED6_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED6_WT __AT (0x401210C8);



// -------------------------------  Field Item: PWMLED6_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED6_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401210C8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED6_WT >> 0) & 0xFFF), ((PWMLED6_WT = (PWMLED6_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED6_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED6_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401210C8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED6_WT >> 16) & 0xFFF), ((PWMLED6_WT = (PWMLED6_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED6_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED6_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210C8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED6_WT >> 0) & 0xFFFFFFFF), ((PWMLED6_WT = (PWMLED6_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED6_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED6_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED6_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED6_SD __AT (0x401210CC);



// -----------------------------  Field Item: PWMLED6_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED6_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401210CC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_SD >> 0) & 0xF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED6_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401210CC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_SD >> 4) & 0xF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED6_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401210CC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_SD >> 8) & 0xF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED6_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401210CC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_SD >> 12) & 0xF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED6_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401210CC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_SD >> 16) & 0xF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED6_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401210CC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_SD >> 20) & 0xF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED6_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401210CC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_SD >> 24) & 0xF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED6_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401210CC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_SD >> 28) & 0xF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED6_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED6_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210CC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED6_SD >> 0) & 0xFFFFFFFF), ((PWMLED6_SD = (PWMLED6_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED6_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED6_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED6_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED6_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED6_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED6_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED6_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED6_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED6_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED6_ST __AT (0x401210D0);



// -----------------------------  Field Item: PWMLED6_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED6_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401210D0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_ST >> 0) & 0xF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED6_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401210D0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_ST >> 4) & 0xF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED6_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401210D0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_ST >> 8) & 0xF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED6_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401210D0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_ST >> 12) & 0xF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED6_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401210D0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_ST >> 16) & 0xF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED6_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401210D0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_ST >> 20) & 0xF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED6_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401210D0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_ST >> 24) & 0xF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED6_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401210D0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_ST >> 28) & 0xF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED6_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED6_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210D0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED6_ST >> 0) & 0xFFFFFFFF), ((PWMLED6_ST = (PWMLED6_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED6_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED6_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED6_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED6_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED6_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED6_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED6_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED6_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED6_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED6_CTRL __AT (0x401210D4);



// -----------------------------  Field Item: PWMLED6_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED6_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401210D4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED6_CTRL >> 16) & 0xFF), ((PWMLED6_CTRL = (PWMLED6_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED6_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED6_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401210D4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED6_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED6_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED6_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401210D4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED6_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED6_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED6_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401210D4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED6_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED6_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED6_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401210D4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED6_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED6_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED6_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210D4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED6_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED6_CTRL = (PWMLED6_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED6_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED6_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED6_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED6_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED6_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED6  ------------------------------------
// SVD Line: 22093

//  <view> PWMLED6
//    <name> PWMLED6 </name>
//    <item> SFDITEM_REG__PWMLED6_MODE </item>
//    <item> SFDITEM_REG__PWMLED6_DL </item>
//    <item> SFDITEM_REG__PWMLED6_WT </item>
//    <item> SFDITEM_REG__PWMLED6_SD </item>
//    <item> SFDITEM_REG__PWMLED6_ST </item>
//    <item> SFDITEM_REG__PWMLED6_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED7_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED7_MODE __AT (0x401210E0);



// ------------------------------  Field Item: PWMLED7_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED7_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401210E0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED7_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED7_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED7_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210E0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED7_MODE >> 0) & 0xFFFFFFFF), ((PWMLED7_MODE = (PWMLED7_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED7_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED7_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED7_DL __AT (0x401210E4);



// -------------------------------  Field Item: PWMLED7_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED7_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401210E4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_DL >> 0) & 0xFF), ((PWMLED7_DL = (PWMLED7_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED7_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED7_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401210E4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_DL >> 8) & 0xFF), ((PWMLED7_DL = (PWMLED7_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED7_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED7_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210E4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED7_DL >> 0) & 0xFFFFFFFF), ((PWMLED7_DL = (PWMLED7_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED7_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED7_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED7_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED7_WT __AT (0x401210E8);



// -------------------------------  Field Item: PWMLED7_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED7_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401210E8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED7_WT >> 0) & 0xFFF), ((PWMLED7_WT = (PWMLED7_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED7_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED7_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401210E8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED7_WT >> 16) & 0xFFF), ((PWMLED7_WT = (PWMLED7_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED7_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED7_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210E8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED7_WT >> 0) & 0xFFFFFFFF), ((PWMLED7_WT = (PWMLED7_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED7_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED7_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED7_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED7_SD __AT (0x401210EC);



// -----------------------------  Field Item: PWMLED7_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED7_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401210EC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_SD >> 0) & 0xF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED7_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401210EC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_SD >> 4) & 0xF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED7_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401210EC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_SD >> 8) & 0xF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED7_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401210EC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_SD >> 12) & 0xF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED7_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401210EC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_SD >> 16) & 0xF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED7_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401210EC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_SD >> 20) & 0xF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED7_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401210EC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_SD >> 24) & 0xF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED7_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401210EC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_SD >> 28) & 0xF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED7_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED7_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210EC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED7_SD >> 0) & 0xFFFFFFFF), ((PWMLED7_SD = (PWMLED7_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED7_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED7_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED7_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED7_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED7_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED7_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED7_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED7_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED7_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED7_ST __AT (0x401210F0);



// -----------------------------  Field Item: PWMLED7_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED7_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401210F0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_ST >> 0) & 0xF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED7_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401210F0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_ST >> 4) & 0xF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED7_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401210F0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_ST >> 8) & 0xF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED7_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401210F0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_ST >> 12) & 0xF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED7_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401210F0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_ST >> 16) & 0xF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED7_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401210F0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_ST >> 20) & 0xF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED7_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401210F0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_ST >> 24) & 0xF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED7_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401210F0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_ST >> 28) & 0xF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED7_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED7_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210F0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED7_ST >> 0) & 0xFFFFFFFF), ((PWMLED7_ST = (PWMLED7_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED7_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED7_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED7_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED7_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED7_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED7_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED7_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED7_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED7_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED7_CTRL __AT (0x401210F4);



// -----------------------------  Field Item: PWMLED7_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED7_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401210F4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED7_CTRL >> 16) & 0xFF), ((PWMLED7_CTRL = (PWMLED7_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED7_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED7_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401210F4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED7_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED7_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED7_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401210F4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED7_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED7_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED7_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401210F4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED7_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED7_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED7_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401210F4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED7_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED7_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED7_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401210F4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED7_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED7_CTRL = (PWMLED7_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED7_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED7_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED7_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED7_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED7_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED7  ------------------------------------
// SVD Line: 22097

//  <view> PWMLED7
//    <name> PWMLED7 </name>
//    <item> SFDITEM_REG__PWMLED7_MODE </item>
//    <item> SFDITEM_REG__PWMLED7_DL </item>
//    <item> SFDITEM_REG__PWMLED7_WT </item>
//    <item> SFDITEM_REG__PWMLED7_SD </item>
//    <item> SFDITEM_REG__PWMLED7_ST </item>
//    <item> SFDITEM_REG__PWMLED7_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED8_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED8_MODE __AT (0x40121100);



// ------------------------------  Field Item: PWMLED8_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED8_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121100) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED8_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED8_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED8_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121100) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED8_MODE >> 0) & 0xFFFFFFFF), ((PWMLED8_MODE = (PWMLED8_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED8_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED8_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED8_DL __AT (0x40121104);



// -------------------------------  Field Item: PWMLED8_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED8_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121104) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_DL >> 0) & 0xFF), ((PWMLED8_DL = (PWMLED8_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED8_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED8_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121104) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_DL >> 8) & 0xFF), ((PWMLED8_DL = (PWMLED8_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED8_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED8_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121104) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED8_DL >> 0) & 0xFFFFFFFF), ((PWMLED8_DL = (PWMLED8_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED8_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED8_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED8_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED8_WT __AT (0x40121108);



// -------------------------------  Field Item: PWMLED8_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED8_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121108) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED8_WT >> 0) & 0xFFF), ((PWMLED8_WT = (PWMLED8_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED8_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED8_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121108) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED8_WT >> 16) & 0xFFF), ((PWMLED8_WT = (PWMLED8_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED8_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED8_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121108) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED8_WT >> 0) & 0xFFFFFFFF), ((PWMLED8_WT = (PWMLED8_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED8_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED8_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED8_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED8_SD __AT (0x4012110C);



// -----------------------------  Field Item: PWMLED8_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED8_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012110C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_SD >> 0) & 0xF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED8_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012110C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_SD >> 4) & 0xF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED8_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012110C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_SD >> 8) & 0xF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED8_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012110C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_SD >> 12) & 0xF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED8_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012110C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_SD >> 16) & 0xF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED8_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012110C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_SD >> 20) & 0xF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED8_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012110C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_SD >> 24) & 0xF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED8_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012110C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_SD >> 28) & 0xF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED8_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED8_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012110C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED8_SD >> 0) & 0xFFFFFFFF), ((PWMLED8_SD = (PWMLED8_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED8_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED8_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED8_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED8_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED8_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED8_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED8_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED8_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED8_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED8_ST __AT (0x40121110);



// -----------------------------  Field Item: PWMLED8_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED8_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121110) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_ST >> 0) & 0xF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED8_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121110) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_ST >> 4) & 0xF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED8_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121110) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_ST >> 8) & 0xF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED8_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121110) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_ST >> 12) & 0xF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED8_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121110) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_ST >> 16) & 0xF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED8_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121110) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_ST >> 20) & 0xF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED8_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121110) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_ST >> 24) & 0xF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED8_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121110) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_ST >> 28) & 0xF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED8_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED8_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121110) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED8_ST >> 0) & 0xFFFFFFFF), ((PWMLED8_ST = (PWMLED8_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED8_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED8_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED8_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED8_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED8_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED8_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED8_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED8_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED8_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED8_CTRL __AT (0x40121114);



// -----------------------------  Field Item: PWMLED8_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED8_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121114) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED8_CTRL >> 16) & 0xFF), ((PWMLED8_CTRL = (PWMLED8_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED8_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED8_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121114) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED8_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED8_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED8_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121114) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED8_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED8_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED8_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121114) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED8_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED8_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED8_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121114) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED8_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED8_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED8_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121114) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED8_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED8_CTRL = (PWMLED8_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED8_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED8_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED8_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED8_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED8_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED8  ------------------------------------
// SVD Line: 22101

//  <view> PWMLED8
//    <name> PWMLED8 </name>
//    <item> SFDITEM_REG__PWMLED8_MODE </item>
//    <item> SFDITEM_REG__PWMLED8_DL </item>
//    <item> SFDITEM_REG__PWMLED8_WT </item>
//    <item> SFDITEM_REG__PWMLED8_SD </item>
//    <item> SFDITEM_REG__PWMLED8_ST </item>
//    <item> SFDITEM_REG__PWMLED8_CTRL </item>
//  </view>
//  


// ---------------------------  Register Item Address: PWMLED9_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED9_MODE __AT (0x40121120);



// ------------------------------  Field Item: PWMLED9_MODE_SEL  ----------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED9_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121120) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED9_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED9_MODE  ----------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED9_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121120) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED9_MODE >> 0) & 0xFFFFFFFF), ((PWMLED9_MODE = (PWMLED9_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED9_MODE_SEL </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED9_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED9_DL __AT (0x40121124);



// -------------------------------  Field Item: PWMLED9_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED9_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121124) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_DL >> 0) & 0xFF), ((PWMLED9_DL = (PWMLED9_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED9_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED9_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121124) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_DL >> 8) & 0xFF), ((PWMLED9_DL = (PWMLED9_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED9_DL  -----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED9_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121124) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED9_DL >> 0) & 0xFFFFFFFF), ((PWMLED9_DL = (PWMLED9_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED9_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED9_DL_MAXV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED9_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED9_WT __AT (0x40121128);



// -------------------------------  Field Item: PWMLED9_WT_LKV  -----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED9_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121128) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED9_WT >> 0) & 0xFFF), ((PWMLED9_WT = (PWMLED9_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED9_WT_HKV  -----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED9_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121128) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED9_WT >> 16) & 0xFFF), ((PWMLED9_WT = (PWMLED9_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED9_WT  -----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED9_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121128) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED9_WT >> 0) & 0xFFFFFFFF), ((PWMLED9_WT = (PWMLED9_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED9_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED9_WT_HKV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED9_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED9_SD __AT (0x4012112C);



// -----------------------------  Field Item: PWMLED9_SD_STEP0DV  ---------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED9_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012112C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_SD >> 0) & 0xF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_SD_STEP1DV  ---------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED9_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012112C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_SD >> 4) & 0xF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_SD_STEP2DV  ---------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED9_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012112C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_SD >> 8) & 0xF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_SD_STEP3DV  ---------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED9_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012112C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_SD >> 12) & 0xF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_SD_STEP4DV  ---------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED9_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012112C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_SD >> 16) & 0xF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_SD_STEP5DV  ---------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED9_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012112C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_SD >> 20) & 0xF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_SD_STEP6DV  ---------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED9_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012112C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_SD >> 24) & 0xF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_SD_STEP7DV  ---------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED9_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012112C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_SD >> 28) & 0xF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED9_SD  -----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED9_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012112C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED9_SD >> 0) & 0xFFFFFFFF), ((PWMLED9_SD = (PWMLED9_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED9_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED9_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED9_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED9_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED9_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED9_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED9_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED9_SD_STEP7DV </item>
//  </rtree>
//  


// ----------------------------  Register Item Address: PWMLED9_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED9_ST __AT (0x40121130);



// -----------------------------  Field Item: PWMLED9_ST_STEP0TV  ---------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED9_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121130) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_ST >> 0) & 0xF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_ST_STEP1TV  ---------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED9_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121130) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_ST >> 4) & 0xF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_ST_STEP2TV  ---------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED9_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121130) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_ST >> 8) & 0xF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_ST_STEP3TV  ---------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED9_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121130) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_ST >> 12) & 0xF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_ST_STEP4TV  ---------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED9_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121130) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_ST >> 16) & 0xF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_ST_STEP5TV  ---------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED9_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121130) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_ST >> 20) & 0xF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_ST_STEP6TV  ---------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED9_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121130) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_ST >> 24) & 0xF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_ST_STEP7TV  ---------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED9_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121130) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_ST >> 28) & 0xF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED9_ST  -----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED9_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121130) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED9_ST >> 0) & 0xFFFFFFFF), ((PWMLED9_ST = (PWMLED9_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED9_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED9_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED9_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED9_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED9_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED9_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED9_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED9_ST_STEP7TV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED9_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED9_CTRL __AT (0x40121134);



// -----------------------------  Field Item: PWMLED9_CTRL_CYCLE  ---------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED9_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121134) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED9_CTRL >> 16) & 0xFF), ((PWMLED9_CTRL = (PWMLED9_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED9_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED9_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121134) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED9_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED9_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED9_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121134) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED9_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED9_CTRL_RST  ----------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED9_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121134) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED9_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: PWMLED9_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED9_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121134) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED9_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED9_CTRL  ----------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED9_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121134) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED9_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED9_CTRL = (PWMLED9_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED9_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED9_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED9_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED9_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED9_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED9  ------------------------------------
// SVD Line: 22105

//  <view> PWMLED9
//    <name> PWMLED9 </name>
//    <item> SFDITEM_REG__PWMLED9_MODE </item>
//    <item> SFDITEM_REG__PWMLED9_DL </item>
//    <item> SFDITEM_REG__PWMLED9_WT </item>
//    <item> SFDITEM_REG__PWMLED9_SD </item>
//    <item> SFDITEM_REG__PWMLED9_ST </item>
//    <item> SFDITEM_REG__PWMLED9_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED10_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED10_MODE __AT (0x40121140);



// ------------------------------  Field Item: PWMLED10_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED10_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121140) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED10_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED10_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED10_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121140) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED10_MODE >> 0) & 0xFFFFFFFF), ((PWMLED10_MODE = (PWMLED10_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED10_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED10_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED10_DL __AT (0x40121144);



// ------------------------------  Field Item: PWMLED10_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED10_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121144) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_DL >> 0) & 0xFF), ((PWMLED10_DL = (PWMLED10_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED10_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED10_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121144) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_DL >> 8) & 0xFF), ((PWMLED10_DL = (PWMLED10_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED10_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED10_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121144) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED10_DL >> 0) & 0xFFFFFFFF), ((PWMLED10_DL = (PWMLED10_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED10_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED10_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED10_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED10_WT __AT (0x40121148);



// -------------------------------  Field Item: PWMLED10_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED10_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121148) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED10_WT >> 0) & 0xFFF), ((PWMLED10_WT = (PWMLED10_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED10_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED10_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121148) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED10_WT >> 16) & 0xFFF), ((PWMLED10_WT = (PWMLED10_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED10_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED10_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121148) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED10_WT >> 0) & 0xFFFFFFFF), ((PWMLED10_WT = (PWMLED10_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED10_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED10_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED10_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED10_SD __AT (0x4012114C);



// -----------------------------  Field Item: PWMLED10_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED10_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012114C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_SD >> 0) & 0xF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED10_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012114C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_SD >> 4) & 0xF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED10_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012114C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_SD >> 8) & 0xF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED10_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012114C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_SD >> 12) & 0xF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED10_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012114C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_SD >> 16) & 0xF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED10_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012114C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_SD >> 20) & 0xF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED10_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012114C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_SD >> 24) & 0xF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED10_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012114C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_SD >> 28) & 0xF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED10_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED10_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012114C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED10_SD >> 0) & 0xFFFFFFFF), ((PWMLED10_SD = (PWMLED10_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED10_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED10_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED10_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED10_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED10_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED10_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED10_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED10_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED10_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED10_ST __AT (0x40121150);



// -----------------------------  Field Item: PWMLED10_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED10_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121150) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_ST >> 0) & 0xF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED10_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121150) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_ST >> 4) & 0xF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED10_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121150) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_ST >> 8) & 0xF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED10_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121150) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_ST >> 12) & 0xF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED10_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121150) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_ST >> 16) & 0xF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED10_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121150) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_ST >> 20) & 0xF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED10_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121150) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_ST >> 24) & 0xF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED10_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121150) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_ST >> 28) & 0xF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED10_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED10_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121150) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED10_ST >> 0) & 0xFFFFFFFF), ((PWMLED10_ST = (PWMLED10_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED10_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED10_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED10_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED10_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED10_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED10_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED10_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED10_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED10_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED10_CTRL __AT (0x40121154);



// -----------------------------  Field Item: PWMLED10_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED10_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121154) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED10_CTRL >> 16) & 0xFF), ((PWMLED10_CTRL = (PWMLED10_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED10_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED10_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121154) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED10_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED10_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED10_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121154) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED10_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED10_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED10_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121154) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED10_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED10_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED10_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121154) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED10_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED10_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED10_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121154) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED10_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED10_CTRL = (PWMLED10_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED10_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED10_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED10_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED10_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED10_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED10  -----------------------------------
// SVD Line: 22109

//  <view> PWMLED10
//    <name> PWMLED10 </name>
//    <item> SFDITEM_REG__PWMLED10_MODE </item>
//    <item> SFDITEM_REG__PWMLED10_DL </item>
//    <item> SFDITEM_REG__PWMLED10_WT </item>
//    <item> SFDITEM_REG__PWMLED10_SD </item>
//    <item> SFDITEM_REG__PWMLED10_ST </item>
//    <item> SFDITEM_REG__PWMLED10_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED11_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED11_MODE __AT (0x40121160);



// ------------------------------  Field Item: PWMLED11_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED11_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121160) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED11_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED11_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED11_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121160) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED11_MODE >> 0) & 0xFFFFFFFF), ((PWMLED11_MODE = (PWMLED11_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED11_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED11_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED11_DL __AT (0x40121164);



// ------------------------------  Field Item: PWMLED11_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED11_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121164) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_DL >> 0) & 0xFF), ((PWMLED11_DL = (PWMLED11_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED11_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED11_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121164) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_DL >> 8) & 0xFF), ((PWMLED11_DL = (PWMLED11_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED11_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED11_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121164) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED11_DL >> 0) & 0xFFFFFFFF), ((PWMLED11_DL = (PWMLED11_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED11_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED11_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED11_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED11_WT __AT (0x40121168);



// -------------------------------  Field Item: PWMLED11_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED11_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121168) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED11_WT >> 0) & 0xFFF), ((PWMLED11_WT = (PWMLED11_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED11_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED11_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121168) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED11_WT >> 16) & 0xFFF), ((PWMLED11_WT = (PWMLED11_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED11_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED11_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121168) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED11_WT >> 0) & 0xFFFFFFFF), ((PWMLED11_WT = (PWMLED11_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED11_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED11_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED11_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED11_SD __AT (0x4012116C);



// -----------------------------  Field Item: PWMLED11_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED11_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012116C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_SD >> 0) & 0xF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED11_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012116C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_SD >> 4) & 0xF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED11_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012116C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_SD >> 8) & 0xF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED11_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012116C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_SD >> 12) & 0xF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED11_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012116C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_SD >> 16) & 0xF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED11_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012116C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_SD >> 20) & 0xF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED11_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012116C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_SD >> 24) & 0xF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED11_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012116C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_SD >> 28) & 0xF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED11_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED11_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012116C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED11_SD >> 0) & 0xFFFFFFFF), ((PWMLED11_SD = (PWMLED11_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED11_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED11_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED11_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED11_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED11_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED11_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED11_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED11_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED11_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED11_ST __AT (0x40121170);



// -----------------------------  Field Item: PWMLED11_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED11_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121170) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_ST >> 0) & 0xF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED11_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121170) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_ST >> 4) & 0xF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED11_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121170) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_ST >> 8) & 0xF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED11_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121170) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_ST >> 12) & 0xF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED11_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121170) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_ST >> 16) & 0xF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED11_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121170) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_ST >> 20) & 0xF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED11_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121170) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_ST >> 24) & 0xF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED11_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121170) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_ST >> 28) & 0xF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED11_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED11_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121170) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED11_ST >> 0) & 0xFFFFFFFF), ((PWMLED11_ST = (PWMLED11_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED11_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED11_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED11_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED11_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED11_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED11_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED11_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED11_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED11_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED11_CTRL __AT (0x40121174);



// -----------------------------  Field Item: PWMLED11_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED11_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121174) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED11_CTRL >> 16) & 0xFF), ((PWMLED11_CTRL = (PWMLED11_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED11_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED11_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121174) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED11_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED11_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED11_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121174) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED11_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED11_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED11_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121174) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED11_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED11_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED11_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121174) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED11_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED11_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED11_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121174) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED11_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED11_CTRL = (PWMLED11_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED11_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED11_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED11_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED11_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED11_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED11  -----------------------------------
// SVD Line: 22113

//  <view> PWMLED11
//    <name> PWMLED11 </name>
//    <item> SFDITEM_REG__PWMLED11_MODE </item>
//    <item> SFDITEM_REG__PWMLED11_DL </item>
//    <item> SFDITEM_REG__PWMLED11_WT </item>
//    <item> SFDITEM_REG__PWMLED11_SD </item>
//    <item> SFDITEM_REG__PWMLED11_ST </item>
//    <item> SFDITEM_REG__PWMLED11_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED12_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED12_MODE __AT (0x40121180);



// ------------------------------  Field Item: PWMLED12_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED12_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121180) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED12_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED12_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED12_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121180) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED12_MODE >> 0) & 0xFFFFFFFF), ((PWMLED12_MODE = (PWMLED12_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED12_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED12_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED12_DL __AT (0x40121184);



// ------------------------------  Field Item: PWMLED12_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED12_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121184) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_DL >> 0) & 0xFF), ((PWMLED12_DL = (PWMLED12_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED12_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED12_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121184) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_DL >> 8) & 0xFF), ((PWMLED12_DL = (PWMLED12_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED12_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED12_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121184) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED12_DL >> 0) & 0xFFFFFFFF), ((PWMLED12_DL = (PWMLED12_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED12_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED12_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED12_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED12_WT __AT (0x40121188);



// -------------------------------  Field Item: PWMLED12_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED12_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121188) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED12_WT >> 0) & 0xFFF), ((PWMLED12_WT = (PWMLED12_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED12_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED12_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121188) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED12_WT >> 16) & 0xFFF), ((PWMLED12_WT = (PWMLED12_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED12_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED12_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121188) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED12_WT >> 0) & 0xFFFFFFFF), ((PWMLED12_WT = (PWMLED12_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED12_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED12_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED12_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED12_SD __AT (0x4012118C);



// -----------------------------  Field Item: PWMLED12_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED12_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012118C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_SD >> 0) & 0xF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED12_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012118C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_SD >> 4) & 0xF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED12_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012118C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_SD >> 8) & 0xF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED12_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012118C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_SD >> 12) & 0xF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED12_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012118C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_SD >> 16) & 0xF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED12_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012118C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_SD >> 20) & 0xF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED12_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012118C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_SD >> 24) & 0xF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED12_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012118C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_SD >> 28) & 0xF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED12_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED12_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012118C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED12_SD >> 0) & 0xFFFFFFFF), ((PWMLED12_SD = (PWMLED12_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED12_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED12_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED12_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED12_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED12_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED12_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED12_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED12_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED12_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED12_ST __AT (0x40121190);



// -----------------------------  Field Item: PWMLED12_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED12_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121190) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_ST >> 0) & 0xF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED12_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121190) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_ST >> 4) & 0xF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED12_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121190) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_ST >> 8) & 0xF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED12_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121190) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_ST >> 12) & 0xF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED12_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121190) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_ST >> 16) & 0xF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED12_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121190) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_ST >> 20) & 0xF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED12_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121190) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_ST >> 24) & 0xF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED12_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121190) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_ST >> 28) & 0xF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED12_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED12_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121190) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED12_ST >> 0) & 0xFFFFFFFF), ((PWMLED12_ST = (PWMLED12_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED12_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED12_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED12_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED12_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED12_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED12_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED12_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED12_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED12_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED12_CTRL __AT (0x40121194);



// -----------------------------  Field Item: PWMLED12_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED12_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121194) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED12_CTRL >> 16) & 0xFF), ((PWMLED12_CTRL = (PWMLED12_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED12_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED12_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121194) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED12_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED12_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED12_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121194) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED12_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED12_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED12_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121194) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED12_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED12_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED12_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121194) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED12_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED12_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED12_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121194) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED12_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED12_CTRL = (PWMLED12_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED12_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED12_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED12_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED12_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED12_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED12  -----------------------------------
// SVD Line: 22117

//  <view> PWMLED12
//    <name> PWMLED12 </name>
//    <item> SFDITEM_REG__PWMLED12_MODE </item>
//    <item> SFDITEM_REG__PWMLED12_DL </item>
//    <item> SFDITEM_REG__PWMLED12_WT </item>
//    <item> SFDITEM_REG__PWMLED12_SD </item>
//    <item> SFDITEM_REG__PWMLED12_ST </item>
//    <item> SFDITEM_REG__PWMLED12_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED13_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED13_MODE __AT (0x401211A0);



// ------------------------------  Field Item: PWMLED13_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED13_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401211A0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED13_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED13_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED13_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211A0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED13_MODE >> 0) & 0xFFFFFFFF), ((PWMLED13_MODE = (PWMLED13_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED13_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED13_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED13_DL __AT (0x401211A4);



// ------------------------------  Field Item: PWMLED13_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED13_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401211A4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_DL >> 0) & 0xFF), ((PWMLED13_DL = (PWMLED13_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED13_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED13_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401211A4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_DL >> 8) & 0xFF), ((PWMLED13_DL = (PWMLED13_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED13_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED13_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211A4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED13_DL >> 0) & 0xFFFFFFFF), ((PWMLED13_DL = (PWMLED13_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED13_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED13_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED13_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED13_WT __AT (0x401211A8);



// -------------------------------  Field Item: PWMLED13_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED13_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401211A8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED13_WT >> 0) & 0xFFF), ((PWMLED13_WT = (PWMLED13_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED13_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED13_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401211A8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED13_WT >> 16) & 0xFFF), ((PWMLED13_WT = (PWMLED13_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED13_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED13_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211A8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED13_WT >> 0) & 0xFFFFFFFF), ((PWMLED13_WT = (PWMLED13_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED13_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED13_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED13_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED13_SD __AT (0x401211AC);



// -----------------------------  Field Item: PWMLED13_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED13_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401211AC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_SD >> 0) & 0xF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED13_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401211AC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_SD >> 4) & 0xF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED13_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401211AC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_SD >> 8) & 0xF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED13_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401211AC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_SD >> 12) & 0xF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED13_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401211AC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_SD >> 16) & 0xF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED13_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401211AC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_SD >> 20) & 0xF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED13_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401211AC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_SD >> 24) & 0xF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED13_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401211AC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_SD >> 28) & 0xF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED13_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED13_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211AC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED13_SD >> 0) & 0xFFFFFFFF), ((PWMLED13_SD = (PWMLED13_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED13_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED13_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED13_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED13_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED13_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED13_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED13_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED13_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED13_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED13_ST __AT (0x401211B0);



// -----------------------------  Field Item: PWMLED13_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED13_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401211B0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_ST >> 0) & 0xF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED13_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401211B0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_ST >> 4) & 0xF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED13_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401211B0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_ST >> 8) & 0xF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED13_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401211B0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_ST >> 12) & 0xF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED13_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401211B0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_ST >> 16) & 0xF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED13_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401211B0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_ST >> 20) & 0xF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED13_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401211B0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_ST >> 24) & 0xF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED13_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401211B0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_ST >> 28) & 0xF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED13_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED13_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211B0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED13_ST >> 0) & 0xFFFFFFFF), ((PWMLED13_ST = (PWMLED13_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED13_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED13_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED13_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED13_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED13_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED13_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED13_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED13_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED13_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED13_CTRL __AT (0x401211B4);



// -----------------------------  Field Item: PWMLED13_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED13_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401211B4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED13_CTRL >> 16) & 0xFF), ((PWMLED13_CTRL = (PWMLED13_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED13_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED13_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401211B4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED13_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED13_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED13_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401211B4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED13_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED13_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED13_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401211B4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED13_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED13_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED13_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401211B4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED13_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED13_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED13_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211B4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED13_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED13_CTRL = (PWMLED13_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED13_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED13_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED13_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED13_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED13_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED13  -----------------------------------
// SVD Line: 22121

//  <view> PWMLED13
//    <name> PWMLED13 </name>
//    <item> SFDITEM_REG__PWMLED13_MODE </item>
//    <item> SFDITEM_REG__PWMLED13_DL </item>
//    <item> SFDITEM_REG__PWMLED13_WT </item>
//    <item> SFDITEM_REG__PWMLED13_SD </item>
//    <item> SFDITEM_REG__PWMLED13_ST </item>
//    <item> SFDITEM_REG__PWMLED13_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED14_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED14_MODE __AT (0x401211C0);



// ------------------------------  Field Item: PWMLED14_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED14_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401211C0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED14_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED14_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED14_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211C0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED14_MODE >> 0) & 0xFFFFFFFF), ((PWMLED14_MODE = (PWMLED14_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED14_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED14_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED14_DL __AT (0x401211C4);



// ------------------------------  Field Item: PWMLED14_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED14_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401211C4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_DL >> 0) & 0xFF), ((PWMLED14_DL = (PWMLED14_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED14_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED14_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401211C4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_DL >> 8) & 0xFF), ((PWMLED14_DL = (PWMLED14_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED14_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED14_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211C4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED14_DL >> 0) & 0xFFFFFFFF), ((PWMLED14_DL = (PWMLED14_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED14_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED14_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED14_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED14_WT __AT (0x401211C8);



// -------------------------------  Field Item: PWMLED14_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED14_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401211C8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED14_WT >> 0) & 0xFFF), ((PWMLED14_WT = (PWMLED14_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED14_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED14_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401211C8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED14_WT >> 16) & 0xFFF), ((PWMLED14_WT = (PWMLED14_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED14_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED14_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211C8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED14_WT >> 0) & 0xFFFFFFFF), ((PWMLED14_WT = (PWMLED14_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED14_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED14_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED14_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED14_SD __AT (0x401211CC);



// -----------------------------  Field Item: PWMLED14_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED14_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401211CC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_SD >> 0) & 0xF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED14_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401211CC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_SD >> 4) & 0xF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED14_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401211CC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_SD >> 8) & 0xF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED14_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401211CC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_SD >> 12) & 0xF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED14_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401211CC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_SD >> 16) & 0xF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED14_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401211CC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_SD >> 20) & 0xF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED14_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401211CC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_SD >> 24) & 0xF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED14_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401211CC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_SD >> 28) & 0xF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED14_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED14_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211CC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED14_SD >> 0) & 0xFFFFFFFF), ((PWMLED14_SD = (PWMLED14_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED14_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED14_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED14_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED14_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED14_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED14_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED14_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED14_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED14_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED14_ST __AT (0x401211D0);



// -----------------------------  Field Item: PWMLED14_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED14_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401211D0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_ST >> 0) & 0xF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED14_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401211D0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_ST >> 4) & 0xF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED14_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401211D0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_ST >> 8) & 0xF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED14_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401211D0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_ST >> 12) & 0xF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED14_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401211D0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_ST >> 16) & 0xF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED14_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401211D0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_ST >> 20) & 0xF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED14_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401211D0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_ST >> 24) & 0xF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED14_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401211D0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_ST >> 28) & 0xF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED14_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED14_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211D0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED14_ST >> 0) & 0xFFFFFFFF), ((PWMLED14_ST = (PWMLED14_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED14_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED14_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED14_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED14_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED14_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED14_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED14_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED14_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED14_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED14_CTRL __AT (0x401211D4);



// -----------------------------  Field Item: PWMLED14_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED14_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401211D4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED14_CTRL >> 16) & 0xFF), ((PWMLED14_CTRL = (PWMLED14_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED14_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED14_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401211D4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED14_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED14_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED14_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401211D4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED14_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED14_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED14_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401211D4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED14_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED14_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED14_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401211D4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED14_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED14_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED14_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211D4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED14_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED14_CTRL = (PWMLED14_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED14_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED14_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED14_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED14_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED14_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED14  -----------------------------------
// SVD Line: 22125

//  <view> PWMLED14
//    <name> PWMLED14 </name>
//    <item> SFDITEM_REG__PWMLED14_MODE </item>
//    <item> SFDITEM_REG__PWMLED14_DL </item>
//    <item> SFDITEM_REG__PWMLED14_WT </item>
//    <item> SFDITEM_REG__PWMLED14_SD </item>
//    <item> SFDITEM_REG__PWMLED14_ST </item>
//    <item> SFDITEM_REG__PWMLED14_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED15_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED15_MODE __AT (0x401211E0);



// ------------------------------  Field Item: PWMLED15_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED15_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401211E0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED15_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED15_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED15_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211E0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED15_MODE >> 0) & 0xFFFFFFFF), ((PWMLED15_MODE = (PWMLED15_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED15_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED15_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED15_DL __AT (0x401211E4);



// ------------------------------  Field Item: PWMLED15_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED15_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401211E4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_DL >> 0) & 0xFF), ((PWMLED15_DL = (PWMLED15_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED15_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED15_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401211E4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_DL >> 8) & 0xFF), ((PWMLED15_DL = (PWMLED15_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED15_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED15_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211E4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED15_DL >> 0) & 0xFFFFFFFF), ((PWMLED15_DL = (PWMLED15_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED15_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED15_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED15_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED15_WT __AT (0x401211E8);



// -------------------------------  Field Item: PWMLED15_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED15_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401211E8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED15_WT >> 0) & 0xFFF), ((PWMLED15_WT = (PWMLED15_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED15_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED15_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401211E8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED15_WT >> 16) & 0xFFF), ((PWMLED15_WT = (PWMLED15_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED15_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED15_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211E8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED15_WT >> 0) & 0xFFFFFFFF), ((PWMLED15_WT = (PWMLED15_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED15_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED15_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED15_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED15_SD __AT (0x401211EC);



// -----------------------------  Field Item: PWMLED15_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED15_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401211EC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_SD >> 0) & 0xF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED15_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401211EC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_SD >> 4) & 0xF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED15_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401211EC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_SD >> 8) & 0xF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED15_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401211EC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_SD >> 12) & 0xF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED15_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401211EC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_SD >> 16) & 0xF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED15_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401211EC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_SD >> 20) & 0xF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED15_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401211EC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_SD >> 24) & 0xF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED15_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401211EC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_SD >> 28) & 0xF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED15_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED15_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211EC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED15_SD >> 0) & 0xFFFFFFFF), ((PWMLED15_SD = (PWMLED15_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED15_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED15_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED15_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED15_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED15_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED15_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED15_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED15_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED15_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED15_ST __AT (0x401211F0);



// -----------------------------  Field Item: PWMLED15_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED15_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401211F0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_ST >> 0) & 0xF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED15_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401211F0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_ST >> 4) & 0xF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED15_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401211F0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_ST >> 8) & 0xF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED15_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401211F0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_ST >> 12) & 0xF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED15_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401211F0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_ST >> 16) & 0xF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED15_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401211F0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_ST >> 20) & 0xF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED15_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401211F0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_ST >> 24) & 0xF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED15_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401211F0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_ST >> 28) & 0xF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED15_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED15_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211F0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED15_ST >> 0) & 0xFFFFFFFF), ((PWMLED15_ST = (PWMLED15_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED15_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED15_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED15_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED15_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED15_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED15_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED15_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED15_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED15_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED15_CTRL __AT (0x401211F4);



// -----------------------------  Field Item: PWMLED15_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED15_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401211F4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED15_CTRL >> 16) & 0xFF), ((PWMLED15_CTRL = (PWMLED15_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED15_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED15_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401211F4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED15_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED15_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED15_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401211F4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED15_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED15_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED15_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401211F4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED15_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED15_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED15_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401211F4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED15_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED15_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED15_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401211F4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED15_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED15_CTRL = (PWMLED15_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED15_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED15_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED15_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED15_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED15_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED15  -----------------------------------
// SVD Line: 22129

//  <view> PWMLED15
//    <name> PWMLED15 </name>
//    <item> SFDITEM_REG__PWMLED15_MODE </item>
//    <item> SFDITEM_REG__PWMLED15_DL </item>
//    <item> SFDITEM_REG__PWMLED15_WT </item>
//    <item> SFDITEM_REG__PWMLED15_SD </item>
//    <item> SFDITEM_REG__PWMLED15_ST </item>
//    <item> SFDITEM_REG__PWMLED15_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED16_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED16_MODE __AT (0x40121200);



// ------------------------------  Field Item: PWMLED16_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED16_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121200) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED16_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED16_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED16_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121200) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED16_MODE >> 0) & 0xFFFFFFFF), ((PWMLED16_MODE = (PWMLED16_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED16_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED16_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED16_DL __AT (0x40121204);



// ------------------------------  Field Item: PWMLED16_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED16_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121204) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_DL >> 0) & 0xFF), ((PWMLED16_DL = (PWMLED16_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED16_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED16_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121204) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_DL >> 8) & 0xFF), ((PWMLED16_DL = (PWMLED16_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED16_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED16_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121204) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED16_DL >> 0) & 0xFFFFFFFF), ((PWMLED16_DL = (PWMLED16_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED16_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED16_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED16_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED16_WT __AT (0x40121208);



// -------------------------------  Field Item: PWMLED16_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED16_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121208) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED16_WT >> 0) & 0xFFF), ((PWMLED16_WT = (PWMLED16_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED16_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED16_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121208) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED16_WT >> 16) & 0xFFF), ((PWMLED16_WT = (PWMLED16_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED16_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED16_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121208) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED16_WT >> 0) & 0xFFFFFFFF), ((PWMLED16_WT = (PWMLED16_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED16_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED16_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED16_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED16_SD __AT (0x4012120C);



// -----------------------------  Field Item: PWMLED16_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED16_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012120C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_SD >> 0) & 0xF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED16_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012120C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_SD >> 4) & 0xF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED16_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012120C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_SD >> 8) & 0xF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED16_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012120C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_SD >> 12) & 0xF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED16_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012120C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_SD >> 16) & 0xF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED16_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012120C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_SD >> 20) & 0xF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED16_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012120C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_SD >> 24) & 0xF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED16_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012120C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_SD >> 28) & 0xF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED16_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED16_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012120C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED16_SD >> 0) & 0xFFFFFFFF), ((PWMLED16_SD = (PWMLED16_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED16_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED16_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED16_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED16_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED16_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED16_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED16_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED16_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED16_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED16_ST __AT (0x40121210);



// -----------------------------  Field Item: PWMLED16_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED16_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121210) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_ST >> 0) & 0xF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED16_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121210) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_ST >> 4) & 0xF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED16_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121210) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_ST >> 8) & 0xF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED16_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121210) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_ST >> 12) & 0xF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED16_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121210) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_ST >> 16) & 0xF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED16_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121210) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_ST >> 20) & 0xF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED16_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121210) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_ST >> 24) & 0xF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED16_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121210) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_ST >> 28) & 0xF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED16_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED16_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121210) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED16_ST >> 0) & 0xFFFFFFFF), ((PWMLED16_ST = (PWMLED16_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED16_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED16_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED16_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED16_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED16_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED16_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED16_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED16_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED16_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED16_CTRL __AT (0x40121214);



// -----------------------------  Field Item: PWMLED16_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED16_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121214) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED16_CTRL >> 16) & 0xFF), ((PWMLED16_CTRL = (PWMLED16_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED16_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED16_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121214) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED16_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED16_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED16_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121214) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED16_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED16_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED16_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121214) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED16_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED16_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED16_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121214) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED16_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED16_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED16_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121214) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED16_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED16_CTRL = (PWMLED16_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED16_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED16_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED16_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED16_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED16_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED16  -----------------------------------
// SVD Line: 22133

//  <view> PWMLED16
//    <name> PWMLED16 </name>
//    <item> SFDITEM_REG__PWMLED16_MODE </item>
//    <item> SFDITEM_REG__PWMLED16_DL </item>
//    <item> SFDITEM_REG__PWMLED16_WT </item>
//    <item> SFDITEM_REG__PWMLED16_SD </item>
//    <item> SFDITEM_REG__PWMLED16_ST </item>
//    <item> SFDITEM_REG__PWMLED16_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED17_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED17_MODE __AT (0x40121220);



// ------------------------------  Field Item: PWMLED17_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED17_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121220) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED17_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED17_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED17_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121220) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED17_MODE >> 0) & 0xFFFFFFFF), ((PWMLED17_MODE = (PWMLED17_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED17_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED17_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED17_DL __AT (0x40121224);



// ------------------------------  Field Item: PWMLED17_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED17_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121224) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_DL >> 0) & 0xFF), ((PWMLED17_DL = (PWMLED17_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED17_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED17_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121224) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_DL >> 8) & 0xFF), ((PWMLED17_DL = (PWMLED17_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED17_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED17_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121224) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED17_DL >> 0) & 0xFFFFFFFF), ((PWMLED17_DL = (PWMLED17_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED17_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED17_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED17_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED17_WT __AT (0x40121228);



// -------------------------------  Field Item: PWMLED17_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED17_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121228) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED17_WT >> 0) & 0xFFF), ((PWMLED17_WT = (PWMLED17_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED17_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED17_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121228) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED17_WT >> 16) & 0xFFF), ((PWMLED17_WT = (PWMLED17_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED17_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED17_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121228) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED17_WT >> 0) & 0xFFFFFFFF), ((PWMLED17_WT = (PWMLED17_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED17_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED17_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED17_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED17_SD __AT (0x4012122C);



// -----------------------------  Field Item: PWMLED17_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED17_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012122C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_SD >> 0) & 0xF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED17_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012122C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_SD >> 4) & 0xF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED17_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012122C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_SD >> 8) & 0xF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED17_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012122C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_SD >> 12) & 0xF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED17_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012122C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_SD >> 16) & 0xF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED17_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012122C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_SD >> 20) & 0xF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED17_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012122C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_SD >> 24) & 0xF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED17_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012122C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_SD >> 28) & 0xF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED17_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED17_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012122C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED17_SD >> 0) & 0xFFFFFFFF), ((PWMLED17_SD = (PWMLED17_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED17_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED17_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED17_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED17_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED17_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED17_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED17_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED17_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED17_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED17_ST __AT (0x40121230);



// -----------------------------  Field Item: PWMLED17_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED17_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121230) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_ST >> 0) & 0xF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED17_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121230) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_ST >> 4) & 0xF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED17_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121230) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_ST >> 8) & 0xF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED17_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121230) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_ST >> 12) & 0xF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED17_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121230) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_ST >> 16) & 0xF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED17_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121230) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_ST >> 20) & 0xF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED17_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121230) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_ST >> 24) & 0xF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED17_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121230) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_ST >> 28) & 0xF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED17_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED17_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121230) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED17_ST >> 0) & 0xFFFFFFFF), ((PWMLED17_ST = (PWMLED17_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED17_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED17_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED17_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED17_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED17_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED17_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED17_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED17_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED17_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED17_CTRL __AT (0x40121234);



// -----------------------------  Field Item: PWMLED17_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED17_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121234) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED17_CTRL >> 16) & 0xFF), ((PWMLED17_CTRL = (PWMLED17_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED17_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED17_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121234) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED17_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED17_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED17_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121234) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED17_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED17_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED17_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121234) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED17_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED17_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED17_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121234) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED17_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED17_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED17_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121234) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED17_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED17_CTRL = (PWMLED17_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED17_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED17_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED17_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED17_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED17_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED17  -----------------------------------
// SVD Line: 22137

//  <view> PWMLED17
//    <name> PWMLED17 </name>
//    <item> SFDITEM_REG__PWMLED17_MODE </item>
//    <item> SFDITEM_REG__PWMLED17_DL </item>
//    <item> SFDITEM_REG__PWMLED17_WT </item>
//    <item> SFDITEM_REG__PWMLED17_SD </item>
//    <item> SFDITEM_REG__PWMLED17_ST </item>
//    <item> SFDITEM_REG__PWMLED17_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED18_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED18_MODE __AT (0x40121240);



// ------------------------------  Field Item: PWMLED18_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED18_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121240) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED18_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED18_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED18_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121240) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED18_MODE >> 0) & 0xFFFFFFFF), ((PWMLED18_MODE = (PWMLED18_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED18_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED18_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED18_DL __AT (0x40121244);



// ------------------------------  Field Item: PWMLED18_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED18_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121244) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_DL >> 0) & 0xFF), ((PWMLED18_DL = (PWMLED18_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED18_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED18_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121244) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_DL >> 8) & 0xFF), ((PWMLED18_DL = (PWMLED18_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED18_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED18_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121244) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED18_DL >> 0) & 0xFFFFFFFF), ((PWMLED18_DL = (PWMLED18_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED18_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED18_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED18_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED18_WT __AT (0x40121248);



// -------------------------------  Field Item: PWMLED18_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED18_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121248) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED18_WT >> 0) & 0xFFF), ((PWMLED18_WT = (PWMLED18_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED18_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED18_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121248) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED18_WT >> 16) & 0xFFF), ((PWMLED18_WT = (PWMLED18_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED18_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED18_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121248) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED18_WT >> 0) & 0xFFFFFFFF), ((PWMLED18_WT = (PWMLED18_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED18_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED18_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED18_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED18_SD __AT (0x4012124C);



// -----------------------------  Field Item: PWMLED18_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED18_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012124C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_SD >> 0) & 0xF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED18_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012124C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_SD >> 4) & 0xF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED18_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012124C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_SD >> 8) & 0xF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED18_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012124C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_SD >> 12) & 0xF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED18_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012124C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_SD >> 16) & 0xF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED18_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012124C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_SD >> 20) & 0xF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED18_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012124C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_SD >> 24) & 0xF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED18_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012124C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_SD >> 28) & 0xF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED18_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED18_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012124C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED18_SD >> 0) & 0xFFFFFFFF), ((PWMLED18_SD = (PWMLED18_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED18_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED18_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED18_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED18_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED18_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED18_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED18_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED18_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED18_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED18_ST __AT (0x40121250);



// -----------------------------  Field Item: PWMLED18_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED18_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121250) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_ST >> 0) & 0xF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED18_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121250) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_ST >> 4) & 0xF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED18_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121250) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_ST >> 8) & 0xF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED18_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121250) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_ST >> 12) & 0xF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED18_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121250) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_ST >> 16) & 0xF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED18_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121250) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_ST >> 20) & 0xF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED18_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121250) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_ST >> 24) & 0xF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED18_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121250) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_ST >> 28) & 0xF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED18_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED18_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121250) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED18_ST >> 0) & 0xFFFFFFFF), ((PWMLED18_ST = (PWMLED18_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED18_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED18_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED18_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED18_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED18_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED18_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED18_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED18_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED18_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED18_CTRL __AT (0x40121254);



// -----------------------------  Field Item: PWMLED18_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED18_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121254) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED18_CTRL >> 16) & 0xFF), ((PWMLED18_CTRL = (PWMLED18_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED18_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED18_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121254) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED18_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED18_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED18_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121254) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED18_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED18_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED18_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121254) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED18_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED18_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED18_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121254) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED18_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED18_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED18_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121254) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED18_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED18_CTRL = (PWMLED18_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED18_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED18_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED18_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED18_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED18_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED18  -----------------------------------
// SVD Line: 22141

//  <view> PWMLED18
//    <name> PWMLED18 </name>
//    <item> SFDITEM_REG__PWMLED18_MODE </item>
//    <item> SFDITEM_REG__PWMLED18_DL </item>
//    <item> SFDITEM_REG__PWMLED18_WT </item>
//    <item> SFDITEM_REG__PWMLED18_SD </item>
//    <item> SFDITEM_REG__PWMLED18_ST </item>
//    <item> SFDITEM_REG__PWMLED18_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED19_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED19_MODE __AT (0x40121260);



// ------------------------------  Field Item: PWMLED19_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED19_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121260) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED19_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED19_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED19_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121260) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED19_MODE >> 0) & 0xFFFFFFFF), ((PWMLED19_MODE = (PWMLED19_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED19_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED19_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED19_DL __AT (0x40121264);



// ------------------------------  Field Item: PWMLED19_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED19_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121264) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_DL >> 0) & 0xFF), ((PWMLED19_DL = (PWMLED19_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED19_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED19_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121264) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_DL >> 8) & 0xFF), ((PWMLED19_DL = (PWMLED19_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED19_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED19_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121264) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED19_DL >> 0) & 0xFFFFFFFF), ((PWMLED19_DL = (PWMLED19_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED19_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED19_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED19_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED19_WT __AT (0x40121268);



// -------------------------------  Field Item: PWMLED19_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED19_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121268) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED19_WT >> 0) & 0xFFF), ((PWMLED19_WT = (PWMLED19_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED19_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED19_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121268) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED19_WT >> 16) & 0xFFF), ((PWMLED19_WT = (PWMLED19_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED19_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED19_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121268) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED19_WT >> 0) & 0xFFFFFFFF), ((PWMLED19_WT = (PWMLED19_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED19_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED19_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED19_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED19_SD __AT (0x4012126C);



// -----------------------------  Field Item: PWMLED19_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED19_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012126C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_SD >> 0) & 0xF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED19_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012126C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_SD >> 4) & 0xF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED19_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012126C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_SD >> 8) & 0xF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED19_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012126C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_SD >> 12) & 0xF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED19_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012126C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_SD >> 16) & 0xF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED19_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012126C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_SD >> 20) & 0xF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED19_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012126C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_SD >> 24) & 0xF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED19_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012126C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_SD >> 28) & 0xF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED19_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED19_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012126C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED19_SD >> 0) & 0xFFFFFFFF), ((PWMLED19_SD = (PWMLED19_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED19_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED19_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED19_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED19_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED19_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED19_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED19_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED19_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED19_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED19_ST __AT (0x40121270);



// -----------------------------  Field Item: PWMLED19_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED19_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121270) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_ST >> 0) & 0xF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED19_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121270) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_ST >> 4) & 0xF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED19_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121270) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_ST >> 8) & 0xF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED19_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121270) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_ST >> 12) & 0xF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED19_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121270) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_ST >> 16) & 0xF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED19_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121270) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_ST >> 20) & 0xF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED19_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121270) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_ST >> 24) & 0xF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED19_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121270) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_ST >> 28) & 0xF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED19_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED19_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121270) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED19_ST >> 0) & 0xFFFFFFFF), ((PWMLED19_ST = (PWMLED19_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED19_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED19_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED19_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED19_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED19_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED19_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED19_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED19_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED19_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED19_CTRL __AT (0x40121274);



// -----------------------------  Field Item: PWMLED19_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED19_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121274) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED19_CTRL >> 16) & 0xFF), ((PWMLED19_CTRL = (PWMLED19_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED19_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED19_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121274) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED19_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED19_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED19_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121274) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED19_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED19_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED19_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121274) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED19_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED19_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED19_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121274) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED19_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED19_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED19_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121274) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED19_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED19_CTRL = (PWMLED19_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED19_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED19_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED19_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED19_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED19_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED19  -----------------------------------
// SVD Line: 22145

//  <view> PWMLED19
//    <name> PWMLED19 </name>
//    <item> SFDITEM_REG__PWMLED19_MODE </item>
//    <item> SFDITEM_REG__PWMLED19_DL </item>
//    <item> SFDITEM_REG__PWMLED19_WT </item>
//    <item> SFDITEM_REG__PWMLED19_SD </item>
//    <item> SFDITEM_REG__PWMLED19_ST </item>
//    <item> SFDITEM_REG__PWMLED19_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED20_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED20_MODE __AT (0x40121280);



// ------------------------------  Field Item: PWMLED20_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED20_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121280) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED20_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED20_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED20_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121280) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED20_MODE >> 0) & 0xFFFFFFFF), ((PWMLED20_MODE = (PWMLED20_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED20_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED20_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED20_DL __AT (0x40121284);



// ------------------------------  Field Item: PWMLED20_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED20_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121284) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_DL >> 0) & 0xFF), ((PWMLED20_DL = (PWMLED20_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED20_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED20_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121284) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_DL >> 8) & 0xFF), ((PWMLED20_DL = (PWMLED20_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED20_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED20_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121284) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED20_DL >> 0) & 0xFFFFFFFF), ((PWMLED20_DL = (PWMLED20_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED20_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED20_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED20_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED20_WT __AT (0x40121288);



// -------------------------------  Field Item: PWMLED20_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED20_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121288) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED20_WT >> 0) & 0xFFF), ((PWMLED20_WT = (PWMLED20_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED20_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED20_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121288) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED20_WT >> 16) & 0xFFF), ((PWMLED20_WT = (PWMLED20_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED20_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED20_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121288) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED20_WT >> 0) & 0xFFFFFFFF), ((PWMLED20_WT = (PWMLED20_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED20_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED20_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED20_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED20_SD __AT (0x4012128C);



// -----------------------------  Field Item: PWMLED20_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED20_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012128C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_SD >> 0) & 0xF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED20_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012128C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_SD >> 4) & 0xF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED20_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012128C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_SD >> 8) & 0xF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED20_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012128C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_SD >> 12) & 0xF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED20_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012128C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_SD >> 16) & 0xF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED20_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012128C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_SD >> 20) & 0xF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED20_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012128C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_SD >> 24) & 0xF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED20_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012128C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_SD >> 28) & 0xF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED20_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED20_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012128C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED20_SD >> 0) & 0xFFFFFFFF), ((PWMLED20_SD = (PWMLED20_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED20_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED20_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED20_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED20_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED20_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED20_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED20_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED20_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED20_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED20_ST __AT (0x40121290);



// -----------------------------  Field Item: PWMLED20_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED20_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121290) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_ST >> 0) & 0xF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED20_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121290) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_ST >> 4) & 0xF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED20_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121290) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_ST >> 8) & 0xF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED20_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121290) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_ST >> 12) & 0xF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED20_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121290) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_ST >> 16) & 0xF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED20_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121290) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_ST >> 20) & 0xF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED20_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121290) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_ST >> 24) & 0xF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED20_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121290) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_ST >> 28) & 0xF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED20_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED20_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121290) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED20_ST >> 0) & 0xFFFFFFFF), ((PWMLED20_ST = (PWMLED20_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED20_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED20_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED20_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED20_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED20_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED20_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED20_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED20_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED20_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED20_CTRL __AT (0x40121294);



// -----------------------------  Field Item: PWMLED20_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED20_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121294) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED20_CTRL >> 16) & 0xFF), ((PWMLED20_CTRL = (PWMLED20_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED20_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED20_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121294) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED20_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED20_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED20_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121294) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED20_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED20_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED20_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121294) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED20_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED20_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED20_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121294) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED20_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED20_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED20_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121294) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED20_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED20_CTRL = (PWMLED20_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED20_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED20_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED20_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED20_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED20_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED20  -----------------------------------
// SVD Line: 22149

//  <view> PWMLED20
//    <name> PWMLED20 </name>
//    <item> SFDITEM_REG__PWMLED20_MODE </item>
//    <item> SFDITEM_REG__PWMLED20_DL </item>
//    <item> SFDITEM_REG__PWMLED20_WT </item>
//    <item> SFDITEM_REG__PWMLED20_SD </item>
//    <item> SFDITEM_REG__PWMLED20_ST </item>
//    <item> SFDITEM_REG__PWMLED20_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED21_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED21_MODE __AT (0x401212A0);



// ------------------------------  Field Item: PWMLED21_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED21_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401212A0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED21_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED21_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED21_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212A0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED21_MODE >> 0) & 0xFFFFFFFF), ((PWMLED21_MODE = (PWMLED21_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED21_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED21_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED21_DL __AT (0x401212A4);



// ------------------------------  Field Item: PWMLED21_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED21_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401212A4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_DL >> 0) & 0xFF), ((PWMLED21_DL = (PWMLED21_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED21_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED21_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401212A4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_DL >> 8) & 0xFF), ((PWMLED21_DL = (PWMLED21_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED21_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED21_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212A4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED21_DL >> 0) & 0xFFFFFFFF), ((PWMLED21_DL = (PWMLED21_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED21_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED21_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED21_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED21_WT __AT (0x401212A8);



// -------------------------------  Field Item: PWMLED21_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED21_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401212A8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED21_WT >> 0) & 0xFFF), ((PWMLED21_WT = (PWMLED21_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED21_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED21_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401212A8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED21_WT >> 16) & 0xFFF), ((PWMLED21_WT = (PWMLED21_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED21_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED21_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212A8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED21_WT >> 0) & 0xFFFFFFFF), ((PWMLED21_WT = (PWMLED21_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED21_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED21_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED21_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED21_SD __AT (0x401212AC);



// -----------------------------  Field Item: PWMLED21_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED21_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401212AC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_SD >> 0) & 0xF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED21_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401212AC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_SD >> 4) & 0xF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED21_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401212AC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_SD >> 8) & 0xF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED21_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401212AC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_SD >> 12) & 0xF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED21_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401212AC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_SD >> 16) & 0xF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED21_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401212AC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_SD >> 20) & 0xF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED21_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401212AC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_SD >> 24) & 0xF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED21_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401212AC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_SD >> 28) & 0xF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED21_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED21_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212AC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED21_SD >> 0) & 0xFFFFFFFF), ((PWMLED21_SD = (PWMLED21_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED21_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED21_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED21_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED21_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED21_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED21_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED21_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED21_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED21_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED21_ST __AT (0x401212B0);



// -----------------------------  Field Item: PWMLED21_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED21_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401212B0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_ST >> 0) & 0xF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED21_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401212B0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_ST >> 4) & 0xF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED21_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401212B0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_ST >> 8) & 0xF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED21_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401212B0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_ST >> 12) & 0xF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED21_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401212B0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_ST >> 16) & 0xF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED21_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401212B0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_ST >> 20) & 0xF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED21_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401212B0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_ST >> 24) & 0xF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED21_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401212B0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_ST >> 28) & 0xF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED21_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED21_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212B0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED21_ST >> 0) & 0xFFFFFFFF), ((PWMLED21_ST = (PWMLED21_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED21_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED21_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED21_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED21_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED21_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED21_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED21_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED21_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED21_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED21_CTRL __AT (0x401212B4);



// -----------------------------  Field Item: PWMLED21_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED21_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401212B4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED21_CTRL >> 16) & 0xFF), ((PWMLED21_CTRL = (PWMLED21_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED21_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED21_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401212B4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED21_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED21_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED21_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401212B4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED21_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED21_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED21_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401212B4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED21_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED21_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED21_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401212B4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED21_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED21_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED21_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212B4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED21_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED21_CTRL = (PWMLED21_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED21_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED21_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED21_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED21_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED21_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED21  -----------------------------------
// SVD Line: 22153

//  <view> PWMLED21
//    <name> PWMLED21 </name>
//    <item> SFDITEM_REG__PWMLED21_MODE </item>
//    <item> SFDITEM_REG__PWMLED21_DL </item>
//    <item> SFDITEM_REG__PWMLED21_WT </item>
//    <item> SFDITEM_REG__PWMLED21_SD </item>
//    <item> SFDITEM_REG__PWMLED21_ST </item>
//    <item> SFDITEM_REG__PWMLED21_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED22_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED22_MODE __AT (0x401212C0);



// ------------------------------  Field Item: PWMLED22_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED22_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401212C0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED22_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED22_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED22_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212C0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED22_MODE >> 0) & 0xFFFFFFFF), ((PWMLED22_MODE = (PWMLED22_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED22_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED22_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED22_DL __AT (0x401212C4);



// ------------------------------  Field Item: PWMLED22_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED22_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401212C4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_DL >> 0) & 0xFF), ((PWMLED22_DL = (PWMLED22_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED22_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED22_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401212C4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_DL >> 8) & 0xFF), ((PWMLED22_DL = (PWMLED22_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED22_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED22_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212C4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED22_DL >> 0) & 0xFFFFFFFF), ((PWMLED22_DL = (PWMLED22_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED22_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED22_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED22_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED22_WT __AT (0x401212C8);



// -------------------------------  Field Item: PWMLED22_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED22_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401212C8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED22_WT >> 0) & 0xFFF), ((PWMLED22_WT = (PWMLED22_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED22_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED22_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401212C8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED22_WT >> 16) & 0xFFF), ((PWMLED22_WT = (PWMLED22_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED22_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED22_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212C8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED22_WT >> 0) & 0xFFFFFFFF), ((PWMLED22_WT = (PWMLED22_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED22_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED22_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED22_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED22_SD __AT (0x401212CC);



// -----------------------------  Field Item: PWMLED22_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED22_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401212CC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_SD >> 0) & 0xF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED22_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401212CC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_SD >> 4) & 0xF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED22_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401212CC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_SD >> 8) & 0xF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED22_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401212CC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_SD >> 12) & 0xF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED22_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401212CC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_SD >> 16) & 0xF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED22_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401212CC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_SD >> 20) & 0xF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED22_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401212CC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_SD >> 24) & 0xF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED22_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401212CC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_SD >> 28) & 0xF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED22_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED22_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212CC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED22_SD >> 0) & 0xFFFFFFFF), ((PWMLED22_SD = (PWMLED22_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED22_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED22_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED22_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED22_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED22_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED22_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED22_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED22_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED22_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED22_ST __AT (0x401212D0);



// -----------------------------  Field Item: PWMLED22_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED22_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401212D0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_ST >> 0) & 0xF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED22_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401212D0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_ST >> 4) & 0xF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED22_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401212D0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_ST >> 8) & 0xF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED22_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401212D0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_ST >> 12) & 0xF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED22_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401212D0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_ST >> 16) & 0xF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED22_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401212D0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_ST >> 20) & 0xF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED22_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401212D0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_ST >> 24) & 0xF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED22_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401212D0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_ST >> 28) & 0xF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED22_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED22_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212D0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED22_ST >> 0) & 0xFFFFFFFF), ((PWMLED22_ST = (PWMLED22_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED22_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED22_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED22_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED22_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED22_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED22_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED22_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED22_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED22_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED22_CTRL __AT (0x401212D4);



// -----------------------------  Field Item: PWMLED22_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED22_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401212D4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED22_CTRL >> 16) & 0xFF), ((PWMLED22_CTRL = (PWMLED22_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED22_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED22_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401212D4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED22_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED22_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED22_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401212D4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED22_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED22_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED22_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401212D4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED22_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED22_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED22_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401212D4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED22_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED22_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED22_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212D4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED22_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED22_CTRL = (PWMLED22_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED22_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED22_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED22_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED22_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED22_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED22  -----------------------------------
// SVD Line: 22157

//  <view> PWMLED22
//    <name> PWMLED22 </name>
//    <item> SFDITEM_REG__PWMLED22_MODE </item>
//    <item> SFDITEM_REG__PWMLED22_DL </item>
//    <item> SFDITEM_REG__PWMLED22_WT </item>
//    <item> SFDITEM_REG__PWMLED22_SD </item>
//    <item> SFDITEM_REG__PWMLED22_ST </item>
//    <item> SFDITEM_REG__PWMLED22_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED23_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED23_MODE __AT (0x401212E0);



// ------------------------------  Field Item: PWMLED23_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED23_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401212E0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED23_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED23_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED23_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212E0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED23_MODE >> 0) & 0xFFFFFFFF), ((PWMLED23_MODE = (PWMLED23_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED23_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED23_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED23_DL __AT (0x401212E4);



// ------------------------------  Field Item: PWMLED23_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED23_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401212E4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_DL >> 0) & 0xFF), ((PWMLED23_DL = (PWMLED23_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED23_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED23_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401212E4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_DL >> 8) & 0xFF), ((PWMLED23_DL = (PWMLED23_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED23_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED23_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212E4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED23_DL >> 0) & 0xFFFFFFFF), ((PWMLED23_DL = (PWMLED23_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED23_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED23_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED23_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED23_WT __AT (0x401212E8);



// -------------------------------  Field Item: PWMLED23_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED23_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401212E8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED23_WT >> 0) & 0xFFF), ((PWMLED23_WT = (PWMLED23_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED23_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED23_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401212E8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED23_WT >> 16) & 0xFFF), ((PWMLED23_WT = (PWMLED23_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED23_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED23_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212E8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED23_WT >> 0) & 0xFFFFFFFF), ((PWMLED23_WT = (PWMLED23_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED23_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED23_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED23_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED23_SD __AT (0x401212EC);



// -----------------------------  Field Item: PWMLED23_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED23_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401212EC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_SD >> 0) & 0xF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED23_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401212EC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_SD >> 4) & 0xF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED23_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401212EC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_SD >> 8) & 0xF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED23_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401212EC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_SD >> 12) & 0xF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED23_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401212EC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_SD >> 16) & 0xF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED23_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401212EC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_SD >> 20) & 0xF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED23_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401212EC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_SD >> 24) & 0xF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED23_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401212EC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_SD >> 28) & 0xF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED23_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED23_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212EC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED23_SD >> 0) & 0xFFFFFFFF), ((PWMLED23_SD = (PWMLED23_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED23_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED23_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED23_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED23_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED23_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED23_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED23_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED23_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED23_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED23_ST __AT (0x401212F0);



// -----------------------------  Field Item: PWMLED23_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED23_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401212F0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_ST >> 0) & 0xF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED23_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401212F0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_ST >> 4) & 0xF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED23_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401212F0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_ST >> 8) & 0xF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED23_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401212F0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_ST >> 12) & 0xF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED23_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401212F0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_ST >> 16) & 0xF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED23_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401212F0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_ST >> 20) & 0xF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED23_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401212F0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_ST >> 24) & 0xF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED23_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401212F0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_ST >> 28) & 0xF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED23_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED23_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212F0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED23_ST >> 0) & 0xFFFFFFFF), ((PWMLED23_ST = (PWMLED23_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED23_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED23_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED23_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED23_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED23_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED23_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED23_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED23_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED23_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED23_CTRL __AT (0x401212F4);



// -----------------------------  Field Item: PWMLED23_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED23_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401212F4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED23_CTRL >> 16) & 0xFF), ((PWMLED23_CTRL = (PWMLED23_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED23_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED23_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401212F4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED23_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED23_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED23_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401212F4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED23_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED23_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED23_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401212F4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED23_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED23_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED23_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401212F4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED23_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED23_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED23_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401212F4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED23_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED23_CTRL = (PWMLED23_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED23_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED23_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED23_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED23_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED23_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED23  -----------------------------------
// SVD Line: 22161

//  <view> PWMLED23
//    <name> PWMLED23 </name>
//    <item> SFDITEM_REG__PWMLED23_MODE </item>
//    <item> SFDITEM_REG__PWMLED23_DL </item>
//    <item> SFDITEM_REG__PWMLED23_WT </item>
//    <item> SFDITEM_REG__PWMLED23_SD </item>
//    <item> SFDITEM_REG__PWMLED23_ST </item>
//    <item> SFDITEM_REG__PWMLED23_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED24_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED24_MODE __AT (0x40121300);



// ------------------------------  Field Item: PWMLED24_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED24_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121300) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED24_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED24_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED24_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121300) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED24_MODE >> 0) & 0xFFFFFFFF), ((PWMLED24_MODE = (PWMLED24_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED24_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED24_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED24_DL __AT (0x40121304);



// ------------------------------  Field Item: PWMLED24_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED24_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121304) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_DL >> 0) & 0xFF), ((PWMLED24_DL = (PWMLED24_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED24_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED24_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121304) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_DL >> 8) & 0xFF), ((PWMLED24_DL = (PWMLED24_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED24_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED24_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121304) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED24_DL >> 0) & 0xFFFFFFFF), ((PWMLED24_DL = (PWMLED24_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED24_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED24_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED24_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED24_WT __AT (0x40121308);



// -------------------------------  Field Item: PWMLED24_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED24_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121308) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED24_WT >> 0) & 0xFFF), ((PWMLED24_WT = (PWMLED24_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED24_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED24_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121308) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED24_WT >> 16) & 0xFFF), ((PWMLED24_WT = (PWMLED24_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED24_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED24_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121308) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED24_WT >> 0) & 0xFFFFFFFF), ((PWMLED24_WT = (PWMLED24_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED24_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED24_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED24_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED24_SD __AT (0x4012130C);



// -----------------------------  Field Item: PWMLED24_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED24_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012130C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_SD >> 0) & 0xF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED24_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012130C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_SD >> 4) & 0xF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED24_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012130C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_SD >> 8) & 0xF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED24_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012130C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_SD >> 12) & 0xF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED24_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012130C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_SD >> 16) & 0xF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED24_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012130C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_SD >> 20) & 0xF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED24_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012130C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_SD >> 24) & 0xF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED24_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012130C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_SD >> 28) & 0xF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED24_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED24_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012130C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED24_SD >> 0) & 0xFFFFFFFF), ((PWMLED24_SD = (PWMLED24_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED24_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED24_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED24_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED24_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED24_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED24_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED24_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED24_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED24_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED24_ST __AT (0x40121310);



// -----------------------------  Field Item: PWMLED24_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED24_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121310) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_ST >> 0) & 0xF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED24_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121310) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_ST >> 4) & 0xF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED24_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121310) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_ST >> 8) & 0xF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED24_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121310) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_ST >> 12) & 0xF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED24_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121310) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_ST >> 16) & 0xF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED24_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121310) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_ST >> 20) & 0xF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED24_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121310) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_ST >> 24) & 0xF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED24_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121310) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_ST >> 28) & 0xF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED24_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED24_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121310) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED24_ST >> 0) & 0xFFFFFFFF), ((PWMLED24_ST = (PWMLED24_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED24_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED24_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED24_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED24_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED24_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED24_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED24_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED24_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED24_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED24_CTRL __AT (0x40121314);



// -----------------------------  Field Item: PWMLED24_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED24_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121314) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED24_CTRL >> 16) & 0xFF), ((PWMLED24_CTRL = (PWMLED24_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED24_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED24_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121314) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED24_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED24_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED24_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121314) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED24_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED24_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED24_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121314) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED24_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED24_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED24_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121314) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED24_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED24_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED24_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121314) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED24_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED24_CTRL = (PWMLED24_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED24_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED24_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED24_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED24_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED24_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED24  -----------------------------------
// SVD Line: 22165

//  <view> PWMLED24
//    <name> PWMLED24 </name>
//    <item> SFDITEM_REG__PWMLED24_MODE </item>
//    <item> SFDITEM_REG__PWMLED24_DL </item>
//    <item> SFDITEM_REG__PWMLED24_WT </item>
//    <item> SFDITEM_REG__PWMLED24_SD </item>
//    <item> SFDITEM_REG__PWMLED24_ST </item>
//    <item> SFDITEM_REG__PWMLED24_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED25_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED25_MODE __AT (0x40121320);



// ------------------------------  Field Item: PWMLED25_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED25_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121320) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED25_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED25_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED25_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121320) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED25_MODE >> 0) & 0xFFFFFFFF), ((PWMLED25_MODE = (PWMLED25_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED25_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED25_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED25_DL __AT (0x40121324);



// ------------------------------  Field Item: PWMLED25_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED25_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121324) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_DL >> 0) & 0xFF), ((PWMLED25_DL = (PWMLED25_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED25_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED25_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121324) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_DL >> 8) & 0xFF), ((PWMLED25_DL = (PWMLED25_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED25_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED25_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121324) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED25_DL >> 0) & 0xFFFFFFFF), ((PWMLED25_DL = (PWMLED25_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED25_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED25_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED25_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED25_WT __AT (0x40121328);



// -------------------------------  Field Item: PWMLED25_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED25_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121328) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED25_WT >> 0) & 0xFFF), ((PWMLED25_WT = (PWMLED25_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED25_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED25_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121328) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED25_WT >> 16) & 0xFFF), ((PWMLED25_WT = (PWMLED25_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED25_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED25_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121328) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED25_WT >> 0) & 0xFFFFFFFF), ((PWMLED25_WT = (PWMLED25_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED25_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED25_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED25_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED25_SD __AT (0x4012132C);



// -----------------------------  Field Item: PWMLED25_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED25_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012132C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_SD >> 0) & 0xF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED25_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012132C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_SD >> 4) & 0xF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED25_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012132C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_SD >> 8) & 0xF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED25_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012132C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_SD >> 12) & 0xF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED25_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012132C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_SD >> 16) & 0xF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED25_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012132C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_SD >> 20) & 0xF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED25_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012132C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_SD >> 24) & 0xF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED25_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012132C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_SD >> 28) & 0xF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED25_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED25_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012132C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED25_SD >> 0) & 0xFFFFFFFF), ((PWMLED25_SD = (PWMLED25_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED25_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED25_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED25_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED25_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED25_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED25_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED25_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED25_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED25_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED25_ST __AT (0x40121330);



// -----------------------------  Field Item: PWMLED25_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED25_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121330) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_ST >> 0) & 0xF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED25_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121330) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_ST >> 4) & 0xF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED25_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121330) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_ST >> 8) & 0xF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED25_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121330) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_ST >> 12) & 0xF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED25_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121330) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_ST >> 16) & 0xF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED25_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121330) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_ST >> 20) & 0xF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED25_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121330) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_ST >> 24) & 0xF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED25_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121330) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_ST >> 28) & 0xF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED25_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED25_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121330) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED25_ST >> 0) & 0xFFFFFFFF), ((PWMLED25_ST = (PWMLED25_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED25_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED25_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED25_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED25_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED25_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED25_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED25_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED25_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED25_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED25_CTRL __AT (0x40121334);



// -----------------------------  Field Item: PWMLED25_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED25_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121334) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED25_CTRL >> 16) & 0xFF), ((PWMLED25_CTRL = (PWMLED25_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED25_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED25_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121334) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED25_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED25_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED25_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121334) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED25_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED25_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED25_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121334) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED25_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED25_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED25_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121334) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED25_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED25_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED25_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121334) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED25_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED25_CTRL = (PWMLED25_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED25_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED25_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED25_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED25_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED25_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED25  -----------------------------------
// SVD Line: 22169

//  <view> PWMLED25
//    <name> PWMLED25 </name>
//    <item> SFDITEM_REG__PWMLED25_MODE </item>
//    <item> SFDITEM_REG__PWMLED25_DL </item>
//    <item> SFDITEM_REG__PWMLED25_WT </item>
//    <item> SFDITEM_REG__PWMLED25_SD </item>
//    <item> SFDITEM_REG__PWMLED25_ST </item>
//    <item> SFDITEM_REG__PWMLED25_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED26_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED26_MODE __AT (0x40121340);



// ------------------------------  Field Item: PWMLED26_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED26_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121340) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED26_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED26_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED26_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121340) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED26_MODE >> 0) & 0xFFFFFFFF), ((PWMLED26_MODE = (PWMLED26_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED26_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED26_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED26_DL __AT (0x40121344);



// ------------------------------  Field Item: PWMLED26_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED26_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121344) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_DL >> 0) & 0xFF), ((PWMLED26_DL = (PWMLED26_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED26_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED26_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121344) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_DL >> 8) & 0xFF), ((PWMLED26_DL = (PWMLED26_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED26_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED26_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121344) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED26_DL >> 0) & 0xFFFFFFFF), ((PWMLED26_DL = (PWMLED26_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED26_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED26_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED26_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED26_WT __AT (0x40121348);



// -------------------------------  Field Item: PWMLED26_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED26_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121348) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED26_WT >> 0) & 0xFFF), ((PWMLED26_WT = (PWMLED26_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED26_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED26_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121348) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED26_WT >> 16) & 0xFFF), ((PWMLED26_WT = (PWMLED26_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED26_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED26_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121348) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED26_WT >> 0) & 0xFFFFFFFF), ((PWMLED26_WT = (PWMLED26_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED26_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED26_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED26_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED26_SD __AT (0x4012134C);



// -----------------------------  Field Item: PWMLED26_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED26_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012134C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_SD >> 0) & 0xF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED26_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012134C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_SD >> 4) & 0xF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED26_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012134C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_SD >> 8) & 0xF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED26_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012134C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_SD >> 12) & 0xF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED26_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012134C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_SD >> 16) & 0xF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED26_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012134C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_SD >> 20) & 0xF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED26_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012134C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_SD >> 24) & 0xF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED26_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012134C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_SD >> 28) & 0xF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED26_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED26_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012134C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED26_SD >> 0) & 0xFFFFFFFF), ((PWMLED26_SD = (PWMLED26_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED26_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED26_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED26_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED26_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED26_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED26_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED26_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED26_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED26_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED26_ST __AT (0x40121350);



// -----------------------------  Field Item: PWMLED26_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED26_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121350) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_ST >> 0) & 0xF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED26_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121350) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_ST >> 4) & 0xF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED26_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121350) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_ST >> 8) & 0xF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED26_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121350) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_ST >> 12) & 0xF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED26_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121350) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_ST >> 16) & 0xF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED26_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121350) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_ST >> 20) & 0xF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED26_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121350) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_ST >> 24) & 0xF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED26_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121350) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_ST >> 28) & 0xF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED26_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED26_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121350) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED26_ST >> 0) & 0xFFFFFFFF), ((PWMLED26_ST = (PWMLED26_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED26_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED26_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED26_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED26_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED26_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED26_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED26_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED26_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED26_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED26_CTRL __AT (0x40121354);



// -----------------------------  Field Item: PWMLED26_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED26_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121354) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED26_CTRL >> 16) & 0xFF), ((PWMLED26_CTRL = (PWMLED26_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED26_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED26_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121354) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED26_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED26_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED26_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121354) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED26_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED26_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED26_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121354) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED26_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED26_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED26_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121354) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED26_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED26_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED26_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121354) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED26_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED26_CTRL = (PWMLED26_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED26_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED26_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED26_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED26_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED26_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED26  -----------------------------------
// SVD Line: 22173

//  <view> PWMLED26
//    <name> PWMLED26 </name>
//    <item> SFDITEM_REG__PWMLED26_MODE </item>
//    <item> SFDITEM_REG__PWMLED26_DL </item>
//    <item> SFDITEM_REG__PWMLED26_WT </item>
//    <item> SFDITEM_REG__PWMLED26_SD </item>
//    <item> SFDITEM_REG__PWMLED26_ST </item>
//    <item> SFDITEM_REG__PWMLED26_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED27_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED27_MODE __AT (0x40121360);



// ------------------------------  Field Item: PWMLED27_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED27_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121360) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED27_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED27_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED27_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121360) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED27_MODE >> 0) & 0xFFFFFFFF), ((PWMLED27_MODE = (PWMLED27_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED27_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED27_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED27_DL __AT (0x40121364);



// ------------------------------  Field Item: PWMLED27_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED27_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121364) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_DL >> 0) & 0xFF), ((PWMLED27_DL = (PWMLED27_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED27_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED27_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121364) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_DL >> 8) & 0xFF), ((PWMLED27_DL = (PWMLED27_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED27_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED27_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121364) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED27_DL >> 0) & 0xFFFFFFFF), ((PWMLED27_DL = (PWMLED27_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED27_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED27_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED27_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED27_WT __AT (0x40121368);



// -------------------------------  Field Item: PWMLED27_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED27_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121368) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED27_WT >> 0) & 0xFFF), ((PWMLED27_WT = (PWMLED27_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED27_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED27_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121368) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED27_WT >> 16) & 0xFFF), ((PWMLED27_WT = (PWMLED27_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED27_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED27_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121368) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED27_WT >> 0) & 0xFFFFFFFF), ((PWMLED27_WT = (PWMLED27_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED27_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED27_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED27_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED27_SD __AT (0x4012136C);



// -----------------------------  Field Item: PWMLED27_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED27_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012136C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_SD >> 0) & 0xF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED27_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012136C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_SD >> 4) & 0xF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED27_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012136C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_SD >> 8) & 0xF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED27_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012136C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_SD >> 12) & 0xF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED27_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012136C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_SD >> 16) & 0xF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED27_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012136C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_SD >> 20) & 0xF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED27_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012136C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_SD >> 24) & 0xF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED27_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012136C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_SD >> 28) & 0xF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED27_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED27_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012136C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED27_SD >> 0) & 0xFFFFFFFF), ((PWMLED27_SD = (PWMLED27_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED27_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED27_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED27_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED27_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED27_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED27_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED27_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED27_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED27_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED27_ST __AT (0x40121370);



// -----------------------------  Field Item: PWMLED27_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED27_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121370) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_ST >> 0) & 0xF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED27_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121370) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_ST >> 4) & 0xF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED27_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121370) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_ST >> 8) & 0xF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED27_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121370) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_ST >> 12) & 0xF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED27_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121370) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_ST >> 16) & 0xF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED27_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121370) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_ST >> 20) & 0xF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED27_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121370) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_ST >> 24) & 0xF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED27_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121370) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_ST >> 28) & 0xF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED27_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED27_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121370) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED27_ST >> 0) & 0xFFFFFFFF), ((PWMLED27_ST = (PWMLED27_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED27_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED27_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED27_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED27_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED27_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED27_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED27_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED27_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED27_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED27_CTRL __AT (0x40121374);



// -----------------------------  Field Item: PWMLED27_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED27_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121374) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED27_CTRL >> 16) & 0xFF), ((PWMLED27_CTRL = (PWMLED27_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED27_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED27_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121374) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED27_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED27_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED27_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121374) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED27_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED27_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED27_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121374) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED27_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED27_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED27_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121374) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED27_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED27_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED27_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121374) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED27_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED27_CTRL = (PWMLED27_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED27_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED27_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED27_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED27_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED27_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED27  -----------------------------------
// SVD Line: 22177

//  <view> PWMLED27
//    <name> PWMLED27 </name>
//    <item> SFDITEM_REG__PWMLED27_MODE </item>
//    <item> SFDITEM_REG__PWMLED27_DL </item>
//    <item> SFDITEM_REG__PWMLED27_WT </item>
//    <item> SFDITEM_REG__PWMLED27_SD </item>
//    <item> SFDITEM_REG__PWMLED27_ST </item>
//    <item> SFDITEM_REG__PWMLED27_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED28_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED28_MODE __AT (0x40121380);



// ------------------------------  Field Item: PWMLED28_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED28_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x40121380) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED28_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED28_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED28_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121380) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED28_MODE >> 0) & 0xFFFFFFFF), ((PWMLED28_MODE = (PWMLED28_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED28_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED28_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED28_DL __AT (0x40121384);



// ------------------------------  Field Item: PWMLED28_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED28_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x40121384) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_DL >> 0) & 0xFF), ((PWMLED28_DL = (PWMLED28_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED28_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED28_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x40121384) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_DL >> 8) & 0xFF), ((PWMLED28_DL = (PWMLED28_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED28_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED28_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121384) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED28_DL >> 0) & 0xFFFFFFFF), ((PWMLED28_DL = (PWMLED28_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED28_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED28_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED28_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED28_WT __AT (0x40121388);



// -------------------------------  Field Item: PWMLED28_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED28_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x40121388) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED28_WT >> 0) & 0xFFF), ((PWMLED28_WT = (PWMLED28_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED28_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED28_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x40121388) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED28_WT >> 16) & 0xFFF), ((PWMLED28_WT = (PWMLED28_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED28_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED28_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121388) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED28_WT >> 0) & 0xFFFFFFFF), ((PWMLED28_WT = (PWMLED28_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED28_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED28_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED28_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED28_SD __AT (0x4012138C);



// -----------------------------  Field Item: PWMLED28_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED28_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012138C) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_SD >> 0) & 0xF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED28_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x4012138C) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_SD >> 4) & 0xF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED28_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x4012138C) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_SD >> 8) & 0xF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED28_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x4012138C) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_SD >> 12) & 0xF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED28_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x4012138C) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_SD >> 16) & 0xF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED28_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x4012138C) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_SD >> 20) & 0xF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED28_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x4012138C) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_SD >> 24) & 0xF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED28_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x4012138C) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_SD >> 28) & 0xF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED28_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED28_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012138C) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED28_SD >> 0) & 0xFFFFFFFF), ((PWMLED28_SD = (PWMLED28_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED28_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED28_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED28_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED28_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED28_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED28_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED28_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED28_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED28_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED28_ST __AT (0x40121390);



// -----------------------------  Field Item: PWMLED28_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED28_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40121390) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_ST >> 0) & 0xF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED28_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40121390) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_ST >> 4) & 0xF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED28_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40121390) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_ST >> 8) & 0xF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED28_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40121390) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_ST >> 12) & 0xF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED28_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40121390) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_ST >> 16) & 0xF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED28_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40121390) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_ST >> 20) & 0xF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED28_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40121390) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_ST >> 24) & 0xF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED28_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40121390) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_ST >> 28) & 0xF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED28_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED28_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121390) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED28_ST >> 0) & 0xFFFFFFFF), ((PWMLED28_ST = (PWMLED28_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED28_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED28_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED28_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED28_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED28_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED28_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED28_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED28_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED28_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED28_CTRL __AT (0x40121394);



// -----------------------------  Field Item: PWMLED28_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED28_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x40121394) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED28_CTRL >> 16) & 0xFF), ((PWMLED28_CTRL = (PWMLED28_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED28_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED28_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x40121394) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED28_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED28_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED28_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x40121394) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED28_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED28_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED28_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x40121394) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED28_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED28_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED28_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x40121394) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED28_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED28_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED28_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121394) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED28_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED28_CTRL = (PWMLED28_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED28_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED28_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED28_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED28_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED28_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED28  -----------------------------------
// SVD Line: 22181

//  <view> PWMLED28
//    <name> PWMLED28 </name>
//    <item> SFDITEM_REG__PWMLED28_MODE </item>
//    <item> SFDITEM_REG__PWMLED28_DL </item>
//    <item> SFDITEM_REG__PWMLED28_WT </item>
//    <item> SFDITEM_REG__PWMLED28_SD </item>
//    <item> SFDITEM_REG__PWMLED28_ST </item>
//    <item> SFDITEM_REG__PWMLED28_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED29_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED29_MODE __AT (0x401213A0);



// ------------------------------  Field Item: PWMLED29_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED29_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401213A0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED29_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED29_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED29_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213A0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED29_MODE >> 0) & 0xFFFFFFFF), ((PWMLED29_MODE = (PWMLED29_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED29_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED29_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED29_DL __AT (0x401213A4);



// ------------------------------  Field Item: PWMLED29_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED29_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401213A4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_DL >> 0) & 0xFF), ((PWMLED29_DL = (PWMLED29_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED29_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED29_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401213A4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_DL >> 8) & 0xFF), ((PWMLED29_DL = (PWMLED29_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED29_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED29_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213A4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED29_DL >> 0) & 0xFFFFFFFF), ((PWMLED29_DL = (PWMLED29_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED29_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED29_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED29_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED29_WT __AT (0x401213A8);



// -------------------------------  Field Item: PWMLED29_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED29_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401213A8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED29_WT >> 0) & 0xFFF), ((PWMLED29_WT = (PWMLED29_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED29_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED29_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401213A8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED29_WT >> 16) & 0xFFF), ((PWMLED29_WT = (PWMLED29_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED29_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED29_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213A8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED29_WT >> 0) & 0xFFFFFFFF), ((PWMLED29_WT = (PWMLED29_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED29_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED29_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED29_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED29_SD __AT (0x401213AC);



// -----------------------------  Field Item: PWMLED29_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED29_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401213AC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_SD >> 0) & 0xF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED29_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401213AC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_SD >> 4) & 0xF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED29_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401213AC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_SD >> 8) & 0xF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED29_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401213AC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_SD >> 12) & 0xF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED29_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401213AC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_SD >> 16) & 0xF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED29_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401213AC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_SD >> 20) & 0xF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED29_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401213AC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_SD >> 24) & 0xF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED29_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401213AC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_SD >> 28) & 0xF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED29_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED29_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213AC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED29_SD >> 0) & 0xFFFFFFFF), ((PWMLED29_SD = (PWMLED29_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED29_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED29_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED29_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED29_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED29_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED29_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED29_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED29_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED29_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED29_ST __AT (0x401213B0);



// -----------------------------  Field Item: PWMLED29_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED29_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401213B0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_ST >> 0) & 0xF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED29_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401213B0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_ST >> 4) & 0xF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED29_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401213B0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_ST >> 8) & 0xF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED29_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401213B0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_ST >> 12) & 0xF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED29_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401213B0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_ST >> 16) & 0xF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED29_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401213B0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_ST >> 20) & 0xF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED29_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401213B0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_ST >> 24) & 0xF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED29_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401213B0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_ST >> 28) & 0xF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED29_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED29_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213B0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED29_ST >> 0) & 0xFFFFFFFF), ((PWMLED29_ST = (PWMLED29_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED29_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED29_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED29_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED29_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED29_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED29_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED29_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED29_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED29_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED29_CTRL __AT (0x401213B4);



// -----------------------------  Field Item: PWMLED29_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED29_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401213B4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED29_CTRL >> 16) & 0xFF), ((PWMLED29_CTRL = (PWMLED29_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED29_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED29_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401213B4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED29_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED29_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED29_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401213B4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED29_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED29_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED29_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401213B4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED29_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED29_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED29_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401213B4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED29_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED29_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED29_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213B4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED29_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED29_CTRL = (PWMLED29_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED29_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED29_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED29_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED29_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED29_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED29  -----------------------------------
// SVD Line: 22185

//  <view> PWMLED29
//    <name> PWMLED29 </name>
//    <item> SFDITEM_REG__PWMLED29_MODE </item>
//    <item> SFDITEM_REG__PWMLED29_DL </item>
//    <item> SFDITEM_REG__PWMLED29_WT </item>
//    <item> SFDITEM_REG__PWMLED29_SD </item>
//    <item> SFDITEM_REG__PWMLED29_ST </item>
//    <item> SFDITEM_REG__PWMLED29_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED30_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED30_MODE __AT (0x401213C0);



// ------------------------------  Field Item: PWMLED30_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED30_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401213C0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED30_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED30_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED30_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213C0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED30_MODE >> 0) & 0xFFFFFFFF), ((PWMLED30_MODE = (PWMLED30_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED30_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED30_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED30_DL __AT (0x401213C4);



// ------------------------------  Field Item: PWMLED30_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED30_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401213C4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_DL >> 0) & 0xFF), ((PWMLED30_DL = (PWMLED30_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED30_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED30_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401213C4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_DL >> 8) & 0xFF), ((PWMLED30_DL = (PWMLED30_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED30_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED30_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213C4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED30_DL >> 0) & 0xFFFFFFFF), ((PWMLED30_DL = (PWMLED30_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED30_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED30_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED30_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED30_WT __AT (0x401213C8);



// -------------------------------  Field Item: PWMLED30_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED30_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401213C8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED30_WT >> 0) & 0xFFF), ((PWMLED30_WT = (PWMLED30_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED30_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED30_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401213C8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED30_WT >> 16) & 0xFFF), ((PWMLED30_WT = (PWMLED30_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED30_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED30_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213C8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED30_WT >> 0) & 0xFFFFFFFF), ((PWMLED30_WT = (PWMLED30_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED30_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED30_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED30_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED30_SD __AT (0x401213CC);



// -----------------------------  Field Item: PWMLED30_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED30_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401213CC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_SD >> 0) & 0xF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED30_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401213CC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_SD >> 4) & 0xF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED30_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401213CC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_SD >> 8) & 0xF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED30_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401213CC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_SD >> 12) & 0xF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED30_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401213CC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_SD >> 16) & 0xF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED30_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401213CC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_SD >> 20) & 0xF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED30_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401213CC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_SD >> 24) & 0xF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED30_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401213CC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_SD >> 28) & 0xF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED30_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED30_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213CC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED30_SD >> 0) & 0xFFFFFFFF), ((PWMLED30_SD = (PWMLED30_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED30_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED30_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED30_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED30_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED30_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED30_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED30_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED30_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED30_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED30_ST __AT (0x401213D0);



// -----------------------------  Field Item: PWMLED30_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED30_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401213D0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_ST >> 0) & 0xF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED30_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401213D0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_ST >> 4) & 0xF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED30_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401213D0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_ST >> 8) & 0xF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED30_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401213D0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_ST >> 12) & 0xF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED30_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401213D0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_ST >> 16) & 0xF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED30_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401213D0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_ST >> 20) & 0xF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED30_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401213D0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_ST >> 24) & 0xF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED30_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401213D0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_ST >> 28) & 0xF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED30_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED30_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213D0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED30_ST >> 0) & 0xFFFFFFFF), ((PWMLED30_ST = (PWMLED30_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED30_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED30_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED30_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED30_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED30_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED30_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED30_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED30_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED30_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED30_CTRL __AT (0x401213D4);



// -----------------------------  Field Item: PWMLED30_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED30_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401213D4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED30_CTRL >> 16) & 0xFF), ((PWMLED30_CTRL = (PWMLED30_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED30_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED30_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401213D4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED30_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED30_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED30_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401213D4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED30_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED30_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED30_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401213D4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED30_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED30_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED30_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401213D4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED30_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED30_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED30_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213D4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED30_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED30_CTRL = (PWMLED30_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED30_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED30_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED30_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED30_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED30_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED30  -----------------------------------
// SVD Line: 22189

//  <view> PWMLED30
//    <name> PWMLED30 </name>
//    <item> SFDITEM_REG__PWMLED30_MODE </item>
//    <item> SFDITEM_REG__PWMLED30_DL </item>
//    <item> SFDITEM_REG__PWMLED30_WT </item>
//    <item> SFDITEM_REG__PWMLED30_SD </item>
//    <item> SFDITEM_REG__PWMLED30_ST </item>
//    <item> SFDITEM_REG__PWMLED30_CTRL </item>
//  </view>
//  


// --------------------------  Register Item Address: PWMLED31_MODE  ------------------------------
// SVD Line: 21773

unsigned int PWMLED31_MODE __AT (0x401213E0);



// ------------------------------  Field Item: PWMLED31_MODE_SEL  ---------------------------------
// SVD Line: 21783

//  <item> SFDITEM_FIELD__PWMLED31_MODE_SEL
//    <name> SEL </name>
//    <rw> 
//    <i> [Bits 1..0] RW (@ 0x401213E0) \nMode Selection\n0 : OFF = PWMLED ouput is off\n1 : BREATHING = PWMLED is under breathing mode\n2 : BLINKING = PWMLED is under blinking mode\n3 : ALWAYS_ON = PWMLED ouput is always on </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED31_MODE ) </loc>
//      <o.1..0> SEL
//        <0=> 0: OFF = PWMLED ouput is off
//        <1=> 1: BREATHING = PWMLED is under breathing mode
//        <2=> 2: BLINKING = PWMLED is under blinking mode
//        <3=> 3: ALWAYS_ON = PWMLED ouput is always on
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED31_MODE  ---------------------------------
// SVD Line: 21773

//  <rtree> SFDITEM_REG__PWMLED31_MODE
//    <name> MODE </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213E0) MODE REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED31_MODE >> 0) & 0xFFFFFFFF), ((PWMLED31_MODE = (PWMLED31_MODE & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED31_MODE_SEL </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED31_DL  -------------------------------
// SVD Line: 21813

unsigned int PWMLED31_DL __AT (0x401213E4);



// ------------------------------  Field Item: PWMLED31_DL_MINV  ----------------------------------
// SVD Line: 21823

//  <item> SFDITEM_FIELD__PWMLED31_DL_MINV
//    <name> MINV </name>
//    <rw> 
//    <i> [Bits 7..0] RW (@ 0x401213E4) Minimum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_DL >> 0) & 0xFF), ((PWMLED31_DL = (PWMLED31_DL & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ------------------------------  Field Item: PWMLED31_DL_MAXV  ----------------------------------
// SVD Line: 21829

//  <item> SFDITEM_FIELD__PWMLED31_DL_MAXV
//    <name> MAXV </name>
//    <rw> 
//    <i> [Bits 15..8] RW (@ 0x401213E4) Maximum Duty Cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_DL >> 8) & 0xFF), ((PWMLED31_DL = (PWMLED31_DL & ~(0xFFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED31_DL  ----------------------------------
// SVD Line: 21813

//  <rtree> SFDITEM_REG__PWMLED31_DL
//    <name> DL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213E4) DUTY LIMIT REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED31_DL >> 0) & 0xFFFFFFFF), ((PWMLED31_DL = (PWMLED31_DL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED31_DL_MINV </item>
//    <item> SFDITEM_FIELD__PWMLED31_DL_MAXV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED31_WT  -------------------------------
// SVD Line: 21837

unsigned int PWMLED31_WT __AT (0x401213E8);



// -------------------------------  Field Item: PWMLED31_WT_LKV  ----------------------------------
// SVD Line: 21847

//  <item> SFDITEM_FIELD__PWMLED31_WT_LKV
//    <name> LKV </name>
//    <rw> 
//    <i> [Bits 11..0] RW (@ 0x401213E8) Low wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED31_WT >> 0) & 0xFFF), ((PWMLED31_WT = (PWMLED31_WT & ~(0xFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Field Item: PWMLED31_WT_HKV  ----------------------------------
// SVD Line: 21853

//  <item> SFDITEM_FIELD__PWMLED31_WT_HKV
//    <name> HKV </name>
//    <rw> 
//    <i> [Bits 27..16] RW (@ 0x401213E8) High wait-time </i>
//    <edit> 
//      <loc> ( (unsigned short)((PWMLED31_WT >> 16) & 0xFFF), ((PWMLED31_WT = (PWMLED31_WT & ~(0xFFFUL << 16 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED31_WT  ----------------------------------
// SVD Line: 21837

//  <rtree> SFDITEM_REG__PWMLED31_WT
//    <name> WT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213E8) WAIT TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED31_WT >> 0) & 0xFFFFFFFF), ((PWMLED31_WT = (PWMLED31_WT & ~(0xFFF0FFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFF0FFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED31_WT_LKV </item>
//    <item> SFDITEM_FIELD__PWMLED31_WT_HKV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED31_SD  -------------------------------
// SVD Line: 21861

unsigned int PWMLED31_SD __AT (0x401213EC);



// -----------------------------  Field Item: PWMLED31_SD_STEP0DV  --------------------------------
// SVD Line: 21871

//  <item> SFDITEM_FIELD__PWMLED31_SD_STEP0DV
//    <name> STEP0DV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401213EC) Step0 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_SD >> 0) & 0xF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_SD_STEP1DV  --------------------------------
// SVD Line: 21877

//  <item> SFDITEM_FIELD__PWMLED31_SD_STEP1DV
//    <name> STEP1DV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401213EC) Step1 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_SD >> 4) & 0xF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_SD_STEP2DV  --------------------------------
// SVD Line: 21883

//  <item> SFDITEM_FIELD__PWMLED31_SD_STEP2DV
//    <name> STEP2DV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401213EC) Step2 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_SD >> 8) & 0xF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_SD_STEP3DV  --------------------------------
// SVD Line: 21889

//  <item> SFDITEM_FIELD__PWMLED31_SD_STEP3DV
//    <name> STEP3DV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401213EC) Step3 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_SD >> 12) & 0xF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_SD_STEP4DV  --------------------------------
// SVD Line: 21895

//  <item> SFDITEM_FIELD__PWMLED31_SD_STEP4DV
//    <name> STEP4DV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401213EC) Step4 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_SD >> 16) & 0xF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_SD_STEP5DV  --------------------------------
// SVD Line: 21901

//  <item> SFDITEM_FIELD__PWMLED31_SD_STEP5DV
//    <name> STEP5DV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401213EC) Step5 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_SD >> 20) & 0xF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_SD_STEP6DV  --------------------------------
// SVD Line: 21907

//  <item> SFDITEM_FIELD__PWMLED31_SD_STEP6DV
//    <name> STEP6DV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401213EC) Step6 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_SD >> 24) & 0xF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_SD_STEP7DV  --------------------------------
// SVD Line: 21913

//  <item> SFDITEM_FIELD__PWMLED31_SD_STEP7DV
//    <name> STEP7DV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401213EC) Step7 Duty Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_SD >> 28) & 0xF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED31_SD  ----------------------------------
// SVD Line: 21861

//  <rtree> SFDITEM_REG__PWMLED31_SD
//    <name> SD </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213EC) STEP DUTY REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED31_SD >> 0) & 0xFFFFFFFF), ((PWMLED31_SD = (PWMLED31_SD & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED31_SD_STEP0DV </item>
//    <item> SFDITEM_FIELD__PWMLED31_SD_STEP1DV </item>
//    <item> SFDITEM_FIELD__PWMLED31_SD_STEP2DV </item>
//    <item> SFDITEM_FIELD__PWMLED31_SD_STEP3DV </item>
//    <item> SFDITEM_FIELD__PWMLED31_SD_STEP4DV </item>
//    <item> SFDITEM_FIELD__PWMLED31_SD_STEP5DV </item>
//    <item> SFDITEM_FIELD__PWMLED31_SD_STEP6DV </item>
//    <item> SFDITEM_FIELD__PWMLED31_SD_STEP7DV </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: PWMLED31_ST  -------------------------------
// SVD Line: 21921

unsigned int PWMLED31_ST __AT (0x401213F0);



// -----------------------------  Field Item: PWMLED31_ST_STEP0TV  --------------------------------
// SVD Line: 21931

//  <item> SFDITEM_FIELD__PWMLED31_ST_STEP0TV
//    <name> STEP0TV </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x401213F0) Step0 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_ST >> 0) & 0xF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_ST_STEP1TV  --------------------------------
// SVD Line: 21937

//  <item> SFDITEM_FIELD__PWMLED31_ST_STEP1TV
//    <name> STEP1TV </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x401213F0) Step1 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_ST >> 4) & 0xF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_ST_STEP2TV  --------------------------------
// SVD Line: 21943

//  <item> SFDITEM_FIELD__PWMLED31_ST_STEP2TV
//    <name> STEP2TV </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x401213F0) Step2 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_ST >> 8) & 0xF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_ST_STEP3TV  --------------------------------
// SVD Line: 21949

//  <item> SFDITEM_FIELD__PWMLED31_ST_STEP3TV
//    <name> STEP3TV </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x401213F0) Step3 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_ST >> 12) & 0xF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_ST_STEP4TV  --------------------------------
// SVD Line: 21955

//  <item> SFDITEM_FIELD__PWMLED31_ST_STEP4TV
//    <name> STEP4TV </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x401213F0) Step4 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_ST >> 16) & 0xF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_ST_STEP5TV  --------------------------------
// SVD Line: 21961

//  <item> SFDITEM_FIELD__PWMLED31_ST_STEP5TV
//    <name> STEP5TV </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x401213F0) Step5 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_ST >> 20) & 0xF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_ST_STEP6TV  --------------------------------
// SVD Line: 21967

//  <item> SFDITEM_FIELD__PWMLED31_ST_STEP6TV
//    <name> STEP6TV </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x401213F0) Step6 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_ST >> 24) & 0xF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_ST_STEP7TV  --------------------------------
// SVD Line: 21973

//  <item> SFDITEM_FIELD__PWMLED31_ST_STEP7TV
//    <name> STEP7TV </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x401213F0) Step7 Time Value </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_ST >> 28) & 0xF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: PWMLED31_ST  ----------------------------------
// SVD Line: 21921

//  <rtree> SFDITEM_REG__PWMLED31_ST
//    <name> ST </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213F0) STEP TIME REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED31_ST >> 0) & 0xFFFFFFFF), ((PWMLED31_ST = (PWMLED31_ST & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED31_ST_STEP0TV </item>
//    <item> SFDITEM_FIELD__PWMLED31_ST_STEP1TV </item>
//    <item> SFDITEM_FIELD__PWMLED31_ST_STEP2TV </item>
//    <item> SFDITEM_FIELD__PWMLED31_ST_STEP3TV </item>
//    <item> SFDITEM_FIELD__PWMLED31_ST_STEP4TV </item>
//    <item> SFDITEM_FIELD__PWMLED31_ST_STEP5TV </item>
//    <item> SFDITEM_FIELD__PWMLED31_ST_STEP6TV </item>
//    <item> SFDITEM_FIELD__PWMLED31_ST_STEP7TV </item>
//  </rtree>
//  


// --------------------------  Register Item Address: PWMLED31_CTRL  ------------------------------
// SVD Line: 21981

unsigned int PWMLED31_CTRL __AT (0x401213F4);



// -----------------------------  Field Item: PWMLED31_CTRL_CYCLE  --------------------------------
// SVD Line: 21991

//  <item> SFDITEM_FIELD__PWMLED31_CTRL_CYCLE
//    <name> CYCLE </name>
//    <rw> 
//    <i> [Bits 23..16] RW (@ 0x401213F4) The number of output cycle </i>
//    <edit> 
//      <loc> ( (unsigned char)((PWMLED31_CTRL >> 16) & 0xFF), ((PWMLED31_CTRL = (PWMLED31_CTRL & ~(0xFFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: PWMLED31_CTRL_OUTPUT  --------------------------------
// SVD Line: 21997

//  <item> SFDITEM_FIELD__PWMLED31_CTRL_OUTPUT
//    <name> OUTPUT </name>
//    <rw> 
//    <i> [Bit 28] RW (@ 0x401213F4) \nControl the output method\n0 : ALWAYS_ON = Output is always on\n1 : BY_CYCLE = Output is stop when entire cycle is finished </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED31_CTRL ) </loc>
//      <o.28..28> OUTPUT
//        <0=> 0: ALWAYS_ON = Output is always on
//        <1=> 1: BY_CYCLE = Output is stop when entire cycle is finished
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: PWMLED31_CTRL_INVT  ---------------------------------
// SVD Line: 22015

//  <item> SFDITEM_FIELD__PWMLED31_CTRL_INVT
//    <name> INVT </name>
//    <rw> 
//    <i> [Bit 29] RW (@ 0x401213F4) \nOutput Inverter Control\n0 : NORMAL = PWM output is not invert\n1 : INVERT = PWM output is invert </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED31_CTRL ) </loc>
//      <o.29..29> INVT
//        <0=> 0: NORMAL = PWM output is not invert
//        <1=> 1: INVERT = PWM output is invert
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED31_CTRL_RST  ---------------------------------
// SVD Line: 22033

//  <item> SFDITEM_FIELD__PWMLED31_CTRL_RST
//    <name> RST </name>
//    <rw> 
//    <i> [Bit 30] RW (@ 0x401213F4) \nReset PWM LED Controller\n0 : DO_NOTHING = Do nothing\n1 : RESET = Reset PWM LED controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED31_CTRL ) </loc>
//      <o.30..30> RST
//        <0=> 0: DO_NOTHING = Do nothing
//        <1=> 1: RESET = Reset PWM LED controller
//    </combo>
//  </item>
//  


// ------------------------------  Field Item: PWMLED31_CTRL_EN  ----------------------------------
// SVD Line: 22051

//  <item> SFDITEM_FIELD__PWMLED31_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 31] RW (@ 0x401213F4) \nEnable PWMLED Controller\n0 : DISABLE = Disable PWMLED Controller\n1 : ENABLE = Enable PWMLED Controller </i>
//    <combo> 
//      <loc> ( (unsigned int) PWMLED31_CTRL ) </loc>
//      <o.31..31> EN
//        <0=> 0: DISABLE = Disable PWMLED Controller
//        <1=> 1: ENABLE = Enable PWMLED Controller
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: PWMLED31_CTRL  ---------------------------------
// SVD Line: 21981

//  <rtree> SFDITEM_REG__PWMLED31_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x401213F4) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((PWMLED31_CTRL >> 0) & 0xFFFFFFFF), ((PWMLED31_CTRL = (PWMLED31_CTRL & ~(0xF0FF0000UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF0FF0000) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__PWMLED31_CTRL_CYCLE </item>
//    <item> SFDITEM_FIELD__PWMLED31_CTRL_OUTPUT </item>
//    <item> SFDITEM_FIELD__PWMLED31_CTRL_INVT </item>
//    <item> SFDITEM_FIELD__PWMLED31_CTRL_RST </item>
//    <item> SFDITEM_FIELD__PWMLED31_CTRL_EN </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: PWMLED31  -----------------------------------
// SVD Line: 22193

//  <view> PWMLED31
//    <name> PWMLED31 </name>
//    <item> SFDITEM_REG__PWMLED31_MODE </item>
//    <item> SFDITEM_REG__PWMLED31_DL </item>
//    <item> SFDITEM_REG__PWMLED31_WT </item>
//    <item> SFDITEM_REG__PWMLED31_SD </item>
//    <item> SFDITEM_REG__PWMLED31_ST </item>
//    <item> SFDITEM_REG__PWMLED31_CTRL </item>
//  </view>
//  


// ----------------------------  Register Item Address: TMR0_LDCNT  -------------------------------
// SVD Line: 22226

unsigned int TMR0_LDCNT __AT (0x40121400);



// --------------------------------  Register Item: TMR0_LDCNT  -----------------------------------
// SVD Line: 22226

//  <item> SFDITEM_REG__TMR0_LDCNT
//    <name> LDCNT </name>
//    <i> [Bits 31..0] RW (@ 0x40121400) LOAD COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TMR0_LDCNT >> 0) & 0xFFFFFFFF), ((TMR0_LDCNT = (TMR0_LDCNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: TMR0_CNT  --------------------------------
// SVD Line: 22236

unsigned int TMR0_CNT __AT (0x40121404);



// ---------------------------------  Register Item: TMR0_CNT  ------------------------------------
// SVD Line: 22236

//  <item> SFDITEM_REG__TMR0_CNT
//    <name> CNT </name>
//    <i> [Bits 31..0] RW (@ 0x40121404) CURRENT COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TMR0_CNT >> 0) & 0xFFFFFFFF), ((TMR0_CNT = (TMR0_CNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: TMR0_CTRL  --------------------------------
// SVD Line: 22246

unsigned int TMR0_CTRL __AT (0x40121408);



// --------------------------------  Field Item: TMR0_CTRL_EN  ------------------------------------
// SVD Line: 22256

//  <item> SFDITEM_FIELD__TMR0_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40121408) \nEnable Timer Contoller\n0 : DISABLE = Disable timer controller\n1 : ENABLE = Enable timer controller </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR0_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable timer controller
//        <1=> 1: ENABLE = Enable timer controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR0_CTRL_MDSEL  ----------------------------------
// SVD Line: 22275

//  <item> SFDITEM_FIELD__TMR0_CTRL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40121408) \nTimer Operating Mode Selection\n0 : ONE_SHOT = Timer is operate at one-shot mode\n1 : CONTINUOUS = Timer is operate at continuous mode </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR0_CTRL ) </loc>
//      <o.1..1> MDSEL
//        <0=> 0: ONE_SHOT = Timer is operate at one-shot mode
//        <1=> 1: CONTINUOUS = Timer is operate at continuous mode
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR0_CTRL_INTEN  ----------------------------------
// SVD Line: 22294

//  <item> SFDITEM_FIELD__TMR0_CTRL_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40121408) \nEnable Timer Interrupt\n0 : DISABLE = Disable timer interrupt\n1 : ENABLE = Enable timer interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR0_CTRL ) </loc>
//      <o.2..2> INTEN
//        <0=> 0: DISABLE = Disable timer interrupt
//        <1=> 1: ENABLE = Enable timer interrupt
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR0_CTRL_STOP  -----------------------------------
// SVD Line: 22313

//  <item> SFDITEM_FIELD__TMR0_CTRL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40121408) \nStop timer\n0 : DISABLE = Resume timer\n1 : ENABLE = Stop timer </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR0_CTRL ) </loc>
//      <o.3..3> STOP
//        <0=> 0: DISABLE = Resume timer
//        <1=> 1: ENABLE = Stop timer
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: TMR0_CTRL  -----------------------------------
// SVD Line: 22246

//  <rtree> SFDITEM_REG__TMR0_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121408) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((TMR0_CTRL >> 0) & 0xFFFFFFFF), ((TMR0_CTRL = (TMR0_CTRL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TMR0_CTRL_EN </item>
//    <item> SFDITEM_FIELD__TMR0_CTRL_MDSEL </item>
//    <item> SFDITEM_FIELD__TMR0_CTRL_INTEN </item>
//    <item> SFDITEM_FIELD__TMR0_CTRL_STOP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TMR0_INTSTS  -------------------------------
// SVD Line: 22334

unsigned int TMR0_INTSTS __AT (0x4012140C);



// -------------------------------  Field Item: TMR0_INTSTS_STS  ----------------------------------
// SVD Line: 22344

//  <item> SFDITEM_FIELD__TMR0_INTSTS_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4012140C) \nTimer Interrupt Status\n0 : NOT_OCCURRED = Timer interrupt is not occurred\n1 : OCCURRED = Timer interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR0_INTSTS ) </loc>
//      <o.0..0> STS
//        <0=> 0: NOT_OCCURRED = Timer interrupt is not occurred
//        <1=> 1: OCCURRED = Timer interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TMR0_INTSTS  ----------------------------------
// SVD Line: 22334

//  <rtree> SFDITEM_REG__TMR0_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012140C) INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((TMR0_INTSTS >> 0) & 0xFFFFFFFF), ((TMR0_INTSTS = (TMR0_INTSTS & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TMR0_INTSTS_STS </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: TMR0  -------------------------------------
// SVD Line: 22198

//  <view> TMR0
//    <name> TMR0 </name>
//    <item> SFDITEM_REG__TMR0_LDCNT </item>
//    <item> SFDITEM_REG__TMR0_CNT </item>
//    <item> SFDITEM_REG__TMR0_CTRL </item>
//    <item> SFDITEM_REG__TMR0_INTSTS </item>
//  </view>
//  


// ----------------------------  Register Item Address: TMR1_LDCNT  -------------------------------
// SVD Line: 22226

unsigned int TMR1_LDCNT __AT (0x40121410);



// --------------------------------  Register Item: TMR1_LDCNT  -----------------------------------
// SVD Line: 22226

//  <item> SFDITEM_REG__TMR1_LDCNT
//    <name> LDCNT </name>
//    <i> [Bits 31..0] RW (@ 0x40121410) LOAD COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TMR1_LDCNT >> 0) & 0xFFFFFFFF), ((TMR1_LDCNT = (TMR1_LDCNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: TMR1_CNT  --------------------------------
// SVD Line: 22236

unsigned int TMR1_CNT __AT (0x40121414);



// ---------------------------------  Register Item: TMR1_CNT  ------------------------------------
// SVD Line: 22236

//  <item> SFDITEM_REG__TMR1_CNT
//    <name> CNT </name>
//    <i> [Bits 31..0] RW (@ 0x40121414) CURRENT COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TMR1_CNT >> 0) & 0xFFFFFFFF), ((TMR1_CNT = (TMR1_CNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: TMR1_CTRL  --------------------------------
// SVD Line: 22246

unsigned int TMR1_CTRL __AT (0x40121418);



// --------------------------------  Field Item: TMR1_CTRL_EN  ------------------------------------
// SVD Line: 22256

//  <item> SFDITEM_FIELD__TMR1_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40121418) \nEnable Timer Contoller\n0 : DISABLE = Disable timer controller\n1 : ENABLE = Enable timer controller </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR1_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable timer controller
//        <1=> 1: ENABLE = Enable timer controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR1_CTRL_MDSEL  ----------------------------------
// SVD Line: 22275

//  <item> SFDITEM_FIELD__TMR1_CTRL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40121418) \nTimer Operating Mode Selection\n0 : ONE_SHOT = Timer is operate at one-shot mode\n1 : CONTINUOUS = Timer is operate at continuous mode </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR1_CTRL ) </loc>
//      <o.1..1> MDSEL
//        <0=> 0: ONE_SHOT = Timer is operate at one-shot mode
//        <1=> 1: CONTINUOUS = Timer is operate at continuous mode
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR1_CTRL_INTEN  ----------------------------------
// SVD Line: 22294

//  <item> SFDITEM_FIELD__TMR1_CTRL_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40121418) \nEnable Timer Interrupt\n0 : DISABLE = Disable timer interrupt\n1 : ENABLE = Enable timer interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR1_CTRL ) </loc>
//      <o.2..2> INTEN
//        <0=> 0: DISABLE = Disable timer interrupt
//        <1=> 1: ENABLE = Enable timer interrupt
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR1_CTRL_STOP  -----------------------------------
// SVD Line: 22313

//  <item> SFDITEM_FIELD__TMR1_CTRL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40121418) \nStop timer\n0 : DISABLE = Resume timer\n1 : ENABLE = Stop timer </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR1_CTRL ) </loc>
//      <o.3..3> STOP
//        <0=> 0: DISABLE = Resume timer
//        <1=> 1: ENABLE = Stop timer
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: TMR1_CTRL  -----------------------------------
// SVD Line: 22246

//  <rtree> SFDITEM_REG__TMR1_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121418) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((TMR1_CTRL >> 0) & 0xFFFFFFFF), ((TMR1_CTRL = (TMR1_CTRL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TMR1_CTRL_EN </item>
//    <item> SFDITEM_FIELD__TMR1_CTRL_MDSEL </item>
//    <item> SFDITEM_FIELD__TMR1_CTRL_INTEN </item>
//    <item> SFDITEM_FIELD__TMR1_CTRL_STOP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TMR1_INTSTS  -------------------------------
// SVD Line: 22334

unsigned int TMR1_INTSTS __AT (0x4012141C);



// -------------------------------  Field Item: TMR1_INTSTS_STS  ----------------------------------
// SVD Line: 22344

//  <item> SFDITEM_FIELD__TMR1_INTSTS_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4012141C) \nTimer Interrupt Status\n0 : NOT_OCCURRED = Timer interrupt is not occurred\n1 : OCCURRED = Timer interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR1_INTSTS ) </loc>
//      <o.0..0> STS
//        <0=> 0: NOT_OCCURRED = Timer interrupt is not occurred
//        <1=> 1: OCCURRED = Timer interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TMR1_INTSTS  ----------------------------------
// SVD Line: 22334

//  <rtree> SFDITEM_REG__TMR1_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012141C) INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((TMR1_INTSTS >> 0) & 0xFFFFFFFF), ((TMR1_INTSTS = (TMR1_INTSTS & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TMR1_INTSTS_STS </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: TMR1  -------------------------------------
// SVD Line: 22368

//  <view> TMR1
//    <name> TMR1 </name>
//    <item> SFDITEM_REG__TMR1_LDCNT </item>
//    <item> SFDITEM_REG__TMR1_CNT </item>
//    <item> SFDITEM_REG__TMR1_CTRL </item>
//    <item> SFDITEM_REG__TMR1_INTSTS </item>
//  </view>
//  


// ----------------------------  Register Item Address: TMR2_LDCNT  -------------------------------
// SVD Line: 22226

unsigned int TMR2_LDCNT __AT (0x40121420);



// --------------------------------  Register Item: TMR2_LDCNT  -----------------------------------
// SVD Line: 22226

//  <item> SFDITEM_REG__TMR2_LDCNT
//    <name> LDCNT </name>
//    <i> [Bits 31..0] RW (@ 0x40121420) LOAD COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TMR2_LDCNT >> 0) & 0xFFFFFFFF), ((TMR2_LDCNT = (TMR2_LDCNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: TMR2_CNT  --------------------------------
// SVD Line: 22236

unsigned int TMR2_CNT __AT (0x40121424);



// ---------------------------------  Register Item: TMR2_CNT  ------------------------------------
// SVD Line: 22236

//  <item> SFDITEM_REG__TMR2_CNT
//    <name> CNT </name>
//    <i> [Bits 31..0] RW (@ 0x40121424) CURRENT COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TMR2_CNT >> 0) & 0xFFFFFFFF), ((TMR2_CNT = (TMR2_CNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: TMR2_CTRL  --------------------------------
// SVD Line: 22246

unsigned int TMR2_CTRL __AT (0x40121428);



// --------------------------------  Field Item: TMR2_CTRL_EN  ------------------------------------
// SVD Line: 22256

//  <item> SFDITEM_FIELD__TMR2_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40121428) \nEnable Timer Contoller\n0 : DISABLE = Disable timer controller\n1 : ENABLE = Enable timer controller </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR2_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable timer controller
//        <1=> 1: ENABLE = Enable timer controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR2_CTRL_MDSEL  ----------------------------------
// SVD Line: 22275

//  <item> SFDITEM_FIELD__TMR2_CTRL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40121428) \nTimer Operating Mode Selection\n0 : ONE_SHOT = Timer is operate at one-shot mode\n1 : CONTINUOUS = Timer is operate at continuous mode </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR2_CTRL ) </loc>
//      <o.1..1> MDSEL
//        <0=> 0: ONE_SHOT = Timer is operate at one-shot mode
//        <1=> 1: CONTINUOUS = Timer is operate at continuous mode
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR2_CTRL_INTEN  ----------------------------------
// SVD Line: 22294

//  <item> SFDITEM_FIELD__TMR2_CTRL_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40121428) \nEnable Timer Interrupt\n0 : DISABLE = Disable timer interrupt\n1 : ENABLE = Enable timer interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR2_CTRL ) </loc>
//      <o.2..2> INTEN
//        <0=> 0: DISABLE = Disable timer interrupt
//        <1=> 1: ENABLE = Enable timer interrupt
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR2_CTRL_STOP  -----------------------------------
// SVD Line: 22313

//  <item> SFDITEM_FIELD__TMR2_CTRL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40121428) \nStop timer\n0 : DISABLE = Resume timer\n1 : ENABLE = Stop timer </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR2_CTRL ) </loc>
//      <o.3..3> STOP
//        <0=> 0: DISABLE = Resume timer
//        <1=> 1: ENABLE = Stop timer
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: TMR2_CTRL  -----------------------------------
// SVD Line: 22246

//  <rtree> SFDITEM_REG__TMR2_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121428) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((TMR2_CTRL >> 0) & 0xFFFFFFFF), ((TMR2_CTRL = (TMR2_CTRL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TMR2_CTRL_EN </item>
//    <item> SFDITEM_FIELD__TMR2_CTRL_MDSEL </item>
//    <item> SFDITEM_FIELD__TMR2_CTRL_INTEN </item>
//    <item> SFDITEM_FIELD__TMR2_CTRL_STOP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TMR2_INTSTS  -------------------------------
// SVD Line: 22334

unsigned int TMR2_INTSTS __AT (0x4012142C);



// -------------------------------  Field Item: TMR2_INTSTS_STS  ----------------------------------
// SVD Line: 22344

//  <item> SFDITEM_FIELD__TMR2_INTSTS_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4012142C) \nTimer Interrupt Status\n0 : NOT_OCCURRED = Timer interrupt is not occurred\n1 : OCCURRED = Timer interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR2_INTSTS ) </loc>
//      <o.0..0> STS
//        <0=> 0: NOT_OCCURRED = Timer interrupt is not occurred
//        <1=> 1: OCCURRED = Timer interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TMR2_INTSTS  ----------------------------------
// SVD Line: 22334

//  <rtree> SFDITEM_REG__TMR2_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012142C) INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((TMR2_INTSTS >> 0) & 0xFFFFFFFF), ((TMR2_INTSTS = (TMR2_INTSTS & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TMR2_INTSTS_STS </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: TMR2  -------------------------------------
// SVD Line: 22379

//  <view> TMR2
//    <name> TMR2 </name>
//    <item> SFDITEM_REG__TMR2_LDCNT </item>
//    <item> SFDITEM_REG__TMR2_CNT </item>
//    <item> SFDITEM_REG__TMR2_CTRL </item>
//    <item> SFDITEM_REG__TMR2_INTSTS </item>
//  </view>
//  


// ----------------------------  Register Item Address: TMR3_LDCNT  -------------------------------
// SVD Line: 22226

unsigned int TMR3_LDCNT __AT (0x40121430);



// --------------------------------  Register Item: TMR3_LDCNT  -----------------------------------
// SVD Line: 22226

//  <item> SFDITEM_REG__TMR3_LDCNT
//    <name> LDCNT </name>
//    <i> [Bits 31..0] RW (@ 0x40121430) LOAD COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TMR3_LDCNT >> 0) & 0xFFFFFFFF), ((TMR3_LDCNT = (TMR3_LDCNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register Item Address: TMR3_CNT  --------------------------------
// SVD Line: 22236

unsigned int TMR3_CNT __AT (0x40121434);



// ---------------------------------  Register Item: TMR3_CNT  ------------------------------------
// SVD Line: 22236

//  <item> SFDITEM_REG__TMR3_CNT
//    <name> CNT </name>
//    <i> [Bits 31..0] RW (@ 0x40121434) CURRENT COUNTER REGISTER </i>
//    <edit> 
//      <loc> ( (unsigned int)((TMR3_CNT >> 0) & 0xFFFFFFFF), ((TMR3_CNT = (TMR3_CNT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Register Item Address: TMR3_CTRL  --------------------------------
// SVD Line: 22246

unsigned int TMR3_CTRL __AT (0x40121438);



// --------------------------------  Field Item: TMR3_CTRL_EN  ------------------------------------
// SVD Line: 22256

//  <item> SFDITEM_FIELD__TMR3_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40121438) \nEnable Timer Contoller\n0 : DISABLE = Disable timer controller\n1 : ENABLE = Enable timer controller </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR3_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable timer controller
//        <1=> 1: ENABLE = Enable timer controller
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR3_CTRL_MDSEL  ----------------------------------
// SVD Line: 22275

//  <item> SFDITEM_FIELD__TMR3_CTRL_MDSEL
//    <name> MDSEL </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40121438) \nTimer Operating Mode Selection\n0 : ONE_SHOT = Timer is operate at one-shot mode\n1 : CONTINUOUS = Timer is operate at continuous mode </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR3_CTRL ) </loc>
//      <o.1..1> MDSEL
//        <0=> 0: ONE_SHOT = Timer is operate at one-shot mode
//        <1=> 1: CONTINUOUS = Timer is operate at continuous mode
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR3_CTRL_INTEN  ----------------------------------
// SVD Line: 22294

//  <item> SFDITEM_FIELD__TMR3_CTRL_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40121438) \nEnable Timer Interrupt\n0 : DISABLE = Disable timer interrupt\n1 : ENABLE = Enable timer interrupt </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR3_CTRL ) </loc>
//      <o.2..2> INTEN
//        <0=> 0: DISABLE = Disable timer interrupt
//        <1=> 1: ENABLE = Enable timer interrupt
//    </combo>
//  </item>
//  


// -------------------------------  Field Item: TMR3_CTRL_STOP  -----------------------------------
// SVD Line: 22313

//  <item> SFDITEM_FIELD__TMR3_CTRL_STOP
//    <name> STOP </name>
//    <rw> 
//    <i> [Bit 3] RW (@ 0x40121438) \nStop timer\n0 : DISABLE = Resume timer\n1 : ENABLE = Stop timer </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR3_CTRL ) </loc>
//      <o.3..3> STOP
//        <0=> 0: DISABLE = Resume timer
//        <1=> 1: ENABLE = Stop timer
//    </combo>
//  </item>
//  


// --------------------------------  Register RTree: TMR3_CTRL  -----------------------------------
// SVD Line: 22246

//  <rtree> SFDITEM_REG__TMR3_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40121438) CONTROL REGISTER </i>
//    <loc> ( (unsigned int)((TMR3_CTRL >> 0) & 0xFFFFFFFF), ((TMR3_CTRL = (TMR3_CTRL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TMR3_CTRL_EN </item>
//    <item> SFDITEM_FIELD__TMR3_CTRL_MDSEL </item>
//    <item> SFDITEM_FIELD__TMR3_CTRL_INTEN </item>
//    <item> SFDITEM_FIELD__TMR3_CTRL_STOP </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: TMR3_INTSTS  -------------------------------
// SVD Line: 22334

unsigned int TMR3_INTSTS __AT (0x4012143C);



// -------------------------------  Field Item: TMR3_INTSTS_STS  ----------------------------------
// SVD Line: 22344

//  <item> SFDITEM_FIELD__TMR3_INTSTS_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x4012143C) \nTimer Interrupt Status\n0 : NOT_OCCURRED = Timer interrupt is not occurred\n1 : OCCURRED = Timer interrupt is occurred </i>
//    <combo> 
//      <loc> ( (unsigned int) TMR3_INTSTS ) </loc>
//      <o.0..0> STS
//        <0=> 0: NOT_OCCURRED = Timer interrupt is not occurred
//        <1=> 1: OCCURRED = Timer interrupt is occurred
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: TMR3_INTSTS  ----------------------------------
// SVD Line: 22334

//  <rtree> SFDITEM_REG__TMR3_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012143C) INTERRUPT STATUS REGISTER </i>
//    <loc> ( (unsigned int)((TMR3_INTSTS >> 0) & 0xFFFFFFFF), ((TMR3_INTSTS = (TMR3_INTSTS & ~(0x1UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x1) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__TMR3_INTSTS_STS </item>
//  </rtree>
//  


// ----------------------------------  Peripheral View: TMR3  -------------------------------------
// SVD Line: 22390

//  <view> TMR3
//    <name> TMR3 </name>
//    <item> SFDITEM_REG__TMR3_LDCNT </item>
//    <item> SFDITEM_REG__TMR3_CNT </item>
//    <item> SFDITEM_REG__TMR3_CTRL </item>
//    <item> SFDITEM_REG__TMR3_INTSTS </item>
//  </view>
//  


// ----------------------------  Register Item Address: CRC32_CTRL  -------------------------------
// SVD Line: 22421

unsigned int CRC32_CTRL __AT (0x40122000);



// -------------------------------  Field Item: CRC32_CTRL_INIT  ----------------------------------
// SVD Line: 22428

//  <item> SFDITEM_FIELD__CRC32_CTRL_INIT
//    <name> INIT </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40122000) Initialize checksum. Resets CHKSUM to 0xFFFFFFFF and auto-clears to '0'. </i>
//    <check> 
//      <loc> ( (unsigned int) CRC32_CTRL ) </loc>
//      <o.1..1> INIT
//    </check>
//  </item>
//  


// --------------------------------  Field Item: CRC32_CTRL_EN  -----------------------------------
// SVD Line: 22438

//  <item> SFDITEM_FIELD__CRC32_CTRL_EN
//    <name> EN </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40122000) \nEnable CRC32. Controls whether CRC32 is enabled or disabled.\n0 : DISABLE = Disable CRC32\n1 : ENABLE = Enable CRC32 </i>
//    <combo> 
//      <loc> ( (unsigned int) CRC32_CTRL ) </loc>
//      <o.0..0> EN
//        <0=> 0: DISABLE = Disable CRC32
//        <1=> 1: ENABLE = Enable CRC32
//    </combo>
//  </item>
//  


// -------------------------------  Register RTree: CRC32_CTRL  -----------------------------------
// SVD Line: 22421

//  <rtree> SFDITEM_REG__CRC32_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122000) Control register </i>
//    <loc> ( (unsigned int)((CRC32_CTRL >> 0) & 0xFFFFFFFF), ((CRC32_CTRL = (CRC32_CTRL & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CRC32_CTRL_INIT </item>
//    <item> SFDITEM_FIELD__CRC32_CTRL_EN </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CRC32_INPUT  -------------------------------
// SVD Line: 22460

unsigned int CRC32_INPUT __AT (0x40122004);



// ------------------------------  Field Item: CRC32_INPUT_INPUT  ---------------------------------
// SVD Line: 22466

//  <item> SFDITEM_FIELD__CRC32_INPUT_INPUT
//    <name> INPUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122004) Data input for CRC32. </i>
//    <edit> 
//      <loc> ( (unsigned int)((CRC32_INPUT >> 0) & 0xFFFFFFFF), ((CRC32_INPUT = (CRC32_INPUT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: CRC32_INPUT  ----------------------------------
// SVD Line: 22460

//  <rtree> SFDITEM_REG__CRC32_INPUT
//    <name> INPUT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122004) Data input register for CRC32 computation. </i>
//    <loc> ( (unsigned int)((CRC32_INPUT >> 0) & 0xFFFFFFFF), ((CRC32_INPUT = (CRC32_INPUT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__CRC32_INPUT_INPUT </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: CRC32_RESULT  ------------------------------
// SVD Line: 22476

unsigned int CRC32_RESULT __AT (0x40122008);



// -------------------------------  Register Item: CRC32_RESULT  ----------------------------------
// SVD Line: 22476

//  <item> SFDITEM_REG__CRC32_RESULT
//    <name> RESULT </name>
//    <i> [Bits 31..0] RW (@ 0x40122008) CRC32 Result Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((CRC32_RESULT >> 0) & 0xFFFFFFFF), ((CRC32_RESULT = (CRC32_RESULT & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Register Item Address: CRC32_CHKSUM  ------------------------------
// SVD Line: 22484

unsigned int CRC32_CHKSUM __AT (0x4012200C);



// -------------------------------  Register Item: CRC32_CHKSUM  ----------------------------------
// SVD Line: 22484

//  <item> SFDITEM_REG__CRC32_CHKSUM
//    <name> CHKSUM </name>
//    <i> [Bits 31..0] RW (@ 0x4012200C) Checksum Result Register </i>
//    <edit> 
//      <loc> ( (unsigned int)((CRC32_CHKSUM >> 0) & 0xFFFFFFFF), ((CRC32_CHKSUM = (CRC32_CHKSUM & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------------  Peripheral View: CRC32  -------------------------------------
// SVD Line: 22401

//  <view> CRC32
//    <name> CRC32 </name>
//    <item> SFDITEM_REG__CRC32_CTRL </item>
//    <item> SFDITEM_REG__CRC32_INPUT </item>
//    <item> SFDITEM_REG__CRC32_RESULT </item>
//    <item> SFDITEM_REG__CRC32_CHKSUM </item>
//  </view>
//  


// -------------------------  Register Item Address: DOTMTX0_DATASRC  -----------------------------
// SVD Line: 22520

unsigned int DOTMTX0_DATASRC __AT (0x40122100);



// ----------------------------  Field Item: DOTMTX0_DATASRC_DSRC  --------------------------------
// SVD Line: 22526

//  <item> SFDITEM_FIELD__DOTMTX0_DATASRC_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122100) Source address for PWM data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DOTMTX0_DATASRC >> 0) & 0xFFFFFFFF), ((DOTMTX0_DATASRC = (DOTMTX0_DATASRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX0_DATASRC  --------------------------------
// SVD Line: 22520

//  <rtree> SFDITEM_REG__DOTMTX0_DATASRC
//    <name> DATASRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122100) Register indicating the source address for PWM data. </i>
//    <loc> ( (unsigned int)((DOTMTX0_DATASRC >> 0) & 0xFFFFFFFF), ((DOTMTX0_DATASRC = (DOTMTX0_DATASRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX0_DATASRC_DSRC </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: DOTMTX0_CTRL  ------------------------------
// SVD Line: 22536

unsigned int DOTMTX0_CTRL __AT (0x40122104);



// ----------------------------  Field Item: DOTMTX0_CTRL_INTTYPE  --------------------------------
// SVD Line: 22542

//  <item> SFDITEM_FIELD__DOTMTX0_CTRL_INTTYPE
//    <name> INTTYPE </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40122104) \nInterrupt type. Determines interrupt behavior for matrix scans.\n0 : LINE_SWITCH = Interrupt when each scan line is switched.\n1 : ROUND_FINISH = Interrupt when a complete round of scan lines is finished. </i>
//    <combo> 
//      <loc> ( (unsigned int) DOTMTX0_CTRL ) </loc>
//      <o.2..2> INTTYPE
//        <0=> 0: LINE_SWITCH = Interrupt when each scan line is switched.
//        <1=> 1: ROUND_FINISH = Interrupt when a complete round of scan lines is finished.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: DOTMTX0_CTRL_INTEN  ---------------------------------
// SVD Line: 22560

//  <item> SFDITEM_FIELD__DOTMTX0_CTRL_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40122104) Enable matrix interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) DOTMTX0_CTRL ) </loc>
//      <o.1..1> INTEN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DOTMTX0_CTRL_START  ---------------------------------
// SVD Line: 22566

//  <item> SFDITEM_FIELD__DOTMTX0_CTRL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40122104) \nControl matrix scan start or stop.\n0 : STOP = Stop the dot matrix scan.\n1 : START = Start the dot matrix scan. </i>
//    <combo> 
//      <loc> ( (unsigned int) DOTMTX0_CTRL ) </loc>
//      <o.0..0> START
//        <0=> 0: STOP = Stop the dot matrix scan.
//        <1=> 1: START = Start the dot matrix scan.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: DOTMTX0_CTRL  ----------------------------------
// SVD Line: 22536

//  <rtree> SFDITEM_REG__DOTMTX0_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122104) Control register for matrix operations including interrupts and scan control. </i>
//    <loc> ( (unsigned int)((DOTMTX0_CTRL >> 0) & 0xFFFFFFFF), ((DOTMTX0_CTRL = (DOTMTX0_CTRL & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX0_CTRL_INTTYPE </item>
//    <item> SFDITEM_FIELD__DOTMTX0_CTRL_INTEN </item>
//    <item> SFDITEM_FIELD__DOTMTX0_CTRL_START </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DOTMTX0_COLCTRL  -----------------------------
// SVD Line: 22588

unsigned int DOTMTX0_COLCTRL __AT (0x40122108);



// ----------------------------  Field Item: DOTMTX0_COLCTRL_ROUND  -------------------------------
// SVD Line: 22594

//  <item> SFDITEM_FIELD__DOTMTX0_COLCTRL_ROUND
//    <name> ROUND </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40122108) Number of PWM cycles to run during the same row before switching. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_COLCTRL >> 20) & 0xFF), ((DOTMTX0_COLCTRL = (DOTMTX0_COLCTRL & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DOTMTX0_COLCTRL_REFCH  -------------------------------
// SVD Line: 22600

//  <item> SFDITEM_FIELD__DOTMTX0_COLCTRL_REFCH
//    <name> REFCH </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40122108) Indicates which PWM channel is the reference source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_COLCTRL >> 16) & 0xF), ((DOTMTX0_COLCTRL = (DOTMTX0_COLCTRL & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DOTMTX0_COLCTRL_CHEN  --------------------------------
// SVD Line: 22606

//  <item> SFDITEM_FIELD__DOTMTX0_COLCTRL_CHEN
//    <name> CHEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40122108) Indicates which PWM channels are used for the matrix. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DOTMTX0_COLCTRL >> 0) & 0xFFFF), ((DOTMTX0_COLCTRL = (DOTMTX0_COLCTRL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX0_COLCTRL  --------------------------------
// SVD Line: 22588

//  <rtree> SFDITEM_REG__DOTMTX0_COLCTRL
//    <name> COLCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122108) Column control register for matrix PWM and reference setup. </i>
//    <loc> ( (unsigned int)((DOTMTX0_COLCTRL >> 0) & 0xFFFFFFFF), ((DOTMTX0_COLCTRL = (DOTMTX0_COLCTRL & ~(0xFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX0_COLCTRL_ROUND </item>
//    <item> SFDITEM_FIELD__DOTMTX0_COLCTRL_REFCH </item>
//    <item> SFDITEM_FIELD__DOTMTX0_COLCTRL_CHEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DOTMTX0_ROWCTRL  -----------------------------
// SVD Line: 22616

unsigned int DOTMTX0_ROWCTRL __AT (0x4012210C);



// ---------------------------  Field Item: DOTMTX0_ROWCTRL_PSWPOL  -------------------------------
// SVD Line: 22622

//  <item> SFDITEM_FIELD__DOTMTX0_ROWCTRL_PSWPOL
//    <name> PSWPOL </name>
//    <rw> 
//    <i> [Bits 31..22] RW (@ 0x4012210C) Setting active polarity for PSWn. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DOTMTX0_ROWCTRL >> 22) & 0x3FF), ((DOTMTX0_ROWCTRL = (DOTMTX0_ROWCTRL & ~(0x3FFUL << 22 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 22 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWCTRL_PSWODEN  ------------------------------
// SVD Line: 22628

//  <item> SFDITEM_FIELD__DOTMTX0_ROWCTRL_PSWODEN
//    <name> PSWODEN </name>
//    <rw> 
//    <i> [Bits 21..12] RW (@ 0x4012210C) Enable open-drain configuration on PSWn. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DOTMTX0_ROWCTRL >> 12) & 0x3FF), ((DOTMTX0_ROWCTRL = (DOTMTX0_ROWCTRL & ~(0x3FFUL << 12 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWCTRL_SWDELAY  ------------------------------
// SVD Line: 22634

//  <item> SFDITEM_FIELD__DOTMTX0_ROWCTRL_SWDELAY
//    <name> SWDELAY </name>
//    <rw> 
//    <i> [Bits 11..4] RW (@ 0x4012210C) Sets delay time before/after row scan switch. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWCTRL >> 4) & 0xFF), ((DOTMTX0_ROWCTRL = (DOTMTX0_ROWCTRL & ~(0xFFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWCTRL_PSWNUM  -------------------------------
// SVD Line: 22640

//  <item> SFDITEM_FIELD__DOTMTX0_ROWCTRL_PSWNUM
//    <name> PSWNUM </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012210C) Indicate how many scan rows the matrix uses. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWCTRL >> 0) & 0xF), ((DOTMTX0_ROWCTRL = (DOTMTX0_ROWCTRL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX0_ROWCTRL  --------------------------------
// SVD Line: 22616

//  <rtree> SFDITEM_REG__DOTMTX0_ROWCTRL
//    <name> ROWCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012210C) Row control register for setting polarity and scan timing for dot matrix. </i>
//    <loc> ( (unsigned int)((DOTMTX0_ROWCTRL >> 0) & 0xFFFFFFFF), ((DOTMTX0_ROWCTRL = (DOTMTX0_ROWCTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWCTRL_PSWPOL </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWCTRL_PSWODEN </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWCTRL_SWDELAY </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWCTRL_PSWNUM </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DOTMTX0_ROWORD0  -----------------------------
// SVD Line: 22650

unsigned int DOTMTX0_ROWORD0 __AT (0x40122110);



// ---------------------------  Field Item: DOTMTX0_ROWORD0_PSWORD7  ------------------------------
// SVD Line: 22656

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD7
//    <name> PSWORD7 </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40122110) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD0 >> 28) & 0xF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWORD0_PSWORD6  ------------------------------
// SVD Line: 22662

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD6
//    <name> PSWORD6 </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40122110) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD0 >> 24) & 0xF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWORD0_PSWORD5  ------------------------------
// SVD Line: 22668

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD5
//    <name> PSWORD5 </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40122110) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD0 >> 20) & 0xF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWORD0_PSWORD4  ------------------------------
// SVD Line: 22674

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD4
//    <name> PSWORD4 </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40122110) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD0 >> 16) & 0xF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWORD0_PSWORD3  ------------------------------
// SVD Line: 22680

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD3
//    <name> PSWORD3 </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40122110) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD0 >> 12) & 0xF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWORD0_PSWORD2  ------------------------------
// SVD Line: 22686

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD2
//    <name> PSWORD2 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40122110) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD0 >> 8) & 0xF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWORD0_PSWORD1  ------------------------------
// SVD Line: 22692

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD1
//    <name> PSWORD1 </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40122110) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD0 >> 4) & 0xF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWORD0_PSWORD0  ------------------------------
// SVD Line: 22698

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD0
//    <name> PSWORD0 </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40122110) Indicate scan order for PSW0 row. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD0 >> 0) & 0xF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX0_ROWORD0  --------------------------------
// SVD Line: 22650

//  <rtree> SFDITEM_REG__DOTMTX0_ROWORD0
//    <name> ROWORD0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122110) Register specifying scan order for matrix rows. </i>
//    <loc> ( (unsigned int)((DOTMTX0_ROWORD0 >> 0) & 0xFFFFFFFF), ((DOTMTX0_ROWORD0 = (DOTMTX0_ROWORD0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD7 </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD6 </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD5 </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD4 </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD3 </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD2 </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD1 </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD0_PSWORD0 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DOTMTX0_ROWORD1  -----------------------------
// SVD Line: 22708

unsigned int DOTMTX0_ROWORD1 __AT (0x40122114);



// ---------------------------  Field Item: DOTMTX0_ROWORD1_PSWORD9  ------------------------------
// SVD Line: 22714

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD1_PSWORD9
//    <name> PSWORD9 </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40122114) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD1 >> 4) & 0xF), ((DOTMTX0_ROWORD1 = (DOTMTX0_ROWORD1 & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX0_ROWORD1_PSWORD8  ------------------------------
// SVD Line: 22720

//  <item> SFDITEM_FIELD__DOTMTX0_ROWORD1_PSWORD8
//    <name> PSWORD8 </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40122114) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_ROWORD1 >> 0) & 0xF), ((DOTMTX0_ROWORD1 = (DOTMTX0_ROWORD1 & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX0_ROWORD1  --------------------------------
// SVD Line: 22708

//  <rtree> SFDITEM_REG__DOTMTX0_ROWORD1
//    <name> ROWORD1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122114) Additional row control specifying scan order for remaining rows. </i>
//    <loc> ( (unsigned int)((DOTMTX0_ROWORD1 >> 0) & 0xFFFFFFFF), ((DOTMTX0_ROWORD1 = (DOTMTX0_ROWORD1 & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD1_PSWORD9 </item>
//    <item> SFDITEM_FIELD__DOTMTX0_ROWORD1_PSWORD8 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: DOTMTX0_INT  -------------------------------
// SVD Line: 22730

unsigned int DOTMTX0_INT __AT (0x40122118);



// -----------------------------  Field Item: DOTMTX0_INT_INTRDY  ---------------------------------
// SVD Line: 22736

//  <item> SFDITEM_FIELD__DOTMTX0_INT_INTRDY
//    <name> INTRDY </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40122118) Interrupt flag for APB ready without response. </i>
//    <check> 
//      <loc> ( (unsigned int) DOTMTX0_INT ) </loc>
//      <o.1..1> INTRDY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DOTMTX0_INT_INTSTS  ---------------------------------
// SVD Line: 22742

//  <item> SFDITEM_FIELD__DOTMTX0_INT_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40122118) Interrupt flag for matrix operation. </i>
//    <check> 
//      <loc> ( (unsigned int) DOTMTX0_INT ) </loc>
//      <o.0..0> INTSTS
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DOTMTX0_INT  ----------------------------------
// SVD Line: 22730

//  <rtree> SFDITEM_REG__DOTMTX0_INT
//    <name> INT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122118) Interrupt control register for matrix operations. </i>
//    <loc> ( (unsigned int)((DOTMTX0_INT >> 0) & 0xFFFFFFFF), ((DOTMTX0_INT = (DOTMTX0_INT & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX0_INT_INTRDY </item>
//    <item> SFDITEM_FIELD__DOTMTX0_INT_INTSTS </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: DOTMTX0_STS  -------------------------------
// SVD Line: 22752

unsigned int DOTMTX0_STS __AT (0x4012211C);



// -----------------------------  Field Item: DOTMTX0_STS_CURROW  ---------------------------------
// SVD Line: 22758

//  <item> SFDITEM_FIELD__DOTMTX0_STS_CURROW
//    <name> CURROW </name>
//    <r> 
//    <i> [Bits 11..8] RO (@ 0x4012211C) Indicates current scan row for matrix operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_STS >> 8) & 0xF) ) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DOTMTX0_STS_CURROUND  --------------------------------
// SVD Line: 22764

//  <item> SFDITEM_FIELD__DOTMTX0_STS_CURROUND
//    <name> CURROUND </name>
//    <r> 
//    <i> [Bits 7..0] RO (@ 0x4012211C) Indicates current PWM cycle round for the matrix. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX0_STS >> 0) & 0xFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DOTMTX0_STS  ----------------------------------
// SVD Line: 22752

//  <rtree> SFDITEM_REG__DOTMTX0_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012211C) Status register showing current scan position and cycle count. </i>
//    <loc> ( (unsigned int)((DOTMTX0_STS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__DOTMTX0_STS_CURROW </item>
//    <item> SFDITEM_FIELD__DOTMTX0_STS_CURROUND </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: DOTMTX0  ------------------------------------
// SVD Line: 22493

//  <view> DOTMTX0
//    <name> DOTMTX0 </name>
//    <item> SFDITEM_REG__DOTMTX0_DATASRC </item>
//    <item> SFDITEM_REG__DOTMTX0_CTRL </item>
//    <item> SFDITEM_REG__DOTMTX0_COLCTRL </item>
//    <item> SFDITEM_REG__DOTMTX0_ROWCTRL </item>
//    <item> SFDITEM_REG__DOTMTX0_ROWORD0 </item>
//    <item> SFDITEM_REG__DOTMTX0_ROWORD1 </item>
//    <item> SFDITEM_REG__DOTMTX0_INT </item>
//    <item> SFDITEM_REG__DOTMTX0_STS </item>
//  </view>
//  


// -------------------------  Register Item Address: DOTMTX1_DATASRC  -----------------------------
// SVD Line: 22520

unsigned int DOTMTX1_DATASRC __AT (0x40122120);



// ----------------------------  Field Item: DOTMTX1_DATASRC_DSRC  --------------------------------
// SVD Line: 22526

//  <item> SFDITEM_FIELD__DOTMTX1_DATASRC_DSRC
//    <name> DSRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122120) Source address for PWM data. </i>
//    <edit> 
//      <loc> ( (unsigned int)((DOTMTX1_DATASRC >> 0) & 0xFFFFFFFF), ((DOTMTX1_DATASRC = (DOTMTX1_DATASRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX1_DATASRC  --------------------------------
// SVD Line: 22520

//  <rtree> SFDITEM_REG__DOTMTX1_DATASRC
//    <name> DATASRC </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122120) Register indicating the source address for PWM data. </i>
//    <loc> ( (unsigned int)((DOTMTX1_DATASRC >> 0) & 0xFFFFFFFF), ((DOTMTX1_DATASRC = (DOTMTX1_DATASRC & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX1_DATASRC_DSRC </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: DOTMTX1_CTRL  ------------------------------
// SVD Line: 22536

unsigned int DOTMTX1_CTRL __AT (0x40122124);



// ----------------------------  Field Item: DOTMTX1_CTRL_INTTYPE  --------------------------------
// SVD Line: 22542

//  <item> SFDITEM_FIELD__DOTMTX1_CTRL_INTTYPE
//    <name> INTTYPE </name>
//    <rw> 
//    <i> [Bit 2] RW (@ 0x40122124) \nInterrupt type. Determines interrupt behavior for matrix scans.\n0 : LINE_SWITCH = Interrupt when each scan line is switched.\n1 : ROUND_FINISH = Interrupt when a complete round of scan lines is finished. </i>
//    <combo> 
//      <loc> ( (unsigned int) DOTMTX1_CTRL ) </loc>
//      <o.2..2> INTTYPE
//        <0=> 0: LINE_SWITCH = Interrupt when each scan line is switched.
//        <1=> 1: ROUND_FINISH = Interrupt when a complete round of scan lines is finished.
//    </combo>
//  </item>
//  


// -----------------------------  Field Item: DOTMTX1_CTRL_INTEN  ---------------------------------
// SVD Line: 22560

//  <item> SFDITEM_FIELD__DOTMTX1_CTRL_INTEN
//    <name> INTEN </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40122124) Enable matrix interrupt. </i>
//    <check> 
//      <loc> ( (unsigned int) DOTMTX1_CTRL ) </loc>
//      <o.1..1> INTEN
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DOTMTX1_CTRL_START  ---------------------------------
// SVD Line: 22566

//  <item> SFDITEM_FIELD__DOTMTX1_CTRL_START
//    <name> START </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40122124) \nControl matrix scan start or stop.\n0 : STOP = Stop the dot matrix scan.\n1 : START = Start the dot matrix scan. </i>
//    <combo> 
//      <loc> ( (unsigned int) DOTMTX1_CTRL ) </loc>
//      <o.0..0> START
//        <0=> 0: STOP = Stop the dot matrix scan.
//        <1=> 1: START = Start the dot matrix scan.
//    </combo>
//  </item>
//  


// ------------------------------  Register RTree: DOTMTX1_CTRL  ----------------------------------
// SVD Line: 22536

//  <rtree> SFDITEM_REG__DOTMTX1_CTRL
//    <name> CTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122124) Control register for matrix operations including interrupts and scan control. </i>
//    <loc> ( (unsigned int)((DOTMTX1_CTRL >> 0) & 0xFFFFFFFF), ((DOTMTX1_CTRL = (DOTMTX1_CTRL & ~(0x7UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x7) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX1_CTRL_INTTYPE </item>
//    <item> SFDITEM_FIELD__DOTMTX1_CTRL_INTEN </item>
//    <item> SFDITEM_FIELD__DOTMTX1_CTRL_START </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DOTMTX1_COLCTRL  -----------------------------
// SVD Line: 22588

unsigned int DOTMTX1_COLCTRL __AT (0x40122128);



// ----------------------------  Field Item: DOTMTX1_COLCTRL_ROUND  -------------------------------
// SVD Line: 22594

//  <item> SFDITEM_FIELD__DOTMTX1_COLCTRL_ROUND
//    <name> ROUND </name>
//    <rw> 
//    <i> [Bits 27..20] RW (@ 0x40122128) Number of PWM cycles to run during the same row before switching. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_COLCTRL >> 20) & 0xFF), ((DOTMTX1_COLCTRL = (DOTMTX1_COLCTRL & ~(0xFFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DOTMTX1_COLCTRL_REFCH  -------------------------------
// SVD Line: 22600

//  <item> SFDITEM_FIELD__DOTMTX1_COLCTRL_REFCH
//    <name> REFCH </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40122128) Indicates which PWM channel is the reference source. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_COLCTRL >> 16) & 0xF), ((DOTMTX1_COLCTRL = (DOTMTX1_COLCTRL & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DOTMTX1_COLCTRL_CHEN  --------------------------------
// SVD Line: 22606

//  <item> SFDITEM_FIELD__DOTMTX1_COLCTRL_CHEN
//    <name> CHEN </name>
//    <rw> 
//    <i> [Bits 15..0] RW (@ 0x40122128) Indicates which PWM channels are used for the matrix. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DOTMTX1_COLCTRL >> 0) & 0xFFFF), ((DOTMTX1_COLCTRL = (DOTMTX1_COLCTRL & ~(0xFFFFUL << 0 )) | ((unsigned long)(Gui_u16:GuiVal & 0xFFFF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX1_COLCTRL  --------------------------------
// SVD Line: 22588

//  <rtree> SFDITEM_REG__DOTMTX1_COLCTRL
//    <name> COLCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122128) Column control register for matrix PWM and reference setup. </i>
//    <loc> ( (unsigned int)((DOTMTX1_COLCTRL >> 0) & 0xFFFFFFFF), ((DOTMTX1_COLCTRL = (DOTMTX1_COLCTRL & ~(0xFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX1_COLCTRL_ROUND </item>
//    <item> SFDITEM_FIELD__DOTMTX1_COLCTRL_REFCH </item>
//    <item> SFDITEM_FIELD__DOTMTX1_COLCTRL_CHEN </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DOTMTX1_ROWCTRL  -----------------------------
// SVD Line: 22616

unsigned int DOTMTX1_ROWCTRL __AT (0x4012212C);



// ---------------------------  Field Item: DOTMTX1_ROWCTRL_PSWPOL  -------------------------------
// SVD Line: 22622

//  <item> SFDITEM_FIELD__DOTMTX1_ROWCTRL_PSWPOL
//    <name> PSWPOL </name>
//    <rw> 
//    <i> [Bits 31..22] RW (@ 0x4012212C) Setting active polarity for PSWn. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DOTMTX1_ROWCTRL >> 22) & 0x3FF), ((DOTMTX1_ROWCTRL = (DOTMTX1_ROWCTRL & ~(0x3FFUL << 22 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 22 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWCTRL_PSWODEN  ------------------------------
// SVD Line: 22628

//  <item> SFDITEM_FIELD__DOTMTX1_ROWCTRL_PSWODEN
//    <name> PSWODEN </name>
//    <rw> 
//    <i> [Bits 21..12] RW (@ 0x4012212C) Enable open-drain configuration on PSWn. </i>
//    <edit> 
//      <loc> ( (unsigned short)((DOTMTX1_ROWCTRL >> 12) & 0x3FF), ((DOTMTX1_ROWCTRL = (DOTMTX1_ROWCTRL & ~(0x3FFUL << 12 )) | ((unsigned long)(Gui_u16:GuiVal & 0x3FF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWCTRL_SWDELAY  ------------------------------
// SVD Line: 22634

//  <item> SFDITEM_FIELD__DOTMTX1_ROWCTRL_SWDELAY
//    <name> SWDELAY </name>
//    <rw> 
//    <i> [Bits 11..4] RW (@ 0x4012212C) Sets delay time before/after row scan switch. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWCTRL >> 4) & 0xFF), ((DOTMTX1_ROWCTRL = (DOTMTX1_ROWCTRL & ~(0xFFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xFF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWCTRL_PSWNUM  -------------------------------
// SVD Line: 22640

//  <item> SFDITEM_FIELD__DOTMTX1_ROWCTRL_PSWNUM
//    <name> PSWNUM </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x4012212C) Indicate how many scan rows the matrix uses. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWCTRL >> 0) & 0xF), ((DOTMTX1_ROWCTRL = (DOTMTX1_ROWCTRL & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX1_ROWCTRL  --------------------------------
// SVD Line: 22616

//  <rtree> SFDITEM_REG__DOTMTX1_ROWCTRL
//    <name> ROWCTRL </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012212C) Row control register for setting polarity and scan timing for dot matrix. </i>
//    <loc> ( (unsigned int)((DOTMTX1_ROWCTRL >> 0) & 0xFFFFFFFF), ((DOTMTX1_ROWCTRL = (DOTMTX1_ROWCTRL & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWCTRL_PSWPOL </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWCTRL_PSWODEN </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWCTRL_SWDELAY </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWCTRL_PSWNUM </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DOTMTX1_ROWORD0  -----------------------------
// SVD Line: 22650

unsigned int DOTMTX1_ROWORD0 __AT (0x40122130);



// ---------------------------  Field Item: DOTMTX1_ROWORD0_PSWORD7  ------------------------------
// SVD Line: 22656

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD7
//    <name> PSWORD7 </name>
//    <rw> 
//    <i> [Bits 31..28] RW (@ 0x40122130) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD0 >> 28) & 0xF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFUL << 28 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 28 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWORD0_PSWORD6  ------------------------------
// SVD Line: 22662

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD6
//    <name> PSWORD6 </name>
//    <rw> 
//    <i> [Bits 27..24] RW (@ 0x40122130) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD0 >> 24) & 0xF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFUL << 24 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 24 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWORD0_PSWORD5  ------------------------------
// SVD Line: 22668

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD5
//    <name> PSWORD5 </name>
//    <rw> 
//    <i> [Bits 23..20] RW (@ 0x40122130) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD0 >> 20) & 0xF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFUL << 20 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 20 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWORD0_PSWORD4  ------------------------------
// SVD Line: 22674

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD4
//    <name> PSWORD4 </name>
//    <rw> 
//    <i> [Bits 19..16] RW (@ 0x40122130) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD0 >> 16) & 0xF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFUL << 16 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 16 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWORD0_PSWORD3  ------------------------------
// SVD Line: 22680

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD3
//    <name> PSWORD3 </name>
//    <rw> 
//    <i> [Bits 15..12] RW (@ 0x40122130) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD0 >> 12) & 0xF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFUL << 12 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 12 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWORD0_PSWORD2  ------------------------------
// SVD Line: 22686

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD2
//    <name> PSWORD2 </name>
//    <rw> 
//    <i> [Bits 11..8] RW (@ 0x40122130) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD0 >> 8) & 0xF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFUL << 8 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 8 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWORD0_PSWORD1  ------------------------------
// SVD Line: 22692

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD1
//    <name> PSWORD1 </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40122130) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD0 >> 4) & 0xF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWORD0_PSWORD0  ------------------------------
// SVD Line: 22698

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD0
//    <name> PSWORD0 </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40122130) Indicate scan order for PSW0 row. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD0 >> 0) & 0xF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX1_ROWORD0  --------------------------------
// SVD Line: 22650

//  <rtree> SFDITEM_REG__DOTMTX1_ROWORD0
//    <name> ROWORD0 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122130) Register specifying scan order for matrix rows. </i>
//    <loc> ( (unsigned int)((DOTMTX1_ROWORD0 >> 0) & 0xFFFFFFFF), ((DOTMTX1_ROWORD0 = (DOTMTX1_ROWORD0 & ~(0xFFFFFFFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFFFFFFFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD7 </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD6 </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD5 </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD4 </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD3 </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD2 </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD1 </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD0_PSWORD0 </item>
//  </rtree>
//  


// -------------------------  Register Item Address: DOTMTX1_ROWORD1  -----------------------------
// SVD Line: 22708

unsigned int DOTMTX1_ROWORD1 __AT (0x40122134);



// ---------------------------  Field Item: DOTMTX1_ROWORD1_PSWORD9  ------------------------------
// SVD Line: 22714

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD1_PSWORD9
//    <name> PSWORD9 </name>
//    <rw> 
//    <i> [Bits 7..4] RW (@ 0x40122134) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD1 >> 4) & 0xF), ((DOTMTX1_ROWORD1 = (DOTMTX1_ROWORD1 & ~(0xFUL << 4 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 4 ) ) )) </loc>
//    </edit>
//  </item>
//  


// ---------------------------  Field Item: DOTMTX1_ROWORD1_PSWORD8  ------------------------------
// SVD Line: 22720

//  <item> SFDITEM_FIELD__DOTMTX1_ROWORD1_PSWORD8
//    <name> PSWORD8 </name>
//    <rw> 
//    <i> [Bits 3..0] RW (@ 0x40122134) Reference PSWORD0. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_ROWORD1 >> 0) & 0xF), ((DOTMTX1_ROWORD1 = (DOTMTX1_ROWORD1 & ~(0xFUL << 0 )) | ((unsigned long)(Gui_u8:GuiVal & 0xF) << 0 ) ) )) </loc>
//    </edit>
//  </item>
//  


// -----------------------------  Register RTree: DOTMTX1_ROWORD1  --------------------------------
// SVD Line: 22708

//  <rtree> SFDITEM_REG__DOTMTX1_ROWORD1
//    <name> ROWORD1 </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122134) Additional row control specifying scan order for remaining rows. </i>
//    <loc> ( (unsigned int)((DOTMTX1_ROWORD1 >> 0) & 0xFFFFFFFF), ((DOTMTX1_ROWORD1 = (DOTMTX1_ROWORD1 & ~(0xFFUL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0xFF) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD1_PSWORD9 </item>
//    <item> SFDITEM_FIELD__DOTMTX1_ROWORD1_PSWORD8 </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: DOTMTX1_INT  -------------------------------
// SVD Line: 22730

unsigned int DOTMTX1_INT __AT (0x40122138);



// -----------------------------  Field Item: DOTMTX1_INT_INTRDY  ---------------------------------
// SVD Line: 22736

//  <item> SFDITEM_FIELD__DOTMTX1_INT_INTRDY
//    <name> INTRDY </name>
//    <rw> 
//    <i> [Bit 1] RW (@ 0x40122138) Interrupt flag for APB ready without response. </i>
//    <check> 
//      <loc> ( (unsigned int) DOTMTX1_INT ) </loc>
//      <o.1..1> INTRDY
//    </check>
//  </item>
//  


// -----------------------------  Field Item: DOTMTX1_INT_INTSTS  ---------------------------------
// SVD Line: 22742

//  <item> SFDITEM_FIELD__DOTMTX1_INT_INTSTS
//    <name> INTSTS </name>
//    <rw> 
//    <i> [Bit 0] RW (@ 0x40122138) Interrupt flag for matrix operation. </i>
//    <check> 
//      <loc> ( (unsigned int) DOTMTX1_INT ) </loc>
//      <o.0..0> INTSTS
//    </check>
//  </item>
//  


// -------------------------------  Register RTree: DOTMTX1_INT  ----------------------------------
// SVD Line: 22730

//  <rtree> SFDITEM_REG__DOTMTX1_INT
//    <name> INT </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x40122138) Interrupt control register for matrix operations. </i>
//    <loc> ( (unsigned int)((DOTMTX1_INT >> 0) & 0xFFFFFFFF), ((DOTMTX1_INT = (DOTMTX1_INT & ~(0x3UL << 0 )) | ((unsigned long)(Gui_u32:GuiVal & 0x3) << 0 ) ) )) </loc>
//    <item> SFDITEM_FIELD__DOTMTX1_INT_INTRDY </item>
//    <item> SFDITEM_FIELD__DOTMTX1_INT_INTSTS </item>
//  </rtree>
//  


// ---------------------------  Register Item Address: DOTMTX1_STS  -------------------------------
// SVD Line: 22752

unsigned int DOTMTX1_STS __AT (0x4012213C);



// -----------------------------  Field Item: DOTMTX1_STS_CURROW  ---------------------------------
// SVD Line: 22758

//  <item> SFDITEM_FIELD__DOTMTX1_STS_CURROW
//    <name> CURROW </name>
//    <r> 
//    <i> [Bits 11..8] RO (@ 0x4012213C) Indicates current scan row for matrix operation. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_STS >> 8) & 0xF) ) </loc>
//    </edit>
//  </item>
//  


// ----------------------------  Field Item: DOTMTX1_STS_CURROUND  --------------------------------
// SVD Line: 22764

//  <item> SFDITEM_FIELD__DOTMTX1_STS_CURROUND
//    <name> CURROUND </name>
//    <r> 
//    <i> [Bits 7..0] RO (@ 0x4012213C) Indicates current PWM cycle round for the matrix. </i>
//    <edit> 
//      <loc> ( (unsigned char)((DOTMTX1_STS >> 0) & 0xFF) ) </loc>
//    </edit>
//  </item>
//  


// -------------------------------  Register RTree: DOTMTX1_STS  ----------------------------------
// SVD Line: 22752

//  <rtree> SFDITEM_REG__DOTMTX1_STS
//    <name> STS </name>
//    <rw> 
//    <i> [Bits 31..0] RW (@ 0x4012213C) Status register showing current scan position and cycle count. </i>
//    <loc> ( (unsigned int)((DOTMTX1_STS >> 0) & 0xFFFFFFFF) ) </loc>
//    <item> SFDITEM_FIELD__DOTMTX1_STS_CURROW </item>
//    <item> SFDITEM_FIELD__DOTMTX1_STS_CURROUND </item>
//  </rtree>
//  


// --------------------------------  Peripheral View: DOTMTX1  ------------------------------------
// SVD Line: 22775

//  <view> DOTMTX1
//    <name> DOTMTX1 </name>
//    <item> SFDITEM_REG__DOTMTX1_DATASRC </item>
//    <item> SFDITEM_REG__DOTMTX1_CTRL </item>
//    <item> SFDITEM_REG__DOTMTX1_COLCTRL </item>
//    <item> SFDITEM_REG__DOTMTX1_ROWCTRL </item>
//    <item> SFDITEM_REG__DOTMTX1_ROWORD0 </item>
//    <item> SFDITEM_REG__DOTMTX1_ROWORD1 </item>
//    <item> SFDITEM_REG__DOTMTX1_INT </item>
//    <item> SFDITEM_REG__DOTMTX1_STS </item>
//  </view>
//  


// ------------------------------   IRQ Num definition: RTS5921  ----------------------------------
// SVD Line: 2



// ------------------------------------------------------------------------------------------------
// -----                              Interrupt Number Definition                             -----
// ------------------------------------------------------------------------------------------------



// -------------------------  ARM ARMV8MBL Specific Interrupt Numbers  ----------------------------

//  <qitem> Reset_IRQ
//    <name> Reset </name>
//    <i> Reset Vector, invoked on Power up and warm reset </i>
//    <loc> 1 </loc>
//  </qitem>
//  
//  <qitem> NonMaskableInt_IRQ
//    <name> NonMaskableInt </name>
//    <i> Non maskable Interrupt, cannot be stopped or preempted </i>
//    <loc> 2 </loc>
//  </qitem>
//  
//  <qitem> HardFault_IRQ
//    <name> HardFault </name>
//    <i> Hard Fault, all classes of Fault </i>
//    <loc> 3 </loc>
//  </qitem>
//  
//  <qitem> SVCall_IRQ
//    <name> SVCall </name>
//    <i> System Service Call via SVC instruction </i>
//    <loc> 11 </loc>
//  </qitem>
//  
//  <qitem> PendSV_IRQ
//    <name> PendSV </name>
//    <i> Pendable request for system service </i>
//    <loc> 14 </loc>
//  </qitem>
//  
//  <qitem> SysTick_IRQ
//    <name> SysTick </name>
//    <i> System Tick Timer </i>
//    <loc> 15 </loc>
//  </qitem>
//  


// ---------------------------  RTS5921 Specific Interrupt Numbers  -------------------------------

//  <qitem> GPIOA_IRQ
//    <name> GPIOA </name>
//    <i> GPIO PORTA Interrupt </i>
//    <loc> 16 </loc>
//  </qitem>
//  
//  <qitem> GPIOB_IRQ
//    <name> GPIOB </name>
//    <i> GPIO PORTB Interrupt </i>
//    <loc> 17 </loc>
//  </qitem>
//  
//  <qitem> GPIOC_IRQ
//    <name> GPIOC </name>
//    <i> GPIO PORTC Interrupt </i>
//    <loc> 18 </loc>
//  </qitem>
//  
//  <qitem> GPIOD_IRQ
//    <name> GPIOD </name>
//    <i> GPIO PORTD Interrupt </i>
//    <loc> 19 </loc>
//  </qitem>
//  
//  <qitem> GPIDE_IRQ
//    <name> GPIDE </name>
//    <i> GPIO PORTE Interrupt </i>
//    <loc> 20 </loc>
//  </qitem>
//  
//  <qitem> GPIOF_IRQ
//    <name> GPIOF </name>
//    <i> GPIO PORTF Interrupt </i>
//    <loc> 21 </loc>
//  </qitem>
//  
//  <qitem> GPIOG_IRQ
//    <name> GPIOG </name>
//    <i> GPIO PORTG Interrupt </i>
//    <loc> 22 </loc>
//  </qitem>
//  
//  <qitem> GPIOH_IRQ
//    <name> GPIOH </name>
//    <i> GPIO PORTH Interrupt </i>
//    <loc> 23 </loc>
//  </qitem>
//  
//  <qitem> DMA_IRQ
//    <name> DMA </name>
//    <i> DMA Controller Interrupt </i>
//    <loc> 24 </loc>
//  </qitem>
//  
//  <qitem> ITR_SPIC_IRQ
//    <name> ITR_SPIC </name>
//    <i> Internal SPIC Interrupt </i>
//    <loc> 25 </loc>
//  </qitem>
//  
//  <qitem> ETR_SPIC_IRQ
//    <name> ETR_SPIC </name>
//    <i> External SPIC Interrupt </i>
//    <loc> 26 </loc>
//  </qitem>
//  
//  <qitem> USB_IRQ
//    <name> USB </name>
//    <i> USB OTG Interrupt </i>
//    <loc> 28 </loc>
//  </qitem>
//  
//  <qitem> SPIM_IRQ
//    <name> SPIM </name>
//    <i> SPI Master Interrupt </i>
//    <loc> 29 </loc>
//  </qitem>
//  
//  <qitem> SPIS_IRQ
//    <name> SPIS </name>
//    <i> SPI Slave Interrupt </i>
//    <loc> 30 </loc>
//  </qitem>
//  
//  <qitem> UART_IRQ
//    <name> UART </name>
//    <i> UART Interrupt </i>
//    <loc> 31 </loc>
//  </qitem>
//  
//  <qitem> I2C0_IRQ
//    <name> I2C0 </name>
//    <i> I2C0 Interrupt </i>
//    <loc> 32 </loc>
//  </qitem>
//  
//  <qitem> I2C1_IRQ
//    <name> I2C1 </name>
//    <i> I2C1 Interrupt </i>
//    <loc> 33 </loc>
//  </qitem>
//  
//  <qitem> I2C2_IRQ
//    <name> I2C2 </name>
//    <i> I2C2 Interrupt </i>
//    <loc> 34 </loc>
//  </qitem>
//  
//  <qitem> WDT_IRQ
//    <name> WDT </name>
//    <i> WDT Interrupt </i>
//    <loc> 36 </loc>
//  </qitem>
//  
//  <qitem> TMR0_IRQ
//    <name> TMR0 </name>
//    <i> TMR0 Interrupt </i>
//    <loc> 37 </loc>
//  </qitem>
//  
//  <qitem> TMR1_IRQ
//    <name> TMR1 </name>
//    <i> TMR1 Interrupt </i>
//    <loc> 38 </loc>
//  </qitem>
//  
//  <qitem> TMR2_IRQ
//    <name> TMR2 </name>
//    <i> TMR2 Interrupt </i>
//    <loc> 39 </loc>
//  </qitem>
//  
//  <qitem> TMR3_IRQ
//    <name> TMR3 </name>
//    <i> TMR3 Interrupt </i>
//    <loc> 40 </loc>
//  </qitem>
//  
//  <qitem> DOTMTX0_IRQ
//    <name> DOTMTX0 </name>
//    <i> DOTMTX0 Interrupt </i>
//    <loc> 41 </loc>
//  </qitem>
//  
//  <qitem> DOTMTX1_IRQ
//    <name> DOTMTX1 </name>
//    <i> DOTMTX1 Interrupt </i>
//    <loc> 42 </loc>
//  </qitem>
//  
//  <qitem> STRIP0_IRQ
//    <name> STRIP0 </name>
//    <i> STRIP0 Interrupt </i>
//    <loc> 43 </loc>
//  </qitem>
//  
//  <qitem> STRIP1_IRQ
//    <name> STRIP1 </name>
//    <i> STRIP1 Interrupt </i>
//    <loc> 44 </loc>
//  </qitem>
//  
//  <qitem> STRIP2_IRQ
//    <name> STRIP2 </name>
//    <i> STRIP2 Interrupt </i>
//    <loc> 45 </loc>
//  </qitem>
//  
//  <qitem> STRIP3_IRQ
//    <name> STRIP3 </name>
//    <i> STRIP3 Interrupt </i>
//    <loc> 46 </loc>
//  </qitem>
//  
//  <qitem> STRIP4_IRQ
//    <name> STRIP4 </name>
//    <i> STRIP4 Interrupt </i>
//    <loc> 47 </loc>
//  </qitem>
//  
//  <qitem> STRIP5_IRQ
//    <name> STRIP5 </name>
//    <i> STRIP5 Interrupt </i>
//    <loc> 48 </loc>
//  </qitem>
//  
//  <qitem> STRIP6_IRQ
//    <name> STRIP6 </name>
//    <i> STRIP6 Interrupt </i>
//    <loc> 49 </loc>
//  </qitem>
//  
//  <qitem> STRIP7_IRQ
//    <name> STRIP7 </name>
//    <i> STRIP7 Interrupt </i>
//    <loc> 50 </loc>
//  </qitem>
//  
//  <qitem> STRIP8_IRQ
//    <name> STRIP8 </name>
//    <i> STRIP8 Interrupt </i>
//    <loc> 51 </loc>
//  </qitem>
//  
//  <qitem> TACHO0_IRQ
//    <name> TACHO0 </name>
//    <i> TACHO0 Interrupt </i>
//    <loc> 52 </loc>
//  </qitem>
//  
//  <qitem> TACHO1_IRQ
//    <name> TACHO1 </name>
//    <i> TACHO1 Interrupt </i>
//    <loc> 53 </loc>
//  </qitem>
//  
//  <qitem> TACHO2_IRQ
//    <name> TACHO2 </name>
//    <i> TACHO2 Interrupt </i>
//    <loc> 54 </loc>
//  </qitem>
//  
//  <qitem> TACHO3_IRQ
//    <name> TACHO3 </name>
//    <i> TACHO3 Interrupt </i>
//    <loc> 55 </loc>
//  </qitem>
//  
//  <irqtable> RTS5921_IRQTable
//    <name> RTS5921 Interrupt Table </name>
//    <nvicPrioBits> 3 </nvicPrioBits>
//    <qitem> Reset_IRQ </qitem>
//    <qitem> NonMaskableInt_IRQ </qitem>
//    <qitem> HardFault_IRQ </qitem>
//    <qitem> SVCall_IRQ </qitem>
//    <qitem> PendSV_IRQ </qitem>
//    <qitem> SysTick_IRQ </qitem>
//    <qitem> GPIOA_IRQ </qitem>
//    <qitem> GPIOB_IRQ </qitem>
//    <qitem> GPIOC_IRQ </qitem>
//    <qitem> GPIOD_IRQ </qitem>
//    <qitem> GPIDE_IRQ </qitem>
//    <qitem> GPIOF_IRQ </qitem>
//    <qitem> GPIOG_IRQ </qitem>
//    <qitem> GPIOH_IRQ </qitem>
//    <qitem> DMA_IRQ </qitem>
//    <qitem> ITR_SPIC_IRQ </qitem>
//    <qitem> ETR_SPIC_IRQ </qitem>
//    <qitem> USB_IRQ </qitem>
//    <qitem> SPIM_IRQ </qitem>
//    <qitem> SPIS_IRQ </qitem>
//    <qitem> UART_IRQ </qitem>
//    <qitem> I2C0_IRQ </qitem>
//    <qitem> I2C1_IRQ </qitem>
//    <qitem> I2C2_IRQ </qitem>
//    <qitem> WDT_IRQ </qitem>
//    <qitem> TMR0_IRQ </qitem>
//    <qitem> TMR1_IRQ </qitem>
//    <qitem> TMR2_IRQ </qitem>
//    <qitem> TMR3_IRQ </qitem>
//    <qitem> DOTMTX0_IRQ </qitem>
//    <qitem> DOTMTX1_IRQ </qitem>
//    <qitem> STRIP0_IRQ </qitem>
//    <qitem> STRIP1_IRQ </qitem>
//    <qitem> STRIP2_IRQ </qitem>
//    <qitem> STRIP3_IRQ </qitem>
//    <qitem> STRIP4_IRQ </qitem>
//    <qitem> STRIP5_IRQ </qitem>
//    <qitem> STRIP6_IRQ </qitem>
//    <qitem> STRIP7_IRQ </qitem>
//    <qitem> STRIP8_IRQ </qitem>
//    <qitem> TACHO0_IRQ </qitem>
//    <qitem> TACHO1_IRQ </qitem>
//    <qitem> TACHO2_IRQ </qitem>
//    <qitem> TACHO3_IRQ </qitem>
//  </irqtable>


// -------------------------------------   Menu: RTS5921  -----------------------------------------
// SVD Line: 2



// -------------------------------  Peripheral Menu: 'RTS5921'  -----------------------------------



// ------------------------------------------------------------------------------------------------
// -----                                       Main Menu                                      -----
// ------------------------------------------------------------------------------------------------

//  <b> CRC
//    <m> CRC32 </m>
//  </b>
//  
//  <b> DMAC
//    <m> DMA </m>
//  </b>
//  
//  <b> DOTMTX
//    <m> DOTMTX0 </m>
//    <m> DOTMTX1 </m>
//  </b>
//  
//  <b> DW_SPI
//    <m> SPIM </m>
//    <m> SPIS </m>
//  </b>
//  
//  <b> DW_UART
//    <m> UART </m>
//  </b>
//  
//  <b> GPIO
//    <m> GPIO </m>
//  </b>
//  
//  <b> I2C
//    <m> I2C0 </m>
//    <m> I2C1 </m>
//    <m> I2C2 </m>
//  </b>
//  
//  <b> PWMLED
//    <m> PWMLED0 </m>
//    <m> PWMLED1 </m>
//    <m> PWMLED2 </m>
//    <m> PWMLED3 </m>
//    <m> PWMLED4 </m>
//    <m> PWMLED5 </m>
//    <m> PWMLED6 </m>
//    <m> PWMLED7 </m>
//    <m> PWMLED8 </m>
//    <m> PWMLED9 </m>
//    <m> PWMLED10 </m>
//    <m> PWMLED11 </m>
//    <m> PWMLED12 </m>
//    <m> PWMLED13 </m>
//    <m> PWMLED14 </m>
//    <m> PWMLED15 </m>
//    <m> PWMLED16 </m>
//    <m> PWMLED17 </m>
//    <m> PWMLED18 </m>
//    <m> PWMLED19 </m>
//    <m> PWMLED20 </m>
//    <m> PWMLED21 </m>
//    <m> PWMLED22 </m>
//    <m> PWMLED23 </m>
//    <m> PWMLED24 </m>
//    <m> PWMLED25 </m>
//    <m> PWMLED26 </m>
//    <m> PWMLED27 </m>
//    <m> PWMLED28 </m>
//    <m> PWMLED29 </m>
//    <m> PWMLED30 </m>
//    <m> PWMLED31 </m>
//  </b>
//  
//  <b> RCCAL
//    <m> RCCAL </m>
//  </b>
//  
//  <b> SPIC
//    <m> ETR_SPIC </m>
//    <m> ITR_SPIC </m>
//  </b>
//  
//  <b> STRIP
//    <m> STRIP0 </m>
//    <m> STRIP1 </m>
//    <m> STRIP2 </m>
//    <m> STRIP3 </m>
//    <m> STRIP4 </m>
//    <m> STRIP5 </m>
//    <m> STRIP6 </m>
//    <m> STRIP7 </m>
//    <m> STRIP8 </m>
//  </b>
//  
//  <b> SYSTEM
//    <m> SYSTEM </m>
//  </b>
//  
//  <b> TACHO
//    <m> TACHO0 </m>
//    <m> TACHO1 </m>
//    <m> TACHO2 </m>
//    <m> TACHO3 </m>
//  </b>
//  
//  <b> TMR
//    <m> TMR0 </m>
//    <m> TMR1 </m>
//    <m> TMR2 </m>
//    <m> TMR3 </m>
//  </b>
//  
//  <b> USB_OTG
//    <m> USB_CORE </m>
//    <m> USB_DEVICE </m>
//    <m> USB_HOST </m>
//    <m> USB_IN_EP </m>
//    <m> USB_OUT_EP </m>
//  </b>
//  
//  <b> WDT
//    <m> WDT </m>
//  </b>
//  
